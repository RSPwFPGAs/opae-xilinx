//-----------------------------------------------------------------------------
//
// (c) Copyright 2012-2012 Xilinx, Inc. All rights reserved.
//
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
//
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
//
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
//
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.
//
//-----------------------------------------------------------------------------
//
// Project    : AXI-MM to PCI Express
// File       : axi_pcie3_0_pcie3_7vx_rp_model.v
// Version    : $IpVersion 
//-----------------------------------------------------------------------------
//----------------------------------------------------------------------------//
// Project      : Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
// Filename     : pcie3_7x_0_rport_7vx.v                                      //
// Description  : Instantiates PCIe Top Level and GT top level and connects   //
//                 them via PIPE interface.                                   //
//                                                                            //
//---------- PIPE Wrapper Hierarchy ------------------------------------------//
//  pcie_3_0_7vx.v                                                            //
//      gt_top.v                                                              //
//          pcie_tx_elec_idle_filter_7vx.v                                    //
//          pipe_clock.v                                                      //
//          pipe_reset.v                                                      //
//          qpll_reset.v                                                      //
//              * Generate GTHE2_CHANNEL for every lane.                      //
//                  pipe_user.v                                               //
//                  pipe_rate.v                                               //
//                  pipe_sync.v                                               //
//                  pipe_drp.v                                                //
//                  pipe_eq.v                                                 //
//                      rxeq_scan.v                                           //
//                  gt_wrapper.v                                              //
//                      GTHE2_CHANNEL                                         //
//                      GTHE2_COMMON                                          //
//              * Generate GTHE2_COMMON for every quad.                       //
//                  qpll_drp.v                                                //
//                  qpll_wrapper.v                                            //
//      pcie_top.v                                                            //
//          pcie_init_ctrl.v                                                  //
//          pcie_tlp_tph_tbl_7vx.v                                            //
//          pcie_7vx.v                                                        //
//              PCIE_3_0                                                      //
//              pcie_bram_7vx.v                                               //
//                  pcie_bram_7vx_rep.v                                       //
//                      pcie_bram_7vx_rep_8k.v                                //
//                  pcie_bram_7vx_req.v                                       //
//                      pcie_bram_7vx_8k.v                                    //
//                  pcie_bram_7vx_cpl.v                                       //
//                      pcie_bram_7vx_8k.v                                    //
//                      pcie_bram_7vx_16k.v                                   //
//          pcie_pipe_pipeline.v                                              //
//              pcie_pipe_lane.v                                              //
//              pcie_pipe_misc.v                                              //
//      tandem_cpler.v                                                        //
//          tandem_cpler_ctl_arb.v                                            //
//          PIO_RX_ENGINE.v                                                   //
//          PIO_TX_ENGINE.v                                                   //
//          PIO_INTR_CTRL.v                                                   //
//      Fast_PCIe_config_top.v                                                //
//          pr_loader.v                                                       //
//              PIO_FPC.v                                                     //
//                  PIO_TO_CTRL_FPC.v                                         //
//                  PIO_EP_FPC.v                                              //
//                      PIO_EP_MA_FPC.v                                       //
//                      PIO_TX_ENG_FPC.v                                      //
//                      PIO_RX_ENG_FPC.v                                      //
//                      icap_access.v                                         //
//                      data_transfer.v                                       //
//                          fastConfigFIFO.v                                  //
//----------------------------------------------------------------------------//

`timescale 1ps/1ps

module axi_pcie3_0_pcie3_7vx_rp_model #
 (
  parameter integer TCQ = 100,
  parameter         component_name = "pcie3_7x_v4_0",
  // The following parameters can be changed to configure the link to a different width/speed.
  // See Product Guide for details: Table "Data Width and Clock Frequency Settings for the Client Interfaces"
  parameter  [2:0]  PL_LINK_CAP_MAX_LINK_SPEED = 3'h4, // Maximum Link Speed
  parameter  [3:0]  PL_LINK_CAP_MAX_LINK_WIDTH = 4'h8, // Maximum Link Width
  parameter integer USER_CLK2_FREQ = 4,                // AXI Client Interface Frequency
  parameter         C_DATA_WIDTH = 256,                // AXI Client Interface Width
  parameter integer PIPE_PIPELINE_STAGES = 2,          // PIPE Interface pipeline: 0-None, 1- single pipeline, 2-double pipeline
  parameter         PIPE_SIM = "FALSE",                // No effect in RTL using this parameter.  
  parameter         PIPE_SIM_MODE = "FALSE",           // Use this paramter to control PIPE mode simulation logic; in-side this module    
  parameter         EXT_PIPE_SIM = "FALSE",            // Use this paramter to control PIPE mode simulation logic; in-side this module   
  //GT Parameters
  parameter         REF_CLK_FREQ = 0,                  // Reference Clock Frequency
  parameter         PCIE_EXT_CLK = "TRUE",
  parameter         PCIE_EXT_GT_COMMON = "FALSE",
  parameter         EXT_CH_GT_DRP      = "FALSE",      // PCIe external CH DRP
  parameter         PCIE_DRP           = "FALSE",      // PCIe DRP

  parameter         TRANSCEIVER_CTRL_STATUS_PORTS = "FALSE",  
  parameter         PCIE_TXBUF_EN = "FALSE",
  parameter         PCIE_GT_DEVICE = "GTH",
  parameter integer PCIE_CHAN_BOND = 0,
  parameter         PCIE_CHAN_BOND_EN = "FALSE",
  parameter         PCIE_USE_MODE = "2.0",
  parameter         PCIE_LPM_DFE = "LPM",
  parameter integer PCIE_LINK_SPEED  = 3,
  parameter integer KEEP_WIDTH  = (C_DATA_WIDTH/32),
  parameter         TX_MARGIN_FULL_0          = 7'b1001111,    
  parameter         TX_MARGIN_FULL_1          = 7'b1001110,   
  parameter         TX_MARGIN_FULL_2          = 7'b1001101,  
  parameter         TX_MARGIN_FULL_3          = 7'b1001100, 
  parameter         TX_MARGIN_FULL_4          = 7'b1000011,
  parameter         TX_MARGIN_LOW_0           = 7'b1000101,
  parameter         TX_MARGIN_LOW_1           = 7'b1000110,
  parameter         TX_MARGIN_LOW_2           = 7'b1000011, 
  parameter         TX_MARGIN_LOW_3           =7'b1000010, 
  parameter         TX_MARGIN_LOW_4           =7'b1000000,
  // PCIe 3_0 Core parameters
  parameter         ARI_CAP_ENABLE = "FALSE",
  parameter         AXISTEN_IF_CC_ALIGNMENT_MODE = "FALSE",
  parameter         AXISTEN_IF_CC_PARITY_CHK = "FALSE",
  parameter         AXISTEN_IF_CQ_ALIGNMENT_MODE = "FALSE",
  parameter         AXISTEN_IF_ENABLE_CLIENT_TAG = "FALSE",
  parameter [17:0]  AXISTEN_IF_ENABLE_MSG_ROUTE = 18'h00000,
  parameter         AXISTEN_IF_ENABLE_RX_MSG_INTFC = "FALSE",
  parameter         AXISTEN_IF_RC_ALIGNMENT_MODE = "FALSE",
  parameter         AXISTEN_IF_RC_STRADDLE = "FALSE",
  parameter         AXISTEN_IF_RQ_ALIGNMENT_MODE = "FALSE",
  parameter         AXISTEN_IF_RQ_PARITY_CHK = "FALSE",
  parameter  [7:0]  DNSTREAM_LINK_NUM = 8'h00,
  parameter  [1:0]  GEN3_PCS_AUTO_REALIGN = 2'h1,
  parameter         GEN3_PCS_RX_ELECIDLE_INTERNAL = "TRUE",
  parameter  [8:0]  LL_ACK_TIMEOUT = 9'h000,
  parameter         LL_ACK_TIMEOUT_EN = "FALSE",
  parameter integer LL_ACK_TIMEOUT_FUNC = 0,
  parameter [15:0]  LL_CPL_FC_UPDATE_TIMER = 16'h0000,
  parameter         LL_CPL_FC_UPDATE_TIMER_OVERRIDE = "FALSE",
  parameter [15:0]  LL_FC_UPDATE_TIMER = 16'h0000,
  parameter         LL_FC_UPDATE_TIMER_OVERRIDE = "FALSE",
  parameter [15:0]  LL_NP_FC_UPDATE_TIMER = 16'h0000,
  parameter         LL_NP_FC_UPDATE_TIMER_OVERRIDE = "FALSE",
  parameter [15:0]  LL_P_FC_UPDATE_TIMER = 16'h0000,
  parameter         LL_P_FC_UPDATE_TIMER_OVERRIDE = "FALSE",
  parameter  [8:0]  LL_REPLAY_TIMEOUT = 9'h000,
  parameter         LL_REPLAY_TIMEOUT_EN = "FALSE",
  parameter integer LL_REPLAY_TIMEOUT_FUNC = 0,
  parameter  [9:0]  LTR_TX_MESSAGE_MINIMUM_INTERVAL = 10'h0FA,
  parameter         LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE = "FALSE",
  parameter         LTR_TX_MESSAGE_ON_LTR_ENABLE = "FALSE",
  parameter         PF0_AER_CAP_ECRC_CHECK_CAPABLE = "FALSE",
  parameter         PF0_AER_CAP_ECRC_GEN_CAPABLE = "FALSE",
  parameter [11:0]  PF0_AER_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  PF0_ARI_CAP_NEXTPTR = 12'h000,
  parameter  [7:0]  PF0_ARI_CAP_NEXT_FUNC = 8'h00,
  parameter  [3:0]  PF0_ARI_CAP_VER = 4'h1,
  parameter  [4:0]  PF0_BAR0_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR0_CONTROL = 3'h4,
  parameter  [4:0]  PF0_BAR1_APERTURE_SIZE = 5'h00,
  parameter  [2:0]  PF0_BAR1_CONTROL = 3'h0,
  parameter  [4:0]  PF0_BAR2_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR2_CONTROL = 3'h4,
  parameter  [4:0]  PF0_BAR3_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR3_CONTROL = 3'h0,
  parameter  [4:0]  PF0_BAR4_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR4_CONTROL = 3'h4,
  parameter  [4:0]  PF0_BAR5_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR5_CONTROL = 3'h0,
  parameter  [7:0]  PF0_BIST_REGISTER = 8'h00,
  parameter  [7:0]  PF0_CAPABILITY_POINTER = 8'h50,
  parameter [23:0]  PF0_CLASS_CODE = 24'h000000,
  parameter [15:0]  PF0_VENDOR_ID = 16'h10EE,
  parameter [15:0]  PF0_DEVICE_ID = 16'h0007,
  parameter         PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT = "TRUE",
  parameter         PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT = "TRUE",
  parameter         PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT = "TRUE",
  parameter         PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE = "TRUE",
  parameter         PF0_DEV_CAP2_LTR_SUPPORT = "TRUE",
  parameter  [1:0]  PF0_DEV_CAP2_OBFF_SUPPORT = 2'h0,
  parameter         PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT = "FALSE",
  parameter integer PF0_DEV_CAP_ENDPOINT_L0S_LATENCY = 0,
  parameter integer PF0_DEV_CAP_ENDPOINT_L1_LATENCY = 0,
  parameter         PF0_DEV_CAP_EXT_TAG_SUPPORTED = "TRUE",
  parameter         PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE = "TRUE",
  parameter  [2:0]  PF0_DEV_CAP_MAX_PAYLOAD_SIZE = 3'h3,
  parameter [11:0]  PF0_DPA_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF0_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF1_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF2_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF3_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF4_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF5_ARI_CAP_NEXTPTR = 12'h000,
  parameter         VF0_TPHR_CAP_DEV_SPECIFIC_MODE = "FALSE",
  parameter         VF0_TPHR_CAP_ENABLE = "FALSE",
  parameter         VF0_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  VF0_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0]   VF0_TPHR_CAP_ST_MODE_SEL = 3'b010,
  parameter [1:0]   VF0_TPHR_CAP_ST_TABLE_LOC = 3'b10,
  parameter [10:0]  VF0_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0]   VF0_TPHR_CAP_VER = 4'h1,
  parameter         VF1_TPHR_CAP_DEV_SPECIFIC_MODE = "FALSE",
  parameter         VF1_TPHR_CAP_ENABLE = "FALSE",
  parameter         VF1_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  VF1_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0]   VF1_TPHR_CAP_ST_MODE_SEL = 3'b010,
  parameter [1:0]   VF1_TPHR_CAP_ST_TABLE_LOC = 3'b10,
  parameter [10:0]  VF1_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0]   VF1_TPHR_CAP_VER = 4'h1,
  parameter         VF2_TPHR_CAP_DEV_SPECIFIC_MODE = "FALSE",
  parameter         VF2_TPHR_CAP_ENABLE = "FALSE",
  parameter         VF2_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  VF2_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0]   VF2_TPHR_CAP_ST_MODE_SEL = 3'b010,
  parameter [1:0]   VF2_TPHR_CAP_ST_TABLE_LOC = 3'b10,
  parameter [10:0]  VF2_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0]   VF2_TPHR_CAP_VER = 4'h1,
  parameter         VF3_TPHR_CAP_DEV_SPECIFIC_MODE = "FALSE",
  parameter         VF3_TPHR_CAP_ENABLE = "FALSE",
  parameter         VF3_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  VF3_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0]   VF3_TPHR_CAP_ST_MODE_SEL = 3'b010,
  parameter [1:0]   VF3_TPHR_CAP_ST_TABLE_LOC = 3'b10,
  parameter [10:0]  VF3_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0]   VF3_TPHR_CAP_VER = 4'h1,
  parameter         VF4_TPHR_CAP_DEV_SPECIFIC_MODE = "FALSE",
  parameter         VF4_TPHR_CAP_ENABLE = "FALSE",
  parameter         VF4_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  VF4_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0]   VF4_TPHR_CAP_ST_MODE_SEL = 3'b010,
  parameter [1:0]   VF4_TPHR_CAP_ST_TABLE_LOC = 3'b10,
  parameter [10:0]  VF4_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0]   VF4_TPHR_CAP_VER = 4'h1,
  parameter         VF5_TPHR_CAP_DEV_SPECIFIC_MODE = "FALSE",
  parameter         VF5_TPHR_CAP_ENABLE = "FALSE",
  parameter         VF5_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  VF5_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0]   VF5_TPHR_CAP_ST_MODE_SEL = 3'b010,
  parameter [1:0]   VF5_TPHR_CAP_ST_TABLE_LOC = 3'b10,
  parameter [10:0]  VF5_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0]   VF5_TPHR_CAP_VER = 4'h1,
  parameter  [4:0]  PF0_DPA_CAP_SUB_STATE_CONTROL = 5'h00,
  parameter         PF0_DPA_CAP_SUB_STATE_CONTROL_EN = "TRUE",
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 = 8'h00,
  parameter  [3:0]  PF0_DPA_CAP_VER = 4'h1,
  parameter [11:0]  PF0_DSN_CAP_NEXTPTR = 12'h10C,
  parameter  [4:0]  PF0_EXPANSION_ROM_APERTURE_SIZE = 5'h03,
  parameter         PF0_EXPANSION_ROM_ENABLE = "FALSE",
  parameter  [7:0]  PF0_INTERRUPT_LINE = 8'h00,
  parameter  [2:0]  PF0_INTERRUPT_PIN = 3'h1,
  parameter integer PF0_LINK_CAP_ASPM_SUPPORT = 0,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3 = 7,
  parameter         PF0_LINK_STATUS_SLOT_CLOCK_CONFIG = "TRUE",
  parameter  [9:0]  PF0_LTR_CAP_MAX_NOSNOOP_LAT = 10'h000,
  parameter  [9:0]  PF0_LTR_CAP_MAX_SNOOP_LAT = 10'h000,
  parameter [11:0]  PF0_LTR_CAP_NEXTPTR = 12'h000,
  parameter  [3:0]  PF0_LTR_CAP_VER = 4'h1,
  parameter  [7:0]  PF0_MSIX_CAP_NEXTPTR = 8'h00,
  parameter integer PF0_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  PF0_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer PF0_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  PF0_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  PF0_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer PF0_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  PF0_MSI_CAP_NEXTPTR = 8'h00,
  parameter [11:0]  PF0_PB_CAP_NEXTPTR = 12'h000,
  parameter         PF0_PB_CAP_SYSTEM_ALLOCATED = "FALSE",
  parameter  [3:0]  PF0_PB_CAP_VER = 4'h1,
  parameter  [7:0]  PF0_PM_CAP_ID = 8'h01,
  parameter  [7:0]  PF0_PM_CAP_NEXTPTR = 8'h00,
  parameter         PF0_PM_CAP_PMESUPPORT_D0 = "TRUE",
  parameter         PF0_PM_CAP_PMESUPPORT_D1 = "TRUE",
  parameter         PF0_PM_CAP_PMESUPPORT_D3HOT = "TRUE",
  parameter         PF0_PM_CAP_SUPP_D1_STATE = "TRUE",
  parameter  [2:0]  PF0_PM_CAP_VER_ID = 3'h3,
  parameter         PF0_PM_CSR_NOSOFTRESET = "TRUE",
  parameter         PF0_RBAR_CAP_ENABLE = "FALSE",
  parameter  [2:0]  PF0_RBAR_CAP_INDEX0 = 3'h0,
  parameter  [2:0]  PF0_RBAR_CAP_INDEX1 = 3'h0,
  parameter  [2:0]  PF0_RBAR_CAP_INDEX2 = 3'h0,
  parameter [11:0]  PF0_RBAR_CAP_NEXTPTR = 12'h000,
  parameter [19:0]  PF0_RBAR_CAP_SIZE0 = 20'h00000,
  parameter [19:0]  PF0_RBAR_CAP_SIZE1 = 20'h00000,
  parameter [19:0]  PF0_RBAR_CAP_SIZE2 = 20'h00000,
  parameter  [3:0]  PF0_RBAR_CAP_VER = 4'h1,
  parameter  [2:0]  PF0_RBAR_NUM = 3'h1,
  parameter  [7:0]  PF0_REVISION_ID = 8'h00,
  parameter  [4:0]  PF0_SRIOV_BAR0_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR0_CONTROL = 3'h4,
  parameter  [4:0]  PF0_SRIOV_BAR1_APERTURE_SIZE = 5'h00,
  parameter  [2:0]  PF0_SRIOV_BAR1_CONTROL = 3'h0,
  parameter  [4:0]  PF0_SRIOV_BAR2_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR2_CONTROL = 3'h4,
  parameter  [4:0]  PF0_SRIOV_BAR3_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR3_CONTROL = 3'h0,
  parameter  [4:0]  PF0_SRIOV_BAR4_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR4_CONTROL = 3'h4,
  parameter  [4:0]  PF0_SRIOV_BAR5_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR5_CONTROL = 3'h0,
  parameter [15:0]  PF0_SRIOV_CAP_INITIAL_VF = 16'h0000,
  parameter [11:0]  PF0_SRIOV_CAP_NEXTPTR = 12'h000,
  parameter [15:0]  PF0_SRIOV_CAP_TOTAL_VF = 16'h0000,
  parameter  [3:0]  PF0_SRIOV_CAP_VER = 4'h1,
  parameter [15:0]  PF0_SRIOV_FIRST_VF_OFFSET = 16'h0000,
  parameter [15:0]  PF0_SRIOV_FUNC_DEP_LINK = 16'h0000,
  parameter [31:0]  PF0_SRIOV_SUPPORTED_PAGE_SIZE = 32'h00000000,
  parameter [15:0]  PF0_SRIOV_VF_DEVICE_ID = 16'h0000,
  parameter [15:0]  PF0_SUBSYSTEM_VENDOR_ID = 16'h0000,
  parameter [15:0]  PF0_SUBSYSTEM_ID = 16'h0000,
  parameter         PF0_TPHR_CAP_DEV_SPECIFIC_MODE = "FALSE",
  parameter         PF0_TPHR_CAP_ENABLE = "TRUE",
  parameter         PF0_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  PF0_TPHR_CAP_NEXTPTR = 12'h300,
  parameter  [2:0]  PF0_TPHR_CAP_ST_MODE_SEL = 3'b010,
  parameter  [1:0]  PF0_TPHR_CAP_ST_TABLE_LOC = 2'b10,
  parameter [10:0]  PF0_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter  [3:0]  PF0_TPHR_CAP_VER = 4'h1,
  parameter [11:0]  PF0_VC_CAP_NEXTPTR = 12'h000,
  parameter  [3:0]  PF0_VC_CAP_VER = 4'h1,
  parameter         PF1_AER_CAP_ECRC_CHECK_CAPABLE = "FALSE",
  parameter         PF1_AER_CAP_ECRC_GEN_CAPABLE = "FALSE",
  parameter [11:0]  PF1_AER_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  PF1_ARI_CAP_NEXTPTR = 12'h000,
  parameter  [7:0]  PF1_ARI_CAP_NEXT_FUNC = 8'h00,
  parameter  [4:0]  PF1_BAR0_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR0_CONTROL = 3'h4,
  parameter  [4:0]  PF1_BAR1_APERTURE_SIZE = 5'h00,
  parameter  [2:0]  PF1_BAR1_CONTROL = 3'h0,
  parameter  [4:0]  PF1_BAR2_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR2_CONTROL = 3'h4,
  parameter  [4:0]  PF1_BAR3_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR3_CONTROL = 3'h0,
  parameter  [4:0]  PF1_BAR4_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR4_CONTROL = 3'h4,
  parameter  [4:0]  PF1_BAR5_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR5_CONTROL = 3'h0,
  parameter  [7:0]  PF1_BIST_REGISTER = 8'h00,
  parameter  [7:0]  PF1_CAPABILITY_POINTER = 8'h50,
  parameter [23:0]  PF1_CLASS_CODE = 24'h000000,
  parameter [15:0]  PF1_DEVICE_ID = 16'h0000,
  parameter  [2:0]  PF1_DEV_CAP_MAX_PAYLOAD_SIZE = 3'h3,
  parameter [11:0]  PF1_DPA_CAP_NEXTPTR = 12'h000,
  parameter  [4:0]  PF1_DPA_CAP_SUB_STATE_CONTROL = 5'h00,
  parameter         PF1_DPA_CAP_SUB_STATE_CONTROL_EN = "TRUE",
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 = 8'h00,
  parameter  [3:0]  PF1_DPA_CAP_VER = 4'h1,
  parameter [11:0]  PF1_DSN_CAP_NEXTPTR = 12'h10C,
  parameter  [4:0]  PF1_EXPANSION_ROM_APERTURE_SIZE = 5'h03,
  parameter         PF1_EXPANSION_ROM_ENABLE = "FALSE",
  parameter  [7:0]  PF1_INTERRUPT_LINE = 8'h00,
  parameter  [2:0]  PF1_INTERRUPT_PIN = 3'h1,
  parameter  [7:0]  PF1_MSIX_CAP_NEXTPTR = 8'h00,
  parameter integer PF1_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  PF1_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer PF1_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  PF1_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  PF1_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer PF1_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  PF1_MSI_CAP_NEXTPTR = 8'h00,
  parameter [11:0]  PF1_PB_CAP_NEXTPTR = 12'h000,
  parameter         PF1_PB_CAP_SYSTEM_ALLOCATED = "FALSE",
  parameter  [3:0]  PF1_PB_CAP_VER = 4'h1,
  parameter  [7:0]  PF1_PM_CAP_ID = 8'h01,
  parameter  [7:0]  PF1_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  PF1_PM_CAP_VER_ID = 3'h3,
  parameter         PF1_RBAR_CAP_ENABLE = "FALSE",
  parameter  [2:0]  PF1_RBAR_CAP_INDEX0 = 3'h0,
  parameter  [2:0]  PF1_RBAR_CAP_INDEX1 = 3'h0,
  parameter  [2:0]  PF1_RBAR_CAP_INDEX2 = 3'h0,
  parameter [11:0]  PF1_RBAR_CAP_NEXTPTR = 12'h000,
  parameter [19:0]  PF1_RBAR_CAP_SIZE0 = 20'h00000,
  parameter [19:0]  PF1_RBAR_CAP_SIZE1 = 20'h00000,
  parameter [19:0]  PF1_RBAR_CAP_SIZE2 = 20'h00000,
  parameter  [3:0]  PF1_RBAR_CAP_VER = 4'h1,
  parameter  [2:0]  PF1_RBAR_NUM = 3'h1,
  parameter  [7:0]  PF1_REVISION_ID = 8'h00,
  parameter  [4:0]  PF1_SRIOV_BAR0_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR0_CONTROL = 3'h4,
  parameter  [4:0]  PF1_SRIOV_BAR1_APERTURE_SIZE = 5'h00,
  parameter  [2:0]  PF1_SRIOV_BAR1_CONTROL = 3'h0,
  parameter  [4:0]  PF1_SRIOV_BAR2_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR2_CONTROL = 3'h4,
  parameter  [4:0]  PF1_SRIOV_BAR3_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR3_CONTROL = 3'h0,
  parameter  [4:0]  PF1_SRIOV_BAR4_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR4_CONTROL = 3'h4,
  parameter  [4:0]  PF1_SRIOV_BAR5_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR5_CONTROL = 3'h0,
  parameter [15:0]  PF1_SRIOV_CAP_INITIAL_VF = 16'h0000,
  parameter [11:0]  PF1_SRIOV_CAP_NEXTPTR = 12'h000,
  parameter [15:0]  PF1_SRIOV_CAP_TOTAL_VF = 16'h0000,
  parameter  [3:0]  PF1_SRIOV_CAP_VER = 4'h1,
  parameter [15:0]  PF1_SRIOV_FIRST_VF_OFFSET = 16'h0000,
  parameter [15:0]  PF1_SRIOV_FUNC_DEP_LINK = 16'h0000,
  parameter [31:0]  PF1_SRIOV_SUPPORTED_PAGE_SIZE = 32'h00000000,
  parameter [15:0]  PF1_SRIOV_VF_DEVICE_ID = 16'h0000,
  parameter [15:0]  PF1_SUBSYSTEM_ID = 16'h0000,
  parameter         PF1_TPHR_CAP_DEV_SPECIFIC_MODE = "FALSE",
  parameter         PF1_TPHR_CAP_ENABLE = "TRUE",
  parameter         PF1_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  PF1_TPHR_CAP_NEXTPTR = 12'h300,
  parameter  [2:0]  PF1_TPHR_CAP_ST_MODE_SEL = 3'b010,
  parameter  [1:0]  PF1_TPHR_CAP_ST_TABLE_LOC = 2'b10,
  parameter [10:0]  PF1_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter  [3:0]  PF1_TPHR_CAP_VER = 4'h1,
  parameter         PL_DISABLE_EI_INFER_IN_L0 = "FALSE",
  parameter         PL_DISABLE_GEN3_DC_BALANCE = "FALSE",
  parameter         PL_DISABLE_SCRAMBLING = "FALSE",
  parameter         PL_DISABLE_UPCONFIG_CAPABLE = "FALSE",
  parameter         PL_EQ_ADAPT_DISABLE_COEFF_CHECK = "FALSE",
  parameter         PL_EQ_ADAPT_DISABLE_PRESET_CHECK = "FALSE",
  parameter  [4:0]  PL_EQ_ADAPT_ITER_COUNT = 5'h02,
  parameter  [1:0]  PL_EQ_ADAPT_REJECT_RETRY_COUNT = 2'h1,
  parameter         PL_EQ_BYPASS_PHASE23 = "TRUE",
  parameter         PL_EQ_SHORT_ADAPT_PHASE = "FALSE",
  parameter [15:0]  PL_LANE0_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE1_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE2_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE3_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE4_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE5_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE6_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE7_EQ_CONTROL = 16'h3F00,
  parameter integer PL_N_FTS_COMCLK_GEN1 = 255,
  parameter integer PL_N_FTS_COMCLK_GEN2 = 255,
  parameter integer PL_N_FTS_COMCLK_GEN3 = 255,
  parameter integer PL_N_FTS_GEN1 = 255,
  parameter integer PL_N_FTS_GEN2 = 255,
  parameter integer PL_N_FTS_GEN3 = 255,
  parameter         PL_UPSTREAM_FACING = "TRUE",
  parameter [15:0]  PM_ASPML0S_TIMEOUT = 16'h05DC,
  parameter [19:0]  PM_ASPML1_ENTRY_DELAY = 20'h00ABE,
  parameter         PM_ENABLE_SLOT_POWER_CAPTURE = "TRUE",
  parameter [31:0]  PM_L1_REENTRY_DELAY = 32'h000061A8,
  parameter [19:0]  PM_PME_SERVICE_TIMEOUT_DELAY = 20'h186A0,
  parameter [15:0]  PM_PME_TURNOFF_ACK_DELAY = 16'h0064,
  parameter         SIM_VERSION = "1.0",
  parameter integer SPARE_BIT0 = 0,
  parameter integer SPARE_BIT1 = 0,
  parameter integer SPARE_BIT2 = 0,
  parameter integer SPARE_BIT3 = 0,
  parameter integer SPARE_BIT4 = 0,
  parameter integer SPARE_BIT5 = 0,
  parameter integer SPARE_BIT6 = 0,
  parameter integer SPARE_BIT7 = 0,
  parameter integer SPARE_BIT8 = 0,
  parameter  [7:0]  SPARE_BYTE0 = 8'h00,
  parameter  [7:0]  SPARE_BYTE1 = 8'h00,
  parameter  [7:0]  SPARE_BYTE2 = 8'h00,
  parameter  [7:0]  SPARE_BYTE3 = 8'h00,
  parameter [31:0]  SPARE_WORD0 = 32'h00000000,
  parameter [31:0]  SPARE_WORD1 = 32'h00000000,
  parameter [31:0]  SPARE_WORD2 = 32'h00000000,
  parameter [31:0]  SPARE_WORD3 = 32'h00000000,
  parameter         SRIOV_CAP_ENABLE = "FALSE",
  parameter [23:0]  TL_COMPL_TIMEOUT_REG0 = 24'hBEBC20,
  parameter [27:0]  TL_COMPL_TIMEOUT_REG1 = 28'h3211620,
  parameter [11:0]  TL_CREDITS_CD = 12'h3E0,
  parameter  [7:0]  TL_CREDITS_CH = 8'h20,
  parameter [11:0]  TL_CREDITS_NPD = 12'h028,
  parameter  [7:0]  TL_CREDITS_NPH = 8'h20,
  parameter [11:0]  TL_CREDITS_PD = 12'h198,
  parameter  [7:0]  TL_CREDITS_PH = 8'h20,
  parameter         TL_ENABLE_MESSAGE_RID_CHECK_ENABLE = "TRUE",
  parameter         TL_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE = "FALSE",
  parameter         TL_LEGACY_CFG_EXTEND_INTERFACE_ENABLE = "FALSE",
  parameter         TL_LEGACY_MODE_ENABLE = "FALSE",
  parameter         TL_PF_ENABLE_REG = "FALSE",
  parameter         TL_TAG_MGMT_ENABLE = "TRUE",
  parameter  [7:0]  VF0_CAPABILITY_POINTER = 8'h50,
  parameter integer VF0_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF0_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF0_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF0_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF0_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF0_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF0_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF0_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF0_PM_CAP_VER_ID = 3'h3,
  parameter integer VF1_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF1_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF1_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF1_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF1_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF1_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF1_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF1_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF1_PM_CAP_VER_ID = 3'h3,
  parameter integer VF2_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF2_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF2_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF2_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF2_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF2_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF2_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF2_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF2_PM_CAP_VER_ID = 3'h3,
  parameter integer VF3_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF3_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF3_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF3_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF3_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF3_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF3_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF3_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF3_PM_CAP_VER_ID = 3'h3,
  parameter integer VF4_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF4_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF4_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF4_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF4_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF4_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF4_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF4_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF4_PM_CAP_VER_ID = 3'h3,
  parameter integer VF5_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF5_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF5_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF5_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF5_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF5_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF5_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF5_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF5_PM_CAP_VER_ID = 3'h3,
  parameter         IMPL_TARGET = "HARD",
  parameter         NO_DECODE_LOGIC = "FALSE",
  parameter         COMPLETION_SPACE = "16KB",
  // Tandem PROM/PCIe Parameters
  parameter         MCAP_ENABLEMENT = "NONE",  // NONE, TANDEM_PROM, TANDEM_PCIE
  //Parameters below are used during GU Customization.  Do not change.
  parameter         gen_x0y0_ucf = "FALSE",
  parameter         gen_x0y1_ucf = "FALSE",
  parameter         gen_x0y2_ucf = "FALSE",
  parameter         gen_x0y3_ucf = "FALSE",
  parameter         pcie_blk_locn = 0,
  parameter         silicon_revision = "GES",
  parameter         xlnx_ref_board = 0,
  parameter         MSI_EN = "TRUE",
  parameter         MSIX_EN = "FALSE",
  parameter         SHARED_LOGIC_IN_CORE = "FALSE",
  parameter         TX_FC_IF = "FALSE",
  parameter         CFG_FC_IF = "FALSE",
  parameter         CFG_EXT_IF = "FALSE",
  parameter         CFG_STATUS_IF = "FALSE",
  parameter         PER_FUNC_STATUS_IF = "FALSE",
  parameter         CFG_MGMT_IF = "FALSE",
  parameter         RCV_MSG_IF = "FALSE",
  parameter         CFG_TX_MSG_IF = "FALSE",
  parameter         CFG_CTL_IF = "FALSE",
  parameter         EXT_STARTUP_PRIMITIVE = "FALSE",
  parameter         EXT_PIPE_INTERFACE = "FALSE"

)  (

  //----------------------------------------------------------------------------------------------------------------//
  // 1. PCI Express (pci_exp) Interface                                                                             //
  //----------------------------------------------------------------------------------------------------------------//

  // Tx
  output [(PL_LINK_CAP_MAX_LINK_WIDTH-1):0]   pci_exp_txn,
  output [(PL_LINK_CAP_MAX_LINK_WIDTH-1):0]   pci_exp_txp,

  // Rx
  input  [(PL_LINK_CAP_MAX_LINK_WIDTH-1):0]   pci_exp_rxn,
  input  [(PL_LINK_CAP_MAX_LINK_WIDTH-1):0]   pci_exp_rxp,

  //----------------------------------------------------------------------------------------------------------------//
  // 2. Clock & GT COMMON Sharing Interface                                                                         //
  //----------------------------------------------------------------------------------------------------------------//
  // Shared Logic Internal
  output                                     int_pclk_out_slave,
  output                                     int_pipe_rxusrclk_out,
  output [(PL_LINK_CAP_MAX_LINK_WIDTH-1):0]  int_rxoutclk_out,
  output                                     int_dclk_out,
  output                                     int_userclk1_out,
  output                                     int_userclk2_out,
  output                                     int_oobclk_out,
  output  [1:0]                              int_qplllock_out,
  output  [1:0]                              int_qplloutclk_out,
  output  [1:0]                              int_qplloutrefclk_out,
  input  [(PL_LINK_CAP_MAX_LINK_WIDTH-1):0]  int_pclk_sel_slave,
 
  // Shared Logic External Clock
  input                                       pipe_pclk_in,
  input                                       pipe_rxusrclk_in,
  input  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_rxoutclk_in,
  input                                       pipe_dclk_in,
  input                                       pipe_userclk1_in,
  input                                       pipe_userclk2_in,
  input                                       pipe_oobclk_in,
  input                                       pipe_mmcm_lock_in,
  output                                      pipe_txoutclk_out,
  output [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_rxoutclk_out,
  output [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_pclk_sel_out,
  output                                      pipe_gen3_out,

  // Shared Logic External GT COMMON  

  input  [11:0]                               qpll_drp_crscode,
  input  [17:0]                               qpll_drp_fsm,
  input  [1:0]                                qpll_drp_done,
  input  [1:0]                                qpll_drp_reset,
  input  [1:0]                                qpll_qplllock,
  input  [1:0]                                qpll_qplloutclk,
  input  [1:0]                                qpll_qplloutrefclk,
  output                                      qpll_qplld,
  output [1:0]                                qpll_qpllreset,
  output                                      qpll_drp_clk,
  output                                      qpll_drp_rst_n,
  output                                      qpll_drp_ovrd,
  output                                      qpll_drp_gen3,
  output                                      qpll_drp_start,


//----------------------------------------------------------------------------------------------------------------//
  // 3. AXI Interface                                                                                               //
  //----------------------------------------------------------------------------------------------------------------//

  // Common
  output                                     user_clk,
  output reg                                 user_reset,
  output                                     user_lnk_up,
  output                                     user_app_rdy,

  input                                      s_axis_rq_tlast,
  input  [C_DATA_WIDTH-1:0]                  s_axis_rq_tdata,
  input  [59:0]                              s_axis_rq_tuser,
  input  [KEEP_WIDTH-1:0]                    s_axis_rq_tkeep,
  output [3:0]                               s_axis_rq_tready,
  input                                      s_axis_rq_tvalid,

  output  [C_DATA_WIDTH-1:0]                 m_axis_rc_tdata,
  output  [74:0]                             m_axis_rc_tuser,
  output                                     m_axis_rc_tlast,
  output  [KEEP_WIDTH-1:0]                   m_axis_rc_tkeep,
  output                                     m_axis_rc_tvalid,
  input   [21:0]                             m_axis_rc_tready,

  output  [C_DATA_WIDTH-1:0]                 m_axis_cq_tdata,
  output  [84:0]                             m_axis_cq_tuser,
  output                                     m_axis_cq_tlast,
  output  [KEEP_WIDTH-1:0]                   m_axis_cq_tkeep,
  output                                     m_axis_cq_tvalid,
  input   [21:0]                             m_axis_cq_tready,

  input  [C_DATA_WIDTH-1:0]                  s_axis_cc_tdata,
  input  [32:0]                              s_axis_cc_tuser,
  input                                      s_axis_cc_tlast,
  input  [KEEP_WIDTH-1:0]                    s_axis_cc_tkeep,
  input                                      s_axis_cc_tvalid,
  output  [3:0]                              s_axis_cc_tready,

  output  [3:0]                              pcie_rq_seq_num,
  output                                     pcie_rq_seq_num_vld,
  output  [5:0]                              pcie_rq_tag,
  output                                     pcie_rq_tag_vld,

  output  [1:0]                              pcie_tfc_nph_av,
  output  [1:0]                              pcie_tfc_npd_av,
  input                                      pcie_cq_np_req,
  output  [5:0]                              pcie_cq_np_req_count,

  //----------------------------------------------------------------------------------------------------------------//
  // 4. Configuration (CFG) Interface                                                                               //
  //----------------------------------------------------------------------------------------------------------------//

  //----------------------------------------------------------------------------------------------------------------//
  // EP and RP                                                                                                      //
  //----------------------------------------------------------------------------------------------------------------//

  output                                     cfg_phy_link_down,
  output  [1:0]                              cfg_phy_link_status,
  output  [3:0]                              cfg_negotiated_width,
  output  [2:0]                              cfg_current_speed,
  output  [2:0]                              cfg_max_payload,
  output  [2:0]                              cfg_max_read_req,
  output  [7:0]                              cfg_function_status,
  output  [5:0]                              cfg_function_power_state,
  output  [11:0]                             cfg_vf_status,
  output  [17:0]                             cfg_vf_power_state,
  output  [1:0]                              cfg_link_power_state,

  // Management Interface
  input  [18:0]                              cfg_mgmt_addr,
  input                                      cfg_mgmt_write,
  input  [31:0]                              cfg_mgmt_write_data,
  input  [3:0]                               cfg_mgmt_byte_enable,
  input                                      cfg_mgmt_read,
  output  [31:0]                             cfg_mgmt_read_data,
  output                                     cfg_mgmt_read_write_done,
  input                                      cfg_mgmt_type1_cfg_reg_access,

  // Error Reporting Interface
  output                                     cfg_err_cor_out,
  output                                     cfg_err_nonfatal_out,
  output                                     cfg_err_fatal_out,
 // output                                   cfg_local_error,

  output                                     cfg_ltr_enable,
  output  [5:0]                              cfg_ltssm_state,
  output  [1:0]                              cfg_rcb_status,
  output  [1:0]                              cfg_dpa_substate_change,
  output  [1:0]                              cfg_obff_enable,
  output                                     cfg_pl_status_change,

  output  [1:0]                              cfg_tph_requester_enable,
  output  [5:0]                              cfg_tph_st_mode,
  output  [5:0]                              cfg_vf_tph_requester_enable,
  output  [17:0]                             cfg_vf_tph_st_mode,

  output                                     cfg_msg_received,
  output  [7:0]                              cfg_msg_received_data,
  output  [4:0]                              cfg_msg_received_type,

  input                                      cfg_msg_transmit,
  input   [2:0]                              cfg_msg_transmit_type,
  input   [31:0]                             cfg_msg_transmit_data,
  output                                     cfg_msg_transmit_done,

  output  [7:0]                              cfg_fc_ph,
  output  [11:0]                             cfg_fc_pd,
  output  [7:0]                              cfg_fc_nph,
  output  [11:0]                             cfg_fc_npd,
  output  [7:0]                              cfg_fc_cplh,
  output  [11:0]                             cfg_fc_cpld,
  input   [2:0]                              cfg_fc_sel,

  input   [2:0]                              cfg_per_func_status_control,
  output  [15:0]                             cfg_per_func_status_data,
  input   [2:0]                              cfg_per_function_number,
  input                                      cfg_per_function_output_request,
  output                                     cfg_per_function_update_done,

  input   [15:0]                             cfg_subsys_vend_id,
  input   [63:0]                             cfg_dsn,
  input                                      cfg_power_state_change_ack,
  output                                     cfg_power_state_change_interrupt,
  input                                      cfg_err_cor_in,
  input                                      cfg_err_uncor_in,

  output  [1:0]                              cfg_flr_in_process,
  input   [1:0]                              cfg_flr_done,
  output  [5:0]                              cfg_vf_flr_in_process,
  input   [5:0]                              cfg_vf_flr_done,

  input                                      cfg_link_training_enable,

  output                                     cfg_ext_read_received,
  output                                     cfg_ext_write_received,
  output  [9:0]                              cfg_ext_register_number,
  output  [7:0]                              cfg_ext_function_number,
  output  [31:0]                             cfg_ext_write_data,
  output  [3:0]                              cfg_ext_write_byte_enable,
  input   [31:0]                             cfg_ext_read_data,
  input                                      cfg_ext_read_data_valid,

  // Interrupt Interface Signals
  input   [3:0]                              cfg_interrupt_int,
  input   [1:0]                              cfg_interrupt_pending,
  output                                     cfg_interrupt_sent,

  output  [1:0]                              cfg_interrupt_msi_enable,
  output  [5:0]                              cfg_interrupt_msi_vf_enable,
  output  [5:0]                              cfg_interrupt_msi_mmenable,
  output                                     cfg_interrupt_msi_mask_update,
  output  [31:0]                             cfg_interrupt_msi_data,
  input   [3:0]                              cfg_interrupt_msi_select,
  input   [31:0]                             cfg_interrupt_msi_int,
  input   [63:0]                             cfg_interrupt_msi_pending_status,
  output                                     cfg_interrupt_msi_sent,
  output                                     cfg_interrupt_msi_fail,

  output  [1:0]                              cfg_interrupt_msix_enable,
  output  [1:0]                              cfg_interrupt_msix_mask,
  output  [5:0]                              cfg_interrupt_msix_vf_enable,
  output  [5:0]                              cfg_interrupt_msix_vf_mask,
  input   [31:0]                             cfg_interrupt_msix_data,
  input   [63:0]                             cfg_interrupt_msix_address,
  input                                      cfg_interrupt_msix_int,
  output                                     cfg_interrupt_msix_sent,
  output                                     cfg_interrupt_msix_fail,

  input   [2:0]                              cfg_interrupt_msi_attr,
  input                                      cfg_interrupt_msi_tph_present,
  input   [1:0]                              cfg_interrupt_msi_tph_type,
  input   [8:0]                              cfg_interrupt_msi_tph_st_tag,
  input   [2:0]                              cfg_interrupt_msi_function_number,

  output                                     cfg_hot_reset_out,
  input                                      cfg_config_space_enable,
  input                                      cfg_req_pm_transition_l23_ready,

  //----------------------------------------------------------------------------------------------------------------//
  // RP Only                                                                                                        //
  //----------------------------------------------------------------------------------------------------------------//

  input                                      cfg_hot_reset_in,
  input   [7:0]                              cfg_ds_port_number,
  input   [7:0]                              cfg_ds_bus_number,
  input   [4:0]                              cfg_ds_device_number,
  input   [2:0]                              cfg_ds_function_number,

  //----------------------------------------------------------------------------------------------------------------//
  // 6. TPH Interface                                                                                               //
  //----------------------------------------------------------------------------------------------------------------//
  input   [4:0]                              user_tph_stt_address,
  input   [2:0]                              user_tph_function_num,
  output  [31:0]                             user_tph_stt_read_data,
  output                                     user_tph_stt_read_data_valid,
  input                                      user_tph_stt_read_enable,

  //----------------------------------------------------------------------------------------------------------------//
  // 7. System(SYS) Interface                                                                                       //
  //----------------------------------------------------------------------------------------------------------------//

  input wire                                 sys_clk,
  input wire                                 sys_reset,
  input					     pipe_mmcm_rst_n,

//--------------TRANSCEIVER_DEBUG---------------------------------


  input   [ 2:0]                               pipe_txprbssel,        
  input   [ 2:0]                               pipe_rxprbssel,     
  input                                        pipe_txprbsforceerr,
  input                                        pipe_rxprbscntreset,
  input   [ 2:0]                               pipe_loopback,     

  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_rxprbserr,   
  input  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]      pipe_txinhibit,   


  output  [4:0]                                pipe_rst_fsm,         
  output  [11:0]                               pipe_qrst_fsm,       
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH*5)-1:0] pipe_rate_fsm,      
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH*6)-1:0] pipe_sync_fsm_tx,  
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH*7)-1:0] pipe_sync_fsm_rx, 
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH*7)-1:0] pipe_drp_fsm,    

  output                                       pipe_rst_idle,         
  output                                       pipe_qrst_idle,       
  output                                       pipe_rate_idle,      
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_eyescandataerror,          
  output  [PL_LINK_CAP_MAX_LINK_WIDTH*3-1:0]   pipe_rxstatus,
  output  [PL_LINK_CAP_MAX_LINK_WIDTH*15-1:0]  pipe_dmonitorout,

  output  [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    pipe_cpll_lock,
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH-1)>>2:0] pipe_qpll_lock,
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    pipe_rxpmaresetdone,       
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH*3)-1:0]  pipe_rxbufstatus,         
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    pipe_txphaligndone,       
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    pipe_txphinitdone,        
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    pipe_txdlysresetdone,    
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    pipe_rxphaligndone,      
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    pipe_rxdlysresetdone,     
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    pipe_rxsyncdone,       
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH*8)-1:0]  pipe_rxdisperr,       
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH*8)-1:0]  pipe_rxnotintable,      
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    pipe_rxcommadet,        

  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     gt_ch_drp_rdy,
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_0,          
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_1,         
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_2,        
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_3,       
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_4,      
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_5,     
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_6,    
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_7,   
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_8,  
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_9, 
  output  [31:0]                               pipe_debug,

//---- PIPE Ports to Core Top Level for PIPE Mode Simulation with 3rd Party IP/BFM/Xilinx BFM ------------------------
  input   [25:0]                               common_commands_in,
  input   [83:0]                               pipe_rx_0_sigs,
  input   [83:0]                               pipe_rx_1_sigs,
  input   [83:0]                               pipe_rx_2_sigs,
  input   [83:0]                               pipe_rx_3_sigs,
  input   [83:0]                               pipe_rx_4_sigs,
  input   [83:0]                               pipe_rx_5_sigs,
  input   [83:0]                               pipe_rx_6_sigs,
  input   [83:0]                               pipe_rx_7_sigs,
                         
  output  [25:0]                               common_commands_out,
  output  [83:0]                               pipe_tx_0_sigs,
  output  [83:0]                               pipe_tx_1_sigs,
  output  [83:0]                               pipe_tx_2_sigs,
  output  [83:0]                               pipe_tx_3_sigs,
  output  [83:0]                               pipe_tx_4_sigs,
  output  [83:0]                               pipe_tx_5_sigs,
  output  [83:0]                               pipe_tx_6_sigs,
  output  [83:0]                               pipe_tx_7_sigs,

  //--------------Channel DRP---------------------------------
  output                                       ext_ch_gt_drpclk,
  input   [(PL_LINK_CAP_MAX_LINK_WIDTH*9)-1:0] ext_ch_gt_drpaddr,
  input   [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     ext_ch_gt_drpen,
  input   [(PL_LINK_CAP_MAX_LINK_WIDTH*16)-1:0]ext_ch_gt_drpdi,
  input   [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     ext_ch_gt_drpwe,

  output  [(PL_LINK_CAP_MAX_LINK_WIDTH*16)-1:0]ext_ch_gt_drpdo,
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     ext_ch_gt_drprdy,
  //----------------------------------------------------------------------------------------------------------------//
  // 9. Tandem PROM/PCIE ICAP Primitive Ports                                                                       //
  //----------------------------------------------------------------------------------------------------------------//
  input                                        icap_clk,
  input                                        icap_csib,
  input                                        icap_rdwrb,
  input   [31:0]                               icap_i,
  output  [31:0]                               icap_o,

  output                                       pcie_drp_rdy,
  output             [15:0]                    pcie_drp_do,
  input                                        pcie_drp_clk,
  input                                        pcie_drp_en,
  input                                        pcie_drp_we,
  input              [10:0]                    pcie_drp_addr,
  input              [15:0]                    pcie_drp_di,


  //----------------------------------------------------------------------------------------------------------------//
  // 10. Tandem PROM/PCIE STARTUP primitive Ports                                                                    //
  //----------------------------------------------------------------------------------------------------------------//

  // This input should be used when the startup block is generated exteranl to the PCI Express Core
  input                                       startup_eos_in,     // 1-bit input: This signal should be driven by the EOS output of the STARTUP primitive.
  // These inputs and outputs may be use when the startup block is generated internal to the PCI Express Core.
  output                                      startup_cfgclk,     // 1-bit output: Configuration main clock output
  output                                      startup_cfgmclk,    // 1-bit output: Configuration internal oscillator clock output
  output                                      startup_eos,        // 1-bit output: Active high output signal indicating the End Of Startup
  output                                      startup_preq,       // 1-bit output: PROGRAM request to fabric output
  input                                       startup_clk,        // 1-bit input: User start-up clock input
  input                                       startup_gsr,        // 1-bit input: Global Set/Reset input (GSR cannot be used for the port name)
  input                                       startup_gts,        // 1-bit input: Global 3-state input (GTS cannot be used for the port name)
  input                                       startup_keyclearb,  // 1-bit input: Clear AES Decrypter Key input from Battery-Backed RAM (BBRAM)
  input                                       startup_pack,       // 1-bit input: PROGRAM acknowledge input
  input                                       startup_usrcclko,   // 1-bit input: User CCLK input
  input                                       startup_usrcclkts,  // 1-bit input: User CCLK 3-state enable input
  input                                       startup_usrdoneo,   // 1-bit input: User DONE pin output control
  input                                       startup_usrdonets   // 1-bit input: User DONE 3-state enable output
);


  localparam integer USER_CLK_FREQ              = ((PL_LINK_CAP_MAX_LINK_SPEED == 3'h4) ? 5 : 4);
  localparam  [1:0]  CRM_USER_CLK_FREQ          = ((USER_CLK2_FREQ == 4) ? 2'b10: ((USER_CLK2_FREQ == 3) ? 2'b01 : 2'b00));
  localparam  [1:0]  AXISTEN_IF_WIDTH           = (C_DATA_WIDTH == 256) ? 2'b10 : ((C_DATA_WIDTH == 128) ? 2'b01 : 2'b00);
  localparam         CRM_CORE_CLK_FREQ_500      = ((PL_LINK_CAP_MAX_LINK_SPEED == 3'h4) ? "TRUE" : "FALSE");
  localparam         INTERFACE_SPEED            = ((PL_LINK_CAP_MAX_LINK_SPEED == 3'h4) ? "500 MHZ" : "250 MHZ");
  localparam         ENABLE_FAST_SIM_TRAINING   = "TRUE";

  wire         drp_clk_wire;
  wire         drp_en_wire;
  wire         drp_we_wire;
  wire [10:0]  drp_addr_wire;
  wire [15:0]  drp_di_wire;

  wire         drp_rdy_wire;
  wire  [15:0] drp_do_wire;

  wire         dt_654524_drp_clk;
  wire         dt_654524_drp_en;
  wire         dt_654524_drp_we;
  wire [10:0]  dt_654524_drp_addr;
  wire [15:0]  dt_654524_drp_di;

  wire         cfg_local_error;
  wire         rec_clk;
  wire         pipe_clk;
  wire         core_clk;
  wire         phy_rdy;

  wire [15:0]  cfg_vend_id        = PF0_VENDOR_ID;
  wire [15:0]  cfg_dev_id         = PF0_DEVICE_ID;
  wire [7:0]   cfg_rev_id         = PF0_REVISION_ID;
//  wire [15:0]  cfg_subsys_vend_id = PF0_SUBSYSTEM_VENDOR_ID;
  wire [15:0]  cfg_subsys_id      = PF0_SUBSYSTEM_ID;

  // PIPE Interface Wires
  wire         pipe_tx_reset;
  wire         pipe_rx0_polarity;
  wire         pipe_rx1_polarity;
  wire         pipe_rx2_polarity;
  wire         pipe_rx3_polarity;
  wire         pipe_rx4_polarity;
  wire         pipe_rx5_polarity;
  wire         pipe_rx6_polarity;
  wire         pipe_rx7_polarity;

  wire         pipe_tx0_compliance;
  wire         pipe_tx1_compliance;
  wire         pipe_tx2_compliance;
  wire         pipe_tx3_compliance;
  wire         pipe_tx4_compliance;
  wire         pipe_tx5_compliance;
  wire         pipe_tx6_compliance;
  wire         pipe_tx7_compliance;

  wire         pipe_rx0_data_valid;
  wire         pipe_rx1_data_valid;
  wire         pipe_rx2_data_valid;
  wire         pipe_rx3_data_valid;
  wire         pipe_rx4_data_valid;
  wire         pipe_rx5_data_valid;
  wire         pipe_rx6_data_valid;
  wire         pipe_rx7_data_valid;

  wire         pipe_tx0_elec_idle;
  wire         pipe_tx1_elec_idle;
  wire         pipe_tx2_elec_idle;
  wire         pipe_tx3_elec_idle;
  wire         pipe_tx4_elec_idle;
  wire         pipe_tx5_elec_idle;
  wire         pipe_tx6_elec_idle;
  wire         pipe_tx7_elec_idle;

  wire         pipe_rx0_start_block;
  wire         pipe_rx1_start_block;
  wire         pipe_rx2_start_block;
  wire         pipe_rx3_start_block;
  wire         pipe_rx4_start_block;
  wire         pipe_rx5_start_block;
  wire         pipe_rx6_start_block;
  wire         pipe_rx7_start_block;

  wire         pipe_tx_deemph;
  wire         pipe_tx_rcvr_det;
  wire   [1:0] pipe_tx_rate;
  wire   [2:0] pipe_tx_margin;
  wire         pipe_tx_swing;
  wire   [5:0] pipe_tx_eqfs;
  wire   [5:0] pipe_tx_eqlf;

  wire   [1:0] pipe_rx0_eqcontrol;
  wire   [1:0] pipe_rx1_eqcontrol;
  wire   [1:0] pipe_rx2_eqcontrol;
  wire   [1:0] pipe_rx3_eqcontrol;
  wire   [1:0] pipe_rx4_eqcontrol;
  wire   [1:0] pipe_rx5_eqcontrol;
  wire   [1:0] pipe_rx6_eqcontrol;
  wire   [1:0] pipe_rx7_eqcontrol;

  wire   [1:0] pipe_tx0_char_is_k;
  wire   [1:0] pipe_tx1_char_is_k;
  wire   [1:0] pipe_tx2_char_is_k;
  wire   [1:0] pipe_tx3_char_is_k;
  wire   [1:0] pipe_tx4_char_is_k;
  wire   [1:0] pipe_tx5_char_is_k;
  wire   [1:0] pipe_tx6_char_is_k;
  wire   [1:0] pipe_tx7_char_is_k;

  wire   [1:0] pipe_tx0_eqcontrol;
  wire   [1:0] pipe_tx1_eqcontrol;
  wire   [1:0] pipe_tx2_eqcontrol;
  wire   [1:0] pipe_tx3_eqcontrol;
  wire   [1:0] pipe_tx4_eqcontrol;
  wire   [1:0] pipe_tx5_eqcontrol;
  wire   [1:0] pipe_tx6_eqcontrol;
  wire   [1:0] pipe_tx7_eqcontrol;

  wire   [1:0] pipe_tx0_powerdown;
  wire   [1:0] pipe_tx1_powerdown;
  wire   [1:0] pipe_tx2_powerdown;
  wire   [1:0] pipe_tx3_powerdown;
  wire   [1:0] pipe_tx4_powerdown;
  wire   [1:0] pipe_tx5_powerdown;
  wire   [1:0] pipe_tx6_powerdown;
  wire   [1:0] pipe_tx7_powerdown;

  wire   [1:0] pipe_rx0_syncheader;
  wire   [1:0] pipe_rx1_syncheader;
  wire   [1:0] pipe_rx2_syncheader;
  wire   [1:0] pipe_rx3_syncheader;
  wire   [1:0] pipe_rx4_syncheader;
  wire   [1:0] pipe_rx5_syncheader;
  wire   [1:0] pipe_rx6_syncheader;
  wire   [1:0] pipe_rx7_syncheader;

  wire   [2:0] pipe_rx0_eqpreset;
  wire   [2:0] pipe_rx1_eqpreset;
  wire   [2:0] pipe_rx2_eqpreset;
  wire   [2:0] pipe_rx3_eqpreset;
  wire   [2:0] pipe_rx4_eqpreset;
  wire   [2:0] pipe_rx5_eqpreset;
  wire   [2:0] pipe_rx6_eqpreset;
  wire   [2:0] pipe_rx7_eqpreset;

  wire  [31:0] pipe_tx0_data;
  wire  [31:0] pipe_tx1_data;
  wire  [31:0] pipe_tx2_data;
  wire  [31:0] pipe_tx3_data;
  wire  [31:0] pipe_tx4_data;
  wire  [31:0] pipe_tx5_data;
  wire  [31:0] pipe_tx6_data;
  wire  [31:0] pipe_tx7_data;

  wire   [3:0] pipe_rx0_eq_txpreset;
  wire   [3:0] pipe_rx1_eq_txpreset;
  wire   [3:0] pipe_rx2_eq_txpreset;
  wire   [3:0] pipe_rx3_eq_txpreset;
  wire   [3:0] pipe_rx4_eq_txpreset;
  wire   [3:0] pipe_rx5_eq_txpreset;
  wire   [3:0] pipe_rx6_eq_txpreset;
  wire   [3:0] pipe_rx7_eq_txpreset;

  wire   [3:0] pipe_tx0_eqpreset;
  wire   [3:0] pipe_tx1_eqpreset;
  wire   [3:0] pipe_tx2_eqpreset;
  wire   [3:0] pipe_tx3_eqpreset;
  wire   [3:0] pipe_tx4_eqpreset;
  wire   [3:0] pipe_tx5_eqpreset;
  wire   [3:0] pipe_tx6_eqpreset;
  wire   [3:0] pipe_tx7_eqpreset;

  wire   [5:0] pipe_rx0_eq_lffs;
  wire   [5:0] pipe_rx1_eq_lffs;
  wire   [5:0] pipe_rx2_eq_lffs;
  wire   [5:0] pipe_rx3_eq_lffs;
  wire   [5:0] pipe_rx4_eq_lffs;
  wire   [5:0] pipe_rx5_eq_lffs;
  wire   [5:0] pipe_rx6_eq_lffs;
  wire   [5:0] pipe_rx7_eq_lffs;

  wire   [5:0] pipe_tx0_eqdeemph;
  wire   [5:0] pipe_tx1_eqdeemph;
  wire   [5:0] pipe_tx2_eqdeemph;
  wire   [5:0] pipe_tx3_eqdeemph;
  wire   [5:0] pipe_tx4_eqdeemph;
  wire   [5:0] pipe_tx5_eqdeemph;
  wire   [5:0] pipe_tx6_eqdeemph;
  wire   [5:0] pipe_tx7_eqdeemph;

  wire   [7:0] pipe_rx_slide;
  wire         PIPE_GEN3_OUT_wire;

  wire         pipe_rx0_elec_idle;
  wire         pipe_rx1_elec_idle;
  wire         pipe_rx2_elec_idle;
  wire         pipe_rx3_elec_idle;
  wire         pipe_rx4_elec_idle;
  wire         pipe_rx5_elec_idle;
  wire         pipe_rx6_elec_idle;
  wire         pipe_rx7_elec_idle;

  wire         pipe_rx0_eqdone;
  wire         pipe_rx1_eqdone;
  wire         pipe_rx2_eqdone;
  wire         pipe_rx3_eqdone;
  wire         pipe_rx4_eqdone;
  wire         pipe_rx5_eqdone;
  wire         pipe_rx6_eqdone;
  wire         pipe_rx7_eqdone;

  wire         pipe_rx0_eq_adapt_done;
  wire         pipe_rx1_eq_adapt_done;
  wire         pipe_rx2_eq_adapt_done;
  wire         pipe_rx3_eq_adapt_done;
  wire         pipe_rx4_eq_adapt_done;
  wire         pipe_rx5_eq_adapt_done;
  wire         pipe_rx6_eq_adapt_done;
  wire         pipe_rx7_eq_adapt_done;

  wire         pipe_rx0_eq_lffs_sel;
  wire         pipe_rx1_eq_lffs_sel;
  wire         pipe_rx2_eq_lffs_sel;
  wire         pipe_rx3_eq_lffs_sel;
  wire         pipe_rx4_eq_lffs_sel;
  wire         pipe_rx5_eq_lffs_sel;
  wire         pipe_rx6_eq_lffs_sel;
  wire         pipe_rx7_eq_lffs_sel;

  wire         pipe_rx0_phy_status;
  wire         pipe_rx1_phy_status;
  wire         pipe_rx2_phy_status;
  wire         pipe_rx3_phy_status;
  wire         pipe_rx4_phy_status;
  wire         pipe_rx5_phy_status;
  wire         pipe_rx6_phy_status;
  wire         pipe_rx7_phy_status;

  wire         pipe_rx0_valid;
  wire         pipe_rx1_valid;
  wire         pipe_rx2_valid;
  wire         pipe_rx3_valid;
  wire         pipe_rx4_valid;
  wire         pipe_rx5_valid;
  wire         pipe_rx6_valid;
  wire         pipe_rx7_valid;

  wire         pipe_tx0_eqdone;
  wire         pipe_tx1_eqdone;
  wire         pipe_tx2_eqdone;
  wire         pipe_tx3_eqdone;
  wire         pipe_tx4_eqdone;
  wire         pipe_tx5_eqdone;
  wire         pipe_tx6_eqdone;
  wire         pipe_tx7_eqdone;

  wire  [17:0] pipe_rx0_eq_new_txcoeff;
  wire  [17:0] pipe_rx1_eq_new_txcoeff;
  wire  [17:0] pipe_rx2_eq_new_txcoeff;
  wire  [17:0] pipe_rx3_eq_new_txcoeff;
  wire  [17:0] pipe_rx4_eq_new_txcoeff;
  wire  [17:0] pipe_rx5_eq_new_txcoeff;
  wire  [17:0] pipe_rx6_eq_new_txcoeff;
  wire  [17:0] pipe_rx7_eq_new_txcoeff;

  wire  [17:0] pipe_tx0_eqcoeff;
  wire  [17:0] pipe_tx1_eqcoeff;
  wire  [17:0] pipe_tx2_eqcoeff;
  wire  [17:0] pipe_tx3_eqcoeff;
  wire  [17:0] pipe_tx4_eqcoeff;
  wire  [17:0] pipe_tx5_eqcoeff;
  wire  [17:0] pipe_tx6_eqcoeff;
  wire  [17:0] pipe_tx7_eqcoeff;

  wire   [1:0] pipe_rx0_char_is_k;
  wire   [1:0] pipe_rx1_char_is_k;
  wire   [1:0] pipe_rx2_char_is_k;
  wire   [1:0] pipe_rx3_char_is_k;
  wire   [1:0] pipe_rx4_char_is_k;
  wire   [1:0] pipe_rx5_char_is_k;
  wire   [1:0] pipe_rx6_char_is_k;
  wire   [1:0] pipe_rx7_char_is_k;

  wire   [2:0] pipe_rx0_status;
  wire   [2:0] pipe_rx1_status;
  wire   [2:0] pipe_rx2_status;
  wire   [2:0] pipe_rx3_status;
  wire   [2:0] pipe_rx4_status;
  wire   [2:0] pipe_rx5_status;
  wire   [2:0] pipe_rx6_status;
  wire   [2:0] pipe_rx7_status;

  wire  [31:0] pipe_rx0_data;
  wire  [31:0] pipe_rx1_data;
  wire  [31:0] pipe_rx2_data;
  wire  [31:0] pipe_rx3_data;
  wire  [31:0] pipe_rx4_data;
  wire  [31:0] pipe_rx5_data;
  wire  [31:0] pipe_rx6_data;
  wire  [31:0] pipe_rx7_data;

  wire   [7:0] pipe_rx_syncdone;

  wire         sys_or_hot_rst;
  wire         user_lnk_up_int;
  reg          user_reset_int;

  // Wire Declaration for Inputs that are issolated in Tandem configuration
  wire         cfg_mgmt_write_wire;
  wire         cfg_mgmt_read_wire;
  wire   [2:0] cfg_per_func_status_control_wire;
  wire         cfg_per_function_output_request_wire;
  wire  [63:0] cfg_dsn_wire;
  wire         cfg_power_state_change_ack_wire;
  wire         cfg_err_cor_in_wire;
  wire         cfg_err_uncor_in_wire;
  wire   [1:0] cfg_flr_done_wire;
  wire   [5:0] cfg_vf_flr_done_wire;
  wire         cfg_link_training_enable_wire;
  wire         cfg_ext_read_data_valid_wire;
  wire   [1:0] cfg_interrupt_pending_wire;
  wire   [3:0] cfg_interrupt_msi_select_wire;
  wire  [63:0] cfg_interrupt_msi_pending_status_wire;
  wire         cfg_config_space_enable_wire;
  wire         cfg_req_pm_transition_l23_ready_wire;
  wire         cfg_hot_reset_in_wire;
  wire   [7:0] cfg_ds_port_number_wire;
  wire   [7:0] cfg_ds_bus_number_wire;
  wire   [4:0] cfg_ds_device_number_wire;
  wire   [2:0] cfg_ds_function_number_wire;
  wire   [4:0] user_tph_stt_address_wire;
  wire   [2:0] user_tph_function_num_wire;
  wire         user_tph_stt_read_enable_wire;
  // Wire Declaration for Outputs that are issolated in Tandem configuration
  wire         cfg_phy_link_down_wire;
  wire   [1:0] cfg_phy_link_status_wire;
  wire   [5:0] cfg_ltssm_state_wire;
  wire         cfg_hot_reset_out_wire;
  // Wire Declarations for tandem_cplr to pcie_top connections
  wire [C_DATA_WIDTH-1:0] s_axis_cc_tdata_wire;
  wire   [KEEP_WIDTH-1:0] s_axis_cc_tkeep_wire;
  wire                    s_axis_cc_tlast_wire;
  wire                    s_axis_cc_tvalid_wire;
  wire  [32:0]            s_axis_cc_tuser_wire;
  wire   [3:0]            s_axis_cc_tready_wire;
  wire                    s_axis_rq_tlast_wire;
  wire [C_DATA_WIDTH-1:0] s_axis_rq_tdata_wire;
  wire  [59:0]            s_axis_rq_tuser_wire;
  wire   [KEEP_WIDTH-1:0] s_axis_rq_tkeep_wire;
  wire   [3:0]            s_axis_rq_tready_wire;
  wire                    s_axis_rq_tvalid_wire;
  wire                    cfg_msg_transmit_done_wire;
  wire                    cfg_msg_transmit_wire;
  wire   [2:0]            cfg_msg_transmit_type_wire;
  wire  [31:0]            cfg_msg_transmit_data_wire;
  wire   [5:0]            pcie_rq_tag_wire;
  wire                    pcie_rq_tag_vld_wire;
  wire   [1:0]            pcie_tfc_nph_av_wire;
  wire   [1:0]            pcie_tfc_npd_av_wire;
  wire   [3:0]            pcie_rq_seq_num_wire;
  wire                    pcie_rq_seq_num_vld_wire;
  wire   [7:0]            cfg_fc_ph_wire;
  wire   [7:0]            cfg_fc_nph_wire;
  wire   [7:0]            cfg_fc_cplh_wire;
  wire  [11:0]            cfg_fc_pd_wire;
  wire  [11:0]            cfg_fc_npd_wire;
  wire  [11:0]            cfg_fc_cpld_wire;
  wire   [2:0]            cfg_fc_sel_wire;
  wire [C_DATA_WIDTH-1:0] m_axis_cq_tdata_wire;
  wire                    m_axis_cq_tlast_wire;
  wire                    m_axis_cq_tvalid_wire;
  wire  [84:0]            m_axis_cq_tuser_wire;
  wire  [KEEP_WIDTH-1:0]  m_axis_cq_tkeep_wire;
  wire  [21:0]            m_axis_cq_tready_wire;
  wire                    pcie_cq_np_req_wire;
  wire   [5:0]            pcie_cq_np_req_count_wire;
  wire [C_DATA_WIDTH-1:0] m_axis_rc_tdata_wire;
  wire                    m_axis_rc_tlast_wire;
  wire                    m_axis_rc_tvalid_wire;
  wire  [74:0]            m_axis_rc_tuser_wire;
  wire  [KEEP_WIDTH-1:0]  m_axis_rc_tkeep_wire;
  wire  [21:0]            m_axis_rc_tready_wire;
  wire                    cfg_msg_received_wire;
  wire   [4:0]            cfg_msg_received_type_wire;
  wire   [7:0]            cfg_msg_received_data_wire;
  wire   [3:0]            cfg_interrupt_int_wire;
  wire  [31:0]            cfg_interrupt_msi_int_wire;
  wire                    cfg_interrupt_msix_int_wire;
  wire [C_DATA_WIDTH-1:0] s_axis_cc_tdata_cplr;
  wire   [KEEP_WIDTH-1:0] s_axis_cc_tkeep_cplr;
  wire                    s_axis_cc_tlast_cplr;
  wire                    s_axis_cc_tvalid_cplr;
  wire  [32:0]            s_axis_cc_tuser_cplr;
  wire                    m_axis_cq_tready_cplr;
  wire                    s_axis_rq_tlast_cplr;
  wire [C_DATA_WIDTH-1:0] s_axis_rq_tdata_cplr;
  wire  [59:0]            s_axis_rq_tuser_cplr;
  wire   [KEEP_WIDTH-1:0] s_axis_rq_tkeep_cplr;
  wire                    s_axis_rq_tvalid_cplr;
  wire                    cfg_msg_transmit_cplr;
  wire   [2:0]            cfg_msg_transmit_type_cplr;
  wire  [31:0]            cfg_msg_transmit_data_cplr;
  wire   [2:0]            cfg_fc_sel_cplr;
  wire                    pcie_cq_np_req_cplr;
  wire                    m_axis_rc_tready_cplr;
  wire                    mmcm_lock;

  // user_app_rdy signals which control the issolation muxes
  wire                         user_app_rdy_req;

// Variables and Parameters for Pipe mode Simulation

  wire  [7:0] pipe_rxeq_user_en          ;
  wire  [143:0] pipe_rxeq_user_txcoeff   ;

  generate
  if(EXT_PIPE_SIM == "FALSE") begin
     assign   pipe_rxeq_user_en      = 8'h00  ;
     assign   pipe_rxeq_user_txcoeff = 144'h0 ;
     assign         pipe_rx0_data_valid =  1'b0;
     assign         pipe_rx1_data_valid =  1'b0;
     assign         pipe_rx2_data_valid =  1'b0;
     assign         pipe_rx3_data_valid =  1'b0;
     assign         pipe_rx4_data_valid =  1'b0;
     assign         pipe_rx5_data_valid =  1'b0;
     assign         pipe_rx6_data_valid =  1'b0;
     assign         pipe_rx7_data_valid =  1'b0;
     assign         pipe_rx0_start_block = 1'b0;
     assign         pipe_rx1_start_block = 1'b0;
     assign         pipe_rx2_start_block = 1'b0;
     assign         pipe_rx3_start_block = 1'b0;
     assign         pipe_rx4_start_block = 1'b0;
     assign         pipe_rx5_start_block = 1'b0;
     assign         pipe_rx6_start_block = 1'b0;
     assign         pipe_rx7_start_block = 1'b0;
     assign         pipe_rx0_syncheader =  2'b0;
     assign         pipe_rx1_syncheader =  2'b0;
     assign         pipe_rx2_syncheader =  2'b0;
     assign         pipe_rx3_syncheader =  2'b0;
     assign         pipe_rx4_syncheader =  2'b0;
     assign         pipe_rx5_syncheader =  2'b0;
     assign         pipe_rx6_syncheader =  2'b0;
     assign         pipe_rx7_syncheader =  2'b0;
  end
  else begin
     assign   pipe_rxeq_user_en      =  8'hff;
     assign   pipe_rxeq_user_txcoeff =  {8{6'd00,6'd30,6'd10}} ;
  end
  endgenerate
  //------------------------------------------------------------------------------------------------------------------//
  // Convert incoming reset from AXI required active High                                                             //
  // to active low as that is what is required by GT and PCIe Block                                                   //
  //------------------------------------------------------------------------------------------------------------------//
  wire sys_rst_n;
  wire PIPE_MMCM_LOCK_IN_wire;
      
  assign sys_rst_n = !sys_reset;
  assign PIPE_MMCM_LOCK_IN_wire = pipe_mmcm_lock_in;

  assign user_lnk_up_int = (cfg_phy_link_status_wire == 2'b11) ? 1'b1 : 1'b0;

  assign sys_or_hot_rst = !sys_rst_n || cfg_hot_reset_out_wire;

  //------------------------------------------------------------------------------------------------------------------//
  // Generate user_reset                                                                                              //
  // Once user reset output of PCIE and Phy Layer is active, de-assert reset                                          //
  // Only assert reset if system reset or hot reset is seen.  Keep AXI backend/user application alive otherwise       //
  //------------------------------------------------------------------------------------------------------------------//
  always @(posedge user_clk or posedge sys_or_hot_rst)
  begin
    if (sys_or_hot_rst) begin
      user_reset_int <= #TCQ 1'b1;
    end else if (cfg_phy_link_status_wire[1] && !cfg_phy_link_down_wire) begin
      user_reset_int <= #TCQ 1'b0;
    end
  end

  // Invert active low reset to active high AXI reset
  always @(posedge user_clk or posedge sys_or_hot_rst)
  begin
    if (sys_or_hot_rst) begin
      user_reset <= #TCQ 1'b1;
    end else begin
      user_reset <= #TCQ user_reset_int;
    end
  end


generate if (EXT_PIPE_SIM == "FALSE")
begin
  axi_pcie3_0_gt_top #(
    .TCQ                                                  ( TCQ ),
    .PL_LINK_CAP_MAX_LINK_WIDTH                           ( PL_LINK_CAP_MAX_LINK_WIDTH ),
    .PL_LINK_CAP_MAX_LINK_SPEED                           ( PL_LINK_CAP_MAX_LINK_SPEED ),
    .REF_CLK_FREQ                                         ( REF_CLK_FREQ ),
    .USER_CLK2_FREQ                                       ( USER_CLK2_FREQ ),
    .USER_CLK_FREQ                                        ( USER_CLK_FREQ ),
    // synthesis translate_off
    .PL_SIM_FAST_LINK_TRAINING                            ( ENABLE_FAST_SIM_TRAINING ),
    // synthesis translate_on
    .PCIE_EXT_CLK                                         ( PCIE_EXT_CLK ),
    .PCIE_EXT_GT_COMMON                                   ( PCIE_EXT_GT_COMMON ),
    .EXT_CH_GT_DRP                                        ( EXT_CH_GT_DRP ),
    .TX_MARGIN_FULL_0                                     ( TX_MARGIN_FULL_0 ),
    .TX_MARGIN_FULL_1                                     ( TX_MARGIN_FULL_1 ),
    .TX_MARGIN_FULL_2                                     ( TX_MARGIN_FULL_2 ),
    .TX_MARGIN_FULL_3                                     ( TX_MARGIN_FULL_3 ),
    .TX_MARGIN_FULL_4                                     ( TX_MARGIN_FULL_4 ),
    .TX_MARGIN_LOW_0                                      ( TX_MARGIN_LOW_0 ), 
    .TX_MARGIN_LOW_1                                      ( TX_MARGIN_LOW_1 ), 
    .TX_MARGIN_LOW_2                                      ( TX_MARGIN_LOW_2 ),
    .TX_MARGIN_LOW_3                                      ( TX_MARGIN_LOW_3 ),
    .TX_MARGIN_LOW_4                                      ( TX_MARGIN_LOW_4 ),
    .PCIE_TXBUF_EN                                        ( PCIE_TXBUF_EN ),
    .PCIE_GT_DEVICE                                       ( PCIE_GT_DEVICE ),
    .PCIE_CHAN_BOND                                       ( PCIE_CHAN_BOND ),
    .PCIE_CHAN_BOND_EN                                    ( PCIE_CHAN_BOND_EN ),
    .PCIE_USE_MODE                                        ( PCIE_USE_MODE ),
    .PCIE_LPM_DFE                                         ( PCIE_LPM_DFE ),
    .PCIE_LINK_SPEED                                      ( PCIE_LINK_SPEED )
  ) gt_top_i(

    //------------------------------------------------------------------------------------//
    // Pipe Per-Link Signals                                                              //
    //------------------------------------------------------------------------------------//
    .pipe_tx_rcvr_det                                    ( pipe_tx_rcvr_det        ),
    .pipe_tx_reset                                       ( pipe_tx_reset           ),
    .pipe_tx_rate                                        ( pipe_tx_rate            ),
    .pipe_tx_deemph                                      ( pipe_tx_deemph          ),
    .pipe_tx_margin                                      ( pipe_tx_margin          ),
    .pipe_tx_swing                                       ( pipe_tx_swing           ),
    .pipe_txeq_fs                                        ( pipe_tx_eqfs            ),
    .pipe_txeq_lf                                        ( pipe_tx_eqlf            ),
    .pipe_rxslide                                        ( pipe_rx_slide           ),
    .pipe_rxsync_done                                    ( pipe_rx_syncdone        ),
    .cfg_ltssm_state                                     ( cfg_ltssm_state_wire    ),

    // Pipe Per-Lane Signals - Lane 0
    .pipe_rx0_char_is_k                                  ( pipe_rx0_char_is_k      ),
    .pipe_rx0_data                                       ( pipe_rx0_data           ),
    .pipe_rx0_valid                                      ( pipe_rx0_valid          ),
    .pipe_rx0_chanisaligned                              ( ),
    .pipe_rx0_status                                     ( pipe_rx0_status         ),
    .pipe_rx0_phy_status                                 ( pipe_rx0_phy_status     ),
    .pipe_rx0_elec_idle                                  ( pipe_rx0_elec_idle      ),
    .pipe_rx0_polarity                                   ( pipe_rx0_polarity       ),
    .pipe_tx0_compliance                                 ( pipe_tx0_compliance     ),
    .pipe_tx0_char_is_k                                  ( pipe_tx0_char_is_k      ),
    .pipe_tx0_data                                       ( pipe_tx0_data           ),
    .pipe_tx0_elec_idle                                  ( pipe_tx0_elec_idle      ),
    .pipe_tx0_powerdown                                  ( pipe_tx0_powerdown      ),
    .pipe_tx0_eqcontrol                                  ( pipe_tx0_eqcontrol      ),
    .pipe_tx0_eqpreset                                   ( pipe_tx0_eqpreset       ),
    .pipe_tx0_eqdeemph                                   ( pipe_tx0_eqdeemph       ),
    .pipe_tx0_eqdone                                     ( pipe_tx0_eqdone         ),
    .pipe_tx0_eqcoeff                                    ( pipe_tx0_eqcoeff        ),
    .pipe_rx0_eqcontrol                                  ( pipe_rx0_eqcontrol      ),
    .pipe_rx0_eqpreset                                   ( pipe_rx0_eqpreset       ),
    .pipe_rx0_eq_lffs                                    ( pipe_rx0_eq_lffs        ),
    .pipe_rx0_eq_txpreset                                ( pipe_rx0_eq_txpreset    ),
    .pipe_rx0_eq_new_txcoeff                             ( pipe_rx0_eq_new_txcoeff ),
    .pipe_rx0_eq_lffs_sel                                ( pipe_rx0_eq_lffs_sel    ),
    .pipe_rx0_eq_adapt_done                              ( pipe_rx0_eq_adapt_done  ),
    .pipe_rx0_eqdone                                     ( pipe_rx0_eqdone         ),

    // Pipe Per-Lane Signals - Lane 1
    .pipe_rx1_char_is_k                                  ( pipe_rx1_char_is_k      ),
    .pipe_rx1_data                                       ( pipe_rx1_data           ),
    .pipe_rx1_valid                                      ( pipe_rx1_valid          ),
    .pipe_rx1_chanisaligned                              ( ),
    .pipe_rx1_status                                     ( pipe_rx1_status         ),
    .pipe_rx1_phy_status                                 ( pipe_rx1_phy_status     ),
    .pipe_rx1_elec_idle                                  ( pipe_rx1_elec_idle      ),
    .pipe_rx1_polarity                                   ( pipe_rx1_polarity       ),
    .pipe_tx1_compliance                                 ( pipe_tx1_compliance     ),
    .pipe_tx1_char_is_k                                  ( pipe_tx1_char_is_k      ),
    .pipe_tx1_data                                       ( pipe_tx1_data           ),
    .pipe_tx1_elec_idle                                  ( pipe_tx1_elec_idle      ),
    .pipe_tx1_powerdown                                  ( pipe_tx1_powerdown      ),
    .pipe_tx1_eqcontrol                                  ( pipe_tx1_eqcontrol      ),
    .pipe_tx1_eqpreset                                   ( pipe_tx1_eqpreset       ),
    .pipe_tx1_eqdeemph                                   ( pipe_tx1_eqdeemph       ),
    .pipe_tx1_eqdone                                     ( pipe_tx1_eqdone         ),
    .pipe_tx1_eqcoeff                                    ( pipe_tx1_eqcoeff        ),
    .pipe_rx1_eqcontrol                                  ( pipe_rx1_eqcontrol      ),
    .pipe_rx1_eqpreset                                   ( pipe_rx1_eqpreset       ),
    .pipe_rx1_eq_lffs                                    ( pipe_rx1_eq_lffs        ),
    .pipe_rx1_eq_txpreset                                ( pipe_rx1_eq_txpreset    ),
    .pipe_rx1_eq_new_txcoeff                             ( pipe_rx1_eq_new_txcoeff ),
    .pipe_rx1_eq_lffs_sel                                ( pipe_rx1_eq_lffs_sel    ),
    .pipe_rx1_eq_adapt_done                              ( pipe_rx1_eq_adapt_done  ),
    .pipe_rx1_eqdone                                     ( pipe_rx1_eqdone         ),

    // Pipe Per-Lane Signals - Lane 2
    .pipe_rx2_char_is_k                                  ( pipe_rx2_char_is_k      ),
    .pipe_rx2_data                                       ( pipe_rx2_data           ),
    .pipe_rx2_valid                                      ( pipe_rx2_valid          ),
    .pipe_rx2_chanisaligned                              ( ),
    .pipe_rx2_status                                     ( pipe_rx2_status         ),
    .pipe_rx2_phy_status                                 ( pipe_rx2_phy_status     ),
    .pipe_rx2_elec_idle                                  ( pipe_rx2_elec_idle      ),
    .pipe_rx2_polarity                                   ( pipe_rx2_polarity       ),
    .pipe_tx2_compliance                                 ( pipe_tx2_compliance     ),
    .pipe_tx2_char_is_k                                  ( pipe_tx2_char_is_k      ),
    .pipe_tx2_data                                       ( pipe_tx2_data           ),
    .pipe_tx2_elec_idle                                  ( pipe_tx2_elec_idle      ),
    .pipe_tx2_powerdown                                  ( pipe_tx2_powerdown      ),
    .pipe_tx2_eqcontrol                                  ( pipe_tx2_eqcontrol      ),
    .pipe_tx2_eqpreset                                   ( pipe_tx2_eqpreset       ),
    .pipe_tx2_eqdeemph                                   ( pipe_tx2_eqdeemph       ),
    .pipe_tx2_eqdone                                     ( pipe_tx2_eqdone         ),
    .pipe_tx2_eqcoeff                                    ( pipe_tx2_eqcoeff        ),
    .pipe_rx2_eqcontrol                                  ( pipe_rx2_eqcontrol      ),
    .pipe_rx2_eqpreset                                   ( pipe_rx2_eqpreset       ),
    .pipe_rx2_eq_lffs                                    ( pipe_rx2_eq_lffs        ),
    .pipe_rx2_eq_txpreset                                ( pipe_rx2_eq_txpreset    ),
    .pipe_rx2_eq_new_txcoeff                             ( pipe_rx2_eq_new_txcoeff ),
    .pipe_rx2_eq_lffs_sel                                ( pipe_rx2_eq_lffs_sel    ),
    .pipe_rx2_eq_adapt_done                              ( pipe_rx2_eq_adapt_done  ),
    .pipe_rx2_eqdone                                     ( pipe_rx2_eqdone         ),

    // Pipe Per-Lane Signals - Lane 3
    .pipe_rx3_char_is_k                                  ( pipe_rx3_char_is_k      ),
    .pipe_rx3_data                                       ( pipe_rx3_data           ),
    .pipe_rx3_valid                                      ( pipe_rx3_valid          ),
    .pipe_rx3_chanisaligned                              ( ),
    .pipe_rx3_status                                     ( pipe_rx3_status         ),
    .pipe_rx3_phy_status                                 ( pipe_rx3_phy_status     ),
    .pipe_rx3_elec_idle                                  ( pipe_rx3_elec_idle      ),
    .pipe_rx3_polarity                                   ( pipe_rx3_polarity       ),
    .pipe_tx3_compliance                                 ( pipe_tx3_compliance     ),
    .pipe_tx3_char_is_k                                  ( pipe_tx3_char_is_k      ),
    .pipe_tx3_data                                       ( pipe_tx3_data           ),
    .pipe_tx3_elec_idle                                  ( pipe_tx3_elec_idle      ),
    .pipe_tx3_powerdown                                  ( pipe_tx3_powerdown      ),
    .pipe_tx3_eqcontrol                                  ( pipe_tx3_eqcontrol      ),
    .pipe_tx3_eqpreset                                   ( pipe_tx3_eqpreset       ),
    .pipe_tx3_eqdeemph                                   ( pipe_tx3_eqdeemph       ),
    .pipe_tx3_eqdone                                     ( pipe_tx3_eqdone         ),
    .pipe_tx3_eqcoeff                                    ( pipe_tx3_eqcoeff        ),
    .pipe_rx3_eqcontrol                                  ( pipe_rx3_eqcontrol      ),
    .pipe_rx3_eqpreset                                   ( pipe_rx3_eqpreset       ),
    .pipe_rx3_eq_lffs                                    ( pipe_rx3_eq_lffs        ),
    .pipe_rx3_eq_txpreset                                ( pipe_rx3_eq_txpreset    ),
    .pipe_rx3_eq_new_txcoeff                             ( pipe_rx3_eq_new_txcoeff ),
    .pipe_rx3_eq_lffs_sel                                ( pipe_rx3_eq_lffs_sel    ),
    .pipe_rx3_eq_adapt_done                              ( pipe_rx3_eq_adapt_done  ),
    .pipe_rx3_eqdone                                     ( pipe_rx3_eqdone         ),

    // Pipe Per-Lane Signals - Lane 4
    .pipe_rx4_char_is_k                                  ( pipe_rx4_char_is_k      ),
    .pipe_rx4_data                                       ( pipe_rx4_data           ),
    .pipe_rx4_valid                                      ( pipe_rx4_valid          ),
    .pipe_rx4_chanisaligned                              ( ),
    .pipe_rx4_status                                     ( pipe_rx4_status         ),
    .pipe_rx4_phy_status                                 ( pipe_rx4_phy_status     ),
    .pipe_rx4_elec_idle                                  ( pipe_rx4_elec_idle      ),
    .pipe_rx4_polarity                                   ( pipe_rx4_polarity       ),
    .pipe_tx4_compliance                                 ( pipe_tx4_compliance     ),
    .pipe_tx4_char_is_k                                  ( pipe_tx4_char_is_k      ),
    .pipe_tx4_data                                       ( pipe_tx4_data           ),
    .pipe_tx4_elec_idle                                  ( pipe_tx4_elec_idle      ),
    .pipe_tx4_powerdown                                  ( pipe_tx4_powerdown      ),
    .pipe_tx4_eqcontrol                                  ( pipe_tx4_eqcontrol      ),
    .pipe_tx4_eqpreset                                   ( pipe_tx4_eqpreset       ),
    .pipe_tx4_eqdeemph                                   ( pipe_tx4_eqdeemph       ),
    .pipe_tx4_eqdone                                     ( pipe_tx4_eqdone         ),
    .pipe_tx4_eqcoeff                                    ( pipe_tx4_eqcoeff        ),
    .pipe_rx4_eqcontrol                                  ( pipe_rx4_eqcontrol      ),
    .pipe_rx4_eqpreset                                   ( pipe_rx4_eqpreset       ),
    .pipe_rx4_eq_lffs                                    ( pipe_rx4_eq_lffs        ),
    .pipe_rx4_eq_txpreset                                ( pipe_rx4_eq_txpreset    ),
    .pipe_rx4_eq_new_txcoeff                             ( pipe_rx4_eq_new_txcoeff ),
    .pipe_rx4_eq_lffs_sel                                ( pipe_rx4_eq_lffs_sel    ),
    .pipe_rx4_eq_adapt_done                              ( pipe_rx4_eq_adapt_done  ),
    .pipe_rx4_eqdone                                     ( pipe_rx4_eqdone         ),

    // Pipe Per-Lane Signals - Lane 5
    .pipe_rx5_char_is_k                                  ( pipe_rx5_char_is_k      ),
    .pipe_rx5_data                                       ( pipe_rx5_data           ),
    .pipe_rx5_valid                                      ( pipe_rx5_valid          ),
    .pipe_rx5_chanisaligned                              ( ),
    .pipe_rx5_status                                     ( pipe_rx5_status         ),
    .pipe_rx5_phy_status                                 ( pipe_rx5_phy_status     ),
    .pipe_rx5_elec_idle                                  ( pipe_rx5_elec_idle      ),
    .pipe_rx5_polarity                                   ( pipe_rx5_polarity       ),
    .pipe_tx5_compliance                                 ( pipe_tx5_compliance     ),
    .pipe_tx5_char_is_k                                  ( pipe_tx5_char_is_k      ),
    .pipe_tx5_data                                       ( pipe_tx5_data           ),
    .pipe_tx5_elec_idle                                  ( pipe_tx5_elec_idle      ),
    .pipe_tx5_powerdown                                  ( pipe_tx5_powerdown      ),
    .pipe_tx5_eqcontrol                                  ( pipe_tx5_eqcontrol      ),
    .pipe_tx5_eqpreset                                   ( pipe_tx5_eqpreset       ),
    .pipe_tx5_eqdeemph                                   ( pipe_tx5_eqdeemph       ),
    .pipe_tx5_eqdone                                     ( pipe_tx5_eqdone         ),
    .pipe_tx5_eqcoeff                                    ( pipe_tx5_eqcoeff        ),
    .pipe_rx5_eqcontrol                                  ( pipe_rx5_eqcontrol      ),
    .pipe_rx5_eqpreset                                   ( pipe_rx5_eqpreset       ),
    .pipe_rx5_eq_lffs                                    ( pipe_rx5_eq_lffs        ),
    .pipe_rx5_eq_txpreset                                ( pipe_rx5_eq_txpreset    ),
    .pipe_rx5_eq_new_txcoeff                             ( pipe_rx5_eq_new_txcoeff ),
    .pipe_rx5_eq_lffs_sel                                ( pipe_rx5_eq_lffs_sel    ),
    .pipe_rx5_eq_adapt_done                              ( pipe_rx5_eq_adapt_done  ),
    .pipe_rx5_eqdone                                     ( pipe_rx5_eqdone         ),

    // Pipe Per-Lane Signals - Lane 6
    .pipe_rx6_char_is_k                                  ( pipe_rx6_char_is_k      ),
    .pipe_rx6_data                                       ( pipe_rx6_data           ),
    .pipe_rx6_valid                                      ( pipe_rx6_valid          ),
    .pipe_rx6_chanisaligned                              ( ),
    .pipe_rx6_status                                     ( pipe_rx6_status         ),
    .pipe_rx6_phy_status                                 ( pipe_rx6_phy_status     ),
    .pipe_rx6_elec_idle                                  ( pipe_rx6_elec_idle      ),
    .pipe_rx6_polarity                                   ( pipe_rx6_polarity       ),
    .pipe_tx6_compliance                                 ( pipe_tx6_compliance     ),
    .pipe_tx6_char_is_k                                  ( pipe_tx6_char_is_k      ),
    .pipe_tx6_data                                       ( pipe_tx6_data           ),
    .pipe_tx6_elec_idle                                  ( pipe_tx6_elec_idle      ),
    .pipe_tx6_powerdown                                  ( pipe_tx6_powerdown      ),
    .pipe_tx6_eqcontrol                                  ( pipe_tx6_eqcontrol      ),
    .pipe_tx6_eqpreset                                   ( pipe_tx6_eqpreset       ),
    .pipe_tx6_eqdeemph                                   ( pipe_tx6_eqdeemph       ),
    .pipe_tx6_eqdone                                     ( pipe_tx6_eqdone         ),
    .pipe_tx6_eqcoeff                                    ( pipe_tx6_eqcoeff        ),
    .pipe_rx6_eqcontrol                                  ( pipe_rx6_eqcontrol      ),
    .pipe_rx6_eqpreset                                   ( pipe_rx6_eqpreset       ),
    .pipe_rx6_eq_lffs                                    ( pipe_rx6_eq_lffs        ),
    .pipe_rx6_eq_txpreset                                ( pipe_rx6_eq_txpreset    ),
    .pipe_rx6_eq_new_txcoeff                             ( pipe_rx6_eq_new_txcoeff ),
    .pipe_rx6_eq_lffs_sel                                ( pipe_rx6_eq_lffs_sel    ),
    .pipe_rx6_eq_adapt_done                              ( pipe_rx6_eq_adapt_done  ),
    .pipe_rx6_eqdone                                     ( pipe_rx6_eqdone         ),

    // Pipe Per-Lane Signals - Lane 7
    .pipe_rx7_char_is_k                                  ( pipe_rx7_char_is_k      ),
    .pipe_rx7_data                                       ( pipe_rx7_data           ),
    .pipe_rx7_valid                                      ( pipe_rx7_valid          ),
    .pipe_rx7_chanisaligned                              ( ),
    .pipe_rx7_status                                     ( pipe_rx7_status         ),
    .pipe_rx7_phy_status                                 ( pipe_rx7_phy_status     ),
    .pipe_rx7_elec_idle                                  ( pipe_rx7_elec_idle      ),
    .pipe_rx7_polarity                                   ( pipe_rx7_polarity       ),
    .pipe_tx7_compliance                                 ( pipe_tx7_compliance     ),
    .pipe_tx7_char_is_k                                  ( pipe_tx7_char_is_k      ),
    .pipe_tx7_data                                       ( pipe_tx7_data           ),
    .pipe_tx7_elec_idle                                  ( pipe_tx7_elec_idle      ),
    .pipe_tx7_powerdown                                  ( pipe_tx7_powerdown      ),
    .pipe_tx7_eqcontrol                                  ( pipe_tx7_eqcontrol      ),
    .pipe_tx7_eqpreset                                   ( pipe_tx7_eqpreset       ),
    .pipe_tx7_eqdeemph                                   ( pipe_tx7_eqdeemph       ),
    .pipe_tx7_eqdone                                     ( pipe_tx7_eqdone         ),
    .pipe_tx7_eqcoeff                                    ( pipe_tx7_eqcoeff        ),
    .pipe_rx7_eqcontrol                                  ( pipe_rx7_eqcontrol      ),
    .pipe_rx7_eqpreset                                   ( pipe_rx7_eqpreset       ),
    .pipe_rx7_eq_lffs                                    ( pipe_rx7_eq_lffs        ),
    .pipe_rx7_eq_txpreset                                ( pipe_rx7_eq_txpreset    ),
    .pipe_rx7_eq_new_txcoeff                             ( pipe_rx7_eq_new_txcoeff ),
    .pipe_rx7_eq_lffs_sel                                ( pipe_rx7_eq_lffs_sel    ),
    .pipe_rx7_eq_adapt_done                              ( pipe_rx7_eq_adapt_done  ),
    .pipe_rx7_eqdone                                     ( pipe_rx7_eqdone         ),

     // Manual PCIe Equalization Control
    .pipe_rxeq_user_en                                    ( pipe_rxeq_user_en[PL_LINK_CAP_MAX_LINK_WIDTH-1:0]          ),
    .pipe_rxeq_user_txcoeff                               ( pipe_rxeq_user_txcoeff[18*PL_LINK_CAP_MAX_LINK_WIDTH-1:0]  ),
    .pipe_rxeq_user_mode                                  ( {PL_LINK_CAP_MAX_LINK_WIDTH{1'b0}}                         ),

    .drp_rdy                                              ( drp_rdy_wire ),
    .drp_do                                               ( drp_do_wire ),
    .drp_clk                                              ( dt_654524_drp_clk ),
    .drp_en                                               ( dt_654524_drp_en ),
    .drp_we                                               ( dt_654524_drp_we ),
    .drp_addr                                             ( dt_654524_drp_addr ),
    .drp_di                                               ( dt_654524_drp_di ),

    // PCI Express signals
    .pci_exp_txn                                         ( pci_exp_txn ),
    .pci_exp_txp                                         ( pci_exp_txp ),
    .pci_exp_rxn                                         ( pci_exp_rxn ),
    .pci_exp_rxp                                         ( pci_exp_rxp ),

    //---------- PIPE Clock & Reset Ports ------------------
    .pipe_clk                                           ( sys_clk ),
    .sys_rst_n                                          ( sys_rst_n ),
    .rec_clk                                            ( rec_clk ),
    .pipe_pclk                                          ( pipe_clk ),
    .core_clk                                           ( core_clk ),
    .user_clk                                           ( user_clk ),
    .phy_rdy                                            ( phy_rdy ),
    .mmcm_lock                                          ( mmcm_lock ),
    .pipe_mmcm_rst_n                                    ( pipe_mmcm_rst_n),

    // ---------- Shared Logic Internal------------------
    .INT_PCLK_OUT_SLAVE                                ( int_pclk_out_slave ),
    .INT_RXUSRCLK_OUT                                  ( int_pipe_rxusrclk_out ),
    .INT_RXOUTCLK_OUT                                  ( int_rxoutclk_out ),
    .INT_DCLK_OUT                                      ( int_dclk_out ),
    .INT_USERCLK1_OUT                                  ( int_userclk1_out ),
    .INT_USERCLK2_OUT                                  ( int_userclk2_out),
    .INT_OOBCLK_OUT                                    ( int_oobclk_out),
    .INT_QPLLLOCK_OUT                                  ( int_qplllock_out ),
    .INT_QPLLOUTCLK_OUT                                ( int_qplloutclk_out ),
    .INT_QPLLOUTREFCLK_OUT                             ( int_qplloutrefclk_out ),
    .INT_PCLK_SEL_SLAVE                                ( int_pclk_sel_slave ),


    // ---------- Shared Logic External------------------

    //External GT COMMON Ports

   .qpll_drp_crscode                                     ( qpll_drp_crscode ),
   .qpll_drp_fsm                                         ( qpll_drp_fsm ),
   .qpll_drp_done                                        ( qpll_drp_done ),
   .qpll_drp_reset                                       ( qpll_drp_reset ),
   .qpll_qplllock                                        ( qpll_qplllock ),
   .qpll_qplloutclk                                      ( qpll_qplloutclk ),
   .qpll_qplloutrefclk                                   ( qpll_qplloutrefclk ),
   .qpll_qplld                                           ( qpll_qplld ),
   .qpll_qpllreset                                       ( qpll_qpllreset ),
   .qpll_drp_clk                                         ( qpll_drp_clk ),
   .qpll_drp_rst_n                                       ( qpll_drp_rst_n ),
   .qpll_drp_ovrd                                        ( qpll_drp_ovrd ),
   .qpll_drp_gen3                                        ( qpll_drp_gen3),
   .qpll_drp_start                                       ( qpll_drp_start ),

    //External Clock Ports 
    .PIPE_PCLK_IN                                       ( pipe_pclk_in ),
    .PIPE_RXUSRCLK_IN                                   ( pipe_rxusrclk_in ),
    .PIPE_RXOUTCLK_IN                                   ( pipe_rxoutclk_in ),
    .PIPE_DCLK_IN                                       ( pipe_dclk_in ),
    .PIPE_USERCLK1_IN                                   ( pipe_userclk1_in ),
    .PIPE_USERCLK2_IN                                   ( pipe_userclk2_in ),
    .PIPE_OOBCLK_IN                                     ( pipe_oobclk_in ),
    .PIPE_MMCM_LOCK_IN                                  ( PIPE_MMCM_LOCK_IN_wire ),
    .PIPE_TXOUTCLK_OUT                                  ( pipe_txoutclk_out ),
    .PIPE_RXOUTCLK_OUT                                  ( pipe_rxoutclk_out ),
    .PIPE_PCLK_SEL_OUT                                  ( pipe_pclk_sel_out ),
    .PIPE_GEN3_OUT                                      ( PIPE_GEN3_OUT_wire ),

    //----------TRANSCEIVER DEBUG EOU------------------
   .ext_ch_gt_drpclk                                     (ext_ch_gt_drpclk),
   .ext_ch_gt_drpaddr                                    (ext_ch_gt_drpaddr),
   .ext_ch_gt_drpen                                      (ext_ch_gt_drpen),
   .ext_ch_gt_drpdi                                      (ext_ch_gt_drpdi),
   .ext_ch_gt_drpwe                                      (ext_ch_gt_drpwe),
   .ext_ch_gt_drpdo                                      (ext_ch_gt_drpdo),
   .ext_ch_gt_drprdy                                     (ext_ch_gt_drprdy),


  //---------- PRBS/Loopback Ports -----------------------
    .PIPE_TXPRBSSEL                                      ( pipe_txprbssel ),
    .PIPE_RXPRBSSEL                                      ( pipe_rxprbssel ),
    .PIPE_TXPRBSFORCEERR                                 ( pipe_txprbsforceerr ),
    .PIPE_RXPRBSCNTRESET                                 ( pipe_rxprbscntreset ),
    .PIPE_LOOPBACK                                       ( pipe_loopback),

    .PIPE_RXPRBSERR                                      ( pipe_rxprbserr),
    .PIPE_TXINHIBIT                                      ( pipe_txinhibit),


 //---------- Transceiver Debug FSM Ports ---------------------------------
    .PIPE_RST_FSM             (pipe_rst_fsm),
    .PIPE_QRST_FSM            (pipe_qrst_fsm),
    .PIPE_RATE_FSM            (pipe_rate_fsm ),
    .PIPE_SYNC_FSM_TX         (pipe_sync_fsm_tx ),
    .PIPE_SYNC_FSM_RX         (pipe_sync_fsm_rx ),
    .PIPE_DRP_FSM             (pipe_drp_fsm ),

    .PIPE_RST_IDLE            (pipe_rst_idle ),
    .PIPE_QRST_IDLE           (pipe_qrst_idle ),
    .PIPE_RATE_IDLE           (pipe_rate_idle ),
    .PIPE_EYESCANDATAERROR    ( pipe_eyescandataerror ),
    .PIPE_RXSTATUS            ( pipe_rxstatus ),
    .PIPE_DMONITOROUT         ( pipe_dmonitorout ),

    .PIPE_CPLL_LOCK           ( pipe_cpll_lock ),
    .PIPE_QPLL_LOCK           ( pipe_qpll_lock ),
    .PIPE_RXPMARESETDONE      ( pipe_rxpmaresetdone ),       
    .PIPE_RXBUFSTATUS         ( pipe_rxbufstatus ),         
    .PIPE_TXPHALIGNDONE       ( pipe_txphaligndone ),       
    .PIPE_TXPHINITDONE        ( pipe_txphinitdone ),        
    .PIPE_TXDLYSRESETDONE     ( pipe_txdlysresetdone ),    
    .PIPE_RXPHALIGNDONE       ( pipe_rxphaligndone ),      
    .PIPE_RXDLYSRESETDONE     ( pipe_rxdlysresetdone ),     
    .PIPE_RXSYNCDONE          ( pipe_rxsyncdone ),       
    .PIPE_RXDISPERR           ( pipe_rxdisperr ),       
    .PIPE_RXNOTINTABLE        ( pipe_rxnotintable ),      
    .PIPE_RXCOMMADET          ( pipe_rxcommadet ),        
    //---------- JTAG Ports --------------------------------
    .PIPE_JTAG_RDY             (gt_ch_drp_rdy),

    //---------- Debug Ports -------------------------------
    .PIPE_DEBUG_0             (pipe_debug_0 ),
    .PIPE_DEBUG_1             (pipe_debug_1 ),
    .PIPE_DEBUG_2             (pipe_debug_2 ),
    .PIPE_DEBUG_3             (pipe_debug_3 ),
    .PIPE_DEBUG_4             (pipe_debug_4 ),
    .PIPE_DEBUG_5             (pipe_debug_5 ),
    .PIPE_DEBUG_6             (pipe_debug_6 ),
    .PIPE_DEBUG_7             (pipe_debug_7 ),
    .PIPE_DEBUG_8             (pipe_debug_8 ),
    .PIPE_DEBUG_9             (pipe_debug_9 ),
    .PIPE_DEBUG               (pipe_debug),

    .CPLLPD                   ({PL_LINK_CAP_MAX_LINK_WIDTH{1'b0}}),
    .TXPD                     ({(PL_LINK_CAP_MAX_LINK_WIDTH*2){1'b0}}),
    .RXPD                     ({(PL_LINK_CAP_MAX_LINK_WIDTH*2){1'b0}}),
    .TXPDELECIDLEMODE         ({PL_LINK_CAP_MAX_LINK_WIDTH{1'b0}}),
    .TXDETECTRX               ({PL_LINK_CAP_MAX_LINK_WIDTH{1'b0}}),
    .TXELECIDLE               ({PL_LINK_CAP_MAX_LINK_WIDTH{1'b0}}),
   .QPLLPD                                         (2'b00),
    .POWERDOWN                (1'b0) 
);

     assign pipe_gen3_out = 1'b0;

 axi_pcie3_0_pcie_top #(
  .TCQ                                                  ( TCQ ),
  .PIPE_SIM_MODE                                        ( EXT_PIPE_SIM ),
  .PIPE_PIPELINE_STAGES                                 ( PIPE_PIPELINE_STAGES ),
  .ARI_CAP_ENABLE                                       ( ARI_CAP_ENABLE ),
  .AXISTEN_IF_CC_ALIGNMENT_MODE                         ( AXISTEN_IF_CC_ALIGNMENT_MODE ),
  .AXISTEN_IF_CC_PARITY_CHK                             ( AXISTEN_IF_CC_PARITY_CHK ),
  .AXISTEN_IF_CQ_ALIGNMENT_MODE                         ( AXISTEN_IF_CQ_ALIGNMENT_MODE ),
  .AXISTEN_IF_ENABLE_CLIENT_TAG                         ( AXISTEN_IF_ENABLE_CLIENT_TAG ),
  .AXISTEN_IF_ENABLE_MSG_ROUTE                          ( AXISTEN_IF_ENABLE_MSG_ROUTE ),
  .AXISTEN_IF_ENABLE_RX_MSG_INTFC                       ( AXISTEN_IF_ENABLE_RX_MSG_INTFC ),
  .AXISTEN_IF_RC_ALIGNMENT_MODE                         ( AXISTEN_IF_RC_ALIGNMENT_MODE ),
  .AXISTEN_IF_RC_STRADDLE                               ( AXISTEN_IF_RC_STRADDLE ),
  .AXISTEN_IF_RQ_ALIGNMENT_MODE                         ( AXISTEN_IF_RQ_ALIGNMENT_MODE ),
  .AXISTEN_IF_RQ_PARITY_CHK                             ( AXISTEN_IF_RQ_PARITY_CHK ),
  .AXISTEN_IF_WIDTH                                     ( AXISTEN_IF_WIDTH ),
  .C_DATA_WIDTH                                         ( C_DATA_WIDTH ),
  .CRM_CORE_CLK_FREQ_500                                ( CRM_CORE_CLK_FREQ_500 ),
  .CRM_USER_CLK_FREQ                                    ( CRM_USER_CLK_FREQ ),
  .DNSTREAM_LINK_NUM                                    ( DNSTREAM_LINK_NUM ),
  .GEN3_PCS_AUTO_REALIGN                                ( GEN3_PCS_AUTO_REALIGN ),
  .GEN3_PCS_RX_ELECIDLE_INTERNAL                        ( GEN3_PCS_RX_ELECIDLE_INTERNAL ),
  .LL_ACK_TIMEOUT                                       ( LL_ACK_TIMEOUT ),
  .LL_ACK_TIMEOUT_EN                                    ( LL_ACK_TIMEOUT_EN ),
  .LL_ACK_TIMEOUT_FUNC                                  ( LL_ACK_TIMEOUT_FUNC ),
  .LL_CPL_FC_UPDATE_TIMER                               ( LL_CPL_FC_UPDATE_TIMER ),
  .LL_CPL_FC_UPDATE_TIMER_OVERRIDE                      ( LL_CPL_FC_UPDATE_TIMER_OVERRIDE ),
  .LL_FC_UPDATE_TIMER                                   ( LL_FC_UPDATE_TIMER ),
  .LL_FC_UPDATE_TIMER_OVERRIDE                          ( LL_FC_UPDATE_TIMER_OVERRIDE ),
  .LL_NP_FC_UPDATE_TIMER                                ( LL_NP_FC_UPDATE_TIMER ),
  .LL_NP_FC_UPDATE_TIMER_OVERRIDE                       ( LL_NP_FC_UPDATE_TIMER_OVERRIDE ),
  .LL_P_FC_UPDATE_TIMER                                 ( LL_P_FC_UPDATE_TIMER ),
  .LL_P_FC_UPDATE_TIMER_OVERRIDE                        ( LL_P_FC_UPDATE_TIMER_OVERRIDE ),
  .LL_REPLAY_TIMEOUT                                    ( LL_REPLAY_TIMEOUT ),
  .LL_REPLAY_TIMEOUT_EN                                 ( LL_REPLAY_TIMEOUT_EN ),
  .LL_REPLAY_TIMEOUT_FUNC                               ( LL_REPLAY_TIMEOUT_FUNC ),
  .LTR_TX_MESSAGE_MINIMUM_INTERVAL                      ( LTR_TX_MESSAGE_MINIMUM_INTERVAL ),
  .LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE            ( LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE ),
  .LTR_TX_MESSAGE_ON_LTR_ENABLE                         ( LTR_TX_MESSAGE_ON_LTR_ENABLE ),
  .PF0_AER_CAP_ECRC_CHECK_CAPABLE                       ( PF0_AER_CAP_ECRC_CHECK_CAPABLE ),
  .PF0_AER_CAP_ECRC_GEN_CAPABLE                         ( PF0_AER_CAP_ECRC_GEN_CAPABLE ),
  .PF0_AER_CAP_NEXTPTR                                  ( PF0_AER_CAP_NEXTPTR ),
  .PF0_ARI_CAP_NEXTPTR                                  ( PF0_ARI_CAP_NEXTPTR ),
  .PF0_ARI_CAP_NEXT_FUNC                                ( PF0_ARI_CAP_NEXT_FUNC ),
  .PF0_ARI_CAP_VER                                      ( PF0_ARI_CAP_VER ),
  .PF0_BAR0_APERTURE_SIZE                               ( PF0_BAR0_APERTURE_SIZE ),
  .PF0_BAR0_CONTROL                                     ( PF0_BAR0_CONTROL ),
  .PF0_BAR1_APERTURE_SIZE                               ( PF0_BAR1_APERTURE_SIZE ),
  .PF0_BAR1_CONTROL                                     ( PF0_BAR1_CONTROL ),
  .PF0_BAR2_APERTURE_SIZE                               ( PF0_BAR2_APERTURE_SIZE ),
  .PF0_BAR2_CONTROL                                     ( PF0_BAR2_CONTROL ),
  .PF0_BAR3_APERTURE_SIZE                               ( PF0_BAR3_APERTURE_SIZE ),
  .PF0_BAR3_CONTROL                                     ( PF0_BAR3_CONTROL ),
  .PF0_BAR4_APERTURE_SIZE                               ( PF0_BAR4_APERTURE_SIZE ),
  .PF0_BAR4_CONTROL                                     ( PF0_BAR4_CONTROL ),
  .PF0_BAR5_APERTURE_SIZE                               ( PF0_BAR5_APERTURE_SIZE ),
  .PF0_BAR5_CONTROL                                     ( PF0_BAR5_CONTROL ),
  .PF0_BIST_REGISTER                                    ( PF0_BIST_REGISTER ),
  .PF0_CAPABILITY_POINTER                               ( PF0_CAPABILITY_POINTER ),
  .PF0_CLASS_CODE                                       ( PF0_CLASS_CODE ),
  .PF0_DEVICE_ID                                        ( PF0_DEVICE_ID ),
  .PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT       ( PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT ),
  .PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT            ( PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT ),
  .PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT            ( PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT ),
  .PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE                     ( PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE ),
  .PF0_DEV_CAP2_LTR_SUPPORT                             ( PF0_DEV_CAP2_LTR_SUPPORT ),
  .PF0_DEV_CAP2_OBFF_SUPPORT                            ( PF0_DEV_CAP2_OBFF_SUPPORT ),
  .PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT                   ( PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT ),
  .PF0_DEV_CAP_ENDPOINT_L0S_LATENCY                     ( PF0_DEV_CAP_ENDPOINT_L0S_LATENCY ),
  .PF0_DEV_CAP_ENDPOINT_L1_LATENCY                      ( PF0_DEV_CAP_ENDPOINT_L1_LATENCY ),
  .PF0_DEV_CAP_EXT_TAG_SUPPORTED                        ( PF0_DEV_CAP_EXT_TAG_SUPPORTED ),
  .PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE             ( PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE ),
  .PF0_DEV_CAP_MAX_PAYLOAD_SIZE                         ( PF0_DEV_CAP_MAX_PAYLOAD_SIZE ),
  .PF0_DPA_CAP_NEXTPTR                                  ( PF0_DPA_CAP_NEXTPTR ),
  .VF0_ARI_CAP_NEXTPTR                                  ( VF0_ARI_CAP_NEXTPTR ),
  .VF1_ARI_CAP_NEXTPTR                                  ( VF1_ARI_CAP_NEXTPTR ),
  .VF2_ARI_CAP_NEXTPTR                                  ( VF2_ARI_CAP_NEXTPTR ),
  .VF3_ARI_CAP_NEXTPTR                                  ( VF3_ARI_CAP_NEXTPTR ),
  .VF4_ARI_CAP_NEXTPTR                                  ( VF4_ARI_CAP_NEXTPTR ),
  .VF5_ARI_CAP_NEXTPTR                                  ( VF5_ARI_CAP_NEXTPTR ),
  .VF0_TPHR_CAP_DEV_SPECIFIC_MODE                       ( VF0_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .VF0_TPHR_CAP_ENABLE                                  ( VF0_TPHR_CAP_ENABLE ),
  .VF0_TPHR_CAP_INT_VEC_MODE                            ( VF0_TPHR_CAP_INT_VEC_MODE ),
  .VF0_TPHR_CAP_NEXTPTR                                 ( VF0_TPHR_CAP_NEXTPTR ),
  .VF0_TPHR_CAP_ST_MODE_SEL                             ( VF0_TPHR_CAP_ST_MODE_SEL ),
  .VF0_TPHR_CAP_ST_TABLE_LOC                            ( VF0_TPHR_CAP_ST_TABLE_LOC ),
  .VF0_TPHR_CAP_ST_TABLE_SIZE                           ( VF0_TPHR_CAP_ST_TABLE_SIZE ),
  .VF0_TPHR_CAP_VER                                     ( VF0_TPHR_CAP_VER ),
  .VF1_TPHR_CAP_DEV_SPECIFIC_MODE                       ( VF1_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .VF1_TPHR_CAP_ENABLE                                  ( VF1_TPHR_CAP_ENABLE ),
  .VF1_TPHR_CAP_INT_VEC_MODE                            ( VF1_TPHR_CAP_INT_VEC_MODE ),
  .VF1_TPHR_CAP_NEXTPTR                                 ( VF1_TPHR_CAP_NEXTPTR ),
  .VF1_TPHR_CAP_ST_MODE_SEL                             ( VF1_TPHR_CAP_ST_MODE_SEL ),
  .VF1_TPHR_CAP_ST_TABLE_LOC                            ( VF1_TPHR_CAP_ST_TABLE_LOC ),
  .VF1_TPHR_CAP_ST_TABLE_SIZE                           ( VF1_TPHR_CAP_ST_TABLE_SIZE ),
  .VF1_TPHR_CAP_VER                                     ( VF1_TPHR_CAP_VER ),
  .VF2_TPHR_CAP_DEV_SPECIFIC_MODE                       ( VF2_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .VF2_TPHR_CAP_ENABLE                                  ( VF2_TPHR_CAP_ENABLE ),
  .VF2_TPHR_CAP_INT_VEC_MODE                            ( VF2_TPHR_CAP_INT_VEC_MODE ),
  .VF2_TPHR_CAP_NEXTPTR                                 ( VF2_TPHR_CAP_NEXTPTR ),
  .VF2_TPHR_CAP_ST_MODE_SEL                             ( VF2_TPHR_CAP_ST_MODE_SEL ),
  .VF2_TPHR_CAP_ST_TABLE_LOC                            ( VF2_TPHR_CAP_ST_TABLE_LOC ),
  .VF2_TPHR_CAP_ST_TABLE_SIZE                           ( VF2_TPHR_CAP_ST_TABLE_SIZE ),
  .VF2_TPHR_CAP_VER                                     ( VF2_TPHR_CAP_VER ),
  .VF3_TPHR_CAP_DEV_SPECIFIC_MODE                       ( VF3_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .VF3_TPHR_CAP_ENABLE                                  ( VF3_TPHR_CAP_ENABLE ),
  .VF3_TPHR_CAP_INT_VEC_MODE                            ( VF3_TPHR_CAP_INT_VEC_MODE ),
  .VF3_TPHR_CAP_NEXTPTR                                 ( VF3_TPHR_CAP_NEXTPTR ),
  .VF3_TPHR_CAP_ST_MODE_SEL                             ( VF3_TPHR_CAP_ST_MODE_SEL ),
  .VF3_TPHR_CAP_ST_TABLE_LOC                            ( VF3_TPHR_CAP_ST_TABLE_LOC ),
  .VF3_TPHR_CAP_ST_TABLE_SIZE                           ( VF3_TPHR_CAP_ST_TABLE_SIZE ),
  .VF3_TPHR_CAP_VER                                     ( VF3_TPHR_CAP_VER ),
  .VF4_TPHR_CAP_DEV_SPECIFIC_MODE                       ( VF4_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .VF4_TPHR_CAP_ENABLE                                  ( VF4_TPHR_CAP_ENABLE ),
  .VF4_TPHR_CAP_INT_VEC_MODE                            ( VF4_TPHR_CAP_INT_VEC_MODE ),
  .VF4_TPHR_CAP_NEXTPTR                                 ( VF4_TPHR_CAP_NEXTPTR ),
  .VF4_TPHR_CAP_ST_MODE_SEL                             ( VF4_TPHR_CAP_ST_MODE_SEL ),
  .VF4_TPHR_CAP_ST_TABLE_LOC                            ( VF4_TPHR_CAP_ST_TABLE_LOC ),
  .VF4_TPHR_CAP_ST_TABLE_SIZE                           ( VF4_TPHR_CAP_ST_TABLE_SIZE ),
  .VF4_TPHR_CAP_VER                                     ( VF4_TPHR_CAP_VER ),
  .VF5_TPHR_CAP_DEV_SPECIFIC_MODE                       ( VF5_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .VF5_TPHR_CAP_ENABLE                                  ( VF5_TPHR_CAP_ENABLE ),
  .VF5_TPHR_CAP_INT_VEC_MODE                            ( VF5_TPHR_CAP_INT_VEC_MODE ),
  .VF5_TPHR_CAP_NEXTPTR                                 ( VF5_TPHR_CAP_NEXTPTR ),
  .VF5_TPHR_CAP_ST_MODE_SEL                             ( VF5_TPHR_CAP_ST_MODE_SEL ),
  .VF5_TPHR_CAP_ST_TABLE_LOC                            ( VF5_TPHR_CAP_ST_TABLE_LOC ),
  .VF5_TPHR_CAP_ST_TABLE_SIZE                           ( VF5_TPHR_CAP_ST_TABLE_SIZE ),
  .VF5_TPHR_CAP_VER                                     ( VF5_TPHR_CAP_VER ),
  .PF0_DPA_CAP_SUB_STATE_CONTROL                        ( PF0_DPA_CAP_SUB_STATE_CONTROL ),
  .PF0_DPA_CAP_SUB_STATE_CONTROL_EN                     ( PF0_DPA_CAP_SUB_STATE_CONTROL_EN ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION0              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION1              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION2              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION3              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION4              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION5              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION6              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION7              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 ),
  .PF0_DPA_CAP_VER                                      ( PF0_DPA_CAP_VER ),
  .PF0_DSN_CAP_NEXTPTR                                  ( PF0_DSN_CAP_NEXTPTR ),
  .PF0_EXPANSION_ROM_APERTURE_SIZE                      ( PF0_EXPANSION_ROM_APERTURE_SIZE ),
  .PF0_EXPANSION_ROM_ENABLE                             ( PF0_EXPANSION_ROM_ENABLE ),
  .PF0_INTERRUPT_LINE                                   ( PF0_INTERRUPT_LINE ),
  .PF0_INTERRUPT_PIN                                    ( PF0_INTERRUPT_PIN ),
  .PF0_LINK_CAP_ASPM_SUPPORT                            ( PF0_LINK_CAP_ASPM_SUPPORT ),
  .PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1            ( PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1 ),
  .PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2            ( PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2 ),
  .PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3            ( PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3 ),
  .PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1                   ( PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1 ),
  .PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2                   ( PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2 ),
  .PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3                   ( PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3 ),
  .PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1             ( PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1 ),
  .PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2             ( PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2 ),
  .PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3             ( PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3 ),
  .PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1                    ( PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1 ),
  .PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2                    ( PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2 ),
  .PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3                    ( PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3 ),
  .PF0_LINK_STATUS_SLOT_CLOCK_CONFIG                    ( PF0_LINK_STATUS_SLOT_CLOCK_CONFIG ),
  .PF0_LTR_CAP_MAX_NOSNOOP_LAT                          ( PF0_LTR_CAP_MAX_NOSNOOP_LAT ),
  .PF0_LTR_CAP_MAX_SNOOP_LAT                            ( PF0_LTR_CAP_MAX_SNOOP_LAT ),
  .PF0_LTR_CAP_NEXTPTR                                  ( PF0_LTR_CAP_NEXTPTR ),
  .PF0_LTR_CAP_VER                                      ( PF0_LTR_CAP_VER ),
  .PF0_MSIX_CAP_NEXTPTR                                 ( PF0_MSIX_CAP_NEXTPTR ),
  .PF0_MSIX_CAP_PBA_BIR                                 ( PF0_MSIX_CAP_PBA_BIR ),
  .PF0_MSIX_CAP_PBA_OFFSET                              ( PF0_MSIX_CAP_PBA_OFFSET ),
  .PF0_MSIX_CAP_TABLE_BIR                               ( PF0_MSIX_CAP_TABLE_BIR ),
  .PF0_MSIX_CAP_TABLE_OFFSET                            ( PF0_MSIX_CAP_TABLE_OFFSET ),
  .PF0_MSIX_CAP_TABLE_SIZE                              ( PF0_MSIX_CAP_TABLE_SIZE ),
  .PF0_MSI_CAP_MULTIMSGCAP                              ( PF0_MSI_CAP_MULTIMSGCAP ),
  .PF0_MSI_CAP_NEXTPTR                                  ( PF0_MSI_CAP_NEXTPTR ),
  .PF0_PB_CAP_NEXTPTR                                   ( PF0_PB_CAP_NEXTPTR ),
  .PF0_PB_CAP_SYSTEM_ALLOCATED                          ( PF0_PB_CAP_SYSTEM_ALLOCATED ),
  .PF0_PB_CAP_VER                                       ( PF0_PB_CAP_VER ),
  .PF0_PM_CAP_ID                                        ( PF0_PM_CAP_ID ),
  .PF0_PM_CAP_NEXTPTR                                   ( PF0_PM_CAP_NEXTPTR ),
  .PF0_PM_CAP_PMESUPPORT_D0                             ( PF0_PM_CAP_PMESUPPORT_D0 ),
  .PF0_PM_CAP_PMESUPPORT_D1                             ( PF0_PM_CAP_PMESUPPORT_D1 ),
  .PF0_PM_CAP_PMESUPPORT_D3HOT                          ( PF0_PM_CAP_PMESUPPORT_D3HOT ),
  .PF0_PM_CAP_SUPP_D1_STATE                             ( PF0_PM_CAP_SUPP_D1_STATE ),
  .PF0_PM_CAP_VER_ID                                    ( PF0_PM_CAP_VER_ID ),
  .PF0_PM_CSR_NOSOFTRESET                               ( PF0_PM_CSR_NOSOFTRESET ),
  .PF0_RBAR_CAP_ENABLE                                  ( PF0_RBAR_CAP_ENABLE ),
  .PF0_RBAR_CAP_INDEX0                                  ( PF0_RBAR_CAP_INDEX0 ),
  .PF0_RBAR_CAP_INDEX1                                  ( PF0_RBAR_CAP_INDEX1 ),
  .PF0_RBAR_CAP_INDEX2                                  ( PF0_RBAR_CAP_INDEX2 ),
  .PF0_RBAR_CAP_NEXTPTR                                 ( PF0_RBAR_CAP_NEXTPTR ),
  .PF0_RBAR_CAP_SIZE0                                   ( PF0_RBAR_CAP_SIZE0 ),
  .PF0_RBAR_CAP_SIZE1                                   ( PF0_RBAR_CAP_SIZE1 ),
  .PF0_RBAR_CAP_SIZE2                                   ( PF0_RBAR_CAP_SIZE2 ),
  .PF0_RBAR_CAP_VER                                     ( PF0_RBAR_CAP_VER ),
  .PF0_RBAR_NUM                                         ( PF0_RBAR_NUM ),
  .PF0_REVISION_ID                                      ( PF0_REVISION_ID ),
  .PF0_SRIOV_BAR0_APERTURE_SIZE                         ( PF0_SRIOV_BAR0_APERTURE_SIZE ),
  .PF0_SRIOV_BAR0_CONTROL                               ( PF0_SRIOV_BAR0_CONTROL ),
  .PF0_SRIOV_BAR1_APERTURE_SIZE                         ( PF0_SRIOV_BAR1_APERTURE_SIZE ),
  .PF0_SRIOV_BAR1_CONTROL                               ( PF0_SRIOV_BAR1_CONTROL ),
  .PF0_SRIOV_BAR2_APERTURE_SIZE                         ( PF0_SRIOV_BAR2_APERTURE_SIZE ),
  .PF0_SRIOV_BAR2_CONTROL                               ( PF0_SRIOV_BAR2_CONTROL ),
  .PF0_SRIOV_BAR3_APERTURE_SIZE                         ( PF0_SRIOV_BAR3_APERTURE_SIZE ),
  .PF0_SRIOV_BAR3_CONTROL                               ( PF0_SRIOV_BAR3_CONTROL ),
  .PF0_SRIOV_BAR4_APERTURE_SIZE                         ( PF0_SRIOV_BAR4_APERTURE_SIZE ),
  .PF0_SRIOV_BAR4_CONTROL                               ( PF0_SRIOV_BAR4_CONTROL ),
  .PF0_SRIOV_BAR5_APERTURE_SIZE                         ( PF0_SRIOV_BAR5_APERTURE_SIZE ),
  .PF0_SRIOV_BAR5_CONTROL                               ( PF0_SRIOV_BAR5_CONTROL ),
  .PF0_SRIOV_CAP_INITIAL_VF                             ( PF0_SRIOV_CAP_INITIAL_VF ),
  .PF0_SRIOV_CAP_NEXTPTR                                ( PF0_SRIOV_CAP_NEXTPTR ),
  .PF0_SRIOV_CAP_TOTAL_VF                               ( PF0_SRIOV_CAP_TOTAL_VF ),
  .PF0_SRIOV_CAP_VER                                    ( PF0_SRIOV_CAP_VER ),
  .PF0_SRIOV_FIRST_VF_OFFSET                            ( PF0_SRIOV_FIRST_VF_OFFSET ),
  .PF0_SRIOV_FUNC_DEP_LINK                              ( PF0_SRIOV_FUNC_DEP_LINK ),
  .PF0_SRIOV_SUPPORTED_PAGE_SIZE                        ( PF0_SRIOV_SUPPORTED_PAGE_SIZE ),
  .PF0_SRIOV_VF_DEVICE_ID                               ( PF0_SRIOV_VF_DEVICE_ID ),
  .PF0_SUBSYSTEM_ID                                     ( PF0_SUBSYSTEM_ID ),
  .PF0_TPHR_CAP_DEV_SPECIFIC_MODE                       ( PF0_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .PF0_TPHR_CAP_ENABLE                                  ( PF0_TPHR_CAP_ENABLE ),
  .PF0_TPHR_CAP_INT_VEC_MODE                            ( PF0_TPHR_CAP_INT_VEC_MODE ),
  .PF0_TPHR_CAP_NEXTPTR                                 ( PF0_TPHR_CAP_NEXTPTR ),
  .PF0_TPHR_CAP_ST_MODE_SEL                             ( PF0_TPHR_CAP_ST_MODE_SEL ),
  .PF0_TPHR_CAP_ST_TABLE_LOC                            ( PF0_TPHR_CAP_ST_TABLE_LOC ),
  .PF0_TPHR_CAP_ST_TABLE_SIZE                           ( PF0_TPHR_CAP_ST_TABLE_SIZE ),
  .PF0_TPHR_CAP_VER                                     ( PF0_TPHR_CAP_VER ),
  .PF0_VC_CAP_NEXTPTR                                   ( PF0_VC_CAP_NEXTPTR ),
  .PF0_VC_CAP_VER                                       ( PF0_VC_CAP_VER ),
  .PF1_AER_CAP_ECRC_CHECK_CAPABLE                       ( PF1_AER_CAP_ECRC_CHECK_CAPABLE ),
  .PF1_AER_CAP_ECRC_GEN_CAPABLE                         ( PF1_AER_CAP_ECRC_GEN_CAPABLE ),
  .PF1_AER_CAP_NEXTPTR                                  ( PF1_AER_CAP_NEXTPTR ),
  .PF1_ARI_CAP_NEXTPTR                                  ( PF1_ARI_CAP_NEXTPTR ),
  .PF1_ARI_CAP_NEXT_FUNC                                ( PF1_ARI_CAP_NEXT_FUNC ),
  .PF1_BAR0_APERTURE_SIZE                               ( PF1_BAR0_APERTURE_SIZE ),
  .PF1_BAR0_CONTROL                                     ( PF1_BAR0_CONTROL ),
  .PF1_BAR1_APERTURE_SIZE                               ( PF1_BAR1_APERTURE_SIZE ),
  .PF1_BAR1_CONTROL                                     ( PF1_BAR1_CONTROL ),
  .PF1_BAR2_APERTURE_SIZE                               ( PF1_BAR2_APERTURE_SIZE ),
  .PF1_BAR2_CONTROL                                     ( PF1_BAR2_CONTROL ),
  .PF1_BAR3_APERTURE_SIZE                               ( PF1_BAR3_APERTURE_SIZE ),
  .PF1_BAR3_CONTROL                                     ( PF1_BAR3_CONTROL ),
  .PF1_BAR4_APERTURE_SIZE                               ( PF1_BAR4_APERTURE_SIZE ),
  .PF1_BAR4_CONTROL                                     ( PF1_BAR4_CONTROL ),
  .PF1_BAR5_APERTURE_SIZE                               ( PF1_BAR5_APERTURE_SIZE ),
  .PF1_BAR5_CONTROL                                     ( PF1_BAR5_CONTROL ),
  .PF1_BIST_REGISTER                                    ( PF1_BIST_REGISTER ),
  .PF1_CAPABILITY_POINTER                               ( PF1_CAPABILITY_POINTER ),
  .PF1_CLASS_CODE                                       ( PF1_CLASS_CODE ),
  .PF1_DEVICE_ID                                        ( PF1_DEVICE_ID ),
  .PF1_DEV_CAP_MAX_PAYLOAD_SIZE                         ( PF1_DEV_CAP_MAX_PAYLOAD_SIZE ),
  .PF1_DPA_CAP_NEXTPTR                                  ( PF1_DPA_CAP_NEXTPTR ),
  .PF1_DPA_CAP_SUB_STATE_CONTROL                        ( PF1_DPA_CAP_SUB_STATE_CONTROL ),
  .PF1_DPA_CAP_SUB_STATE_CONTROL_EN                     ( PF1_DPA_CAP_SUB_STATE_CONTROL_EN ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION0              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION1              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION2              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION3              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION4              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION5              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION6              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION7              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 ),
  .PF1_DPA_CAP_VER                                      ( PF1_DPA_CAP_VER ),
  .PF1_DSN_CAP_NEXTPTR                                  ( PF1_DSN_CAP_NEXTPTR ),
  .PF1_EXPANSION_ROM_APERTURE_SIZE                      ( PF1_EXPANSION_ROM_APERTURE_SIZE ),
  .PF1_EXPANSION_ROM_ENABLE                             ( PF1_EXPANSION_ROM_ENABLE ),
  .PF1_INTERRUPT_LINE                                   ( PF1_INTERRUPT_LINE ),
  .PF1_INTERRUPT_PIN                                    ( PF1_INTERRUPT_PIN ),
  .PF1_MSIX_CAP_NEXTPTR                                 ( PF1_MSIX_CAP_NEXTPTR ),
  .PF1_MSIX_CAP_PBA_BIR                                 ( PF1_MSIX_CAP_PBA_BIR ),
  .PF1_MSIX_CAP_PBA_OFFSET                              ( PF1_MSIX_CAP_PBA_OFFSET ),
  .PF1_MSIX_CAP_TABLE_BIR                               ( PF1_MSIX_CAP_TABLE_BIR ),
  .PF1_MSIX_CAP_TABLE_OFFSET                            ( PF1_MSIX_CAP_TABLE_OFFSET ),
  .PF1_MSIX_CAP_TABLE_SIZE                              ( PF1_MSIX_CAP_TABLE_SIZE ),
  .PF1_MSI_CAP_MULTIMSGCAP                              ( PF1_MSI_CAP_MULTIMSGCAP ),
  .PF1_MSI_CAP_NEXTPTR                                  ( PF1_MSI_CAP_NEXTPTR ),
  .PF1_PB_CAP_NEXTPTR                                   ( PF1_PB_CAP_NEXTPTR ),
  .PF1_PB_CAP_SYSTEM_ALLOCATED                          ( PF1_PB_CAP_SYSTEM_ALLOCATED ),
  .PF1_PB_CAP_VER                                       ( PF1_PB_CAP_VER ),
  .PF1_PM_CAP_ID                                        ( PF1_PM_CAP_ID ),
  .PF1_PM_CAP_NEXTPTR                                   ( PF1_PM_CAP_NEXTPTR ),
  .PF1_PM_CAP_VER_ID                                    ( PF1_PM_CAP_VER_ID ),
  .PF1_RBAR_CAP_ENABLE                                  ( PF1_RBAR_CAP_ENABLE ),
  .PF1_RBAR_CAP_INDEX0                                  ( PF1_RBAR_CAP_INDEX0 ),
  .PF1_RBAR_CAP_INDEX1                                  ( PF1_RBAR_CAP_INDEX1 ),
  .PF1_RBAR_CAP_INDEX2                                  ( PF1_RBAR_CAP_INDEX2 ),
  .PF1_RBAR_CAP_NEXTPTR                                 ( PF1_RBAR_CAP_NEXTPTR ),
  .PF1_RBAR_CAP_SIZE0                                   ( PF1_RBAR_CAP_SIZE0 ),
  .PF1_RBAR_CAP_SIZE1                                   ( PF1_RBAR_CAP_SIZE1 ),
  .PF1_RBAR_CAP_SIZE2                                   ( PF1_RBAR_CAP_SIZE2 ),
  .PF1_RBAR_CAP_VER                                     ( PF1_RBAR_CAP_VER ),
  .PF1_RBAR_NUM                                         ( PF1_RBAR_NUM ),
  .PF1_REVISION_ID                                      ( PF1_REVISION_ID ),
  .PF1_SRIOV_BAR0_APERTURE_SIZE                         ( PF1_SRIOV_BAR0_APERTURE_SIZE ),
  .PF1_SRIOV_BAR0_CONTROL                               ( PF1_SRIOV_BAR0_CONTROL ),
  .PF1_SRIOV_BAR1_APERTURE_SIZE                         ( PF1_SRIOV_BAR1_APERTURE_SIZE ),
  .PF1_SRIOV_BAR1_CONTROL                               ( PF1_SRIOV_BAR1_CONTROL ),
  .PF1_SRIOV_BAR2_APERTURE_SIZE                         ( PF1_SRIOV_BAR2_APERTURE_SIZE ),
  .PF1_SRIOV_BAR2_CONTROL                               ( PF1_SRIOV_BAR2_CONTROL ),
  .PF1_SRIOV_BAR3_APERTURE_SIZE                         ( PF1_SRIOV_BAR3_APERTURE_SIZE ),
  .PF1_SRIOV_BAR3_CONTROL                               ( PF1_SRIOV_BAR3_CONTROL ),
  .PF1_SRIOV_BAR4_APERTURE_SIZE                         ( PF1_SRIOV_BAR4_APERTURE_SIZE ),
  .PF1_SRIOV_BAR4_CONTROL                               ( PF1_SRIOV_BAR4_CONTROL ),
  .PF1_SRIOV_BAR5_APERTURE_SIZE                         ( PF1_SRIOV_BAR5_APERTURE_SIZE ),
  .PF1_SRIOV_BAR5_CONTROL                               ( PF1_SRIOV_BAR5_CONTROL ),
  .PF1_SRIOV_CAP_INITIAL_VF                             ( PF1_SRIOV_CAP_INITIAL_VF ),
  .PF1_SRIOV_CAP_NEXTPTR                                ( PF1_SRIOV_CAP_NEXTPTR ),
  .PF1_SRIOV_CAP_TOTAL_VF                               ( PF1_SRIOV_CAP_TOTAL_VF ),
  .PF1_SRIOV_CAP_VER                                    ( PF1_SRIOV_CAP_VER ),
  .PF1_SRIOV_FIRST_VF_OFFSET                            ( PF1_SRIOV_FIRST_VF_OFFSET ),
  .PF1_SRIOV_FUNC_DEP_LINK                              ( PF1_SRIOV_FUNC_DEP_LINK ),
  .PF1_SRIOV_SUPPORTED_PAGE_SIZE                        ( PF1_SRIOV_SUPPORTED_PAGE_SIZE ),
  .PF1_SRIOV_VF_DEVICE_ID                               ( PF1_SRIOV_VF_DEVICE_ID ),
  .PF1_SUBSYSTEM_ID                                     ( PF1_SUBSYSTEM_ID ),
  .PF1_TPHR_CAP_DEV_SPECIFIC_MODE                       ( PF1_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .PF1_TPHR_CAP_ENABLE                                  ( PF1_TPHR_CAP_ENABLE ),
  .PF1_TPHR_CAP_INT_VEC_MODE                            ( PF1_TPHR_CAP_INT_VEC_MODE ),
  .PF1_TPHR_CAP_NEXTPTR                                 ( PF1_TPHR_CAP_NEXTPTR ),
  .PF1_TPHR_CAP_ST_MODE_SEL                             ( PF1_TPHR_CAP_ST_MODE_SEL ),
  .PF1_TPHR_CAP_ST_TABLE_LOC                            ( PF1_TPHR_CAP_ST_TABLE_LOC ),
  .PF1_TPHR_CAP_ST_TABLE_SIZE                           ( PF1_TPHR_CAP_ST_TABLE_SIZE ),
  .PF1_TPHR_CAP_VER                                     ( PF1_TPHR_CAP_VER ),
  .PL_DISABLE_EI_INFER_IN_L0                            ( PL_DISABLE_EI_INFER_IN_L0 ),
  .PL_DISABLE_GEN3_DC_BALANCE                           ( PL_DISABLE_GEN3_DC_BALANCE ),
  .PL_DISABLE_SCRAMBLING                                ( PL_DISABLE_SCRAMBLING ),
  .PL_DISABLE_UPCONFIG_CAPABLE                          ( PL_DISABLE_UPCONFIG_CAPABLE ),
  .PL_EQ_ADAPT_DISABLE_COEFF_CHECK                      ( PL_EQ_ADAPT_DISABLE_COEFF_CHECK ),
  .PL_EQ_ADAPT_DISABLE_PRESET_CHECK                     ( PL_EQ_ADAPT_DISABLE_PRESET_CHECK ),
  .PL_EQ_ADAPT_ITER_COUNT                               ( PL_EQ_ADAPT_ITER_COUNT ),
  .PL_EQ_ADAPT_REJECT_RETRY_COUNT                       ( PL_EQ_ADAPT_REJECT_RETRY_COUNT ),
  .PL_EQ_BYPASS_PHASE23                                 ( PL_EQ_BYPASS_PHASE23 ),
  .PL_EQ_SHORT_ADAPT_PHASE                              ( PL_EQ_SHORT_ADAPT_PHASE ),
  .PL_LANE0_EQ_CONTROL                                  ( PL_LANE0_EQ_CONTROL ),
  .PL_LANE1_EQ_CONTROL                                  ( PL_LANE1_EQ_CONTROL ),
  .PL_LANE2_EQ_CONTROL                                  ( PL_LANE2_EQ_CONTROL ),
  .PL_LANE3_EQ_CONTROL                                  ( PL_LANE3_EQ_CONTROL ),
  .PL_LANE4_EQ_CONTROL                                  ( PL_LANE4_EQ_CONTROL ),
  .PL_LANE5_EQ_CONTROL                                  ( PL_LANE5_EQ_CONTROL ),
  .PL_LANE6_EQ_CONTROL                                  ( PL_LANE6_EQ_CONTROL ),
  .PL_LANE7_EQ_CONTROL                                  ( PL_LANE7_EQ_CONTROL ),
  .PL_LINK_CAP_MAX_LINK_SPEED                           ( PL_LINK_CAP_MAX_LINK_SPEED ),
  .PL_LINK_CAP_MAX_LINK_WIDTH                           ( PL_LINK_CAP_MAX_LINK_WIDTH ),
  .PL_N_FTS_COMCLK_GEN1                                 ( PL_N_FTS_COMCLK_GEN1 ),
  .PL_N_FTS_COMCLK_GEN2                                 ( PL_N_FTS_COMCLK_GEN2 ),
  .PL_N_FTS_COMCLK_GEN3                                 ( PL_N_FTS_COMCLK_GEN3 ),
  .PL_N_FTS_GEN1                                        ( PL_N_FTS_GEN1 ),
  .PL_N_FTS_GEN2                                        ( PL_N_FTS_GEN2 ),
  .PL_N_FTS_GEN3                                        ( PL_N_FTS_GEN3 ),
  // synthesis translate_off
  .PL_SIM_FAST_LINK_TRAINING                            ( ENABLE_FAST_SIM_TRAINING ),
  // synthesis translate_on
  .PL_UPSTREAM_FACING                                   ( PL_UPSTREAM_FACING ),
  .PM_ASPML0S_TIMEOUT                                   ( PM_ASPML0S_TIMEOUT ),
  .PM_ASPML1_ENTRY_DELAY                                ( PM_ASPML1_ENTRY_DELAY ),
  .PM_ENABLE_SLOT_POWER_CAPTURE                         ( PM_ENABLE_SLOT_POWER_CAPTURE ),
  .PM_L1_REENTRY_DELAY                                  ( PM_L1_REENTRY_DELAY ),
  .PM_PME_SERVICE_TIMEOUT_DELAY                         ( PM_PME_SERVICE_TIMEOUT_DELAY ),
  .PM_PME_TURNOFF_ACK_DELAY                             ( PM_PME_TURNOFF_ACK_DELAY ),
  .SIM_VERSION                                          ( SIM_VERSION ),
  .SPARE_BIT0                                           ( SPARE_BIT0 ),
  .SPARE_BIT1                                           ( SPARE_BIT1 ),
  .SPARE_BIT2                                           ( SPARE_BIT2 ),
  .SPARE_BIT3                                           ( SPARE_BIT3 ),
  .SPARE_BIT4                                           ( SPARE_BIT4 ),
  .SPARE_BIT5                                           ( SPARE_BIT5 ),
  .SPARE_BIT6                                           ( SPARE_BIT6 ),
  .SPARE_BIT7                                           ( SPARE_BIT7 ),
  .SPARE_BIT8                                           ( SPARE_BIT8 ),
  .SPARE_BYTE0                                          ( SPARE_BYTE0 ),
  .SPARE_BYTE1                                          ( SPARE_BYTE1 ),
  .SPARE_BYTE2                                          ( SPARE_BYTE2 ),
  .SPARE_BYTE3                                          ( SPARE_BYTE3 ),
  .SPARE_WORD0                                          ( SPARE_WORD0 ),
  .SPARE_WORD1                                          ( SPARE_WORD1 ),
  .SPARE_WORD2                                          ( SPARE_WORD2 ),
  .SPARE_WORD3                                          ( SPARE_WORD3 ),
  .SRIOV_CAP_ENABLE                                     ( SRIOV_CAP_ENABLE ),
  .TL_COMPL_TIMEOUT_REG0                                ( TL_COMPL_TIMEOUT_REG0 ),
  .TL_COMPL_TIMEOUT_REG1                                ( TL_COMPL_TIMEOUT_REG1 ),
  .TL_CREDITS_CD                                        ( TL_CREDITS_CD ),
  .TL_CREDITS_CH                                        ( TL_CREDITS_CH ),
  .TL_CREDITS_NPD                                       ( TL_CREDITS_NPD ),
  .TL_CREDITS_NPH                                       ( TL_CREDITS_NPH ),
  .TL_CREDITS_PD                                        ( TL_CREDITS_PD ),
  .TL_CREDITS_PH                                        ( TL_CREDITS_PH ),
  .TL_ENABLE_MESSAGE_RID_CHECK_ENABLE                   ( TL_ENABLE_MESSAGE_RID_CHECK_ENABLE ),
  .TL_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE              ( TL_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE ),
  .TL_LEGACY_CFG_EXTEND_INTERFACE_ENABLE                ( TL_LEGACY_CFG_EXTEND_INTERFACE_ENABLE ),
  .TL_LEGACY_MODE_ENABLE                                ( TL_LEGACY_MODE_ENABLE ),
  .TL_PF_ENABLE_REG                                     ( TL_PF_ENABLE_REG ),
  .TL_TAG_MGMT_ENABLE                                   ( TL_TAG_MGMT_ENABLE ),
  .VF0_CAPABILITY_POINTER                               ( VF0_CAPABILITY_POINTER ),
  .VF0_MSIX_CAP_PBA_BIR                                 ( VF0_MSIX_CAP_PBA_BIR ),
  .VF0_MSIX_CAP_PBA_OFFSET                              ( VF0_MSIX_CAP_PBA_OFFSET ),
  .VF0_MSIX_CAP_TABLE_BIR                               ( VF0_MSIX_CAP_TABLE_BIR ),
  .VF0_MSIX_CAP_TABLE_OFFSET                            ( VF0_MSIX_CAP_TABLE_OFFSET ),
  .VF0_MSIX_CAP_TABLE_SIZE                              ( VF0_MSIX_CAP_TABLE_SIZE ),
  .VF0_MSI_CAP_MULTIMSGCAP                              ( VF0_MSI_CAP_MULTIMSGCAP ),
  .VF0_PM_CAP_ID                                        ( VF0_PM_CAP_ID ),
  .VF0_PM_CAP_NEXTPTR                                   ( VF0_PM_CAP_NEXTPTR ),
  .VF0_PM_CAP_VER_ID                                    ( VF0_PM_CAP_VER_ID ),
  .VF1_MSIX_CAP_PBA_BIR                                 ( VF1_MSIX_CAP_PBA_BIR ),
  .VF1_MSIX_CAP_PBA_OFFSET                              ( VF1_MSIX_CAP_PBA_OFFSET ),
  .VF1_MSIX_CAP_TABLE_BIR                               ( VF1_MSIX_CAP_TABLE_BIR ),
  .VF1_MSIX_CAP_TABLE_OFFSET                            ( VF1_MSIX_CAP_TABLE_OFFSET ),
  .VF1_MSIX_CAP_TABLE_SIZE                              ( VF1_MSIX_CAP_TABLE_SIZE ),
  .VF1_MSI_CAP_MULTIMSGCAP                              ( VF1_MSI_CAP_MULTIMSGCAP ),
  .VF1_PM_CAP_ID                                        ( VF1_PM_CAP_ID ),
  .VF1_PM_CAP_NEXTPTR                                   ( VF1_PM_CAP_NEXTPTR ),
  .VF1_PM_CAP_VER_ID                                    ( VF1_PM_CAP_VER_ID ),
  .VF2_MSIX_CAP_PBA_BIR                                 ( VF2_MSIX_CAP_PBA_BIR ),
  .VF2_MSIX_CAP_PBA_OFFSET                              ( VF2_MSIX_CAP_PBA_OFFSET ),
  .VF2_MSIX_CAP_TABLE_BIR                               ( VF2_MSIX_CAP_TABLE_BIR ),
  .VF2_MSIX_CAP_TABLE_OFFSET                            ( VF2_MSIX_CAP_TABLE_OFFSET ),
  .VF2_MSIX_CAP_TABLE_SIZE                              ( VF2_MSIX_CAP_TABLE_SIZE ),
  .VF2_MSI_CAP_MULTIMSGCAP                              ( VF2_MSI_CAP_MULTIMSGCAP ),
  .VF2_PM_CAP_ID                                        ( VF2_PM_CAP_ID ),
  .VF2_PM_CAP_NEXTPTR                                   ( VF2_PM_CAP_NEXTPTR ),
  .VF2_PM_CAP_VER_ID                                    ( VF2_PM_CAP_VER_ID ),
  .VF3_MSIX_CAP_PBA_BIR                                 ( VF3_MSIX_CAP_PBA_BIR ),
  .VF3_MSIX_CAP_PBA_OFFSET                              ( VF3_MSIX_CAP_PBA_OFFSET ),
  .VF3_MSIX_CAP_TABLE_BIR                               ( VF3_MSIX_CAP_TABLE_BIR ),
  .VF3_MSIX_CAP_TABLE_OFFSET                            ( VF3_MSIX_CAP_TABLE_OFFSET ),
  .VF3_MSIX_CAP_TABLE_SIZE                              ( VF3_MSIX_CAP_TABLE_SIZE ),
  .VF3_MSI_CAP_MULTIMSGCAP                              ( VF3_MSI_CAP_MULTIMSGCAP ),
  .VF3_PM_CAP_ID                                        ( VF3_PM_CAP_ID ),
  .VF3_PM_CAP_NEXTPTR                                   ( VF3_PM_CAP_NEXTPTR ),
  .VF3_PM_CAP_VER_ID                                    ( VF3_PM_CAP_VER_ID ),
  .VF4_MSIX_CAP_PBA_BIR                                 ( VF4_MSIX_CAP_PBA_BIR ),
  .VF4_MSIX_CAP_PBA_OFFSET                              ( VF4_MSIX_CAP_PBA_OFFSET ),
  .VF4_MSIX_CAP_TABLE_BIR                               ( VF4_MSIX_CAP_TABLE_BIR ),
  .VF4_MSIX_CAP_TABLE_OFFSET                            ( VF4_MSIX_CAP_TABLE_OFFSET ),
  .VF4_MSIX_CAP_TABLE_SIZE                              ( VF4_MSIX_CAP_TABLE_SIZE ),
  .VF4_MSI_CAP_MULTIMSGCAP                              ( VF4_MSI_CAP_MULTIMSGCAP ),
  .VF4_PM_CAP_ID                                        ( VF4_PM_CAP_ID ),
  .VF4_PM_CAP_NEXTPTR                                   ( VF4_PM_CAP_NEXTPTR ),
  .VF4_PM_CAP_VER_ID                                    ( VF4_PM_CAP_VER_ID ),
  .VF5_MSIX_CAP_PBA_BIR                                 ( VF5_MSIX_CAP_PBA_BIR ),
  .VF5_MSIX_CAP_PBA_OFFSET                              ( VF5_MSIX_CAP_PBA_OFFSET ),
  .VF5_MSIX_CAP_TABLE_BIR                               ( VF5_MSIX_CAP_TABLE_BIR ),
  .VF5_MSIX_CAP_TABLE_OFFSET                            ( VF5_MSIX_CAP_TABLE_OFFSET ),
  .VF5_MSIX_CAP_TABLE_SIZE                              ( VF5_MSIX_CAP_TABLE_SIZE ),
  .VF5_MSI_CAP_MULTIMSGCAP                              ( VF5_MSI_CAP_MULTIMSGCAP ),
  .VF5_PM_CAP_ID                                        ( VF5_PM_CAP_ID ),
  .VF5_PM_CAP_NEXTPTR                                   ( VF5_PM_CAP_NEXTPTR ),
  .VF5_PM_CAP_VER_ID                                    ( VF5_PM_CAP_VER_ID ),
  .IMPL_TARGET                                          ( IMPL_TARGET ),
  .NO_DECODE_LOGIC                                      ( NO_DECODE_LOGIC ),
  .INTERFACE_SPEED                                      ( INTERFACE_SPEED ),
  .COMPLETION_SPACE                                     ( COMPLETION_SPACE )
) pcie_top_i (
  .core_clk                                             ( core_clk ),                     // I

  .rec_clk                                              ( rec_clk ),                      // I
  .user_clk                                             ( user_clk ),                     // I

  .pipe_clk                                             ( pipe_clk ),                     // I

  .phy_rdy                                              ( phy_rdy ),                      // I
  .mmcm_lock                                            ( mmcm_lock ),                    // I

  .s_axis_rq_tlast                                      ( s_axis_rq_tlast_wire ),         // I
  .s_axis_rq_tdata                                      ( s_axis_rq_tdata_wire ),         // I
  .s_axis_rq_tuser                                      ( s_axis_rq_tuser_wire ),         // I
  .s_axis_rq_tkeep                                      ( s_axis_rq_tkeep_wire ),         // I
  .s_axis_rq_tready                                     ( s_axis_rq_tready_wire ),        // O
  .s_axis_rq_tvalid                                     ( s_axis_rq_tvalid_wire ),        // I

  .m_axis_rc_tdata                                      ( m_axis_rc_tdata_wire ),         // O
  .m_axis_rc_tuser                                      ( m_axis_rc_tuser_wire ),         // O
  .m_axis_rc_tlast                                      ( m_axis_rc_tlast_wire ),         // O
  .m_axis_rc_tkeep                                      ( m_axis_rc_tkeep_wire ),         // O
  .m_axis_rc_tvalid                                     ( m_axis_rc_tvalid_wire ),        // O
  .m_axis_rc_tready                                     ( m_axis_rc_tready_wire ),        // I

  .m_axis_cq_tdata                                      ( m_axis_cq_tdata_wire ),         // O
  .m_axis_cq_tuser                                      ( m_axis_cq_tuser_wire ),         // O
  .m_axis_cq_tlast                                      ( m_axis_cq_tlast_wire ),         // O
  .m_axis_cq_tkeep                                      ( m_axis_cq_tkeep_wire ),         // O
  .m_axis_cq_tvalid                                     ( m_axis_cq_tvalid_wire ),        // O
  .m_axis_cq_tready                                     ( m_axis_cq_tready_wire ),        // I

  .s_axis_cc_tdata                                      ( s_axis_cc_tdata_wire ),         // I
  .s_axis_cc_tuser                                      ( s_axis_cc_tuser_wire ),         // I
  .s_axis_cc_tlast                                      ( s_axis_cc_tlast_wire ),         // I
  .s_axis_cc_tkeep                                      ( s_axis_cc_tkeep_wire ),         // I
  .s_axis_cc_tvalid                                     ( s_axis_cc_tvalid_wire ),        // I
  .s_axis_cc_tready                                     ( s_axis_cc_tready_wire ),        // O

  .pcie_rq_seq_num                                      ( pcie_rq_seq_num_wire ),         // O
  .pcie_rq_seq_num_vld                                  ( pcie_rq_seq_num_vld_wire ),     // O
  .pcie_rq_tag                                          ( pcie_rq_tag_wire ),             // O
  .pcie_rq_tag_vld                                      ( pcie_rq_tag_vld_wire ),         // O

  .pcie_tfc_nph_av                                      ( pcie_tfc_nph_av_wire ),         // O
  .pcie_tfc_npd_av                                      ( pcie_tfc_npd_av_wire ),         // O
  .pcie_cq_np_req                                       ( pcie_cq_np_req_wire ),          // I
  .pcie_cq_np_req_count                                 ( pcie_cq_np_req_count_wire ),    // O

  .cfg_mgmt_addr                                        ( cfg_mgmt_addr ),                // I
  .cfg_mgmt_write                                       ( cfg_mgmt_write_wire ),          // I
  .cfg_mgmt_write_data                                  ( cfg_mgmt_write_data ),          // I
  .cfg_mgmt_byte_enable                                 ( cfg_mgmt_byte_enable ),         // I
  .cfg_mgmt_read                                        ( cfg_mgmt_read_wire ),           // I
  .cfg_mgmt_read_data                                   ( cfg_mgmt_read_data ),           // O
  .cfg_mgmt_read_write_done                             ( cfg_mgmt_read_write_done ),     // O
  .cfg_mgmt_type1_cfg_reg_access                        ( cfg_mgmt_type1_cfg_reg_access ),// I

  .cfg_phy_link_down                                    ( cfg_phy_link_down_wire ),       // O
  .cfg_phy_link_status                                  ( cfg_phy_link_status_wire ),     // O
  .cfg_negotiated_width                                 ( cfg_negotiated_width ),         // O
  .cfg_current_speed                                    ( cfg_current_speed ),            // O
  .cfg_max_payload                                      ( cfg_max_payload ),              // O
  .cfg_max_read_req                                     ( cfg_max_read_req ),             // O
  .cfg_function_status                                  ( cfg_function_status ),          // O
  .cfg_function_power_state                             ( cfg_function_power_state ),     // O
  .cfg_vf_status                                        ( cfg_vf_status ),                // O
  .cfg_vf_power_state                                   ( cfg_vf_power_state ),           // O
  .cfg_link_power_state                                 ( cfg_link_power_state ),         // O

  .cfg_err_cor_out                                      ( cfg_err_cor_out ),              // O
  .cfg_err_nonfatal_out                                 ( cfg_err_nonfatal_out ),         // O
  .cfg_err_fatal_out                                    ( cfg_err_fatal_out ),            // O
  .cfg_local_error                                      ( cfg_local_error ),              // O
  .cfg_ltr_enable                                       ( cfg_ltr_enable ),               // O
  .cfg_ltssm_state                                      ( cfg_ltssm_state_wire ),         // O
  .cfg_rcb_status                                       ( cfg_rcb_status ),               // O
  .cfg_dpa_substate_change                              ( cfg_dpa_substate_change ),      // O
  .cfg_obff_enable                                      ( cfg_obff_enable ),              // O
  .cfg_pl_status_change                                 ( cfg_pl_status_change ),         // O

  .cfg_tph_requester_enable                             ( cfg_tph_requester_enable ),     // O
  .cfg_tph_st_mode                                      ( cfg_tph_st_mode ),              // O
  .cfg_vf_tph_requester_enable                          ( cfg_vf_tph_requester_enable ),  // O
  .cfg_vf_tph_st_mode                                   ( cfg_vf_tph_st_mode ),           // O

  .cfg_msg_received                                     ( cfg_msg_received_wire ),        // O
  .cfg_msg_received_data                                ( cfg_msg_received_data_wire ),   // O
  .cfg_msg_received_type                                ( cfg_msg_received_type_wire ),   // O

  .cfg_msg_transmit                                     ( cfg_msg_transmit_wire ),        // I
  .cfg_msg_transmit_type                                ( cfg_msg_transmit_type_wire ),   // I
  .cfg_msg_transmit_data                                ( cfg_msg_transmit_data_wire ),   // I
  .cfg_msg_transmit_done                                ( cfg_msg_transmit_done_wire ),   // O

  .cfg_fc_ph                                            ( cfg_fc_ph_wire ),               // O
  .cfg_fc_pd                                            ( cfg_fc_pd_wire ),               // O
  .cfg_fc_nph                                           ( cfg_fc_nph_wire ),              // O
  .cfg_fc_npd                                           ( cfg_fc_npd_wire ),              // O
  .cfg_fc_cplh                                          ( cfg_fc_cplh_wire ),             // O
  .cfg_fc_cpld                                          ( cfg_fc_cpld_wire ),             // O
  .cfg_fc_sel                                           ( cfg_fc_sel_wire ),              // I

  .cfg_per_func_status_control                          ( cfg_per_func_status_control_wire ),     // I
  .cfg_per_func_status_data                             ( cfg_per_func_status_data ),             // O
  .cfg_per_function_number                              ( cfg_per_function_number ),              // I
  .cfg_per_function_output_request                      ( cfg_per_function_output_request_wire ), // I
  .cfg_per_function_update_done                         ( cfg_per_function_update_done ),         // O

  .cfg_dsn                                              ( cfg_dsn_wire ),                         // I
  .cfg_power_state_change_ack                           ( cfg_power_state_change_ack_wire ),      // I
  .cfg_power_state_change_interrupt                     ( cfg_power_state_change_interrupt ),     // O
  .cfg_err_cor_in                                       ( cfg_err_cor_in_wire ),                  // I
  .cfg_err_uncor_in                                     ( cfg_err_uncor_in_wire ),                // I

  .cfg_flr_in_process                                   ( cfg_flr_in_process ),                   // O
  .cfg_flr_done                                         ( cfg_flr_done_wire ),                    // I
  .cfg_vf_flr_in_process                                ( cfg_vf_flr_in_process ),                // O
  .cfg_vf_flr_done                                      ( cfg_vf_flr_done_wire ),                 // I

  .cfg_link_training_enable                             ( cfg_link_training_enable_wire ),        // I

  .cfg_interrupt_int                                    ( cfg_interrupt_int_wire ),               // I
  .cfg_interrupt_pending                                ( cfg_interrupt_pending_wire ),           // I
  .cfg_interrupt_sent                                   ( cfg_interrupt_sent ),                   // O

  .cfg_interrupt_msi_enable                             ( cfg_interrupt_msi_enable ),             // O
  .cfg_interrupt_msi_vf_enable                          ( cfg_interrupt_msi_vf_enable ),          // O
  .cfg_interrupt_msi_mmenable                           ( cfg_interrupt_msi_mmenable ),           // O
  .cfg_interrupt_msi_mask_update                        ( cfg_interrupt_msi_mask_update ),        // O
  .cfg_interrupt_msi_data                               ( cfg_interrupt_msi_data ),               // O
  .cfg_interrupt_msi_select                             ( cfg_interrupt_msi_select_wire ),        // I
  .cfg_interrupt_msi_int                                ( cfg_interrupt_msi_int_wire ),           // I
  .cfg_interrupt_msi_pending_status                     ( cfg_interrupt_msi_pending_status_wire ),// I
  .cfg_interrupt_msi_sent                               ( cfg_interrupt_msi_sent ),               // O
  .cfg_interrupt_msi_fail                               ( cfg_interrupt_msi_fail ),               // O

  .cfg_interrupt_msix_enable                            ( cfg_interrupt_msix_enable ),            // O
  .cfg_interrupt_msix_mask                              ( cfg_interrupt_msix_mask ),              // O
  .cfg_interrupt_msix_vf_enable                         ( cfg_interrupt_msix_vf_enable ),         // O
  .cfg_interrupt_msix_vf_mask                           ( cfg_interrupt_msix_vf_mask ),           // O
  .cfg_interrupt_msix_data                              ( cfg_interrupt_msix_data ),              // I
  .cfg_interrupt_msix_address                           ( cfg_interrupt_msix_address ),           // I
  .cfg_interrupt_msix_int                               ( cfg_interrupt_msix_int_wire ),          // I
  .cfg_interrupt_msix_sent                              ( cfg_interrupt_msix_sent ),              // O
  .cfg_interrupt_msix_fail                              ( cfg_interrupt_msix_fail ),              // O

  .cfg_interrupt_msi_attr                               ( cfg_interrupt_msi_attr ),               // I
  .cfg_interrupt_msi_tph_present                        ( cfg_interrupt_msi_tph_present ),        // I
  .cfg_interrupt_msi_tph_type                           ( cfg_interrupt_msi_tph_type ),           // I
  .cfg_interrupt_msi_tph_st_tag                         ( cfg_interrupt_msi_tph_st_tag ),         // I
  .cfg_interrupt_msi_function_number                    ( cfg_interrupt_msi_function_number ),    // I

  .cfg_ext_read_received                                ( cfg_ext_read_received ),                // O
  .cfg_ext_write_received                               ( cfg_ext_write_received ),               // O
  .cfg_ext_register_number                              ( cfg_ext_register_number ),              // O
  .cfg_ext_function_number                              ( cfg_ext_function_number ),              // O
  .cfg_ext_write_data                                   ( cfg_ext_write_data ),                   // O
  .cfg_ext_write_byte_enable                            ( cfg_ext_write_byte_enable ),            // O
  .cfg_ext_read_data                                    ( cfg_ext_read_data ),                    // I
  .cfg_ext_read_data_valid                              ( cfg_ext_read_data_valid_wire ),         // I

  .cfg_dev_id                                           ( cfg_dev_id ),                           // I
  .cfg_vend_id                                          ( cfg_vend_id ),                          // I
  .cfg_rev_id                                           ( cfg_rev_id ),                           // I
  .cfg_subsys_id                                        ( cfg_subsys_id ),                        // I
  .cfg_subsys_vend_id                                   ( cfg_subsys_vend_id ),                   // I

  .cfg_hot_reset_out                                    ( cfg_hot_reset_out_wire ),               // O
  .cfg_config_space_enable                              ( cfg_config_space_enable_wire ),         // I
  .cfg_req_pm_transition_l23_ready                      ( cfg_req_pm_transition_l23_ready_wire ), // I

  .cfg_hot_reset_in                                     ( cfg_hot_reset_in_wire ),                // I

  .cfg_ds_port_number                                   ( cfg_ds_port_number_wire ),              // I
  .cfg_ds_bus_number                                    ( cfg_ds_bus_number_wire ),               // I
  .cfg_ds_device_number                                 ( cfg_ds_device_number_wire ),            // I
  .cfg_ds_function_number                               ( cfg_ds_function_number_wire ),          // I

  .user_tph_stt_address                                 ( user_tph_stt_address_wire ),            // I
  .user_tph_function_num                                ( user_tph_function_num_wire ),           // I
  .user_tph_stt_read_data                               ( user_tph_stt_read_data ),               // O
  .user_tph_stt_read_data_valid                         ( user_tph_stt_read_data_valid ),         // O
  .user_tph_stt_read_enable                             ( user_tph_stt_read_enable_wire ),        // I

  .drp_rdy                                              ( drp_rdy_wire ),                         // O
  .drp_do                                               ( drp_do_wire ),                          // O
  .drp_clk                                              ( drp_clk_wire ),                         // I
  .drp_en                                               ( drp_en_wire ),                          // I
  .drp_we                                               ( drp_we_wire ),                          // I
  .drp_addr                                             ( drp_addr_wire ),                        // I
  .drp_di                                               ( drp_di_wire ),                          // I

  .pipe_tx_reset_gt                                     ( pipe_tx_reset ),
  .pipe_rx0_polarity_gt                                 ( pipe_rx0_polarity ),
  .pipe_rx1_polarity_gt                                 ( pipe_rx1_polarity ),
  .pipe_rx2_polarity_gt                                 ( pipe_rx2_polarity ),
  .pipe_rx3_polarity_gt                                 ( pipe_rx3_polarity ),
  .pipe_rx4_polarity_gt                                 ( pipe_rx4_polarity ),
  .pipe_rx5_polarity_gt                                 ( pipe_rx5_polarity ),
  .pipe_rx6_polarity_gt                                 ( pipe_rx6_polarity ),
  .pipe_rx7_polarity_gt                                 ( pipe_rx7_polarity ),

  .pipe_tx0_compliance_gt                               ( pipe_tx0_compliance ),
  .pipe_tx1_compliance_gt                               ( pipe_tx1_compliance ),
  .pipe_tx2_compliance_gt                               ( pipe_tx2_compliance ),
  .pipe_tx3_compliance_gt                               ( pipe_tx3_compliance ),
  .pipe_tx4_compliance_gt                               ( pipe_tx4_compliance ),
  .pipe_tx5_compliance_gt                               ( pipe_tx5_compliance ),
  .pipe_tx6_compliance_gt                               ( pipe_tx6_compliance ),
  .pipe_tx7_compliance_gt                               ( pipe_tx7_compliance ),

  .pipe_tx0_data_valid_gt                               ( ),
  .pipe_tx1_data_valid_gt                               ( ),
  .pipe_tx2_data_valid_gt                               ( ),
  .pipe_tx3_data_valid_gt                               ( ),
  .pipe_tx4_data_valid_gt                               ( ),
  .pipe_tx5_data_valid_gt                               ( ),
  .pipe_tx6_data_valid_gt                               ( ),
  .pipe_tx7_data_valid_gt                               ( ),

  .pipe_tx0_elec_idle_gt                                ( pipe_tx0_elec_idle ),
  .pipe_tx1_elec_idle_gt                                ( pipe_tx1_elec_idle ),
  .pipe_tx2_elec_idle_gt                                ( pipe_tx2_elec_idle ),
  .pipe_tx3_elec_idle_gt                                ( pipe_tx3_elec_idle ),
  .pipe_tx4_elec_idle_gt                                ( pipe_tx4_elec_idle ),
  .pipe_tx5_elec_idle_gt                                ( pipe_tx5_elec_idle ),
  .pipe_tx6_elec_idle_gt                                ( pipe_tx6_elec_idle ),
  .pipe_tx7_elec_idle_gt                                ( pipe_tx7_elec_idle ),

  .pipe_tx0_start_block_gt                              ( ),
  .pipe_tx1_start_block_gt                              ( ),
  .pipe_tx2_start_block_gt                              ( ),
  .pipe_tx3_start_block_gt                              ( ),
  .pipe_tx4_start_block_gt                              ( ),
  .pipe_tx5_start_block_gt                              ( ),
  .pipe_tx6_start_block_gt                              ( ),
  .pipe_tx7_start_block_gt                              ( ),

  .pipe_tx_deemph_gt                                    ( pipe_tx_deemph ),
  .pipe_tx_rcvr_det_gt                                  ( pipe_tx_rcvr_det ),
  .pipe_tx_rate_gt                                      ( pipe_tx_rate ),
  .pipe_tx_margin_gt                                    ( pipe_tx_margin ),
  .pipe_tx_swing_gt                                     ( pipe_tx_swing ),
  .pipe_tx_eqfs_gt                                      ( pipe_tx_eqfs ),
  .pipe_tx_eqlf_gt                                      ( pipe_tx_eqlf ),

  .pipe_rx0_eqcontrol_gt                                ( pipe_rx0_eqcontrol ),
  .pipe_rx1_eqcontrol_gt                                ( pipe_rx1_eqcontrol ),
  .pipe_rx2_eqcontrol_gt                                ( pipe_rx2_eqcontrol ),
  .pipe_rx3_eqcontrol_gt                                ( pipe_rx3_eqcontrol ),
  .pipe_rx4_eqcontrol_gt                                ( pipe_rx4_eqcontrol ),
  .pipe_rx5_eqcontrol_gt                                ( pipe_rx5_eqcontrol ),
  .pipe_rx6_eqcontrol_gt                                ( pipe_rx6_eqcontrol ),
  .pipe_rx7_eqcontrol_gt                                ( pipe_rx7_eqcontrol ),

  .pipe_tx0_char_is_k_gt                                ( pipe_tx0_char_is_k ),
  .pipe_tx1_char_is_k_gt                                ( pipe_tx1_char_is_k ),
  .pipe_tx2_char_is_k_gt                                ( pipe_tx2_char_is_k ),
  .pipe_tx3_char_is_k_gt                                ( pipe_tx3_char_is_k ),
  .pipe_tx4_char_is_k_gt                                ( pipe_tx4_char_is_k ),
  .pipe_tx5_char_is_k_gt                                ( pipe_tx5_char_is_k ),
  .pipe_tx6_char_is_k_gt                                ( pipe_tx6_char_is_k ),
  .pipe_tx7_char_is_k_gt                                ( pipe_tx7_char_is_k ),

  .pipe_tx0_eqcontrol_gt                                ( pipe_tx0_eqcontrol ),
  .pipe_tx1_eqcontrol_gt                                ( pipe_tx1_eqcontrol ),
  .pipe_tx2_eqcontrol_gt                                ( pipe_tx2_eqcontrol ),
  .pipe_tx3_eqcontrol_gt                                ( pipe_tx3_eqcontrol ),
  .pipe_tx4_eqcontrol_gt                                ( pipe_tx4_eqcontrol ),
  .pipe_tx5_eqcontrol_gt                                ( pipe_tx5_eqcontrol ),
  .pipe_tx6_eqcontrol_gt                                ( pipe_tx6_eqcontrol ),
  .pipe_tx7_eqcontrol_gt                                ( pipe_tx7_eqcontrol ),

  .pipe_tx0_powerdown_gt                                ( pipe_tx0_powerdown ),
  .pipe_tx1_powerdown_gt                                ( pipe_tx1_powerdown ),
  .pipe_tx2_powerdown_gt                                ( pipe_tx2_powerdown ),
  .pipe_tx3_powerdown_gt                                ( pipe_tx3_powerdown ),
  .pipe_tx4_powerdown_gt                                ( pipe_tx4_powerdown ),
  .pipe_tx5_powerdown_gt                                ( pipe_tx5_powerdown ),
  .pipe_tx6_powerdown_gt                                ( pipe_tx6_powerdown ),
  .pipe_tx7_powerdown_gt                                ( pipe_tx7_powerdown ),

  .pipe_tx0_syncheader_gt                               ( ),
  .pipe_tx1_syncheader_gt                               ( ),
  .pipe_tx2_syncheader_gt                               ( ),
  .pipe_tx3_syncheader_gt                               ( ),
  .pipe_tx4_syncheader_gt                               ( ),
  .pipe_tx5_syncheader_gt                               ( ),
  .pipe_tx6_syncheader_gt                               ( ),
  .pipe_tx7_syncheader_gt                               ( ),

  .pipe_rx0_eqpreset_gt                                 ( pipe_rx0_eqpreset ),
  .pipe_rx1_eqpreset_gt                                 ( pipe_rx1_eqpreset ),
  .pipe_rx2_eqpreset_gt                                 ( pipe_rx2_eqpreset ),
  .pipe_rx3_eqpreset_gt                                 ( pipe_rx3_eqpreset ),
  .pipe_rx4_eqpreset_gt                                 ( pipe_rx4_eqpreset ),
  .pipe_rx5_eqpreset_gt                                 ( pipe_rx5_eqpreset ),
  .pipe_rx6_eqpreset_gt                                 ( pipe_rx6_eqpreset ),
  .pipe_rx7_eqpreset_gt                                 ( pipe_rx7_eqpreset ),

  .pipe_tx0_data_gt                                     ( pipe_tx0_data ),
  .pipe_tx1_data_gt                                     ( pipe_tx1_data ),
  .pipe_tx2_data_gt                                     ( pipe_tx2_data ),
  .pipe_tx3_data_gt                                     ( pipe_tx3_data ),
  .pipe_tx4_data_gt                                     ( pipe_tx4_data ),
  .pipe_tx5_data_gt                                     ( pipe_tx5_data ),
  .pipe_tx6_data_gt                                     ( pipe_tx6_data ),
  .pipe_tx7_data_gt                                     ( pipe_tx7_data ),

  .pipe_rx0_eqlp_txpreset_gt                            ( pipe_rx0_eq_txpreset ),
  .pipe_rx1_eqlp_txpreset_gt                            ( pipe_rx1_eq_txpreset ),
  .pipe_rx2_eqlp_txpreset_gt                            ( pipe_rx2_eq_txpreset ),
  .pipe_rx3_eqlp_txpreset_gt                            ( pipe_rx3_eq_txpreset ),
  .pipe_rx4_eqlp_txpreset_gt                            ( pipe_rx4_eq_txpreset ),
  .pipe_rx5_eqlp_txpreset_gt                            ( pipe_rx5_eq_txpreset ),
  .pipe_rx6_eqlp_txpreset_gt                            ( pipe_rx6_eq_txpreset ),
  .pipe_rx7_eqlp_txpreset_gt                            ( pipe_rx7_eq_txpreset ),

  .pipe_tx0_eqpreset_gt                                 ( pipe_tx0_eqpreset ),
  .pipe_tx1_eqpreset_gt                                 ( pipe_tx1_eqpreset ),
  .pipe_tx2_eqpreset_gt                                 ( pipe_tx2_eqpreset ),
  .pipe_tx3_eqpreset_gt                                 ( pipe_tx3_eqpreset ),
  .pipe_tx4_eqpreset_gt                                 ( pipe_tx4_eqpreset ),
  .pipe_tx5_eqpreset_gt                                 ( pipe_tx5_eqpreset ),
  .pipe_tx6_eqpreset_gt                                 ( pipe_tx6_eqpreset ),
  .pipe_tx7_eqpreset_gt                                 ( pipe_tx7_eqpreset ),

  .pipe_rx0_eqlp_lffs_gt                                ( pipe_rx0_eq_lffs ),
  .pipe_rx1_eqlp_lffs_gt                                ( pipe_rx1_eq_lffs ),
  .pipe_rx2_eqlp_lffs_gt                                ( pipe_rx2_eq_lffs ),
  .pipe_rx3_eqlp_lffs_gt                                ( pipe_rx3_eq_lffs ),
  .pipe_rx4_eqlp_lffs_gt                                ( pipe_rx4_eq_lffs ),
  .pipe_rx5_eqlp_lffs_gt                                ( pipe_rx5_eq_lffs ),
  .pipe_rx6_eqlp_lffs_gt                                ( pipe_rx6_eq_lffs ),
  .pipe_rx7_eqlp_lffs_gt                                ( pipe_rx7_eq_lffs ),

  .pipe_tx0_eqdeemph_gt                                 ( pipe_tx0_eqdeemph ),
  .pipe_tx1_eqdeemph_gt                                 ( pipe_tx1_eqdeemph ),
  .pipe_tx2_eqdeemph_gt                                 ( pipe_tx2_eqdeemph ),
  .pipe_tx3_eqdeemph_gt                                 ( pipe_tx3_eqdeemph ),
  .pipe_tx4_eqdeemph_gt                                 ( pipe_tx4_eqdeemph ),
  .pipe_tx5_eqdeemph_gt                                 ( pipe_tx5_eqdeemph ),
  .pipe_tx6_eqdeemph_gt                                 ( pipe_tx6_eqdeemph ),
  .pipe_tx7_eqdeemph_gt                                 ( pipe_tx7_eqdeemph ),

  .pipe_rx_slide_gt                                     ( pipe_rx_slide ),

  .pipe_rx0_data_valid_gt                               ( pipe_rx0_data_valid ),
  .pipe_rx1_data_valid_gt                               ( pipe_rx1_data_valid ),
  .pipe_rx2_data_valid_gt                               ( pipe_rx2_data_valid ),
  .pipe_rx3_data_valid_gt                               ( pipe_rx3_data_valid ),
  .pipe_rx4_data_valid_gt                               ( pipe_rx4_data_valid ),
  .pipe_rx5_data_valid_gt                               ( pipe_rx5_data_valid ),
  .pipe_rx6_data_valid_gt                               ( pipe_rx6_data_valid ),
  .pipe_rx7_data_valid_gt                               ( pipe_rx7_data_valid ),

  .pipe_rx0_elec_idle_gt                                ( pipe_rx0_elec_idle ),
  .pipe_rx1_elec_idle_gt                                ( pipe_rx1_elec_idle ),
  .pipe_rx2_elec_idle_gt                                ( pipe_rx2_elec_idle ),
  .pipe_rx3_elec_idle_gt                                ( pipe_rx3_elec_idle ),
  .pipe_rx4_elec_idle_gt                                ( pipe_rx4_elec_idle ),
  .pipe_rx5_elec_idle_gt                                ( pipe_rx5_elec_idle ),
  .pipe_rx6_elec_idle_gt                                ( pipe_rx6_elec_idle ),
  .pipe_rx7_elec_idle_gt                                ( pipe_rx7_elec_idle ),

  .pipe_rx0_eqdone_gt                                   ( pipe_rx0_eqdone ),
  .pipe_rx1_eqdone_gt                                   ( pipe_rx1_eqdone ),
  .pipe_rx2_eqdone_gt                                   ( pipe_rx2_eqdone ),
  .pipe_rx3_eqdone_gt                                   ( pipe_rx3_eqdone ),
  .pipe_rx4_eqdone_gt                                   ( pipe_rx4_eqdone ),
  .pipe_rx5_eqdone_gt                                   ( pipe_rx5_eqdone ),
  .pipe_rx6_eqdone_gt                                   ( pipe_rx6_eqdone ),
  .pipe_rx7_eqdone_gt                                   ( pipe_rx7_eqdone ),

  .pipe_rx0_eqlp_adaptdone_gt                           ( pipe_rx0_eq_adapt_done ),
  .pipe_rx1_eqlp_adaptdone_gt                           ( pipe_rx1_eq_adapt_done ),
  .pipe_rx2_eqlp_adaptdone_gt                           ( pipe_rx2_eq_adapt_done ),
  .pipe_rx3_eqlp_adaptdone_gt                           ( pipe_rx3_eq_adapt_done ),
  .pipe_rx4_eqlp_adaptdone_gt                           ( pipe_rx4_eq_adapt_done ),
  .pipe_rx5_eqlp_adaptdone_gt                           ( pipe_rx5_eq_adapt_done ),
  .pipe_rx6_eqlp_adaptdone_gt                           ( pipe_rx6_eq_adapt_done ),
  .pipe_rx7_eqlp_adaptdone_gt                           ( pipe_rx7_eq_adapt_done ),

  .pipe_rx0_eqlp_lffs_sel_gt                            ( pipe_rx0_eq_lffs_sel ),
  .pipe_rx1_eqlp_lffs_sel_gt                            ( pipe_rx1_eq_lffs_sel ),
  .pipe_rx2_eqlp_lffs_sel_gt                            ( pipe_rx2_eq_lffs_sel ),
  .pipe_rx3_eqlp_lffs_sel_gt                            ( pipe_rx3_eq_lffs_sel ),
  .pipe_rx4_eqlp_lffs_sel_gt                            ( pipe_rx4_eq_lffs_sel ),
  .pipe_rx5_eqlp_lffs_sel_gt                            ( pipe_rx5_eq_lffs_sel ),
  .pipe_rx6_eqlp_lffs_sel_gt                            ( pipe_rx6_eq_lffs_sel ),
  .pipe_rx7_eqlp_lffs_sel_gt                            ( pipe_rx7_eq_lffs_sel ),

  .pipe_rx0_phy_status_gt                               ( pipe_rx0_phy_status ),
  .pipe_rx1_phy_status_gt                               ( pipe_rx1_phy_status ),
  .pipe_rx2_phy_status_gt                               ( pipe_rx2_phy_status ),
  .pipe_rx3_phy_status_gt                               ( pipe_rx3_phy_status ),
  .pipe_rx4_phy_status_gt                               ( pipe_rx4_phy_status ),
  .pipe_rx5_phy_status_gt                               ( pipe_rx5_phy_status ),
  .pipe_rx6_phy_status_gt                               ( pipe_rx6_phy_status ),
  .pipe_rx7_phy_status_gt                               ( pipe_rx7_phy_status ),

  .pipe_rx0_start_block_gt                              ( pipe_rx0_start_block ),
  .pipe_rx1_start_block_gt                              ( pipe_rx1_start_block ),
  .pipe_rx2_start_block_gt                              ( pipe_rx2_start_block ),
  .pipe_rx3_start_block_gt                              ( pipe_rx3_start_block ),
  .pipe_rx4_start_block_gt                              ( pipe_rx4_start_block ),
  .pipe_rx5_start_block_gt                              ( pipe_rx5_start_block ),
  .pipe_rx6_start_block_gt                              ( pipe_rx6_start_block ),
  .pipe_rx7_start_block_gt                              ( pipe_rx7_start_block ),

  .pipe_rx0_valid_gt                                    ( pipe_rx0_valid ),
  .pipe_rx1_valid_gt                                    ( pipe_rx1_valid ),
  .pipe_rx2_valid_gt                                    ( pipe_rx2_valid ),
  .pipe_rx3_valid_gt                                    ( pipe_rx3_valid ),
  .pipe_rx4_valid_gt                                    ( pipe_rx4_valid ),
  .pipe_rx5_valid_gt                                    ( pipe_rx5_valid ),
  .pipe_rx6_valid_gt                                    ( pipe_rx6_valid ),
  .pipe_rx7_valid_gt                                    ( pipe_rx7_valid ),

  .pipe_tx0_eqdone_gt                                   ( pipe_tx0_eqdone ),
  .pipe_tx1_eqdone_gt                                   ( pipe_tx1_eqdone ),
  .pipe_tx2_eqdone_gt                                   ( pipe_tx2_eqdone ),
  .pipe_tx3_eqdone_gt                                   ( pipe_tx3_eqdone ),
  .pipe_tx4_eqdone_gt                                   ( pipe_tx4_eqdone ),
  .pipe_tx5_eqdone_gt                                   ( pipe_tx5_eqdone ),
  .pipe_tx6_eqdone_gt                                   ( pipe_tx6_eqdone ),
  .pipe_tx7_eqdone_gt                                   ( pipe_tx7_eqdone ),

  .pipe_rx0_eqlp_new_txcoef_forpreset_gt                ( pipe_rx0_eq_new_txcoeff ),
  .pipe_rx1_eqlp_new_txcoef_forpreset_gt                ( pipe_rx1_eq_new_txcoeff ),
  .pipe_rx2_eqlp_new_txcoef_forpreset_gt                ( pipe_rx2_eq_new_txcoeff ),
  .pipe_rx3_eqlp_new_txcoef_forpreset_gt                ( pipe_rx3_eq_new_txcoeff ),
  .pipe_rx4_eqlp_new_txcoef_forpreset_gt                ( pipe_rx4_eq_new_txcoeff ),
  .pipe_rx5_eqlp_new_txcoef_forpreset_gt                ( pipe_rx5_eq_new_txcoeff ),
  .pipe_rx6_eqlp_new_txcoef_forpreset_gt                ( pipe_rx6_eq_new_txcoeff ),
  .pipe_rx7_eqlp_new_txcoef_forpreset_gt                ( pipe_rx7_eq_new_txcoeff ),

  .pipe_tx0_eqcoeff_gt                                  ( pipe_tx0_eqcoeff ),
  .pipe_tx1_eqcoeff_gt                                  ( pipe_tx1_eqcoeff ),
  .pipe_tx2_eqcoeff_gt                                  ( pipe_tx2_eqcoeff ),
  .pipe_tx3_eqcoeff_gt                                  ( pipe_tx3_eqcoeff ),
  .pipe_tx4_eqcoeff_gt                                  ( pipe_tx4_eqcoeff ),
  .pipe_tx5_eqcoeff_gt                                  ( pipe_tx5_eqcoeff ),
  .pipe_tx6_eqcoeff_gt                                  ( pipe_tx6_eqcoeff ),
  .pipe_tx7_eqcoeff_gt                                  ( pipe_tx7_eqcoeff ),

  .pipe_rx0_char_is_k_gt                                ( pipe_rx0_char_is_k ),
  .pipe_rx1_char_is_k_gt                                ( pipe_rx1_char_is_k ),
  .pipe_rx2_char_is_k_gt                                ( pipe_rx2_char_is_k ),
  .pipe_rx3_char_is_k_gt                                ( pipe_rx3_char_is_k ),
  .pipe_rx4_char_is_k_gt                                ( pipe_rx4_char_is_k ),
  .pipe_rx5_char_is_k_gt                                ( pipe_rx5_char_is_k ),
  .pipe_rx6_char_is_k_gt                                ( pipe_rx6_char_is_k ),
  .pipe_rx7_char_is_k_gt                                ( pipe_rx7_char_is_k ),

  .pipe_rx0_syncheader_gt                               ( pipe_rx0_syncheader ),
  .pipe_rx1_syncheader_gt                               ( pipe_rx1_syncheader ),
  .pipe_rx2_syncheader_gt                               ( pipe_rx2_syncheader ),
  .pipe_rx3_syncheader_gt                               ( pipe_rx3_syncheader ),
  .pipe_rx4_syncheader_gt                               ( pipe_rx4_syncheader ),
  .pipe_rx5_syncheader_gt                               ( pipe_rx5_syncheader ),
  .pipe_rx6_syncheader_gt                               ( pipe_rx6_syncheader ),
  .pipe_rx7_syncheader_gt                               ( pipe_rx7_syncheader ),

  .pipe_rx0_status_gt                                   ( pipe_rx0_status ),
  .pipe_rx1_status_gt                                   ( pipe_rx1_status ),
  .pipe_rx2_status_gt                                   ( pipe_rx2_status ),
  .pipe_rx3_status_gt                                   ( pipe_rx3_status ),
  .pipe_rx4_status_gt                                   ( pipe_rx4_status ),
  .pipe_rx5_status_gt                                   ( pipe_rx5_status ),
  .pipe_rx6_status_gt                                   ( pipe_rx6_status ),
  .pipe_rx7_status_gt                                   ( pipe_rx7_status ),

  .pipe_rx0_data_gt                                     ( pipe_rx0_data ),
  .pipe_rx1_data_gt                                     ( pipe_rx1_data ),
  .pipe_rx2_data_gt                                     ( pipe_rx2_data ),
  .pipe_rx3_data_gt                                     ( pipe_rx3_data ),
  .pipe_rx4_data_gt                                     ( pipe_rx4_data ),
  .pipe_rx5_data_gt                                     ( pipe_rx5_data ),
  .pipe_rx6_data_gt                                     ( pipe_rx6_data ),
  .pipe_rx7_data_gt                                     ( pipe_rx7_data ),

  .pipe_rx_syncdone_gt                                  ( pipe_rx_syncdone )
);
    assign common_commands_out = 26'b0;
    assign pipe_tx_0_sigs      = 84'b0;
    assign pipe_tx_1_sigs      = 84'b0;
    assign pipe_tx_2_sigs      = 84'b0;
    assign pipe_tx_3_sigs      = 84'b0;
    assign pipe_tx_4_sigs      = 84'b0;
    assign pipe_tx_5_sigs      = 84'b0;
    assign pipe_tx_6_sigs      = 84'b0;
    assign pipe_tx_7_sigs      = 84'b0;
end
endgenerate

generate if (EXT_PIPE_SIM == "TRUE")
begin

/////////////// phy_rdy, rcvr det , seepd_change & gt_powerdown /////////////////////////////
  
  reg [31:0] phy_rdy_reg = 32'b0;
  reg [31:0] rcvr_det_reg     = 32'b0;
  reg  [7:0] pipe_rate_reg    = 8'b0;
  reg  [7:0] gt_powerdown_reg = {4{2'b10}};
  
  wire      rcvr_det;
  wire      speed_change;
  wire      gt_powerdown;
    
  always @ (posedge pipe_clk)
  begin
   phy_rdy_reg      <= {phy_rdy_reg[30:0], sys_rst_n};
   rcvr_det_reg     <= {rcvr_det_reg[30:0], pipe_tx_rcvr_det};
   pipe_rate_reg    <= {pipe_rate_reg[5:0], common_commands_out[2:1]};
   gt_powerdown_reg <= {gt_powerdown_reg[5:0],pipe_tx_0_sigs[41:40]};
  end 
  
  assign mmcm_lock    =  phy_rdy_reg[7];
  assign phy_rdy      =  phy_rdy_reg[31];
  assign rcvr_det     = ~rcvr_det_reg[30] && rcvr_det_reg[29];
  assign speed_change = (pipe_rate_reg[7:6] != pipe_rate_reg[5:4])? 1'b1 : 1'b0;
  assign gt_powerdown = (gt_powerdown_reg[7:6] == 2'b10 && gt_powerdown_reg[5:4] == 2'b0)? 1'b1 : 1'b0;
  
  //////// generate Rx status and Phy status ////////////// 
  
  wire [2:0] rx_status;
  wire       phy_status;
  
  assign  rx_status  = (pipe_tx_rcvr_det && rcvr_det) ? 3'b011 : 3'b0;
  assign  phy_status = (pipe_tx_rcvr_det && rcvr_det) || speed_change || gt_powerdown ;
  assign  pipe_rx_syncdone = (common_commands_out[2:1] == 2'b10)? 8'hff: 8'h0;

  //////// generate clocks for pipe mode //////////////
 
  wire clk_500;
  wire clk_250;
  wire clk_125;
  wire clk_62_5;
 
  sys_clk_gen 	#(.offset(7000),.halfcycle(1000)) clk_gen_500  (.sys_clk(clk_500));
  sys_clk_gen 	#(.offset(6000),.halfcycle(2000)) clk_gen_250  (.sys_clk(clk_250));
  sys_clk_gen 	#(.offset(4000),.halfcycle(4000)) clk_gen_125  (.sys_clk(clk_125));
  sys_clk_gen 	#(.offset(0000),.halfcycle(8000)) clk_gen_62_5 (.sys_clk(clk_62_5));
 
  assign rec_clk  = pipe_clk;
  assign pipe_clk = (common_commands_out[2:1] == 2'b0)? clk_125 : clk_250;
  assign core_clk = (CRM_CORE_CLK_FREQ_500 == "TRUE") ? clk_500 : clk_250 ;
  assign user_clk = (CRM_USER_CLK_FREQ == 2) ? clk_250: ((CRM_USER_CLK_FREQ == 1) ? clk_125 : clk_62_5);
  
 axi_pcie3_0_pcie_top #(
  .TCQ                                                  ( TCQ ),
  .PIPE_SIM_MODE                                        ( EXT_PIPE_SIM ),
  .PIPE_PIPELINE_STAGES                                 ( PIPE_PIPELINE_STAGES ),
  .ARI_CAP_ENABLE                                       ( ARI_CAP_ENABLE ),
  .AXISTEN_IF_CC_ALIGNMENT_MODE                         ( AXISTEN_IF_CC_ALIGNMENT_MODE ),
  .AXISTEN_IF_CC_PARITY_CHK                             ( AXISTEN_IF_CC_PARITY_CHK ),
  .AXISTEN_IF_CQ_ALIGNMENT_MODE                         ( AXISTEN_IF_CQ_ALIGNMENT_MODE ),
  .AXISTEN_IF_ENABLE_CLIENT_TAG                         ( AXISTEN_IF_ENABLE_CLIENT_TAG ),
  .AXISTEN_IF_ENABLE_MSG_ROUTE                          ( AXISTEN_IF_ENABLE_MSG_ROUTE ),
  .AXISTEN_IF_ENABLE_RX_MSG_INTFC                       ( AXISTEN_IF_ENABLE_RX_MSG_INTFC ),
  .AXISTEN_IF_RC_ALIGNMENT_MODE                         ( AXISTEN_IF_RC_ALIGNMENT_MODE ),
  .AXISTEN_IF_RC_STRADDLE                               ( AXISTEN_IF_RC_STRADDLE ),
  .AXISTEN_IF_RQ_ALIGNMENT_MODE                         ( AXISTEN_IF_RQ_ALIGNMENT_MODE ),
  .AXISTEN_IF_RQ_PARITY_CHK                             ( AXISTEN_IF_RQ_PARITY_CHK ),
  .AXISTEN_IF_WIDTH                                     ( AXISTEN_IF_WIDTH ),
  .C_DATA_WIDTH                                         ( C_DATA_WIDTH ),
  .CRM_CORE_CLK_FREQ_500                                ( CRM_CORE_CLK_FREQ_500 ),
  .CRM_USER_CLK_FREQ                                    ( CRM_USER_CLK_FREQ ),
  .DNSTREAM_LINK_NUM                                    ( DNSTREAM_LINK_NUM ),
  .GEN3_PCS_AUTO_REALIGN                                ( GEN3_PCS_AUTO_REALIGN ),
  .GEN3_PCS_RX_ELECIDLE_INTERNAL                        ( GEN3_PCS_RX_ELECIDLE_INTERNAL ),
  .LL_ACK_TIMEOUT                                       ( LL_ACK_TIMEOUT ),
  .LL_ACK_TIMEOUT_EN                                    ( LL_ACK_TIMEOUT_EN ),
  .LL_ACK_TIMEOUT_FUNC                                  ( LL_ACK_TIMEOUT_FUNC ),
  .LL_CPL_FC_UPDATE_TIMER                               ( LL_CPL_FC_UPDATE_TIMER ),
  .LL_CPL_FC_UPDATE_TIMER_OVERRIDE                      ( LL_CPL_FC_UPDATE_TIMER_OVERRIDE ),
  .LL_FC_UPDATE_TIMER                                   ( LL_FC_UPDATE_TIMER ),
  .LL_FC_UPDATE_TIMER_OVERRIDE                          ( LL_FC_UPDATE_TIMER_OVERRIDE ),
  .LL_NP_FC_UPDATE_TIMER                                ( LL_NP_FC_UPDATE_TIMER ),
  .LL_NP_FC_UPDATE_TIMER_OVERRIDE                       ( LL_NP_FC_UPDATE_TIMER_OVERRIDE ),
  .LL_P_FC_UPDATE_TIMER                                 ( LL_P_FC_UPDATE_TIMER ),
  .LL_P_FC_UPDATE_TIMER_OVERRIDE                        ( LL_P_FC_UPDATE_TIMER_OVERRIDE ),
  .LL_REPLAY_TIMEOUT                                    ( LL_REPLAY_TIMEOUT ),
  .LL_REPLAY_TIMEOUT_EN                                 ( LL_REPLAY_TIMEOUT_EN ),
  .LL_REPLAY_TIMEOUT_FUNC                               ( LL_REPLAY_TIMEOUT_FUNC ),
  .LTR_TX_MESSAGE_MINIMUM_INTERVAL                      ( LTR_TX_MESSAGE_MINIMUM_INTERVAL ),
  .LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE            ( LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE ),
  .LTR_TX_MESSAGE_ON_LTR_ENABLE                         ( LTR_TX_MESSAGE_ON_LTR_ENABLE ),
  .PF0_AER_CAP_ECRC_CHECK_CAPABLE                       ( PF0_AER_CAP_ECRC_CHECK_CAPABLE ),
  .PF0_AER_CAP_ECRC_GEN_CAPABLE                         ( PF0_AER_CAP_ECRC_GEN_CAPABLE ),
  .PF0_AER_CAP_NEXTPTR                                  ( PF0_AER_CAP_NEXTPTR ),
  .PF0_ARI_CAP_NEXTPTR                                  ( PF0_ARI_CAP_NEXTPTR ),
  .PF0_ARI_CAP_NEXT_FUNC                                ( PF0_ARI_CAP_NEXT_FUNC ),
  .PF0_ARI_CAP_VER                                      ( PF0_ARI_CAP_VER ),
  .PF0_BAR0_APERTURE_SIZE                               ( PF0_BAR0_APERTURE_SIZE ),
  .PF0_BAR0_CONTROL                                     ( PF0_BAR0_CONTROL ),
  .PF0_BAR1_APERTURE_SIZE                               ( PF0_BAR1_APERTURE_SIZE ),
  .PF0_BAR1_CONTROL                                     ( PF0_BAR1_CONTROL ),
  .PF0_BAR2_APERTURE_SIZE                               ( PF0_BAR2_APERTURE_SIZE ),
  .PF0_BAR2_CONTROL                                     ( PF0_BAR2_CONTROL ),
  .PF0_BAR3_APERTURE_SIZE                               ( PF0_BAR3_APERTURE_SIZE ),
  .PF0_BAR3_CONTROL                                     ( PF0_BAR3_CONTROL ),
  .PF0_BAR4_APERTURE_SIZE                               ( PF0_BAR4_APERTURE_SIZE ),
  .PF0_BAR4_CONTROL                                     ( PF0_BAR4_CONTROL ),
  .PF0_BAR5_APERTURE_SIZE                               ( PF0_BAR5_APERTURE_SIZE ),
  .PF0_BAR5_CONTROL                                     ( PF0_BAR5_CONTROL ),
  .PF0_BIST_REGISTER                                    ( PF0_BIST_REGISTER ),
  .PF0_CAPABILITY_POINTER                               ( PF0_CAPABILITY_POINTER ),
  .PF0_CLASS_CODE                                       ( PF0_CLASS_CODE ),
  .PF0_DEVICE_ID                                        ( PF0_DEVICE_ID ),
  .PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT       ( PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT ),
  .PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT            ( PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT ),
  .PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT            ( PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT ),
  .PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE                     ( PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE ),
  .PF0_DEV_CAP2_LTR_SUPPORT                             ( PF0_DEV_CAP2_LTR_SUPPORT ),
  .PF0_DEV_CAP2_OBFF_SUPPORT                            ( PF0_DEV_CAP2_OBFF_SUPPORT ),
  .PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT                   ( PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT ),
  .PF0_DEV_CAP_ENDPOINT_L0S_LATENCY                     ( PF0_DEV_CAP_ENDPOINT_L0S_LATENCY ),
  .PF0_DEV_CAP_ENDPOINT_L1_LATENCY                      ( PF0_DEV_CAP_ENDPOINT_L1_LATENCY ),
  .PF0_DEV_CAP_EXT_TAG_SUPPORTED                        ( PF0_DEV_CAP_EXT_TAG_SUPPORTED ),
  .PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE             ( PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE ),
  .PF0_DEV_CAP_MAX_PAYLOAD_SIZE                         ( PF0_DEV_CAP_MAX_PAYLOAD_SIZE ),
  .PF0_DPA_CAP_NEXTPTR                                  ( PF0_DPA_CAP_NEXTPTR ),
  .VF0_ARI_CAP_NEXTPTR                                  ( VF0_ARI_CAP_NEXTPTR ),
  .VF1_ARI_CAP_NEXTPTR                                  ( VF1_ARI_CAP_NEXTPTR ),
  .VF2_ARI_CAP_NEXTPTR                                  ( VF2_ARI_CAP_NEXTPTR ),
  .VF3_ARI_CAP_NEXTPTR                                  ( VF3_ARI_CAP_NEXTPTR ),
  .VF4_ARI_CAP_NEXTPTR                                  ( VF4_ARI_CAP_NEXTPTR ),
  .VF5_ARI_CAP_NEXTPTR                                  ( VF5_ARI_CAP_NEXTPTR ),
  .VF0_TPHR_CAP_DEV_SPECIFIC_MODE                       ( VF0_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .VF0_TPHR_CAP_ENABLE                                  ( VF0_TPHR_CAP_ENABLE ),
  .VF0_TPHR_CAP_INT_VEC_MODE                            ( VF0_TPHR_CAP_INT_VEC_MODE ),
  .VF0_TPHR_CAP_NEXTPTR                                 ( VF0_TPHR_CAP_NEXTPTR ),
  .VF0_TPHR_CAP_ST_MODE_SEL                             ( VF0_TPHR_CAP_ST_MODE_SEL ),
  .VF0_TPHR_CAP_ST_TABLE_LOC                            ( VF0_TPHR_CAP_ST_TABLE_LOC ),
  .VF0_TPHR_CAP_ST_TABLE_SIZE                           ( VF0_TPHR_CAP_ST_TABLE_SIZE ),
  .VF0_TPHR_CAP_VER                                     ( VF0_TPHR_CAP_VER ),
  .VF1_TPHR_CAP_DEV_SPECIFIC_MODE                       ( VF1_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .VF1_TPHR_CAP_ENABLE                                  ( VF1_TPHR_CAP_ENABLE ),
  .VF1_TPHR_CAP_INT_VEC_MODE                            ( VF1_TPHR_CAP_INT_VEC_MODE ),
  .VF1_TPHR_CAP_NEXTPTR                                 ( VF1_TPHR_CAP_NEXTPTR ),
  .VF1_TPHR_CAP_ST_MODE_SEL                             ( VF1_TPHR_CAP_ST_MODE_SEL ),
  .VF1_TPHR_CAP_ST_TABLE_LOC                            ( VF1_TPHR_CAP_ST_TABLE_LOC ),
  .VF1_TPHR_CAP_ST_TABLE_SIZE                           ( VF1_TPHR_CAP_ST_TABLE_SIZE ),
  .VF1_TPHR_CAP_VER                                     ( VF1_TPHR_CAP_VER ),
  .VF2_TPHR_CAP_DEV_SPECIFIC_MODE                       ( VF2_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .VF2_TPHR_CAP_ENABLE                                  ( VF2_TPHR_CAP_ENABLE ),
  .VF2_TPHR_CAP_INT_VEC_MODE                            ( VF2_TPHR_CAP_INT_VEC_MODE ),
  .VF2_TPHR_CAP_NEXTPTR                                 ( VF2_TPHR_CAP_NEXTPTR ),
  .VF2_TPHR_CAP_ST_MODE_SEL                             ( VF2_TPHR_CAP_ST_MODE_SEL ),
  .VF2_TPHR_CAP_ST_TABLE_LOC                            ( VF2_TPHR_CAP_ST_TABLE_LOC ),
  .VF2_TPHR_CAP_ST_TABLE_SIZE                           ( VF2_TPHR_CAP_ST_TABLE_SIZE ),
  .VF2_TPHR_CAP_VER                                     ( VF2_TPHR_CAP_VER ),
  .VF3_TPHR_CAP_DEV_SPECIFIC_MODE                       ( VF3_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .VF3_TPHR_CAP_ENABLE                                  ( VF3_TPHR_CAP_ENABLE ),
  .VF3_TPHR_CAP_INT_VEC_MODE                            ( VF3_TPHR_CAP_INT_VEC_MODE ),
  .VF3_TPHR_CAP_NEXTPTR                                 ( VF3_TPHR_CAP_NEXTPTR ),
  .VF3_TPHR_CAP_ST_MODE_SEL                             ( VF3_TPHR_CAP_ST_MODE_SEL ),
  .VF3_TPHR_CAP_ST_TABLE_LOC                            ( VF3_TPHR_CAP_ST_TABLE_LOC ),
  .VF3_TPHR_CAP_ST_TABLE_SIZE                           ( VF3_TPHR_CAP_ST_TABLE_SIZE ),
  .VF3_TPHR_CAP_VER                                     ( VF3_TPHR_CAP_VER ),
  .VF4_TPHR_CAP_DEV_SPECIFIC_MODE                       ( VF4_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .VF4_TPHR_CAP_ENABLE                                  ( VF4_TPHR_CAP_ENABLE ),
  .VF4_TPHR_CAP_INT_VEC_MODE                            ( VF4_TPHR_CAP_INT_VEC_MODE ),
  .VF4_TPHR_CAP_NEXTPTR                                 ( VF4_TPHR_CAP_NEXTPTR ),
  .VF4_TPHR_CAP_ST_MODE_SEL                             ( VF4_TPHR_CAP_ST_MODE_SEL ),
  .VF4_TPHR_CAP_ST_TABLE_LOC                            ( VF4_TPHR_CAP_ST_TABLE_LOC ),
  .VF4_TPHR_CAP_ST_TABLE_SIZE                           ( VF4_TPHR_CAP_ST_TABLE_SIZE ),
  .VF4_TPHR_CAP_VER                                     ( VF4_TPHR_CAP_VER ),
  .VF5_TPHR_CAP_DEV_SPECIFIC_MODE                       ( VF5_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .VF5_TPHR_CAP_ENABLE                                  ( VF5_TPHR_CAP_ENABLE ),
  .VF5_TPHR_CAP_INT_VEC_MODE                            ( VF5_TPHR_CAP_INT_VEC_MODE ),
  .VF5_TPHR_CAP_NEXTPTR                                 ( VF5_TPHR_CAP_NEXTPTR ),
  .VF5_TPHR_CAP_ST_MODE_SEL                             ( VF5_TPHR_CAP_ST_MODE_SEL ),
  .VF5_TPHR_CAP_ST_TABLE_LOC                            ( VF5_TPHR_CAP_ST_TABLE_LOC ),
  .VF5_TPHR_CAP_ST_TABLE_SIZE                           ( VF5_TPHR_CAP_ST_TABLE_SIZE ),
  .VF5_TPHR_CAP_VER                                     ( VF5_TPHR_CAP_VER ),
  .PF0_DPA_CAP_SUB_STATE_CONTROL                        ( PF0_DPA_CAP_SUB_STATE_CONTROL ),
  .PF0_DPA_CAP_SUB_STATE_CONTROL_EN                     ( PF0_DPA_CAP_SUB_STATE_CONTROL_EN ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION0              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION1              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION2              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION3              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION4              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION5              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION6              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION7              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 ),
  .PF0_DPA_CAP_VER                                      ( PF0_DPA_CAP_VER ),
  .PF0_DSN_CAP_NEXTPTR                                  ( PF0_DSN_CAP_NEXTPTR ),
  .PF0_EXPANSION_ROM_APERTURE_SIZE                      ( PF0_EXPANSION_ROM_APERTURE_SIZE ),
  .PF0_EXPANSION_ROM_ENABLE                             ( PF0_EXPANSION_ROM_ENABLE ),
  .PF0_INTERRUPT_LINE                                   ( PF0_INTERRUPT_LINE ),
  .PF0_INTERRUPT_PIN                                    ( PF0_INTERRUPT_PIN ),
  .PF0_LINK_CAP_ASPM_SUPPORT                            ( PF0_LINK_CAP_ASPM_SUPPORT ),
  .PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1            ( PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1 ),
  .PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2            ( PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2 ),
  .PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3            ( PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3 ),
  .PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1                   ( PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1 ),
  .PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2                   ( PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2 ),
  .PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3                   ( PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3 ),
  .PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1             ( PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1 ),
  .PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2             ( PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2 ),
  .PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3             ( PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3 ),
  .PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1                    ( PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1 ),
  .PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2                    ( PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2 ),
  .PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3                    ( PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3 ),
  .PF0_LINK_STATUS_SLOT_CLOCK_CONFIG                    ( PF0_LINK_STATUS_SLOT_CLOCK_CONFIG ),
  .PF0_LTR_CAP_MAX_NOSNOOP_LAT                          ( PF0_LTR_CAP_MAX_NOSNOOP_LAT ),
  .PF0_LTR_CAP_MAX_SNOOP_LAT                            ( PF0_LTR_CAP_MAX_SNOOP_LAT ),
  .PF0_LTR_CAP_NEXTPTR                                  ( PF0_LTR_CAP_NEXTPTR ),
  .PF0_LTR_CAP_VER                                      ( PF0_LTR_CAP_VER ),
  .PF0_MSIX_CAP_NEXTPTR                                 ( PF0_MSIX_CAP_NEXTPTR ),
  .PF0_MSIX_CAP_PBA_BIR                                 ( PF0_MSIX_CAP_PBA_BIR ),
  .PF0_MSIX_CAP_PBA_OFFSET                              ( PF0_MSIX_CAP_PBA_OFFSET ),
  .PF0_MSIX_CAP_TABLE_BIR                               ( PF0_MSIX_CAP_TABLE_BIR ),
  .PF0_MSIX_CAP_TABLE_OFFSET                            ( PF0_MSIX_CAP_TABLE_OFFSET ),
  .PF0_MSIX_CAP_TABLE_SIZE                              ( PF0_MSIX_CAP_TABLE_SIZE ),
  .PF0_MSI_CAP_MULTIMSGCAP                              ( PF0_MSI_CAP_MULTIMSGCAP ),
  .PF0_MSI_CAP_NEXTPTR                                  ( PF0_MSI_CAP_NEXTPTR ),
  .PF0_PB_CAP_NEXTPTR                                   ( PF0_PB_CAP_NEXTPTR ),
  .PF0_PB_CAP_SYSTEM_ALLOCATED                          ( PF0_PB_CAP_SYSTEM_ALLOCATED ),
  .PF0_PB_CAP_VER                                       ( PF0_PB_CAP_VER ),
  .PF0_PM_CAP_ID                                        ( PF0_PM_CAP_ID ),
  .PF0_PM_CAP_NEXTPTR                                   ( PF0_PM_CAP_NEXTPTR ),
  .PF0_PM_CAP_PMESUPPORT_D0                             ( PF0_PM_CAP_PMESUPPORT_D0 ),
  .PF0_PM_CAP_PMESUPPORT_D1                             ( PF0_PM_CAP_PMESUPPORT_D1 ),
  .PF0_PM_CAP_PMESUPPORT_D3HOT                          ( PF0_PM_CAP_PMESUPPORT_D3HOT ),
  .PF0_PM_CAP_SUPP_D1_STATE                             ( PF0_PM_CAP_SUPP_D1_STATE ),
  .PF0_PM_CAP_VER_ID                                    ( PF0_PM_CAP_VER_ID ),
  .PF0_PM_CSR_NOSOFTRESET                               ( PF0_PM_CSR_NOSOFTRESET ),
  .PF0_RBAR_CAP_ENABLE                                  ( PF0_RBAR_CAP_ENABLE ),
  .PF0_RBAR_CAP_INDEX0                                  ( PF0_RBAR_CAP_INDEX0 ),
  .PF0_RBAR_CAP_INDEX1                                  ( PF0_RBAR_CAP_INDEX1 ),
  .PF0_RBAR_CAP_INDEX2                                  ( PF0_RBAR_CAP_INDEX2 ),
  .PF0_RBAR_CAP_NEXTPTR                                 ( PF0_RBAR_CAP_NEXTPTR ),
  .PF0_RBAR_CAP_SIZE0                                   ( PF0_RBAR_CAP_SIZE0 ),
  .PF0_RBAR_CAP_SIZE1                                   ( PF0_RBAR_CAP_SIZE1 ),
  .PF0_RBAR_CAP_SIZE2                                   ( PF0_RBAR_CAP_SIZE2 ),
  .PF0_RBAR_CAP_VER                                     ( PF0_RBAR_CAP_VER ),
  .PF0_RBAR_NUM                                         ( PF0_RBAR_NUM ),
  .PF0_REVISION_ID                                      ( PF0_REVISION_ID ),
  .PF0_SRIOV_BAR0_APERTURE_SIZE                         ( PF0_SRIOV_BAR0_APERTURE_SIZE ),
  .PF0_SRIOV_BAR0_CONTROL                               ( PF0_SRIOV_BAR0_CONTROL ),
  .PF0_SRIOV_BAR1_APERTURE_SIZE                         ( PF0_SRIOV_BAR1_APERTURE_SIZE ),
  .PF0_SRIOV_BAR1_CONTROL                               ( PF0_SRIOV_BAR1_CONTROL ),
  .PF0_SRIOV_BAR2_APERTURE_SIZE                         ( PF0_SRIOV_BAR2_APERTURE_SIZE ),
  .PF0_SRIOV_BAR2_CONTROL                               ( PF0_SRIOV_BAR2_CONTROL ),
  .PF0_SRIOV_BAR3_APERTURE_SIZE                         ( PF0_SRIOV_BAR3_APERTURE_SIZE ),
  .PF0_SRIOV_BAR3_CONTROL                               ( PF0_SRIOV_BAR3_CONTROL ),
  .PF0_SRIOV_BAR4_APERTURE_SIZE                         ( PF0_SRIOV_BAR4_APERTURE_SIZE ),
  .PF0_SRIOV_BAR4_CONTROL                               ( PF0_SRIOV_BAR4_CONTROL ),
  .PF0_SRIOV_BAR5_APERTURE_SIZE                         ( PF0_SRIOV_BAR5_APERTURE_SIZE ),
  .PF0_SRIOV_BAR5_CONTROL                               ( PF0_SRIOV_BAR5_CONTROL ),
  .PF0_SRIOV_CAP_INITIAL_VF                             ( PF0_SRIOV_CAP_INITIAL_VF ),
  .PF0_SRIOV_CAP_NEXTPTR                                ( PF0_SRIOV_CAP_NEXTPTR ),
  .PF0_SRIOV_CAP_TOTAL_VF                               ( PF0_SRIOV_CAP_TOTAL_VF ),
  .PF0_SRIOV_CAP_VER                                    ( PF0_SRIOV_CAP_VER ),
  .PF0_SRIOV_FIRST_VF_OFFSET                            ( PF0_SRIOV_FIRST_VF_OFFSET ),
  .PF0_SRIOV_FUNC_DEP_LINK                              ( PF0_SRIOV_FUNC_DEP_LINK ),
  .PF0_SRIOV_SUPPORTED_PAGE_SIZE                        ( PF0_SRIOV_SUPPORTED_PAGE_SIZE ),
  .PF0_SRIOV_VF_DEVICE_ID                               ( PF0_SRIOV_VF_DEVICE_ID ),
  .PF0_SUBSYSTEM_ID                                     ( PF0_SUBSYSTEM_ID ),
  .PF0_TPHR_CAP_DEV_SPECIFIC_MODE                       ( PF0_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .PF0_TPHR_CAP_ENABLE                                  ( PF0_TPHR_CAP_ENABLE ),
  .PF0_TPHR_CAP_INT_VEC_MODE                            ( PF0_TPHR_CAP_INT_VEC_MODE ),
  .PF0_TPHR_CAP_NEXTPTR                                 ( PF0_TPHR_CAP_NEXTPTR ),
  .PF0_TPHR_CAP_ST_MODE_SEL                             ( PF0_TPHR_CAP_ST_MODE_SEL ),
  .PF0_TPHR_CAP_ST_TABLE_LOC                            ( PF0_TPHR_CAP_ST_TABLE_LOC ),
  .PF0_TPHR_CAP_ST_TABLE_SIZE                           ( PF0_TPHR_CAP_ST_TABLE_SIZE ),
  .PF0_TPHR_CAP_VER                                     ( PF0_TPHR_CAP_VER ),
  .PF0_VC_CAP_NEXTPTR                                   ( PF0_VC_CAP_NEXTPTR ),
  .PF0_VC_CAP_VER                                       ( PF0_VC_CAP_VER ),
  .PF1_AER_CAP_ECRC_CHECK_CAPABLE                       ( PF1_AER_CAP_ECRC_CHECK_CAPABLE ),
  .PF1_AER_CAP_ECRC_GEN_CAPABLE                         ( PF1_AER_CAP_ECRC_GEN_CAPABLE ),
  .PF1_AER_CAP_NEXTPTR                                  ( PF1_AER_CAP_NEXTPTR ),
  .PF1_ARI_CAP_NEXTPTR                                  ( PF1_ARI_CAP_NEXTPTR ),
  .PF1_ARI_CAP_NEXT_FUNC                                ( PF1_ARI_CAP_NEXT_FUNC ),
  .PF1_BAR0_APERTURE_SIZE                               ( PF1_BAR0_APERTURE_SIZE ),
  .PF1_BAR0_CONTROL                                     ( PF1_BAR0_CONTROL ),
  .PF1_BAR1_APERTURE_SIZE                               ( PF1_BAR1_APERTURE_SIZE ),
  .PF1_BAR1_CONTROL                                     ( PF1_BAR1_CONTROL ),
  .PF1_BAR2_APERTURE_SIZE                               ( PF1_BAR2_APERTURE_SIZE ),
  .PF1_BAR2_CONTROL                                     ( PF1_BAR2_CONTROL ),
  .PF1_BAR3_APERTURE_SIZE                               ( PF1_BAR3_APERTURE_SIZE ),
  .PF1_BAR3_CONTROL                                     ( PF1_BAR3_CONTROL ),
  .PF1_BAR4_APERTURE_SIZE                               ( PF1_BAR4_APERTURE_SIZE ),
  .PF1_BAR4_CONTROL                                     ( PF1_BAR4_CONTROL ),
  .PF1_BAR5_APERTURE_SIZE                               ( PF1_BAR5_APERTURE_SIZE ),
  .PF1_BAR5_CONTROL                                     ( PF1_BAR5_CONTROL ),
  .PF1_BIST_REGISTER                                    ( PF1_BIST_REGISTER ),
  .PF1_CAPABILITY_POINTER                               ( PF1_CAPABILITY_POINTER ),
  .PF1_CLASS_CODE                                       ( PF1_CLASS_CODE ),
  .PF1_DEVICE_ID                                        ( PF1_DEVICE_ID ),
  .PF1_DEV_CAP_MAX_PAYLOAD_SIZE                         ( PF1_DEV_CAP_MAX_PAYLOAD_SIZE ),
  .PF1_DPA_CAP_NEXTPTR                                  ( PF1_DPA_CAP_NEXTPTR ),
  .PF1_DPA_CAP_SUB_STATE_CONTROL                        ( PF1_DPA_CAP_SUB_STATE_CONTROL ),
  .PF1_DPA_CAP_SUB_STATE_CONTROL_EN                     ( PF1_DPA_CAP_SUB_STATE_CONTROL_EN ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION0              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION1              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION2              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION3              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION4              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION5              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION6              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION7              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 ),
  .PF1_DPA_CAP_VER                                      ( PF1_DPA_CAP_VER ),
  .PF1_DSN_CAP_NEXTPTR                                  ( PF1_DSN_CAP_NEXTPTR ),
  .PF1_EXPANSION_ROM_APERTURE_SIZE                      ( PF1_EXPANSION_ROM_APERTURE_SIZE ),
  .PF1_EXPANSION_ROM_ENABLE                             ( PF1_EXPANSION_ROM_ENABLE ),
  .PF1_INTERRUPT_LINE                                   ( PF1_INTERRUPT_LINE ),
  .PF1_INTERRUPT_PIN                                    ( PF1_INTERRUPT_PIN ),
  .PF1_MSIX_CAP_NEXTPTR                                 ( PF1_MSIX_CAP_NEXTPTR ),
  .PF1_MSIX_CAP_PBA_BIR                                 ( PF1_MSIX_CAP_PBA_BIR ),
  .PF1_MSIX_CAP_PBA_OFFSET                              ( PF1_MSIX_CAP_PBA_OFFSET ),
  .PF1_MSIX_CAP_TABLE_BIR                               ( PF1_MSIX_CAP_TABLE_BIR ),
  .PF1_MSIX_CAP_TABLE_OFFSET                            ( PF1_MSIX_CAP_TABLE_OFFSET ),
  .PF1_MSIX_CAP_TABLE_SIZE                              ( PF1_MSIX_CAP_TABLE_SIZE ),
  .PF1_MSI_CAP_MULTIMSGCAP                              ( PF1_MSI_CAP_MULTIMSGCAP ),
  .PF1_MSI_CAP_NEXTPTR                                  ( PF1_MSI_CAP_NEXTPTR ),
  .PF1_PB_CAP_NEXTPTR                                   ( PF1_PB_CAP_NEXTPTR ),
  .PF1_PB_CAP_SYSTEM_ALLOCATED                          ( PF1_PB_CAP_SYSTEM_ALLOCATED ),
  .PF1_PB_CAP_VER                                       ( PF1_PB_CAP_VER ),
  .PF1_PM_CAP_ID                                        ( PF1_PM_CAP_ID ),
  .PF1_PM_CAP_NEXTPTR                                   ( PF1_PM_CAP_NEXTPTR ),
  .PF1_PM_CAP_VER_ID                                    ( PF1_PM_CAP_VER_ID ),
  .PF1_RBAR_CAP_ENABLE                                  ( PF1_RBAR_CAP_ENABLE ),
  .PF1_RBAR_CAP_INDEX0                                  ( PF1_RBAR_CAP_INDEX0 ),
  .PF1_RBAR_CAP_INDEX1                                  ( PF1_RBAR_CAP_INDEX1 ),
  .PF1_RBAR_CAP_INDEX2                                  ( PF1_RBAR_CAP_INDEX2 ),
  .PF1_RBAR_CAP_NEXTPTR                                 ( PF1_RBAR_CAP_NEXTPTR ),
  .PF1_RBAR_CAP_SIZE0                                   ( PF1_RBAR_CAP_SIZE0 ),
  .PF1_RBAR_CAP_SIZE1                                   ( PF1_RBAR_CAP_SIZE1 ),
  .PF1_RBAR_CAP_SIZE2                                   ( PF1_RBAR_CAP_SIZE2 ),
  .PF1_RBAR_CAP_VER                                     ( PF1_RBAR_CAP_VER ),
  .PF1_RBAR_NUM                                         ( PF1_RBAR_NUM ),
  .PF1_REVISION_ID                                      ( PF1_REVISION_ID ),
  .PF1_SRIOV_BAR0_APERTURE_SIZE                         ( PF1_SRIOV_BAR0_APERTURE_SIZE ),
  .PF1_SRIOV_BAR0_CONTROL                               ( PF1_SRIOV_BAR0_CONTROL ),
  .PF1_SRIOV_BAR1_APERTURE_SIZE                         ( PF1_SRIOV_BAR1_APERTURE_SIZE ),
  .PF1_SRIOV_BAR1_CONTROL                               ( PF1_SRIOV_BAR1_CONTROL ),
  .PF1_SRIOV_BAR2_APERTURE_SIZE                         ( PF1_SRIOV_BAR2_APERTURE_SIZE ),
  .PF1_SRIOV_BAR2_CONTROL                               ( PF1_SRIOV_BAR2_CONTROL ),
  .PF1_SRIOV_BAR3_APERTURE_SIZE                         ( PF1_SRIOV_BAR3_APERTURE_SIZE ),
  .PF1_SRIOV_BAR3_CONTROL                               ( PF1_SRIOV_BAR3_CONTROL ),
  .PF1_SRIOV_BAR4_APERTURE_SIZE                         ( PF1_SRIOV_BAR4_APERTURE_SIZE ),
  .PF1_SRIOV_BAR4_CONTROL                               ( PF1_SRIOV_BAR4_CONTROL ),
  .PF1_SRIOV_BAR5_APERTURE_SIZE                         ( PF1_SRIOV_BAR5_APERTURE_SIZE ),
  .PF1_SRIOV_BAR5_CONTROL                               ( PF1_SRIOV_BAR5_CONTROL ),
  .PF1_SRIOV_CAP_INITIAL_VF                             ( PF1_SRIOV_CAP_INITIAL_VF ),
  .PF1_SRIOV_CAP_NEXTPTR                                ( PF1_SRIOV_CAP_NEXTPTR ),
  .PF1_SRIOV_CAP_TOTAL_VF                               ( PF1_SRIOV_CAP_TOTAL_VF ),
  .PF1_SRIOV_CAP_VER                                    ( PF1_SRIOV_CAP_VER ),
  .PF1_SRIOV_FIRST_VF_OFFSET                            ( PF1_SRIOV_FIRST_VF_OFFSET ),
  .PF1_SRIOV_FUNC_DEP_LINK                              ( PF1_SRIOV_FUNC_DEP_LINK ),
  .PF1_SRIOV_SUPPORTED_PAGE_SIZE                        ( PF1_SRIOV_SUPPORTED_PAGE_SIZE ),
  .PF1_SRIOV_VF_DEVICE_ID                               ( PF1_SRIOV_VF_DEVICE_ID ),
  .PF1_SUBSYSTEM_ID                                     ( PF1_SUBSYSTEM_ID ),
  .PF1_TPHR_CAP_DEV_SPECIFIC_MODE                       ( PF1_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .PF1_TPHR_CAP_ENABLE                                  ( PF1_TPHR_CAP_ENABLE ),
  .PF1_TPHR_CAP_INT_VEC_MODE                            ( PF1_TPHR_CAP_INT_VEC_MODE ),
  .PF1_TPHR_CAP_NEXTPTR                                 ( PF1_TPHR_CAP_NEXTPTR ),
  .PF1_TPHR_CAP_ST_MODE_SEL                             ( PF1_TPHR_CAP_ST_MODE_SEL ),
  .PF1_TPHR_CAP_ST_TABLE_LOC                            ( PF1_TPHR_CAP_ST_TABLE_LOC ),
  .PF1_TPHR_CAP_ST_TABLE_SIZE                           ( PF1_TPHR_CAP_ST_TABLE_SIZE ),
  .PF1_TPHR_CAP_VER                                     ( PF1_TPHR_CAP_VER ),
  .PL_DISABLE_EI_INFER_IN_L0                            ( PL_DISABLE_EI_INFER_IN_L0 ),
  .PL_DISABLE_GEN3_DC_BALANCE                           ( PL_DISABLE_GEN3_DC_BALANCE ),
  .PL_DISABLE_SCRAMBLING                                ( PL_DISABLE_SCRAMBLING ),
  .PL_DISABLE_UPCONFIG_CAPABLE                          ( PL_DISABLE_UPCONFIG_CAPABLE ),
  .PL_EQ_ADAPT_DISABLE_COEFF_CHECK                      ( PL_EQ_ADAPT_DISABLE_COEFF_CHECK ),
  .PL_EQ_ADAPT_DISABLE_PRESET_CHECK                     ( PL_EQ_ADAPT_DISABLE_PRESET_CHECK ),
  .PL_EQ_ADAPT_ITER_COUNT                               ( PL_EQ_ADAPT_ITER_COUNT ),
  .PL_EQ_ADAPT_REJECT_RETRY_COUNT                       ( PL_EQ_ADAPT_REJECT_RETRY_COUNT ),
  .PL_EQ_BYPASS_PHASE23                                 ( PL_EQ_BYPASS_PHASE23 ),
  .PL_EQ_SHORT_ADAPT_PHASE                              ( PL_EQ_SHORT_ADAPT_PHASE ),
  .PL_LANE0_EQ_CONTROL                                  ( PL_LANE0_EQ_CONTROL ),
  .PL_LANE1_EQ_CONTROL                                  ( PL_LANE1_EQ_CONTROL ),
  .PL_LANE2_EQ_CONTROL                                  ( PL_LANE2_EQ_CONTROL ),
  .PL_LANE3_EQ_CONTROL                                  ( PL_LANE3_EQ_CONTROL ),
  .PL_LANE4_EQ_CONTROL                                  ( PL_LANE4_EQ_CONTROL ),
  .PL_LANE5_EQ_CONTROL                                  ( PL_LANE5_EQ_CONTROL ),
  .PL_LANE6_EQ_CONTROL                                  ( PL_LANE6_EQ_CONTROL ),
  .PL_LANE7_EQ_CONTROL                                  ( PL_LANE7_EQ_CONTROL ),
  .PL_LINK_CAP_MAX_LINK_SPEED                           ( PL_LINK_CAP_MAX_LINK_SPEED ),
  .PL_LINK_CAP_MAX_LINK_WIDTH                           ( PL_LINK_CAP_MAX_LINK_WIDTH ),
  .PL_N_FTS_COMCLK_GEN1                                 ( PL_N_FTS_COMCLK_GEN1 ),
  .PL_N_FTS_COMCLK_GEN2                                 ( PL_N_FTS_COMCLK_GEN2 ),
  .PL_N_FTS_COMCLK_GEN3                                 ( PL_N_FTS_COMCLK_GEN3 ),
  .PL_N_FTS_GEN1                                        ( PL_N_FTS_GEN1 ),
  .PL_N_FTS_GEN2                                        ( PL_N_FTS_GEN2 ),
  .PL_N_FTS_GEN3                                        ( PL_N_FTS_GEN3 ),
  // synthesis translate_off
  .PL_SIM_FAST_LINK_TRAINING                            ( ENABLE_FAST_SIM_TRAINING ),
  // synthesis translate_on
  .PL_UPSTREAM_FACING                                   ( PL_UPSTREAM_FACING ),
  .PM_ASPML0S_TIMEOUT                                   ( PM_ASPML0S_TIMEOUT ),
  .PM_ASPML1_ENTRY_DELAY                                ( PM_ASPML1_ENTRY_DELAY ),
  .PM_ENABLE_SLOT_POWER_CAPTURE                         ( PM_ENABLE_SLOT_POWER_CAPTURE ),
  .PM_L1_REENTRY_DELAY                                  ( PM_L1_REENTRY_DELAY ),
  .PM_PME_SERVICE_TIMEOUT_DELAY                         ( PM_PME_SERVICE_TIMEOUT_DELAY ),
  .PM_PME_TURNOFF_ACK_DELAY                             ( PM_PME_TURNOFF_ACK_DELAY ),
  .SIM_VERSION                                          ( SIM_VERSION ),
  .SPARE_BIT0                                           ( SPARE_BIT0 ),
  .SPARE_BIT1                                           ( SPARE_BIT1 ),
  .SPARE_BIT2                                           ( SPARE_BIT2 ),
  .SPARE_BIT3                                           ( SPARE_BIT3 ),
  .SPARE_BIT4                                           ( SPARE_BIT4 ),
  .SPARE_BIT5                                           ( SPARE_BIT5 ),
  .SPARE_BIT6                                           ( SPARE_BIT6 ),
  .SPARE_BIT7                                           ( SPARE_BIT7 ),
  .SPARE_BIT8                                           ( SPARE_BIT8 ),
  .SPARE_BYTE0                                          ( SPARE_BYTE0 ),
  .SPARE_BYTE1                                          ( SPARE_BYTE1 ),
  .SPARE_BYTE2                                          ( SPARE_BYTE2 ),
  .SPARE_BYTE3                                          ( SPARE_BYTE3 ),
  .SPARE_WORD0                                          ( SPARE_WORD0 ),
  .SPARE_WORD1                                          ( SPARE_WORD1 ),
  .SPARE_WORD2                                          ( SPARE_WORD2 ),
  .SPARE_WORD3                                          ( SPARE_WORD3 ),
  .SRIOV_CAP_ENABLE                                     ( SRIOV_CAP_ENABLE ),
  .TL_COMPL_TIMEOUT_REG0                                ( TL_COMPL_TIMEOUT_REG0 ),
  .TL_COMPL_TIMEOUT_REG1                                ( TL_COMPL_TIMEOUT_REG1 ),
  .TL_CREDITS_CD                                        ( TL_CREDITS_CD ),
  .TL_CREDITS_CH                                        ( TL_CREDITS_CH ),
  .TL_CREDITS_NPD                                       ( TL_CREDITS_NPD ),
  .TL_CREDITS_NPH                                       ( TL_CREDITS_NPH ),
  .TL_CREDITS_PD                                        ( TL_CREDITS_PD ),
  .TL_CREDITS_PH                                        ( TL_CREDITS_PH ),
  .TL_ENABLE_MESSAGE_RID_CHECK_ENABLE                   ( TL_ENABLE_MESSAGE_RID_CHECK_ENABLE ),
  .TL_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE              ( TL_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE ),
  .TL_LEGACY_CFG_EXTEND_INTERFACE_ENABLE                ( TL_LEGACY_CFG_EXTEND_INTERFACE_ENABLE ),
  .TL_LEGACY_MODE_ENABLE                                ( TL_LEGACY_MODE_ENABLE ),
  .TL_PF_ENABLE_REG                                     ( TL_PF_ENABLE_REG ),
  .TL_TAG_MGMT_ENABLE                                   ( TL_TAG_MGMT_ENABLE ),
  .VF0_CAPABILITY_POINTER                               ( VF0_CAPABILITY_POINTER ),
  .VF0_MSIX_CAP_PBA_BIR                                 ( VF0_MSIX_CAP_PBA_BIR ),
  .VF0_MSIX_CAP_PBA_OFFSET                              ( VF0_MSIX_CAP_PBA_OFFSET ),
  .VF0_MSIX_CAP_TABLE_BIR                               ( VF0_MSIX_CAP_TABLE_BIR ),
  .VF0_MSIX_CAP_TABLE_OFFSET                            ( VF0_MSIX_CAP_TABLE_OFFSET ),
  .VF0_MSIX_CAP_TABLE_SIZE                              ( VF0_MSIX_CAP_TABLE_SIZE ),
  .VF0_MSI_CAP_MULTIMSGCAP                              ( VF0_MSI_CAP_MULTIMSGCAP ),
  .VF0_PM_CAP_ID                                        ( VF0_PM_CAP_ID ),
  .VF0_PM_CAP_NEXTPTR                                   ( VF0_PM_CAP_NEXTPTR ),
  .VF0_PM_CAP_VER_ID                                    ( VF0_PM_CAP_VER_ID ),
  .VF1_MSIX_CAP_PBA_BIR                                 ( VF1_MSIX_CAP_PBA_BIR ),
  .VF1_MSIX_CAP_PBA_OFFSET                              ( VF1_MSIX_CAP_PBA_OFFSET ),
  .VF1_MSIX_CAP_TABLE_BIR                               ( VF1_MSIX_CAP_TABLE_BIR ),
  .VF1_MSIX_CAP_TABLE_OFFSET                            ( VF1_MSIX_CAP_TABLE_OFFSET ),
  .VF1_MSIX_CAP_TABLE_SIZE                              ( VF1_MSIX_CAP_TABLE_SIZE ),
  .VF1_MSI_CAP_MULTIMSGCAP                              ( VF1_MSI_CAP_MULTIMSGCAP ),
  .VF1_PM_CAP_ID                                        ( VF1_PM_CAP_ID ),
  .VF1_PM_CAP_NEXTPTR                                   ( VF1_PM_CAP_NEXTPTR ),
  .VF1_PM_CAP_VER_ID                                    ( VF1_PM_CAP_VER_ID ),
  .VF2_MSIX_CAP_PBA_BIR                                 ( VF2_MSIX_CAP_PBA_BIR ),
  .VF2_MSIX_CAP_PBA_OFFSET                              ( VF2_MSIX_CAP_PBA_OFFSET ),
  .VF2_MSIX_CAP_TABLE_BIR                               ( VF2_MSIX_CAP_TABLE_BIR ),
  .VF2_MSIX_CAP_TABLE_OFFSET                            ( VF2_MSIX_CAP_TABLE_OFFSET ),
  .VF2_MSIX_CAP_TABLE_SIZE                              ( VF2_MSIX_CAP_TABLE_SIZE ),
  .VF2_MSI_CAP_MULTIMSGCAP                              ( VF2_MSI_CAP_MULTIMSGCAP ),
  .VF2_PM_CAP_ID                                        ( VF2_PM_CAP_ID ),
  .VF2_PM_CAP_NEXTPTR                                   ( VF2_PM_CAP_NEXTPTR ),
  .VF2_PM_CAP_VER_ID                                    ( VF2_PM_CAP_VER_ID ),
  .VF3_MSIX_CAP_PBA_BIR                                 ( VF3_MSIX_CAP_PBA_BIR ),
  .VF3_MSIX_CAP_PBA_OFFSET                              ( VF3_MSIX_CAP_PBA_OFFSET ),
  .VF3_MSIX_CAP_TABLE_BIR                               ( VF3_MSIX_CAP_TABLE_BIR ),
  .VF3_MSIX_CAP_TABLE_OFFSET                            ( VF3_MSIX_CAP_TABLE_OFFSET ),
  .VF3_MSIX_CAP_TABLE_SIZE                              ( VF3_MSIX_CAP_TABLE_SIZE ),
  .VF3_MSI_CAP_MULTIMSGCAP                              ( VF3_MSI_CAP_MULTIMSGCAP ),
  .VF3_PM_CAP_ID                                        ( VF3_PM_CAP_ID ),
  .VF3_PM_CAP_NEXTPTR                                   ( VF3_PM_CAP_NEXTPTR ),
  .VF3_PM_CAP_VER_ID                                    ( VF3_PM_CAP_VER_ID ),
  .VF4_MSIX_CAP_PBA_BIR                                 ( VF4_MSIX_CAP_PBA_BIR ),
  .VF4_MSIX_CAP_PBA_OFFSET                              ( VF4_MSIX_CAP_PBA_OFFSET ),
  .VF4_MSIX_CAP_TABLE_BIR                               ( VF4_MSIX_CAP_TABLE_BIR ),
  .VF4_MSIX_CAP_TABLE_OFFSET                            ( VF4_MSIX_CAP_TABLE_OFFSET ),
  .VF4_MSIX_CAP_TABLE_SIZE                              ( VF4_MSIX_CAP_TABLE_SIZE ),
  .VF4_MSI_CAP_MULTIMSGCAP                              ( VF4_MSI_CAP_MULTIMSGCAP ),
  .VF4_PM_CAP_ID                                        ( VF4_PM_CAP_ID ),
  .VF4_PM_CAP_NEXTPTR                                   ( VF4_PM_CAP_NEXTPTR ),
  .VF4_PM_CAP_VER_ID                                    ( VF4_PM_CAP_VER_ID ),
  .VF5_MSIX_CAP_PBA_BIR                                 ( VF5_MSIX_CAP_PBA_BIR ),
  .VF5_MSIX_CAP_PBA_OFFSET                              ( VF5_MSIX_CAP_PBA_OFFSET ),
  .VF5_MSIX_CAP_TABLE_BIR                               ( VF5_MSIX_CAP_TABLE_BIR ),
  .VF5_MSIX_CAP_TABLE_OFFSET                            ( VF5_MSIX_CAP_TABLE_OFFSET ),
  .VF5_MSIX_CAP_TABLE_SIZE                              ( VF5_MSIX_CAP_TABLE_SIZE ),
  .VF5_MSI_CAP_MULTIMSGCAP                              ( VF5_MSI_CAP_MULTIMSGCAP ),
  .VF5_PM_CAP_ID                                        ( VF5_PM_CAP_ID ),
  .VF5_PM_CAP_NEXTPTR                                   ( VF5_PM_CAP_NEXTPTR ),
  .VF5_PM_CAP_VER_ID                                    ( VF5_PM_CAP_VER_ID ),
  .IMPL_TARGET                                          ( IMPL_TARGET ),
  .NO_DECODE_LOGIC                                      ( NO_DECODE_LOGIC ),
  .INTERFACE_SPEED                                      ( INTERFACE_SPEED ),
  .COMPLETION_SPACE                                     ( COMPLETION_SPACE )
) pcie_top_i (

  .s_axis_rq_tlast                                      ( s_axis_rq_tlast_wire ),         // I
  .s_axis_rq_tdata                                      ( s_axis_rq_tdata_wire ),         // I
  .s_axis_rq_tuser                                      ( s_axis_rq_tuser_wire ),         // I
  .s_axis_rq_tkeep                                      ( s_axis_rq_tkeep_wire ),         // I
  .s_axis_rq_tready                                     ( s_axis_rq_tready_wire ),        // O
  .s_axis_rq_tvalid                                     ( s_axis_rq_tvalid_wire ),        // I

  .m_axis_rc_tdata                                      ( m_axis_rc_tdata_wire ),         // O
  .m_axis_rc_tuser                                      ( m_axis_rc_tuser_wire ),         // O
  .m_axis_rc_tlast                                      ( m_axis_rc_tlast_wire ),         // O
  .m_axis_rc_tkeep                                      ( m_axis_rc_tkeep_wire ),         // O
  .m_axis_rc_tvalid                                     ( m_axis_rc_tvalid_wire ),        // O
  .m_axis_rc_tready                                     ( m_axis_rc_tready_wire ),        // I

  .m_axis_cq_tdata                                      ( m_axis_cq_tdata_wire ),         // O
  .m_axis_cq_tuser                                      ( m_axis_cq_tuser_wire ),         // O
  .m_axis_cq_tlast                                      ( m_axis_cq_tlast_wire ),         // O
  .m_axis_cq_tkeep                                      ( m_axis_cq_tkeep_wire ),         // O
  .m_axis_cq_tvalid                                     ( m_axis_cq_tvalid_wire ),        // O
  .m_axis_cq_tready                                     ( m_axis_cq_tready_wire ),        // I

  .s_axis_cc_tdata                                      ( s_axis_cc_tdata_wire ),         // I
  .s_axis_cc_tuser                                      ( s_axis_cc_tuser_wire ),         // I
  .s_axis_cc_tlast                                      ( s_axis_cc_tlast_wire ),         // I
  .s_axis_cc_tkeep                                      ( s_axis_cc_tkeep_wire ),         // I
  .s_axis_cc_tvalid                                     ( s_axis_cc_tvalid_wire ),        // I
  .s_axis_cc_tready                                     ( s_axis_cc_tready_wire ),        // O

  .pcie_rq_seq_num                                      ( pcie_rq_seq_num_wire ),         // O
  .pcie_rq_seq_num_vld                                  ( pcie_rq_seq_num_vld_wire ),     // O
  .pcie_rq_tag                                          ( pcie_rq_tag_wire ),             // O
  .pcie_rq_tag_vld                                      ( pcie_rq_tag_vld_wire ),         // O

  .pcie_tfc_nph_av                                      ( pcie_tfc_nph_av_wire ),         // O
  .pcie_tfc_npd_av                                      ( pcie_tfc_npd_av_wire ),         // O
  .pcie_cq_np_req                                       ( pcie_cq_np_req_wire ),          // I
  .pcie_cq_np_req_count                                 ( pcie_cq_np_req_count_wire ),    // O

  .cfg_mgmt_addr                                        ( cfg_mgmt_addr ),                // I
  .cfg_mgmt_write                                       ( cfg_mgmt_write_wire ),          // I
  .cfg_mgmt_write_data                                  ( cfg_mgmt_write_data ),          // I
  .cfg_mgmt_byte_enable                                 ( cfg_mgmt_byte_enable ),         // I
  .cfg_mgmt_read                                        ( cfg_mgmt_read_wire ),           // I
  .cfg_mgmt_read_data                                   ( cfg_mgmt_read_data ),           // O
  .cfg_mgmt_read_write_done                             ( cfg_mgmt_read_write_done ),     // O
  .cfg_mgmt_type1_cfg_reg_access                        ( cfg_mgmt_type1_cfg_reg_access ),// I

  .cfg_phy_link_down                                    ( cfg_phy_link_down_wire ),       // O
  .cfg_phy_link_status                                  ( cfg_phy_link_status_wire ),     // O
  .cfg_negotiated_width                                 ( cfg_negotiated_width ),         // O
  .cfg_current_speed                                    ( cfg_current_speed ),            // O
  .cfg_max_payload                                      ( cfg_max_payload ),              // O
  .cfg_max_read_req                                     ( cfg_max_read_req ),             // O
  .cfg_function_status                                  ( cfg_function_status ),          // O
  .cfg_function_power_state                             ( cfg_function_power_state ),     // O
  .cfg_vf_status                                        ( cfg_vf_status ),                // O
  .cfg_vf_power_state                                   ( cfg_vf_power_state ),           // O
  .cfg_link_power_state                                 ( cfg_link_power_state ),         // O

  .cfg_err_cor_out                                      ( cfg_err_cor_out ),              // O
  .cfg_err_nonfatal_out                                 ( cfg_err_nonfatal_out ),         // O
  .cfg_err_fatal_out                                    ( cfg_err_fatal_out ),            // O
  .cfg_local_error                                      ( cfg_local_error ),              // O
  .cfg_ltr_enable                                       ( cfg_ltr_enable ),               // O
  .cfg_ltssm_state                                      ( cfg_ltssm_state_wire ),         // O
  .cfg_rcb_status                                       ( cfg_rcb_status ),               // O
  .cfg_dpa_substate_change                              ( cfg_dpa_substate_change ),      // O
  .cfg_obff_enable                                      ( cfg_obff_enable ),              // O
  .cfg_pl_status_change                                 ( cfg_pl_status_change ),         // O

  .cfg_tph_requester_enable                             ( cfg_tph_requester_enable ),     // O
  .cfg_tph_st_mode                                      ( cfg_tph_st_mode ),              // O
  .cfg_vf_tph_requester_enable                          ( cfg_vf_tph_requester_enable ),  // O
  .cfg_vf_tph_st_mode                                   ( cfg_vf_tph_st_mode ),           // O

  .cfg_msg_received                                     ( cfg_msg_received_wire ),        // O
  .cfg_msg_received_data                                ( cfg_msg_received_data_wire ),   // O
  .cfg_msg_received_type                                ( cfg_msg_received_type_wire ),   // O

  .cfg_msg_transmit                                     ( cfg_msg_transmit_wire ),        // I
  .cfg_msg_transmit_type                                ( cfg_msg_transmit_type_wire ),   // I
  .cfg_msg_transmit_data                                ( cfg_msg_transmit_data_wire ),   // I
  .cfg_msg_transmit_done                                ( cfg_msg_transmit_done_wire ),   // O

  .cfg_fc_ph                                            ( cfg_fc_ph_wire ),               // O
  .cfg_fc_pd                                            ( cfg_fc_pd_wire ),               // O
  .cfg_fc_nph                                           ( cfg_fc_nph_wire ),              // O
  .cfg_fc_npd                                           ( cfg_fc_npd_wire ),              // O
  .cfg_fc_cplh                                          ( cfg_fc_cplh_wire ),             // O
  .cfg_fc_cpld                                          ( cfg_fc_cpld_wire ),             // O
  .cfg_fc_sel                                           ( cfg_fc_sel_wire ),              // I

  .cfg_per_func_status_control                          ( cfg_per_func_status_control_wire ),     // I
  .cfg_per_func_status_data                             ( cfg_per_func_status_data ),             // O
  .cfg_per_function_number                              ( cfg_per_function_number ),              // I
  .cfg_per_function_output_request                      ( cfg_per_function_output_request_wire ), // I
  .cfg_per_function_update_done                         ( cfg_per_function_update_done ),         // O

  .cfg_dsn                                              ( cfg_dsn_wire ),                         // I
  .cfg_power_state_change_ack                           ( cfg_power_state_change_ack_wire ),      // I
  .cfg_power_state_change_interrupt                     ( cfg_power_state_change_interrupt ),     // O
  .cfg_err_cor_in                                       ( cfg_err_cor_in_wire ),                  // I
  .cfg_err_uncor_in                                     ( cfg_err_uncor_in_wire ),                // I

  .cfg_flr_in_process                                   ( cfg_flr_in_process ),                   // O
  .cfg_flr_done                                         ( cfg_flr_done_wire ),                    // I
  .cfg_vf_flr_in_process                                ( cfg_vf_flr_in_process ),                // O
  .cfg_vf_flr_done                                      ( cfg_vf_flr_done_wire ),                 // I

  .cfg_link_training_enable                             ( cfg_link_training_enable_wire ),        // I

  .cfg_interrupt_int                                    ( cfg_interrupt_int_wire ),               // I
  .cfg_interrupt_pending                                ( cfg_interrupt_pending_wire ),           // I
  .cfg_interrupt_sent                                   ( cfg_interrupt_sent ),                   // O

  .cfg_interrupt_msi_enable                             ( cfg_interrupt_msi_enable ),             // O
  .cfg_interrupt_msi_vf_enable                          ( cfg_interrupt_msi_vf_enable ),          // O
  .cfg_interrupt_msi_mmenable                           ( cfg_interrupt_msi_mmenable ),           // O
  .cfg_interrupt_msi_mask_update                        ( cfg_interrupt_msi_mask_update ),        // O
  .cfg_interrupt_msi_data                               ( cfg_interrupt_msi_data ),               // O
  .cfg_interrupt_msi_select                             ( cfg_interrupt_msi_select_wire ),        // I
  .cfg_interrupt_msi_int                                ( cfg_interrupt_msi_int_wire ),           // I
  .cfg_interrupt_msi_pending_status                     ( cfg_interrupt_msi_pending_status_wire ),// I
  .cfg_interrupt_msi_sent                               ( cfg_interrupt_msi_sent ),               // O
  .cfg_interrupt_msi_fail                               ( cfg_interrupt_msi_fail ),               // O

  .cfg_interrupt_msix_enable                            ( cfg_interrupt_msix_enable ),            // O
  .cfg_interrupt_msix_mask                              ( cfg_interrupt_msix_mask ),              // O
  .cfg_interrupt_msix_vf_enable                         ( cfg_interrupt_msix_vf_enable ),         // O
  .cfg_interrupt_msix_vf_mask                           ( cfg_interrupt_msix_vf_mask ),           // O
  .cfg_interrupt_msix_data                              ( cfg_interrupt_msix_data ),              // I
  .cfg_interrupt_msix_address                           ( cfg_interrupt_msix_address ),           // I
  .cfg_interrupt_msix_int                               ( cfg_interrupt_msix_int_wire ),          // I
  .cfg_interrupt_msix_sent                              ( cfg_interrupt_msix_sent ),              // O
  .cfg_interrupt_msix_fail                              ( cfg_interrupt_msix_fail ),              // O

  .cfg_interrupt_msi_attr                               ( cfg_interrupt_msi_attr ),               // I
  .cfg_interrupt_msi_tph_present                        ( cfg_interrupt_msi_tph_present ),        // I
  .cfg_interrupt_msi_tph_type                           ( cfg_interrupt_msi_tph_type ),           // I
  .cfg_interrupt_msi_tph_st_tag                         ( cfg_interrupt_msi_tph_st_tag ),         // I
  .cfg_interrupt_msi_function_number                    ( cfg_interrupt_msi_function_number ),    // I

  .cfg_ext_read_received                                ( cfg_ext_read_received ),                // O
  .cfg_ext_write_received                               ( cfg_ext_write_received ),               // O
  .cfg_ext_register_number                              ( cfg_ext_register_number ),              // O
  .cfg_ext_function_number                              ( cfg_ext_function_number ),              // O
  .cfg_ext_write_data                                   ( cfg_ext_write_data ),                   // O
  .cfg_ext_write_byte_enable                            ( cfg_ext_write_byte_enable ),            // O
  .cfg_ext_read_data                                    ( cfg_ext_read_data ),                    // I
  .cfg_ext_read_data_valid                              ( cfg_ext_read_data_valid_wire ),         // I

  .cfg_dev_id                                           ( cfg_dev_id ),                           // I
  .cfg_vend_id                                          ( cfg_vend_id ),                          // I
  .cfg_rev_id                                           ( cfg_rev_id ),                           // I
  .cfg_subsys_id                                        ( cfg_subsys_id ),                        // I
  .cfg_subsys_vend_id                                   ( cfg_subsys_vend_id ),                   // I

  .cfg_hot_reset_out                                    ( cfg_hot_reset_out_wire ),               // O
  .cfg_config_space_enable                              ( cfg_config_space_enable_wire ),         // I
  .cfg_req_pm_transition_l23_ready                      ( cfg_req_pm_transition_l23_ready_wire ), // I

  .cfg_hot_reset_in                                     ( cfg_hot_reset_in_wire ),                // I

  .cfg_ds_port_number                                   ( cfg_ds_port_number_wire ),              // I
  .cfg_ds_bus_number                                    ( cfg_ds_bus_number_wire ),               // I
  .cfg_ds_device_number                                 ( cfg_ds_device_number_wire ),            // I
  .cfg_ds_function_number                               ( cfg_ds_function_number_wire ),          // I

  .user_tph_stt_address                                 ( user_tph_stt_address_wire ),            // I
  .user_tph_function_num                                ( user_tph_function_num_wire ),           // I
  .user_tph_stt_read_data                               ( user_tph_stt_read_data ),               // O
  .user_tph_stt_read_data_valid                         ( user_tph_stt_read_data_valid ),         // O
  .user_tph_stt_read_enable                             ( user_tph_stt_read_enable_wire ),        // I

  .drp_rdy                                              ( drp_rdy_wire ),                         // O
  .drp_do                                               ( drp_do_wire ),                          // O
  .drp_clk                                              ( drp_clk_wire ),                         // I
  .drp_en                                               ( drp_en_wire ),                          // I
  .drp_we                                               ( drp_we_wire ),                          // I
  .drp_addr                                             ( drp_addr_wire ),                        // I
  .drp_di                                               ( drp_di_wire ),                          // I
  
  // Pipe Interface
  //-----------------------------
  // PIPE common_commands_in[25:0] BUS Signals
  //-----------------------------
 
  .pipe_clk                                             ( pipe_clk ),  
  .core_clk                                             ( core_clk ),  
  .user_clk                                             ( user_clk ),  
  .rec_clk                                              ( rec_clk  ), 
  .phy_rdy                                              ( phy_rdy  ),  
  .mmcm_lock                                            ( mmcm_lock),  
  .pipe_tx_eqfs_gt                                      ( 6'd40  ), 
  .pipe_tx_eqlf_gt                                      ( 6'd15  ), 
  .pipe_rx_syncdone_gt                                  ( pipe_rx_syncdone ), 

  //-----------------------------
  // PIPE common_commands_out[25:0] BUS Signals
  //-----------------------------
 
  .pipe_tx_rcvr_det_gt                                  ( pipe_tx_rcvr_det),  
  .pipe_tx_rate_gt                                      ( common_commands_out[2:1]   ),  //( pipe_tx_rate ),       // O
  .pipe_tx_deemph_gt                                    ( common_commands_out[9]     ),  //( pipe_tx_deemph ),     // O
  .pipe_tx_margin_gt                                    ( common_commands_out[6:4]   ),  //( pipe_tx_margin ),     // O
  .pipe_tx_swing_gt                                     ( common_commands_out[7]     ),  //( pipe_tx_swing ),      // O
  .pipe_tx_reset_gt                                     ( common_commands_out[8]     ),  //( pipe_tx_reset ),      // O
  .pipe_rx_slide_gt                                     (                            ),  //( pipe_rx_slide ),      // O

  //-----------------------------
  // PIPE TX BUS Signals[83:0]
  //-----------------------------

  // pipe_tx_0_sigs[83:0]
  .pipe_tx0_data_gt                                     ( pipe_tx_0_sigs[31: 0] ),     
  .pipe_tx0_char_is_k_gt                                ( pipe_tx_0_sigs[33:32] ),     
  .pipe_tx0_elec_idle_gt                                ( pipe_tx_0_sigs[34]    ),     
  .pipe_tx0_data_valid_gt                               ( pipe_tx_0_sigs[35]    ),     
  .pipe_tx0_start_block_gt                              ( pipe_tx_0_sigs[36]    ),     
  .pipe_tx0_syncheader_gt                               ( pipe_tx_0_sigs[38:37] ),     
  .pipe_rx0_polarity_gt                                 ( pipe_tx_0_sigs[39]    ),     
  .pipe_tx0_powerdown_gt                                ( pipe_tx_0_sigs[41:40] ),     
  .pipe_tx0_eqcontrol_gt                                ( pipe_tx0_eqcontrol    ),     
  .pipe_tx0_eqpreset_gt                                 ( ),     
  .pipe_tx0_eqdeemph_gt                                 ( ),     
  .pipe_rx0_eqcontrol_gt                                ( pipe_rx0_eqcontrol    ),     
  .pipe_rx0_eqpreset_gt                                 ( ),     
  .pipe_rx0_eqlp_lffs_gt                                ( ),     
  .pipe_rx0_eqlp_txpreset_gt                            ( ),   
  .pipe_tx0_compliance_gt                               ( ),   

  // pipe_tx_1_sigs[83:0]
  .pipe_tx1_data_gt                                     ( pipe_tx_1_sigs[31: 0] ),   
  .pipe_tx1_char_is_k_gt                                ( pipe_tx_1_sigs[33:32] ),   
  .pipe_tx1_elec_idle_gt                                ( pipe_tx_1_sigs[34]    ),   
  .pipe_tx1_data_valid_gt                               ( pipe_tx_1_sigs[35]    ),   
  .pipe_tx1_start_block_gt                              ( pipe_tx_1_sigs[36]    ),   
  .pipe_tx1_syncheader_gt                               ( pipe_tx_1_sigs[38:37] ),   
  .pipe_rx1_polarity_gt                                 ( pipe_tx_1_sigs[39]    ),   
  .pipe_tx1_powerdown_gt                                ( pipe_tx_1_sigs[41:40] ),   
  .pipe_tx1_eqcontrol_gt                                ( pipe_tx1_eqcontrol    ),   
  .pipe_tx1_eqpreset_gt                                 (  ),   
  .pipe_tx1_eqdeemph_gt                                 (  ),   
  .pipe_rx1_eqcontrol_gt                                ( pipe_rx1_eqcontrol    ),   
  .pipe_rx1_eqpreset_gt                                 (  ),   
  .pipe_rx1_eqlp_lffs_gt                                (  ),   
  .pipe_rx1_eqlp_txpreset_gt                            (  ),   
  .pipe_tx1_compliance_gt                               (  ),   

  // pipe_tx_2_sigs[83:0]
  .pipe_tx2_data_gt                                     ( pipe_tx_2_sigs[31: 0] ),   
  .pipe_tx2_char_is_k_gt                                ( pipe_tx_2_sigs[33:32] ),   
  .pipe_tx2_elec_idle_gt                                ( pipe_tx_2_sigs[34]    ),   
  .pipe_tx2_data_valid_gt                               ( pipe_tx_2_sigs[35]    ),   
  .pipe_tx2_start_block_gt                              ( pipe_tx_2_sigs[36]    ),   
  .pipe_tx2_syncheader_gt                               ( pipe_tx_2_sigs[38:37] ),   
  .pipe_rx2_polarity_gt                                 ( pipe_tx_2_sigs[39]    ),   
  .pipe_tx2_powerdown_gt                                ( pipe_tx_2_sigs[41:40] ),   
  .pipe_tx2_eqcontrol_gt                                ( pipe_tx2_eqcontrol    ),   
  .pipe_tx2_eqpreset_gt                                 (  ),   
  .pipe_tx2_eqdeemph_gt                                 (  ),   
  .pipe_rx2_eqcontrol_gt                                ( pipe_rx2_eqcontrol    ),   
  .pipe_rx2_eqpreset_gt                                 (  ),   
  .pipe_rx2_eqlp_lffs_gt                                (  ),   
  .pipe_rx2_eqlp_txpreset_gt                            (  ),   
  .pipe_tx2_compliance_gt                               (  ),   

  // pipe_tx_3_sigs[83:0]
  .pipe_tx3_data_gt                                     ( pipe_tx_3_sigs[31: 0] ),   
  .pipe_tx3_char_is_k_gt                                ( pipe_tx_3_sigs[33:32] ),   
  .pipe_tx3_elec_idle_gt                                ( pipe_tx_3_sigs[34]    ),   
  .pipe_tx3_data_valid_gt                               ( pipe_tx_3_sigs[35]    ),   
  .pipe_tx3_start_block_gt                              ( pipe_tx_3_sigs[36]    ),   
  .pipe_tx3_syncheader_gt                               ( pipe_tx_3_sigs[38:37] ),   
  .pipe_rx3_polarity_gt                                 ( pipe_tx_3_sigs[39]    ),   
  .pipe_tx3_powerdown_gt                                ( pipe_tx_3_sigs[41:40] ),   
  .pipe_tx3_eqcontrol_gt                                ( pipe_tx3_eqcontrol    ),   
  .pipe_tx3_eqpreset_gt                                 (  ),    
  .pipe_tx3_eqdeemph_gt                                 (  ),    
  .pipe_rx3_eqcontrol_gt                                ( pipe_rx3_eqcontrol    ),    
  .pipe_rx3_eqpreset_gt                                 (  ),   
  .pipe_rx3_eqlp_lffs_gt                                (  ),   
  .pipe_rx3_eqlp_txpreset_gt                            (  ),   
  .pipe_tx3_compliance_gt                               (  ),   

  // pipe_tx_4_sigs[83:0]
  .pipe_tx4_data_gt                                     ( pipe_tx_4_sigs[31: 0] ),   
  .pipe_tx4_char_is_k_gt                                ( pipe_tx_4_sigs[33:32] ),   
  .pipe_tx4_elec_idle_gt                                ( pipe_tx_4_sigs[34]    ),   
  .pipe_tx4_data_valid_gt                               ( pipe_tx_4_sigs[35]    ),   
  .pipe_tx4_start_block_gt                              ( pipe_tx_4_sigs[36]    ),   
  .pipe_tx4_syncheader_gt                               ( pipe_tx_4_sigs[38:37] ),   
  .pipe_rx4_polarity_gt                                 ( pipe_tx_4_sigs[39]    ),   
  .pipe_tx4_powerdown_gt                                ( pipe_tx_4_sigs[41:40] ),   
  .pipe_tx4_eqcontrol_gt                                ( pipe_tx4_eqcontrol    ),    
  .pipe_tx4_eqpreset_gt                                 (  ),   
  .pipe_tx4_eqdeemph_gt                                 (  ),   
  .pipe_rx4_eqcontrol_gt                                ( pipe_rx4_eqcontrol    ),    
  .pipe_rx4_eqpreset_gt                                 (  ),    
  .pipe_rx4_eqlp_lffs_gt                                (  ),    
  .pipe_rx4_eqlp_txpreset_gt                            (  ),    
  .pipe_tx4_compliance_gt                               (  ),   

  // pipe_tx_5_sigs[83:0]
  .pipe_tx5_data_gt                                     ( pipe_tx_5_sigs[31: 0] ),   
  .pipe_tx5_char_is_k_gt                                ( pipe_tx_5_sigs[33:32] ),   
  .pipe_tx5_elec_idle_gt                                ( pipe_tx_5_sigs[34]    ),   
  .pipe_tx5_data_valid_gt                               ( pipe_tx_5_sigs[35]    ),   
  .pipe_tx5_start_block_gt                              ( pipe_tx_5_sigs[36]    ),   
  .pipe_tx5_syncheader_gt                               ( pipe_tx_5_sigs[38:37] ),   
  .pipe_rx5_polarity_gt                                 ( pipe_tx_5_sigs[39]    ),   
  .pipe_tx5_powerdown_gt                                ( pipe_tx_5_sigs[41:40] ),   
  .pipe_tx5_eqcontrol_gt                                ( pipe_tx5_eqcontrol    ),   
  .pipe_tx5_eqpreset_gt                                 (  ),   
  .pipe_tx5_eqdeemph_gt                                 (  ),   
  .pipe_rx5_eqcontrol_gt                                ( pipe_rx5_eqcontrol    ),   
  .pipe_rx5_eqpreset_gt                                 (  ),   
  .pipe_rx5_eqlp_lffs_gt                                (  ),   
  .pipe_rx5_eqlp_txpreset_gt                            (  ),   
  .pipe_tx5_compliance_gt                               (  ),   

  // pipe_tx_6_sigs[83:0]
  .pipe_tx6_data_gt                                     ( pipe_tx_6_sigs[31: 0] ),   
  .pipe_tx6_char_is_k_gt                                ( pipe_tx_6_sigs[33:32] ),   
  .pipe_tx6_elec_idle_gt                                ( pipe_tx_6_sigs[34]    ),   
  .pipe_tx6_data_valid_gt                               ( pipe_tx_6_sigs[35]    ),   
  .pipe_tx6_start_block_gt                              ( pipe_tx_6_sigs[36]    ),   
  .pipe_tx6_syncheader_gt                               ( pipe_tx_6_sigs[38:37] ),   
  .pipe_rx6_polarity_gt                                 ( pipe_tx_6_sigs[39]    ),   
  .pipe_tx6_powerdown_gt                                ( pipe_tx_6_sigs[41:40] ),   
  .pipe_tx6_eqcontrol_gt                                ( pipe_tx6_eqcontrol    ),   
  .pipe_tx6_eqpreset_gt                                 (  ),   
  .pipe_tx6_eqdeemph_gt                                 (  ),   
  .pipe_rx6_eqcontrol_gt                                ( pipe_rx6_eqcontrol    ),   
  .pipe_rx6_eqpreset_gt                                 (  ),   
  .pipe_rx6_eqlp_lffs_gt                                (  ),   
  .pipe_rx6_eqlp_txpreset_gt                            (  ),   
  .pipe_tx6_compliance_gt                               (  ),   

  // pipe_tx_7_sigs[83:0]
  .pipe_tx7_data_gt                                     ( pipe_tx_7_sigs[31: 0] ),   
  .pipe_tx7_char_is_k_gt                                ( pipe_tx_7_sigs[33:32] ),   
  .pipe_tx7_elec_idle_gt                                ( pipe_tx_7_sigs[34]    ),   
  .pipe_tx7_data_valid_gt                               ( pipe_tx_7_sigs[35]    ),   
  .pipe_tx7_start_block_gt                              ( pipe_tx_7_sigs[36]    ),   
  .pipe_tx7_syncheader_gt                               ( pipe_tx_7_sigs[38:37] ),   
  .pipe_rx7_polarity_gt                                 ( pipe_tx_7_sigs[39]    ),   
  .pipe_tx7_powerdown_gt                                ( pipe_tx_7_sigs[41:40] ),   
  .pipe_tx7_eqcontrol_gt                                ( pipe_tx7_eqcontrol    ),   
  .pipe_tx7_eqpreset_gt                                 (  ),   
  .pipe_tx7_eqdeemph_gt                                 (  ),   
  .pipe_rx7_eqcontrol_gt                                ( pipe_rx7_eqcontrol    ),   
  .pipe_rx7_eqpreset_gt                                 (  ),   
  .pipe_rx7_eqlp_lffs_gt                                (  ),   
  .pipe_rx7_eqlp_txpreset_gt                            (  ),   
  .pipe_tx7_compliance_gt                               (  ),   

  //-----------------------------
  // PIPE RX BUS Signals[83:0]
  //-----------------------------

  // pipe_rx_0_sigs[83:0]
  .pipe_rx0_data_gt                                     ( pipe_rx_0_sigs[31: 0] ),   
  .pipe_rx0_char_is_k_gt                                ( pipe_rx_0_sigs[33:32] ),   
  .pipe_rx0_data_valid_gt                               ( pipe_rx_0_sigs[35]    ),   
  .pipe_rx0_elec_idle_gt                                ( pipe_rx_0_sigs[34]    ),   
  .pipe_rx0_start_block_gt                              ( pipe_rx_0_sigs[36]    ),   
  .pipe_rx0_syncheader_gt                               ( pipe_rx_0_sigs[38:37] ),   
  .pipe_rx0_status_gt                                   ( rx_status ),   
  .pipe_rx0_valid_gt                                    ( ~pipe_rx_0_sigs[34]    ),   
  .pipe_rx0_phy_status_gt                               ( phy_status    ),   
  .pipe_tx0_eqdone_gt                                   ( pipe_tx0_eqdone       ),   
  .pipe_tx0_eqcoeff_gt                                  ( 18'h00904             ),   
  .pipe_rx0_eqlp_new_txcoef_forpreset_gt                ( 18'h05                ),   
  .pipe_rx0_eqlp_lffs_sel_gt                            ( 1'b0                  ),   
  .pipe_rx0_eqlp_adaptdone_gt                           ( 1'b0                  ),   
  .pipe_rx0_eqdone_gt                                   ( pipe_rx0_eqdone       ),   

  // pipe_rx_1_sigs[83:0]
  .pipe_rx1_data_gt                                     ( pipe_rx_1_sigs[31: 0] ),   
  .pipe_rx1_char_is_k_gt                                ( pipe_rx_1_sigs[33:32] ),   
  .pipe_rx1_data_valid_gt                               ( pipe_rx_1_sigs[35]    ),   
  .pipe_rx1_elec_idle_gt                                ( pipe_rx_1_sigs[34]    ),   
  .pipe_rx1_start_block_gt                              ( pipe_rx_1_sigs[36]    ),   
  .pipe_rx1_syncheader_gt                               ( pipe_rx_1_sigs[38:37] ),   
  .pipe_rx1_status_gt                                   ( (PL_LINK_CAP_MAX_LINK_WIDTH >= 2 )? rx_status : 3'b0 ),   
  .pipe_rx1_valid_gt                                    ( ~pipe_rx_1_sigs[34]    ),   
  .pipe_rx1_phy_status_gt                               ( (PL_LINK_CAP_MAX_LINK_WIDTH >= 2 )? phy_status : 1'b0 ),   
  .pipe_tx1_eqdone_gt                                   ( pipe_tx1_eqdone       ),   
  .pipe_tx1_eqcoeff_gt                                  ( 18'h00904             ),   
  .pipe_rx1_eqlp_new_txcoef_forpreset_gt                ( 18'h05                ),   
  .pipe_rx1_eqlp_lffs_sel_gt                            ( 1'b0                  ),   
  .pipe_rx1_eqlp_adaptdone_gt                           ( 1'b0                  ),   
  .pipe_rx1_eqdone_gt                                   ( pipe_rx1_eqdone       ),    

  // pipe_rx_2_sigs[83:0]
  .pipe_rx2_data_gt                                     ( pipe_rx_2_sigs[31: 0] ),   
  .pipe_rx2_char_is_k_gt                                ( pipe_rx_2_sigs[33:32] ),   
  .pipe_rx2_data_valid_gt                               ( pipe_rx_2_sigs[35]    ),   
  .pipe_rx2_elec_idle_gt                                ( pipe_rx_2_sigs[34]    ),   
  .pipe_rx2_start_block_gt                              ( pipe_rx_2_sigs[36]    ),   
  .pipe_rx2_syncheader_gt                               ( pipe_rx_2_sigs[38:37] ),   
  .pipe_rx2_status_gt                                   ( (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 )? rx_status : 3'b0 ),   
  .pipe_rx2_valid_gt                                    ( ~pipe_rx_2_sigs[34]    ),   
  .pipe_rx2_phy_status_gt                               ( (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 )? phy_status : 1'b0 ),   
  .pipe_tx2_eqdone_gt                                   ( pipe_tx2_eqdone       ),   
  .pipe_tx2_eqcoeff_gt                                  ( 18'h00904             ),   
  .pipe_rx2_eqlp_new_txcoef_forpreset_gt                ( 18'h05                ),   
  .pipe_rx2_eqlp_lffs_sel_gt                            ( 1'b0                  ),   
  .pipe_rx2_eqlp_adaptdone_gt                           ( 1'b0                  ),   
  .pipe_rx2_eqdone_gt                                   ( pipe_rx2_eqdone       ),   

  // pipe_rx_3_sigs[83:0]
  .pipe_rx3_data_gt                                     ( pipe_rx_3_sigs[31: 0] ),   
  .pipe_rx3_char_is_k_gt                                ( pipe_rx_3_sigs[33:32] ),   
  .pipe_rx3_data_valid_gt                               ( pipe_rx_3_sigs[35]    ),   
  .pipe_rx3_elec_idle_gt                                ( pipe_rx_3_sigs[34]    ),   
  .pipe_rx3_start_block_gt                              ( pipe_rx_3_sigs[36]    ),   
  .pipe_rx3_syncheader_gt                               ( pipe_rx_3_sigs[38:37] ),   
  .pipe_rx3_status_gt                                   ( (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 )? rx_status : 3'b0 ),   
  .pipe_rx3_valid_gt                                    ( ~pipe_rx_3_sigs[34]    ),   
  .pipe_rx3_phy_status_gt                               ((PL_LINK_CAP_MAX_LINK_WIDTH >= 4 )? phy_status : 1'b0 ),   
  .pipe_tx3_eqdone_gt                                   ( pipe_tx3_eqdone       ),   
  .pipe_tx3_eqcoeff_gt                                  ( 18'h00904             ),   
  .pipe_rx3_eqlp_new_txcoef_forpreset_gt                ( 18'h05                ),   
  .pipe_rx3_eqlp_lffs_sel_gt                            ( 1'b0                  ),   
  .pipe_rx3_eqlp_adaptdone_gt                           ( 1'b0                  ),   
  .pipe_rx3_eqdone_gt                                   ( pipe_rx3_eqdone       ), 

  // pipe_rx_4_sigs[83:0]
  .pipe_rx4_data_gt                                     ( pipe_rx_4_sigs[31: 0] ),   
  .pipe_rx4_char_is_k_gt                                ( pipe_rx_4_sigs[33:32] ),   
  .pipe_rx4_data_valid_gt                               ( pipe_rx_4_sigs[35]    ),   
  .pipe_rx4_elec_idle_gt                                ( pipe_rx_4_sigs[34]    ),   
  .pipe_rx4_start_block_gt                              ( pipe_rx_4_sigs[36]    ),   
  .pipe_rx4_syncheader_gt                               ( pipe_rx_4_sigs[38:37] ),   
  .pipe_rx4_status_gt                                   ( (PL_LINK_CAP_MAX_LINK_WIDTH == 8 )? rx_status : 3'b0 ),   
  .pipe_rx4_valid_gt                                    ( ~pipe_rx_4_sigs[34]    ),   
  .pipe_rx4_phy_status_gt                               ((PL_LINK_CAP_MAX_LINK_WIDTH == 8 )? phy_status : 1'b0 ),   
  .pipe_tx4_eqdone_gt                                   ( pipe_tx4_eqdone       ),   
  .pipe_tx4_eqcoeff_gt                                  ( 18'h00904             ),   
  .pipe_rx4_eqlp_new_txcoef_forpreset_gt                ( 18'h05                ),   
  .pipe_rx4_eqlp_lffs_sel_gt                            ( 1'b0                  ),   
  .pipe_rx4_eqlp_adaptdone_gt                           ( 1'b0                  ),   
  .pipe_rx4_eqdone_gt                                   ( pipe_rx4_eqdone       ),   

  // pipe_rx_5_sigs[83:0]
  .pipe_rx5_data_gt                                     ( pipe_rx_5_sigs[31: 0] ),   
  .pipe_rx5_char_is_k_gt                                ( pipe_rx_5_sigs[33:32] ),   
  .pipe_rx5_data_valid_gt                               ( pipe_rx_5_sigs[35]    ),   
  .pipe_rx5_elec_idle_gt                                ( pipe_rx_5_sigs[34]    ),   
  .pipe_rx5_start_block_gt                              ( pipe_rx_5_sigs[36]    ),   
  .pipe_rx5_syncheader_gt                               ( pipe_rx_5_sigs[38:37] ),   
  .pipe_rx5_status_gt                                   ( (PL_LINK_CAP_MAX_LINK_WIDTH == 8 )? rx_status : 3'b0  ),   
  .pipe_rx5_valid_gt                                    ( ~pipe_rx_5_sigs[34]    ),   
  .pipe_rx5_phy_status_gt                               ((PL_LINK_CAP_MAX_LINK_WIDTH == 8 )? phy_status : 1'b0 ),   
  .pipe_tx5_eqdone_gt                                   ( pipe_tx5_eqdone       ),   
  .pipe_tx5_eqcoeff_gt                                  ( 18'h00904             ),   
  .pipe_rx5_eqlp_new_txcoef_forpreset_gt                ( 18'h05                ),   
  .pipe_rx5_eqlp_lffs_sel_gt                            ( 1'b0                  ),   
  .pipe_rx5_eqlp_adaptdone_gt                           ( 1'b0                  ),   
  .pipe_rx5_eqdone_gt                                   ( pipe_rx5_eqdone       ),    

  // pipe_rx_6_sigs[83:0]
  .pipe_rx6_data_gt                                     ( pipe_rx_6_sigs[31: 0] ),   
  .pipe_rx6_char_is_k_gt                                ( pipe_rx_6_sigs[33:32] ),   
  .pipe_rx6_data_valid_gt                               ( pipe_rx_6_sigs[35]    ),   
  .pipe_rx6_elec_idle_gt                                ( pipe_rx_6_sigs[34]    ),   
  .pipe_rx6_start_block_gt                              ( pipe_rx_6_sigs[36]    ),   
  .pipe_rx6_syncheader_gt                               ( pipe_rx_6_sigs[38:37] ),   
  .pipe_rx6_status_gt                                   ( (PL_LINK_CAP_MAX_LINK_WIDTH == 8 )? rx_status : 3'b0  ),   
  .pipe_rx6_valid_gt                                    ( ~pipe_rx_6_sigs[34]    ),   
  .pipe_rx6_phy_status_gt                               ((PL_LINK_CAP_MAX_LINK_WIDTH == 8 )? phy_status : 1'b0 ),   
  .pipe_tx6_eqdone_gt                                   ( pipe_tx6_eqdone       ),   
  .pipe_tx6_eqcoeff_gt                                  ( 18'h00904             ),   
  .pipe_rx6_eqlp_new_txcoef_forpreset_gt                ( 18'h05                ),   
  .pipe_rx6_eqlp_lffs_sel_gt                            ( 1'b0                  ),   
  .pipe_rx6_eqlp_adaptdone_gt                           ( 1'b0                  ),   
  .pipe_rx6_eqdone_gt                                   ( pipe_rx6_eqdone       ),    

  // pipe_rx_7_sigs[83:0]
  .pipe_rx7_data_gt                                     ( pipe_rx_7_sigs[31: 0] ),   
  .pipe_rx7_char_is_k_gt                                ( pipe_rx_7_sigs[33:32] ),   
  .pipe_rx7_data_valid_gt                               ( pipe_rx_7_sigs[35]    ),   
  .pipe_rx7_elec_idle_gt                                ( pipe_rx_7_sigs[34]    ),   
  .pipe_rx7_start_block_gt                              ( pipe_rx_7_sigs[36]    ),   
  .pipe_rx7_syncheader_gt                               ( pipe_rx_7_sigs[38:37] ),   
  .pipe_rx7_status_gt                                   ( (PL_LINK_CAP_MAX_LINK_WIDTH == 8 )? rx_status : 3'b0  ),   
  .pipe_rx7_valid_gt                                    ( ~pipe_rx_7_sigs[34]    ),   
  .pipe_rx7_phy_status_gt                               ((PL_LINK_CAP_MAX_LINK_WIDTH == 8 )? phy_status : 1'b0 ),   
  .pipe_tx7_eqdone_gt                                   ( pipe_tx7_eqdone       ),   
  .pipe_tx7_eqcoeff_gt                                  ( 18'h00904             ),   
  .pipe_rx7_eqlp_new_txcoef_forpreset_gt                ( 18'h05                ),   
  .pipe_rx7_eqlp_lffs_sel_gt                            ( 1'b0                  ),   
  .pipe_rx7_eqlp_adaptdone_gt                           ( 1'b0                  ),   
  .pipe_rx7_eqdone_gt                                   ( pipe_rx7_eqdone       )    
  );
 
  reg [3:0] pipe_rx0_eqcontrol_reg = 4'b0;
  reg [3:0] pipe_rx1_eqcontrol_reg = 4'b0;
  reg [3:0] pipe_rx2_eqcontrol_reg = 4'b0;
  reg [3:0] pipe_rx3_eqcontrol_reg = 4'b0;
  reg [3:0] pipe_rx4_eqcontrol_reg = 4'b0;
  reg [3:0] pipe_rx5_eqcontrol_reg = 4'b0;
  reg [3:0] pipe_rx6_eqcontrol_reg = 4'b0;
  reg [3:0] pipe_rx7_eqcontrol_reg = 4'b0;
  reg [3:0] pipe_tx0_eqcontrol_reg = 4'b0;
  reg [3:0] pipe_tx1_eqcontrol_reg = 4'b0;
  reg [3:0] pipe_tx2_eqcontrol_reg = 4'b0;
  reg [3:0] pipe_tx3_eqcontrol_reg = 4'b0;
  reg [3:0] pipe_tx4_eqcontrol_reg = 4'b0;
  reg [3:0] pipe_tx5_eqcontrol_reg = 4'b0;
  reg [3:0] pipe_tx6_eqcontrol_reg = 4'b0;
  reg [3:0] pipe_tx7_eqcontrol_reg = 4'b0;
  
  always @ (posedge pipe_clk)
  begin
   pipe_rx0_eqcontrol_reg     <= {pipe_rx0_eqcontrol_reg[1:0], pipe_rx0_eqcontrol};
   pipe_rx1_eqcontrol_reg     <= {pipe_rx1_eqcontrol_reg[1:0], pipe_rx1_eqcontrol};
   pipe_rx2_eqcontrol_reg     <= {pipe_rx2_eqcontrol_reg[1:0], pipe_rx2_eqcontrol};
   pipe_rx3_eqcontrol_reg     <= {pipe_rx3_eqcontrol_reg[1:0], pipe_rx3_eqcontrol};
   pipe_rx4_eqcontrol_reg     <= {pipe_rx4_eqcontrol_reg[1:0], pipe_rx4_eqcontrol};
   pipe_rx5_eqcontrol_reg     <= {pipe_rx5_eqcontrol_reg[1:0], pipe_rx5_eqcontrol};
   pipe_rx6_eqcontrol_reg     <= {pipe_rx6_eqcontrol_reg[1:0], pipe_rx6_eqcontrol};
   pipe_rx7_eqcontrol_reg     <= {pipe_rx7_eqcontrol_reg[1:0], pipe_rx7_eqcontrol};
   pipe_tx0_eqcontrol_reg     <= {pipe_tx0_eqcontrol_reg[1:0], pipe_tx0_eqcontrol};
   pipe_tx1_eqcontrol_reg     <= {pipe_tx1_eqcontrol_reg[1:0], pipe_tx1_eqcontrol};
   pipe_tx2_eqcontrol_reg     <= {pipe_tx2_eqcontrol_reg[1:0], pipe_tx2_eqcontrol};
   pipe_tx3_eqcontrol_reg     <= {pipe_tx3_eqcontrol_reg[1:0], pipe_tx3_eqcontrol};
   pipe_tx4_eqcontrol_reg     <= {pipe_tx4_eqcontrol_reg[1:0], pipe_tx4_eqcontrol};
   pipe_tx5_eqcontrol_reg     <= {pipe_tx5_eqcontrol_reg[1:0], pipe_tx5_eqcontrol};
   pipe_tx6_eqcontrol_reg     <= {pipe_tx6_eqcontrol_reg[1:0], pipe_tx6_eqcontrol};
   pipe_tx7_eqcontrol_reg     <= {pipe_tx7_eqcontrol_reg[1:0], pipe_tx7_eqcontrol};
  end
  
  // generate rx*_eqdone
  assign pipe_rx0_eqdone = (pipe_rx0_eqcontrol_reg[3:2] != pipe_rx0_eqcontrol)? 1'b1 : 1'b0;
  assign pipe_rx1_eqdone = (pipe_rx1_eqcontrol_reg[3:2] != pipe_rx1_eqcontrol)? 1'b1 : 1'b0;
  assign pipe_rx2_eqdone = (pipe_rx2_eqcontrol_reg[3:2] != pipe_rx2_eqcontrol)? 1'b1 : 1'b0;
  assign pipe_rx3_eqdone = (pipe_rx3_eqcontrol_reg[3:2] != pipe_rx3_eqcontrol)? 1'b1 : 1'b0;
  assign pipe_rx4_eqdone = (pipe_rx4_eqcontrol_reg[3:2] != pipe_rx4_eqcontrol)? 1'b1 : 1'b0;
  assign pipe_rx5_eqdone = (pipe_rx5_eqcontrol_reg[3:2] != pipe_rx5_eqcontrol)? 1'b1 : 1'b0;
  assign pipe_rx6_eqdone = (pipe_rx6_eqcontrol_reg[3:2] != pipe_rx6_eqcontrol)? 1'b1 : 1'b0;
  assign pipe_rx7_eqdone = (pipe_rx7_eqcontrol_reg[3:2] != pipe_rx7_eqcontrol)? 1'b1 : 1'b0; 
  // generate tx*_eqdone
  assign pipe_tx0_eqdone = (pipe_tx0_eqcontrol_reg[3:2] != pipe_tx0_eqcontrol)? 1'b1 : 1'b0;
  assign pipe_tx1_eqdone = (pipe_tx1_eqcontrol_reg[3:2] != pipe_tx1_eqcontrol)? 1'b1 : 1'b0;
  assign pipe_tx2_eqdone = (pipe_tx2_eqcontrol_reg[3:2] != pipe_tx2_eqcontrol)? 1'b1 : 1'b0;
  assign pipe_tx3_eqdone = (pipe_tx3_eqcontrol_reg[3:2] != pipe_tx3_eqcontrol)? 1'b1 : 1'b0;
  assign pipe_tx4_eqdone = (pipe_tx4_eqcontrol_reg[3:2] != pipe_tx4_eqcontrol)? 1'b1 : 1'b0;
  assign pipe_tx5_eqdone = (pipe_tx5_eqcontrol_reg[3:2] != pipe_tx5_eqcontrol)? 1'b1 : 1'b0;
  assign pipe_tx6_eqdone = (pipe_tx6_eqcontrol_reg[3:2] != pipe_tx6_eqcontrol)? 1'b1 : 1'b0;
  assign pipe_tx7_eqdone = (pipe_tx7_eqcontrol_reg[3:2] != pipe_tx7_eqcontrol)? 1'b1 : 1'b0; 
  
 
 // Pipe mode tie-offs
 assign  common_commands_out[0]     = pipe_clk;
 assign  common_commands_out[3]     = pipe_tx_rcvr_det; 
 assign  common_commands_out[25:10] = 16'b0;
 assign  pipe_tx_0_sigs[83:42]      = 42'b0;
 assign  pipe_tx_1_sigs[83:42]      = 42'b0;
 assign  pipe_tx_2_sigs[83:42]      = 42'b0;
 assign  pipe_tx_3_sigs[83:42]      = 42'b0;
 assign  pipe_tx_4_sigs[83:42]      = 42'b0;
 assign  pipe_tx_5_sigs[83:42]      = 42'b0;
 assign  pipe_tx_6_sigs[83:42]      = 42'b0;
 assign  pipe_tx_7_sigs[83:42]      = 42'b0;
 
end
endgenerate

  // Tandem Input/Output Isolation Multiplexors                                                                      //
  //-----------------------------------------------------------------------------------------------------------------//
    // Assign as passthrough if not tandem configuration
    // Input assigned passthroughs
    assign icap_o = 32'h0000_0000;
    assign cfg_mgmt_write_wire = cfg_mgmt_write;
    assign cfg_mgmt_read_wire = cfg_mgmt_read;

    assign cfg_per_func_status_control_wire = cfg_per_func_status_control;
    assign cfg_per_function_output_request_wire = cfg_per_function_output_request;
    assign cfg_dsn_wire = cfg_dsn;
    assign cfg_power_state_change_ack_wire = cfg_power_state_change_ack;
    assign cfg_err_cor_in_wire = cfg_err_cor_in;
    assign cfg_err_uncor_in_wire = cfg_err_uncor_in;
    assign cfg_flr_done_wire = cfg_flr_done;
    assign cfg_vf_flr_done_wire = cfg_vf_flr_done;
    assign cfg_link_training_enable_wire = cfg_link_training_enable;
    assign cfg_ext_read_data_valid_wire = cfg_ext_read_data_valid;
    assign cfg_interrupt_pending_wire = cfg_interrupt_pending;
    assign cfg_interrupt_msi_select_wire = cfg_interrupt_msi_select;
    assign cfg_interrupt_msi_pending_status_wire = cfg_interrupt_msi_pending_status;
    assign cfg_config_space_enable_wire = cfg_config_space_enable;
    assign cfg_req_pm_transition_l23_ready_wire = cfg_req_pm_transition_l23_ready;
    assign cfg_hot_reset_in_wire = cfg_hot_reset_in;
    assign cfg_ds_port_number_wire = cfg_ds_port_number;
    assign cfg_ds_bus_number_wire = cfg_ds_bus_number;
    assign cfg_ds_device_number_wire = cfg_ds_device_number;
    assign cfg_ds_function_number_wire = cfg_ds_function_number;
    assign user_tph_stt_address_wire = user_tph_stt_address;
    assign user_tph_function_num_wire = user_tph_function_num;
    assign user_tph_stt_read_enable_wire = user_tph_stt_read_enable;
    // Output assigned passthroughs
    assign cfg_phy_link_down = cfg_phy_link_down_wire;
    assign cfg_phy_link_status = cfg_phy_link_status_wire;
    assign cfg_ltssm_state = cfg_ltssm_state_wire;
    assign cfg_hot_reset_out = cfg_hot_reset_out_wire;

    assign pcie_drp_rdy = drp_rdy_wire;
    assign pcie_drp_do = drp_do_wire;
    
    // Input assigned passthroughs
    assign drp_clk_wire   = pcie_drp_clk;
    assign drp_en_wire    = pcie_drp_en;
    assign drp_we_wire    = pcie_drp_we;
    assign drp_addr_wire  = pcie_drp_addr;
    assign drp_di_wire    = pcie_drp_di;

    // Passthrough for tandem_cplr outputs
    assign s_axis_cc_tdata_wire = s_axis_cc_tdata;
    assign s_axis_cc_tkeep_wire = s_axis_cc_tkeep;
    assign s_axis_cc_tlast_wire = s_axis_cc_tlast;
    assign s_axis_cc_tvalid_wire = s_axis_cc_tvalid;
    assign s_axis_cc_tuser_wire = s_axis_cc_tuser;
    assign s_axis_cc_tready = s_axis_cc_tready_wire;

    assign m_axis_cq_tdata = m_axis_cq_tdata_wire;
    assign m_axis_cq_tlast = m_axis_cq_tlast_wire;
    assign m_axis_cq_tvalid = m_axis_cq_tvalid_wire;
    assign m_axis_cq_tuser = m_axis_cq_tuser_wire;
    assign m_axis_cq_tkeep = m_axis_cq_tkeep_wire;
    assign m_axis_cq_tready_wire = m_axis_cq_tready;

    assign s_axis_rq_tdata_wire = s_axis_rq_tdata;
    assign s_axis_rq_tkeep_wire = s_axis_rq_tkeep;
    assign s_axis_rq_tlast_wire = s_axis_rq_tlast;
    assign s_axis_rq_tvalid_wire = s_axis_rq_tvalid;
    assign s_axis_rq_tuser_wire = s_axis_rq_tuser;
    assign s_axis_rq_tready = s_axis_rq_tready_wire;

    assign m_axis_rc_tdata = m_axis_rc_tdata_wire;
    assign m_axis_rc_tlast = m_axis_rc_tlast_wire;
    assign m_axis_rc_tvalid = m_axis_rc_tvalid_wire;
    assign m_axis_rc_tuser = m_axis_rc_tuser_wire;
    assign m_axis_rc_tkeep = m_axis_rc_tkeep_wire;
    assign m_axis_rc_tready_wire = m_axis_rc_tready;

    assign cfg_msg_transmit_done = cfg_msg_transmit_done_wire;
    assign cfg_msg_transmit_wire = cfg_msg_transmit;
    assign cfg_msg_transmit_type_wire = cfg_msg_transmit_type;
    assign cfg_msg_transmit_data_wire = cfg_msg_transmit_data;
    assign pcie_rq_tag = pcie_rq_tag_wire;
    assign pcie_rq_tag_vld = pcie_rq_tag_vld_wire;
    assign pcie_tfc_nph_av = pcie_tfc_nph_av_wire;
    assign pcie_tfc_npd_av = pcie_tfc_npd_av_wire;
    assign pcie_rq_seq_num = pcie_rq_seq_num_wire;
    assign pcie_rq_seq_num_vld = pcie_rq_seq_num_vld_wire;
    assign cfg_fc_ph = cfg_fc_ph_wire;
    assign cfg_fc_nph = cfg_fc_nph_wire;
    assign cfg_fc_cplh = cfg_fc_cplh_wire;
    assign cfg_fc_pd = cfg_fc_pd_wire;
    assign cfg_fc_npd = cfg_fc_npd_wire;
    assign cfg_fc_cpld = cfg_fc_cpld_wire;
    assign cfg_fc_sel_wire = cfg_fc_sel;
    assign pcie_cq_np_req_count = pcie_cq_np_req_count_wire;
    assign pcie_cq_np_req_wire = pcie_cq_np_req;
    assign cfg_msg_received = cfg_msg_received_wire;
    assign cfg_msg_received_type = cfg_msg_received_type_wire;
    assign cfg_msg_received_data = cfg_msg_received_data_wire;
    assign cfg_interrupt_int_wire = cfg_interrupt_int;
    assign cfg_interrupt_msi_int_wire = cfg_interrupt_msi_int;
    assign cfg_interrupt_msix_int_wire = cfg_interrupt_msix_int;
    assign user_app_rdy = 1'b1;
    assign startup_cfgclk = 1'b0;
    assign startup_cfgmclk = 1'b0;
    assign startup_eos = 1'b0;
    assign startup_preq = 1'b0;
    // Generate user_lnk_up
    assign user_lnk_up = user_lnk_up_int;
  //----------------------------------------------------------------------------------------------------------------//
endmodule


//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_gt_common.v
// Version    : 4.0

`timescale 1ns / 1ps

module rp_gt_common #(

parameter PCIE_SIM_MODE    = "FALSE", // PCIe sim mode
parameter PCIE_GT_DEVICE   = "GTH",   // PCIe GT device
parameter PCIE_USE_MODE    = "2.1",   // PCIe use mode
parameter PCIE_PLL_SEL     = "CPLL",  // PCIe PLL select for Gen1/Gen2 only
parameter PCIE_REFCLK_FREQ = 0        // PCIe reference clock frequency
)

(
input               	PIPE_CLK,
input               	QPLL_QPLLPD,
input               	QPLL_QPLLRESET,
input               	QPLL_DRP_CLK,
input               	QPLL_DRP_RST_N,
input               	QPLL_DRP_OVRD,
input               	QPLL_DRP_GEN3,
input               	QPLL_DRP_START,
output      [5:0]  	QPLL_DRP_CRSCODE,
output      [8:0]  	QPLL_DRP_FSM,
output                  QPLL_DRP_DONE,
output                  QPLL_DRP_RESET,
output                  QPLL_QPLLLOCK,
output                  QPLL_QPLLOUTCLK,
output                  QPLL_QPLLOUTREFCLK
);

    //---------- QPLL DRP Module Output --------------------

wire        [7:0]  qpll_drp_addr;
wire               qpll_drp_en;
wire        [15:0] qpll_drp_di;
wire               qpll_drp_we;

   //---------- QPLL Wrapper Output -----------------------

wire        [15:0] qpll_drp_do;
wire               qpll_drp_rdy;

   //---------- QPLL Resets -----------------------


 


        //---------- QPLL DRP Module ---------------------------------------

        rp_qpll_drp #
        (

	        .PCIE_GT_DEVICE                 (PCIE_GT_DEVICE),               // PCIe GT device
	        .PCIE_USE_MODE                  (PCIE_USE_MODE),                // PCIe use mode
	        .PCIE_PLL_SEL                   (PCIE_PLL_SEL),                 // PCIe PLL select for Gen1/Gen2 only
	        .PCIE_REFCLK_FREQ               (PCIE_REFCLK_FREQ)              // PCIe reference clock frequency

        )
        qpll_drp_i
        (

        //---------- Input -------------------------
	        .DRP_CLK                        (QPLL_DRP_CLK),
	        .DRP_RST_N                      (!QPLL_DRP_RST_N),
	        .DRP_OVRD                       (QPLL_DRP_OVRD),
	        .DRP_GEN3                       (&QPLL_DRP_GEN3),
	        .DRP_QPLLLOCK                   (QPLL_QPLLLOCK),
            .DRP_START                      (QPLL_DRP_START),
            .DRP_DO                         (qpll_drp_do),
            .DRP_RDY                        (qpll_drp_rdy),
																													     
        //----------           Output ------------------------
            .DRP_ADDR                       (qpll_drp_addr),
            .DRP_EN                         (qpll_drp_en),
            .DRP_DI                         (qpll_drp_di),
            .DRP_WE                         (qpll_drp_we),
            .DRP_DONE                       (QPLL_DRP_DONE),
            .DRP_QPLLRESET                  (QPLL_DRP_RESET),
            .DRP_CRSCODE                    (QPLL_DRP_CRSCODE),
            .DRP_FSM                        (QPLL_DRP_FSM)
        );


        //---------- QPLL Wrapper ------------------------------------------
        rp_qpll_wrapper #
        (
	        .PCIE_SIM_MODE                  (PCIE_SIM_MODE),                // PCIe sim mode
	        .PCIE_GT_DEVICE                 (PCIE_GT_DEVICE),               // PCIe GT device
	        .PCIE_USE_MODE                  (PCIE_USE_MODE),                // PCIe use mode
	        .PCIE_PLL_SEL                   (PCIE_PLL_SEL),                 // PCIe PLL select for Gen1/Gen2 only
	        .PCIE_REFCLK_FREQ               (PCIE_REFCLK_FREQ)              // PCIe reference clock frequency
        )
        qpll_wrapper_i
        (
        //---------- QPLL Clock Ports --------------
	        .QPLL_GTGREFCLK                 (PIPE_CLK),
	        .QPLL_QPLLLOCKDETCLK            (1'd0),
            .QPLL_QPLLOUTCLK                (QPLL_QPLLOUTCLK),
            .QPLL_QPLLOUTREFCLK             (QPLL_QPLLOUTREFCLK),
            .QPLL_QPLLLOCK                  (QPLL_QPLLLOCK),
        //---------- QPLL Reset Ports --------------
            .QPLL_QPLLPD                    (QPLL_QPLLPD),
            .QPLL_QPLLRESET                 (QPLL_QPLLRESET),
        //---------- QPLL DRP Ports ----------------
	        .QPLL_DRPCLK                    (QPLL_DRP_CLK),
	        .QPLL_DRPADDR                   (qpll_drp_addr),
	        .QPLL_DRPEN                     (qpll_drp_en),
	        .QPLL_DRPDI                     (qpll_drp_di),
	        .QPLL_DRPWE                     (qpll_drp_we),
            .QPLL_DRPDO                     (qpll_drp_do),
            .QPLL_DRPRDY                    (qpll_drp_rdy)			
        );
  
endmodule
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_gt_top.v
// Version    : 4.0
//----------------------------------------------------------------------------//

//----------------------------------------------------------------------------//
// Project      : Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
// Filename     : rp_gt_top.v                               //
// Description  : Instantiates the top level of the GT wrapper and also the   //
//                TX Electrical Idle filter                                   //
//                                                                            //
//---------- PIPE Wrapper Hierarchy ------------------------------------------//
//  gt_top.v                                                                  //
//      pcie_tx_elec_idle_filter_7vx.v                                        //
//      pipe_clock.v                                                          //
//      pipe_reset.v                                                          //
//      qpll_reset.v                                                          //
//          * Generate GTHE2_CHANNEL for every lane.                          //
//              pipe_user.v                                                   //
//              pipe_rate.v                                                   //
//              pipe_sync.v                                                   //
//              pipe_drp.v                                                    //
//              pipe_eq.v                                                     //
//                  rxeq_scan.v                                               //
//              gt_wrapper.v                                                  //
//                  GTHE2_CHANNEL                                             //
//                  GTHE2_COMMON                                              //
//          * Generate GTHE2_COMMON for every quad.                           //
//              qpll_drp.v                                                    //
//              qpll_wrapper.v                                                //
//----------------------------------------------------------------------------//

`timescale 1ps / 1ps

module axi_pcie3_0_gt_top #
(
  parameter               TCQ                        = 100,
  parameter               PL_LINK_CAP_MAX_LINK_WIDTH = 8,      // 1 - x1 , 2 - x2 , 4 - x4 , 8 - x8
  parameter               PL_LINK_CAP_MAX_LINK_SPEED = 3,      // 1 - Gen 1 , 2 - Gen 2 , 3 - Gen 3
  parameter               REF_CLK_FREQ               = 0,      // 0 - 100 MHz , 1 - 125 MHz , 2 - 250 MHz
  //  USER_CLK[1/2]_FREQ        : 0 = Disable user clock
  //                                : 1 =  31.25 MHz
  //                                : 2 =  62.50 MHz (default)
  //                                : 3 = 125.00 MHz
  //                                : 4 = 250.00 MHz
  //                                : 5 = 500.00 MHz
  parameter  integer      USER_CLK_FREQ             = 5,
  parameter  integer      USER_CLK2_FREQ            = 4,
  parameter               PL_SIM_FAST_LINK_TRAINING = "FALSE", // Simulation Speedup
  parameter               PCIE_EXT_CLK              = "FALSE", // Use External Clocking
  parameter               PCIE_EXT_GT_COMMON        = "FALSE", // Use External GT COMMON
  parameter               EXT_CH_GT_DRP             = "FALSE",      // PCIe external CH DRP
  parameter               EXT_QPLL_GT_DRP           = "FALSE",      // PCIe external QPLL DRP
  parameter               PCIE_TXBUF_EN             = "FALSE",
  parameter               PCIE_GT_DEVICE            = "GTH",
  parameter               PCIE_CHAN_BOND            = 0,       // 0 - One Hot, 1 - Daisy Chain, 2 - Binary Tree
  parameter               PCIE_CHAN_BOND_EN         = "FALSE", // Disable Channel bond as Integrated Block perform CB
  parameter               PCIE_USE_MODE             = "1.1",
  parameter               PCIE_LPM_DFE              = "LPM",
  parameter               TX_MARGIN_FULL_0          = 7'b1001111,                          // 1000 mV
  parameter               TX_MARGIN_FULL_1          = 7'b1001110,                          // 950 mV
  parameter               TX_MARGIN_FULL_2          = 7'b1001101,                          // 900 mV
  parameter               TX_MARGIN_FULL_3          = 7'b1001100,                          // 850 mV
  parameter               TX_MARGIN_FULL_4          = 7'b1000011,                          // 400 mV
  parameter               TX_MARGIN_LOW_0           = 7'b1000101,                          // 500 mV
  parameter               TX_MARGIN_LOW_1           = 7'b1000110 ,                          // 450 mV
  parameter               TX_MARGIN_LOW_2           = 7'b1000011,                          // 400 mV
  parameter               TX_MARGIN_LOW_3           =7'b1000010 ,                          // 350 mV
  parameter               TX_MARGIN_LOW_4           =7'b1000000 ,

  parameter               PCIE_LINK_SPEED           = 3,
  parameter               PCIE_ASYNC_EN             = "FALSE"

) (

  //-----------------------------------------------------------------------------------------------------------------//
  // Pipe Per-Link Signals
  input   wire                                       pipe_tx_rcvr_det,
  input   wire                                       pipe_tx_reset,
  input   wire                               [1:0]   pipe_tx_rate,
  input   wire                                       pipe_tx_deemph,
  input   wire                               [2:0]   pipe_tx_margin,
  input   wire                                       pipe_tx_swing,
  output  wire                               [5:0]   pipe_txeq_fs,
  output  wire                               [5:0]   pipe_txeq_lf,
  input   wire                               [7:0]   pipe_rxslide,
  output  wire                               [7:0]   pipe_rxsync_done,
  input   wire                               [5:0]   cfg_ltssm_state,

  // Pipe Per-Lane Signals - Lane 0
  output  wire                               [1:0]   pipe_rx0_char_is_k,
  output  wire                              [31:0]   pipe_rx0_data,
  output  wire                                       pipe_rx0_valid,
  output  wire                                       pipe_rx0_chanisaligned,
  output  wire                               [2:0]   pipe_rx0_status,
  output  wire                                       pipe_rx0_phy_status,
  output  wire                                       pipe_rx0_elec_idle,
  input   wire                                       pipe_rx0_polarity,
  input   wire                                       pipe_tx0_compliance,
  input   wire                               [1:0]   pipe_tx0_char_is_k,
  input   wire                              [31:0]   pipe_tx0_data,
  input   wire                                       pipe_tx0_elec_idle,
  input   wire                               [1:0]   pipe_tx0_powerdown,
  input   wire                               [1:0]   pipe_tx0_eqcontrol,
  input   wire                               [3:0]   pipe_tx0_eqpreset,
  input   wire                               [5:0]   pipe_tx0_eqdeemph,
  output  wire                                       pipe_tx0_eqdone,
  output  wire                              [17:0]   pipe_tx0_eqcoeff,
  input   wire                               [1:0]   pipe_rx0_eqcontrol,
  input   wire                               [2:0]   pipe_rx0_eqpreset,
  input   wire                               [5:0]   pipe_rx0_eq_lffs,
  input   wire                               [3:0]   pipe_rx0_eq_txpreset,
  output  wire                              [17:0]   pipe_rx0_eq_new_txcoeff,
  output  wire                                       pipe_rx0_eq_lffs_sel,
  output  wire                                       pipe_rx0_eq_adapt_done,
  output  wire                                       pipe_rx0_eqdone,

  // Pipe Per-Lane Signals - Lane 1
  output  wire                               [1:0]   pipe_rx1_char_is_k,
  output  wire                              [31:0]   pipe_rx1_data,
  output  wire                                       pipe_rx1_valid,
  output  wire                                       pipe_rx1_chanisaligned,
  output  wire                               [2:0]   pipe_rx1_status,
  output  wire                                       pipe_rx1_phy_status,
  output  wire                                       pipe_rx1_elec_idle,
  input   wire                                       pipe_rx1_polarity,
  input   wire                                       pipe_tx1_compliance,
  input   wire                               [1:0]   pipe_tx1_char_is_k,
  input   wire                              [31:0]   pipe_tx1_data,
  input   wire                                       pipe_tx1_elec_idle,
  input   wire                               [1:0]   pipe_tx1_powerdown,
  input   wire                               [1:0]   pipe_tx1_eqcontrol,
  input   wire                               [3:0]   pipe_tx1_eqpreset,
  input   wire                               [5:0]   pipe_tx1_eqdeemph,
  output  wire                                       pipe_tx1_eqdone,
  output  wire                              [17:0]   pipe_tx1_eqcoeff,
  input   wire                               [1:0]   pipe_rx1_eqcontrol,
  input   wire                               [2:0]   pipe_rx1_eqpreset,
  input   wire                               [5:0]   pipe_rx1_eq_lffs,
  input   wire                               [3:0]   pipe_rx1_eq_txpreset,
  output  wire                              [17:0]   pipe_rx1_eq_new_txcoeff,
  output  wire                                       pipe_rx1_eq_lffs_sel,
  output  wire                                       pipe_rx1_eq_adapt_done,
  output  wire                                       pipe_rx1_eqdone,

  // Pipe Per-Lane Signals - Lane 2
  output  wire                               [1:0]   pipe_rx2_char_is_k,
  output  wire                              [31:0]   pipe_rx2_data,
  output  wire                                       pipe_rx2_valid,
  output  wire                                       pipe_rx2_chanisaligned,
  output  wire                               [2:0]   pipe_rx2_status,
  output  wire                                       pipe_rx2_phy_status,
  output  wire                                       pipe_rx2_elec_idle,
  input   wire                                       pipe_rx2_polarity,
  input   wire                                       pipe_tx2_compliance,
  input   wire                               [1:0]   pipe_tx2_char_is_k,
  input   wire                              [31:0]   pipe_tx2_data,
  input   wire                                       pipe_tx2_elec_idle,
  input   wire                               [1:0]   pipe_tx2_powerdown,
  input   wire                               [1:0]   pipe_tx2_eqcontrol,
  input   wire                               [3:0]   pipe_tx2_eqpreset,
  input   wire                               [5:0]   pipe_tx2_eqdeemph,
  output  wire                                       pipe_tx2_eqdone,
  output  wire                              [17:0]   pipe_tx2_eqcoeff,
  input   wire                               [1:0]   pipe_rx2_eqcontrol,
  input   wire                               [2:0]   pipe_rx2_eqpreset,
  input   wire                               [5:0]   pipe_rx2_eq_lffs,
  input   wire                               [3:0]   pipe_rx2_eq_txpreset,
  output  wire                              [17:0]   pipe_rx2_eq_new_txcoeff,
  output  wire                                       pipe_rx2_eq_lffs_sel,
  output  wire                                       pipe_rx2_eq_adapt_done,
  output  wire                                       pipe_rx2_eqdone,

  // Pipe Per-Lane Signals - Lane 3
  output  wire                               [1:0]   pipe_rx3_char_is_k,
  output  wire                              [31:0]   pipe_rx3_data,
  output  wire                                       pipe_rx3_valid,
  output  wire                                       pipe_rx3_chanisaligned,
  output  wire                               [2:0]   pipe_rx3_status,
  output  wire                                       pipe_rx3_phy_status,
  output  wire                                       pipe_rx3_elec_idle,
  input   wire                                       pipe_rx3_polarity,
  input   wire                                       pipe_tx3_compliance,
  input   wire                               [1:0]   pipe_tx3_char_is_k,
  input   wire                              [31:0]   pipe_tx3_data,
  input   wire                                       pipe_tx3_elec_idle,
  input   wire                               [1:0]   pipe_tx3_powerdown,
  input   wire                               [1:0]   pipe_tx3_eqcontrol,
  input   wire                               [3:0]   pipe_tx3_eqpreset,
  input   wire                               [5:0]   pipe_tx3_eqdeemph,
  output  wire                                       pipe_tx3_eqdone,
  output  wire                              [17:0]   pipe_tx3_eqcoeff,
  input   wire                               [1:0]   pipe_rx3_eqcontrol,
  input   wire                               [2:0]   pipe_rx3_eqpreset,
  input   wire                               [5:0]   pipe_rx3_eq_lffs,
  input   wire                               [3:0]   pipe_rx3_eq_txpreset,
  output  wire                              [17:0]   pipe_rx3_eq_new_txcoeff,
  output  wire                                       pipe_rx3_eq_lffs_sel,
  output  wire                                       pipe_rx3_eq_adapt_done,
  output  wire                                       pipe_rx3_eqdone,

  // Pipe Per-Lane Signals - Lane 4
  output  wire                               [1:0]   pipe_rx4_char_is_k,
  output  wire                              [31:0]   pipe_rx4_data,
  output  wire                                       pipe_rx4_valid,
  output  wire                                       pipe_rx4_chanisaligned,
  output  wire                               [2:0]   pipe_rx4_status,
  output  wire                                       pipe_rx4_phy_status,
  output  wire                                       pipe_rx4_elec_idle,
  input   wire                                       pipe_rx4_polarity,
  input   wire                                       pipe_tx4_compliance,
  input   wire                               [1:0]   pipe_tx4_char_is_k,
  input   wire                              [31:0]   pipe_tx4_data,
  input   wire                                       pipe_tx4_elec_idle,
  input   wire                               [1:0]   pipe_tx4_powerdown,
  input   wire                               [1:0]   pipe_tx4_eqcontrol,
  input   wire                               [3:0]   pipe_tx4_eqpreset,
  input   wire                               [5:0]   pipe_tx4_eqdeemph,
  output  wire                                       pipe_tx4_eqdone,
  output  wire                              [17:0]   pipe_tx4_eqcoeff,
  input   wire                               [1:0]   pipe_rx4_eqcontrol,
  input   wire                               [2:0]   pipe_rx4_eqpreset,
  input   wire                               [5:0]   pipe_rx4_eq_lffs,
  input   wire                               [3:0]   pipe_rx4_eq_txpreset,
  output  wire                              [17:0]   pipe_rx4_eq_new_txcoeff,
  output  wire                                       pipe_rx4_eq_lffs_sel,
  output  wire                                       pipe_rx4_eq_adapt_done,
  output  wire                                       pipe_rx4_eqdone,

  // Pipe Per-Lane Signals - Lane 5
  output  wire                               [1:0]   pipe_rx5_char_is_k,
  output  wire                              [31:0]   pipe_rx5_data,
  output  wire                                       pipe_rx5_valid,
  output  wire                                       pipe_rx5_chanisaligned,
  output  wire                               [2:0]   pipe_rx5_status,
  output  wire                                       pipe_rx5_phy_status,
  output  wire                                       pipe_rx5_elec_idle,
  input   wire                                       pipe_rx5_polarity,
  input   wire                                       pipe_tx5_compliance,
  input   wire                               [1:0]   pipe_tx5_char_is_k,
  input   wire                              [31:0]   pipe_tx5_data,
  input   wire                                       pipe_tx5_elec_idle,
  input   wire                               [1:0]   pipe_tx5_powerdown,
  input   wire                               [1:0]   pipe_tx5_eqcontrol,
  input   wire                               [3:0]   pipe_tx5_eqpreset,
  input   wire                               [5:0]   pipe_tx5_eqdeemph,
  output  wire                                       pipe_tx5_eqdone,
  output  wire                              [17:0]   pipe_tx5_eqcoeff,
  input   wire                               [1:0]   pipe_rx5_eqcontrol,
  input   wire                               [2:0]   pipe_rx5_eqpreset,
  input   wire                               [5:0]   pipe_rx5_eq_lffs,
  input   wire                               [3:0]   pipe_rx5_eq_txpreset,
  output  wire                              [17:0]   pipe_rx5_eq_new_txcoeff,
  output  wire                                       pipe_rx5_eq_lffs_sel,
  output  wire                                       pipe_rx5_eq_adapt_done,
  output  wire                                       pipe_rx5_eqdone,

  // Pipe Per-Lane Signals - Lane 6
  output  wire                               [1:0]   pipe_rx6_char_is_k,
  output  wire                              [31:0]   pipe_rx6_data,
  output  wire                                       pipe_rx6_valid,
  output  wire                                       pipe_rx6_chanisaligned,
  output  wire                               [2:0]   pipe_rx6_status,
  output  wire                                       pipe_rx6_phy_status,
  output  wire                                       pipe_rx6_elec_idle,
  input   wire                                       pipe_rx6_polarity,
  input   wire                                       pipe_tx6_compliance,
  input   wire                               [1:0]   pipe_tx6_char_is_k,
  input   wire                              [31:0]   pipe_tx6_data,
  input   wire                                       pipe_tx6_elec_idle,
  input   wire                               [1:0]   pipe_tx6_powerdown,
  input   wire                               [1:0]   pipe_tx6_eqcontrol,
  input   wire                               [3:0]   pipe_tx6_eqpreset,
  input   wire                               [5:0]   pipe_tx6_eqdeemph,
  output  wire                                       pipe_tx6_eqdone,
  output  wire                              [17:0]   pipe_tx6_eqcoeff,
  input   wire                               [1:0]   pipe_rx6_eqcontrol,
  input   wire                               [2:0]   pipe_rx6_eqpreset,
  input   wire                               [5:0]   pipe_rx6_eq_lffs,
  input   wire                               [3:0]   pipe_rx6_eq_txpreset,
  output  wire                              [17:0]   pipe_rx6_eq_new_txcoeff,
  output  wire                                       pipe_rx6_eq_lffs_sel,
  output  wire                                       pipe_rx6_eq_adapt_done,
  output  wire                                       pipe_rx6_eqdone,

  // Pipe Per-Lane Signals - Lane 7
  output  wire                               [1:0]   pipe_rx7_char_is_k,
  output  wire                              [31:0]   pipe_rx7_data,
  output  wire                                       pipe_rx7_valid,
  output  wire                                       pipe_rx7_chanisaligned,
  output  wire                               [2:0]   pipe_rx7_status,
  output  wire                                       pipe_rx7_phy_status,
  output  wire                                       pipe_rx7_elec_idle,
  input   wire                                       pipe_rx7_polarity,
  input   wire                                       pipe_tx7_compliance,
  input   wire                               [1:0]   pipe_tx7_char_is_k,
  input   wire                              [31:0]   pipe_tx7_data,
  input   wire                                       pipe_tx7_elec_idle,
  input   wire                               [1:0]   pipe_tx7_powerdown,
  input   wire                               [1:0]   pipe_tx7_eqcontrol,
  input   wire                               [3:0]   pipe_tx7_eqpreset,
  input   wire                               [5:0]   pipe_tx7_eqdeemph,
  output  wire                                       pipe_tx7_eqdone,
  output  wire                              [17:0]   pipe_tx7_eqcoeff,
  input   wire                               [1:0]   pipe_rx7_eqcontrol,
  input   wire                               [2:0]   pipe_rx7_eqpreset,
  input   wire                               [5:0]   pipe_rx7_eq_lffs,
  input   wire                               [3:0]   pipe_rx7_eq_txpreset,
  output  wire                              [17:0]   pipe_rx7_eq_new_txcoeff,
  output  wire                                       pipe_rx7_eq_lffs_sel,
  output  wire                                       pipe_rx7_eq_adapt_done,
  output  wire                                       pipe_rx7_eqdone,

  // Manual PCIe Equalization Control
  input          [(PL_LINK_CAP_MAX_LINK_WIDTH-1):0]   pipe_rxeq_user_en,
  input       [(PL_LINK_CAP_MAX_LINK_WIDTH*18)-1:0]   pipe_rxeq_user_txcoeff,
  input          [(PL_LINK_CAP_MAX_LINK_WIDTH-1):0]   pipe_rxeq_user_mode,

  // PCIe DRP (PCIe DRP) Interface
  input                                               drp_rdy,
  input                                    [15:0]     drp_do,

  output                                              drp_clk,
  output                                              drp_en,
  output                                              drp_we,
  output                                   [10:0]     drp_addr,
  output                                   [15:0]     drp_di,


  // PCI Express signals
  output  wire [ (PL_LINK_CAP_MAX_LINK_WIDTH-1):0]   pci_exp_txn,
  output  wire [ (PL_LINK_CAP_MAX_LINK_WIDTH-1):0]   pci_exp_txp,
  input   wire [ (PL_LINK_CAP_MAX_LINK_WIDTH-1):0]   pci_exp_rxn,
  input   wire [ (PL_LINK_CAP_MAX_LINK_WIDTH-1):0]   pci_exp_rxp,

  //---------- PIPE Clock & Reset Ports ------------------
  input   wire                                       pipe_clk,               // Reference clock
  input   wire                                       sys_rst_n,              // PCLK       | PCLK
  output  wire                                       rec_clk,                // Recovered Clock
  output  wire                                       pipe_pclk,              // Drives [TX/RX]USRCLK in Gen1/Gen2
  output  wire                                       core_clk,
  output  wire                                       user_clk,
  output  wire                                       phy_rdy,
  output  wire                                       mmcm_lock,
  input						                         pipe_mmcm_rst_n,

//-----------TRANSCEIVER DEBUG--------------------------------


  output      [4:0]               PIPE_RST_FSM,        
  output      [11:0]              PIPE_QRST_FSM,       
  output      [(PL_LINK_CAP_MAX_LINK_WIDTH*5)-1:0] PIPE_RATE_FSM,    
  output      [(PL_LINK_CAP_MAX_LINK_WIDTH*6)-1:0] PIPE_SYNC_FSM_TX, 
  output      [(PL_LINK_CAP_MAX_LINK_WIDTH*7)-1:0] PIPE_SYNC_FSM_RX,
  output      [(PL_LINK_CAP_MAX_LINK_WIDTH*7)-1:0] PIPE_DRP_FSM,   

  output                                           PIPE_RST_IDLE,         
  output                                           PIPE_QRST_IDLE,       
  output                                           PIPE_RATE_IDLE,      
  output      [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     PIPE_EYESCANDATAERROR,      
  output      [(PL_LINK_CAP_MAX_LINK_WIDTH*3)-1:0] PIPE_RXSTATUS,
  output     [(PL_LINK_CAP_MAX_LINK_WIDTH*15)-1:0] PIPE_DMONITOROUT,
  //---------- Debug Ports -------------------------------
  output     [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    PIPE_CPLL_LOCK,
  output     [(PL_LINK_CAP_MAX_LINK_WIDTH-1)>>2:0] PIPE_QPLL_LOCK,
  output     [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    PIPE_RXPMARESETDONE,       
  output     [(PL_LINK_CAP_MAX_LINK_WIDTH*3)-1:0]  PIPE_RXBUFSTATUS,         
  output     [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    PIPE_TXPHALIGNDONE,       
  output     [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    PIPE_TXPHINITDONE,        
  output     [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    PIPE_TXDLYSRESETDONE,    
  output     [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    PIPE_RXPHALIGNDONE,      
  output     [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    PIPE_RXDLYSRESETDONE,     
  output     [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    PIPE_RXSYNCDONE,       
  output     [(PL_LINK_CAP_MAX_LINK_WIDTH*8)-1:0]  PIPE_RXDISPERR,       
  output     [(PL_LINK_CAP_MAX_LINK_WIDTH*8)-1:0]  PIPE_RXNOTINTABLE,      
  output     [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    PIPE_RXCOMMADET,        

  output      [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     PIPE_DEBUG_0,      
  output      [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     PIPE_DEBUG_1,     
  output      [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     PIPE_DEBUG_2,    
  output      [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     PIPE_DEBUG_3,   
  output      [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     PIPE_DEBUG_4,  
  output      [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     PIPE_DEBUG_5, 
  output      [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     PIPE_DEBUG_6,
  output      [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     PIPE_DEBUG_7,
  output      [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     PIPE_DEBUG_8,
  output      [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     PIPE_DEBUG_9,      
  output      [31:0]              PIPE_DEBUG,
  output      [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     PIPE_JTAG_RDY,



  input       [ 2:0]              PIPE_TXPRBSSEL,        
  input       [ 2:0]              PIPE_RXPRBSSEL,       
  input                           PIPE_TXPRBSFORCEERR, 
  input                           PIPE_RXPRBSCNTRESET, 
  input       [ 2:0]              PIPE_LOOPBACK,      

  output      [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     PIPE_RXPRBSERR,       
    input       [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     PIPE_TXINHIBIT,         // Async/PCLK | Async/PCLK  

  //-----------Channel DRP----------------------------------------
  output                                            ext_ch_gt_drpclk,
  input        [(PL_LINK_CAP_MAX_LINK_WIDTH*9)-1:0] ext_ch_gt_drpaddr,
  input        [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     ext_ch_gt_drpen,
  input        [(PL_LINK_CAP_MAX_LINK_WIDTH*16)-1:0]ext_ch_gt_drpdi,
  input        [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     ext_ch_gt_drpwe,
  output       [(PL_LINK_CAP_MAX_LINK_WIDTH*16)-1:0]ext_ch_gt_drpdo,
  output       [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     ext_ch_gt_drprdy,

//----------- Shared Logic Internal--------------------------------------

  output                                             INT_PCLK_OUT_SLAVE,     // PCLK       | PCLK
  output                                             INT_RXUSRCLK_OUT,       // RXUSERCLK
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]           INT_RXOUTCLK_OUT,       // RX recovered clock
  output                                             INT_DCLK_OUT,           // DCLK       | DCLK
  output                                             INT_USERCLK1_OUT,       // Optional user clock
  output                                             INT_USERCLK2_OUT,       // Optional user clock
  output                                             INT_OOBCLK_OUT,         // OOB        | OOB
  output  [1:0]                                      INT_QPLLLOCK_OUT,
  output  [1:0]                                      INT_QPLLOUTCLK_OUT,
  output  [1:0]                                      INT_QPLLOUTREFCLK_OUT,
  input   [(PL_LINK_CAP_MAX_LINK_WIDTH-1):0]         INT_PCLK_SEL_SLAVE,

  // Shared Logic External
    //---------- External GT COMMON Ports ----------------------
  input                                     [11:0]   qpll_drp_crscode,
  input                                     [17:0]   qpll_drp_fsm,
  input                                     [1:0]    qpll_drp_done,
  input                                     [1:0]    qpll_drp_reset,
  input                                     [1:0]    qpll_qplllock,
  input                                     [1:0]    qpll_qplloutclk,
  input                                     [1:0]    qpll_qplloutrefclk,
  output                                             qpll_qplld,
  output                                    [1:0]    qpll_qpllreset,
  output                                             qpll_drp_clk,
  output                                             qpll_drp_rst_n,
  output                                             qpll_drp_ovrd,
  output                                             qpll_drp_gen3,
  output                                             qpll_drp_start,

  //---------- External Clock Ports ----------------------
  input                                              PIPE_PCLK_IN,           // PCLK       | PCLK
  input                                              PIPE_RXUSRCLK_IN,       // RXUSERCLK
  
  input  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]            PIPE_RXOUTCLK_IN,       // RX recovered clock
  input                                              PIPE_DCLK_IN,           // DCLK       | DCLK
  input                                              PIPE_USERCLK1_IN,       // Optional user clock
  input                                              PIPE_USERCLK2_IN,       // Optional user clock
  input                                              PIPE_OOBCLK_IN,         // OOB        | OOB
  input                                              PIPE_MMCM_LOCK_IN,      // Async      | Async
  output                                             PIPE_TXOUTCLK_OUT,      // PCLK       | PCLK
  output [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]            PIPE_RXOUTCLK_OUT,      // RX recovered clock (for debug only)
  output [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]            PIPE_PCLK_SEL_OUT,      // PCLK       | PCLK
  output                                             PIPE_GEN3_OUT,          // PCLK       | PCLK
  
  input [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    CPLLPD, 
  input [(PL_LINK_CAP_MAX_LINK_WIDTH*2)-1:0]  TXPD,
  input [(PL_LINK_CAP_MAX_LINK_WIDTH*2)-1:0]  RXPD,
  input [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    TXPDELECIDLEMODE,
  input [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    TXDETECTRX,
  input [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    TXELECIDLE,
  input [(PL_LINK_CAP_MAX_LINK_WIDTH-1)>>2:0] QPLLPD, 
  input                                       POWERDOWN
);

  wire  [31:0]  gt_rx_data_k_wire;
  wire [255:0]  gt_rx_data_wire;
  wire   [7:0]  gt_rx_valid_wire;
  wire   [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]  gt_rxchanisaligned_wire;
  wire  [23:0]  gt_rx_status_wire;
  wire   [7:0]  gt_rx_phy_status_wire;
  wire   [7:0]  gt_rx_elec_idle_wire;
  wire   [7:0]  gt_rx_polarity;

  wire  [31:0]  gt_tx_data_k;
  wire [255:0]  gt_tx_data;
  wire   [7:0]  gt_tx_elec_idle;
  wire   [7:0]  gt_tx_compliance;
  wire  [15:0]  gt_power_down;

  wire  [15:0]  gt_tx_eq_control;
  wire  [31:0]  gt_tx_eq_preset;
  wire  [47:0]  gt_tx_eq_deemph;
  wire   [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]  gt_tx_eq_done;

  wire  [15:0]  gt_rx_eq_control;
  wire  [23:0]  gt_rx_eq_preset;
  wire  [47:0]  gt_rx_eq_lffs;
  wire  [31:0]  gt_rx_eq_txpreset;
  wire [143:0]  gt_rx_eq_new_txcoeff;
  wire [143:0]  gt_tx_eq_coeff;
  wire   [7:0]  gt_rx_eq_lffs_sel;
  wire   [7:0]  gt_rx_eq_adapt_done;
  wire   [7:0]  gt_rx_eq_done;

  wire          gt_tx_detect_rx_loopback;
  wire   [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]  pipe_phystatus_rst;

  wire          clock_locked;
  wire          phy_rdy_int;
  reg    [1:0]  reg_clock_locked;
  reg    [1:0]  reg_phy_rdy;
  wire   [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]  pipe_rxsync_done_w;
  assign pipe_rxsync_done = pipe_rxsync_done_w;

  localparam          PCIE_SIM_SPEEDUP   = PL_SIM_FAST_LINK_TRAINING;


//---------- PIPE wrapper Module -------------------------------------------------
rp_pipe_wrapper #(
    .PCIE_SIM_MODE            ( PL_SIM_FAST_LINK_TRAINING ),
    .PCIE_SIM_SPEEDUP         ( PCIE_SIM_SPEEDUP ),
    .PCIE_AUX_CDR_GEN3_EN     ( "TRUE" ),
    .PCIE_ASYNC_EN            ( PCIE_ASYNC_EN ),
    .PCIE_EXT_CLK             ( PCIE_EXT_CLK ),
    .PCIE_EXT_GT_COMMON       ( PCIE_EXT_GT_COMMON ),
    .PCIE_TXBUF_EN            ( PCIE_TXBUF_EN ),
    .PCIE_GT_DEVICE           ( PCIE_GT_DEVICE ),
    .PCIE_CHAN_BOND           ( PCIE_CHAN_BOND ),
    .PCIE_CHAN_BOND_EN        ( PCIE_CHAN_BOND_EN ),
    .PCIE_USE_MODE            ( PCIE_USE_MODE ),
    .PCIE_LPM_DFE             ( PCIE_LPM_DFE ),
    .PCIE_LINK_SPEED          ( PCIE_LINK_SPEED ),
    .PCIE_LANE                ( PL_LINK_CAP_MAX_LINK_WIDTH ),
    .PCIE_REFCLK_FREQ         ( REF_CLK_FREQ ),
    .TX_MARGIN_FULL_0         (TX_MARGIN_FULL_0),                          // 1000 mV
    .TX_MARGIN_FULL_1         (TX_MARGIN_FULL_1),                          // 950 mV
    .TX_MARGIN_FULL_2         (TX_MARGIN_FULL_2),                          // 900 mV
    .TX_MARGIN_FULL_3         (TX_MARGIN_FULL_3),                          // 850 mV
    .TX_MARGIN_FULL_4         (TX_MARGIN_FULL_4),                          // 400 mV
    .TX_MARGIN_LOW_0          (TX_MARGIN_LOW_0),                          // 500 mV
    .TX_MARGIN_LOW_1          (TX_MARGIN_LOW_1),                          // 450 mV
    .TX_MARGIN_LOW_2          (TX_MARGIN_LOW_2),                          // 400 mV
    .TX_MARGIN_LOW_3          (TX_MARGIN_LOW_3),                          // 350 mV
    .TX_MARGIN_LOW_4          (TX_MARGIN_LOW_4),
    .PCIE_USERCLK1_FREQ       ( USER_CLK_FREQ ),
    .PCIE_USERCLK2_FREQ       ( USER_CLK2_FREQ )
) pipe_wrapper_i (

    //---------- PIPE Clock & Reset Ports ------------------
    .PIPE_CLK                 ( pipe_clk ),
    .PIPE_RESET_N             ( sys_rst_n ),

    .PIPE_PCLK                ( pipe_pclk ),

    //---------- PIPE TX Data Ports ------------------------
    .PIPE_TXDATA              ( gt_tx_data[((32*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_TXDATAK             ( gt_tx_data_k[((4*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),

    .PIPE_TXP                 ( pci_exp_txp[((PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_TXN                 ( pci_exp_txn[((PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),

    //---------- PIPE RX Data Ports ------------------------
    .PIPE_RXP                 ( pci_exp_rxp[((PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_RXN                 ( pci_exp_rxn[((PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),

    .PIPE_RXDATA              ( gt_rx_data_wire[((32*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_RXDATAK             ( gt_rx_data_k_wire[((4*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),

    //---------- PIPE Command Ports ------------------------
    .PIPE_TXDETECTRX          ( gt_tx_detect_rx_loopback    ),
    .PIPE_TXELECIDLE          ( gt_tx_elec_idle[((PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_TXCOMPLIANCE        ( gt_tx_compliance[((PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_RXPOLARITY          ( gt_rx_polarity[((PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_POWERDOWN           ( gt_power_down[((2*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_RATE                ( pipe_tx_rate ),

    //---------- PIPE Electrical Command Ports -------------
    .PIPE_TXMARGIN            ( pipe_tx_margin ),
    .PIPE_TXSWING             ( pipe_tx_swing  ),
    .PIPE_TXDEEMPH            ( {PL_LINK_CAP_MAX_LINK_WIDTH{pipe_tx_deemph}}),
    .PIPE_TXEQ_CONTROL        ( gt_tx_eq_control[((2*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_TXEQ_PRESET         ( gt_tx_eq_preset[((4*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_TXEQ_PRESET_DEFAULT ( {PL_LINK_CAP_MAX_LINK_WIDTH{4'b0}} ),                       // TX Preset Default when reset lifted

    .PIPE_RXEQ_CONTROL        ( gt_rx_eq_control[((2*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_RXEQ_PRESET         ( gt_rx_eq_preset[((3*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_RXEQ_LFFS           ( gt_rx_eq_lffs[((6*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_RXEQ_TXPRESET       ( gt_rx_eq_txpreset[((4*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_RXEQ_USER_EN        ( pipe_rxeq_user_en ),         // EQUALIZATION Workaround signals
    .PIPE_RXEQ_USER_TXCOEFF   ( pipe_rxeq_user_txcoeff ),    // EQUALIZATION Workaround signals
    .PIPE_RXEQ_USER_MODE      ( pipe_rxeq_user_mode ),       // EQUALIZATION Workaround signals

    .PIPE_TXEQ_FS             ( pipe_txeq_fs ),
    .PIPE_TXEQ_LF             ( pipe_txeq_lf ),
    .PIPE_TXEQ_DEEMPH         ( gt_tx_eq_deemph[((6*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_TXEQ_DONE           ( gt_tx_eq_done ),
    .PIPE_TXEQ_COEFF          ( gt_tx_eq_coeff[((18*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_RXEQ_NEW_TXCOEFF    ( gt_rx_eq_new_txcoeff[((18*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_RXEQ_LFFS_SEL       ( gt_rx_eq_lffs_sel[((1*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_RXEQ_ADAPT_DONE     ( gt_rx_eq_adapt_done[((1*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_RXEQ_DONE           ( gt_rx_eq_done[((1*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),

    //---------- PIPE Status Ports -------------------------
    .PIPE_RXVALID             ( gt_rx_valid_wire[((PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_PHYSTATUS           ( gt_rx_phy_status_wire[((PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_PHYSTATUS_RST       ( pipe_phystatus_rst ),
    .PIPE_RXELECIDLE          ( gt_rx_elec_idle_wire[((PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_RXSTATUS            ( gt_rx_status_wire[((3*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),
    .PIPE_EYESCANDATAERROR    ( PIPE_EYESCANDATAERROR ),
    //---------- PIPE User Ports ---------------------------
    .PIPE_MMCM_RST_N          (pipe_mmcm_rst_n),
    .PIPE_RXSLIDE             ( pipe_rxslide[((PL_LINK_CAP_MAX_LINK_WIDTH)-1):0] ),

    .PIPE_CPLL_LOCK           ( PIPE_CPLL_LOCK ),
    .PIPE_QPLL_LOCK           ( PIPE_QPLL_LOCK),
    .PIPE_PCLK_LOCK           ( mmcm_lock ),
    .PIPE_RXCDRLOCK           ( ),
    .PIPE_USERCLK1            ( core_clk ),     //500MHz for GEN3
    .PIPE_USERCLK2            ( user_clk ),
    .PIPE_RXUSRCLK            ( rec_clk ),

    .PIPE_RXOUTCLK            ( ),
    .PIPE_TXSYNC_DONE         ( ),
    .PIPE_RXSYNC_DONE         ( ),
    .PIPE_GEN3_RDY            ( pipe_rxsync_done_w ),
    .PIPE_RXCHANISALIGNED     ( gt_rxchanisaligned_wire ),
    .PIPE_ACTIVE_LANE         ( ),

// ----------Shared Logic Internal----------------------
    .INT_PCLK_OUT_SLAVE      ( INT_PCLK_OUT_SLAVE ),
    .INT_RXUSRCLK_OUT        ( INT_RXUSRCLK_OUT ),
    .INT_RXOUTCLK_OUT        ( INT_RXOUTCLK_OUT ),
    .INT_DCLK_OUT            ( INT_DCLK_OUT ),
    .INT_USERCLK1_OUT        ( INT_USERCLK1_OUT ),
    .INT_USERCLK2_OUT        ( INT_USERCLK2_OUT),
    .INT_OOBCLK_OUT          ( INT_OOBCLK_OUT ),
    .INT_PCLK_SEL_SLAVE      ( INT_PCLK_SEL_SLAVE ),
    .INT_QPLLLOCK_OUT        ( INT_QPLLLOCK_OUT ),
    .INT_QPLLOUTCLK_OUT      ( INT_QPLLOUTCLK_OUT ),
    .INT_QPLLOUTREFCLK_OUT   ( INT_QPLLOUTREFCLK_OUT ),
    // ---------- Shared Logic External----------------------
    //---------- External Clock Ports ----------------------
    .PIPE_PCLK_IN             ( PIPE_PCLK_IN ),
    .PIPE_RXUSRCLK_IN         ( PIPE_RXUSRCLK_IN ),

    .PIPE_RXOUTCLK_IN         ( PIPE_RXOUTCLK_IN ),
    .PIPE_DCLK_IN             ( PIPE_DCLK_IN ),
    .PIPE_USERCLK1_IN         ( PIPE_USERCLK1_IN ),
    .PIPE_USERCLK2_IN         ( PIPE_USERCLK2_IN ),
    .PIPE_OOBCLK_IN           ( PIPE_OOBCLK_IN ),
    .PIPE_MMCM_LOCK_IN        ( PIPE_MMCM_LOCK_IN ),

    .PIPE_TXOUTCLK_OUT        ( PIPE_TXOUTCLK_OUT ),
    .PIPE_RXOUTCLK_OUT        ( PIPE_RXOUTCLK_OUT ),
    .PIPE_PCLK_SEL_OUT        ( PIPE_PCLK_SEL_OUT ),
    .PIPE_GEN3_OUT            ( PIPE_GEN3_OUT ),

    //---------- External GT COMMON Ports ----------------------
    .QPLL_DRP_CRSCODE         ( qpll_drp_crscode ),
    .QPLL_DRP_FSM             ( qpll_drp_fsm ),       
    .QPLL_DRP_DONE            ( qpll_drp_done ),   
    .QPLL_DRP_RESET           ( qpll_drp_reset ),     
    .QPLL_QPLLLOCK            ( qpll_qplllock ),       
    .QPLL_QPLLOUTCLK          ( qpll_qplloutclk ),       
    .QPLL_QPLLOUTREFCLK       ( qpll_qplloutrefclk ),     
    .QPLL_QPLLPD              ( qpll_qplld ),            
    .QPLL_QPLLRESET           ( qpll_qpllreset ),       
    .QPLL_DRP_CLK             ( qpll_drp_clk ),       
    .QPLL_DRP_RST_N           ( qpll_drp_rst_n ),       
    .QPLL_DRP_OVRD            ( qpll_drp_ovrd ),       
    .QPLL_DRP_GEN3            ( qpll_drp_gen3 ),       
    .QPLL_DRP_START           ( qpll_drp_start ), 

    //--------TRANSCEIVER DEBUG EOU------------------
   .EXT_CH_GT_DRPCLK          (ext_ch_gt_drpclk),
   .EXT_CH_GT_DRPADDR         (ext_ch_gt_drpaddr),
   .EXT_CH_GT_DRPEN           (ext_ch_gt_drpen),
   .EXT_CH_GT_DRPDI           (ext_ch_gt_drpdi),
   .EXT_CH_GT_DRPWE           (ext_ch_gt_drpwe),
   .EXT_CH_GT_DRPDO           (ext_ch_gt_drpdo),
   .EXT_CH_GT_DRPRDY          (ext_ch_gt_drprdy),      

    //---------- TRANSCEIVER DEBUG -----------------------
    .PIPE_TXPRBSSEL           ( PIPE_TXPRBSSEL ),
    .PIPE_RXPRBSSEL           ( PIPE_RXPRBSSEL ),
    .PIPE_TXPRBSFORCEERR      ( PIPE_TXPRBSFORCEERR ),
    .PIPE_RXPRBSCNTRESET      ( PIPE_RXPRBSCNTRESET ),
    .PIPE_LOOPBACK            ( PIPE_LOOPBACK),

    .PIPE_RXPRBSERR           ( PIPE_RXPRBSERR),
    .PIPE_TXINHIBIT           ( PIPE_TXINHIBIT),

    .PIPE_RST_FSM             (PIPE_RST_FSM),
    .PIPE_QRST_FSM            (PIPE_QRST_FSM),
    .PIPE_RATE_FSM            (PIPE_RATE_FSM ),
    .PIPE_SYNC_FSM_TX         (PIPE_SYNC_FSM_TX ),
    .PIPE_SYNC_FSM_RX         (PIPE_SYNC_FSM_RX ),
    .PIPE_DRP_FSM             (PIPE_DRP_FSM ),

    .PIPE_RST_IDLE            (PIPE_RST_IDLE ),
    .PIPE_QRST_IDLE           (PIPE_QRST_IDLE ),
    .PIPE_RATE_IDLE           (PIPE_RATE_IDLE ),

    //---------- JTAG Ports --------------------------------
    .PIPE_JTAG_EN              ( 1'b0 ),
    .PIPE_JTAG_RDY             (PIPE_JTAG_RDY ),

    //---------- Debug Ports -------------------------------
    .PIPE_RXPMARESETDONE     ( PIPE_RXPMARESETDONE ),       
    .PIPE_RXBUFSTATUS        ( PIPE_RXBUFSTATUS    ),         
    .PIPE_TXPHALIGNDONE      ( PIPE_TXPHALIGNDONE  ),       
    .PIPE_TXPHINITDONE       ( PIPE_TXPHINITDONE   ),        
    .PIPE_TXDLYSRESETDONE    ( PIPE_TXDLYSRESETDONE),    
    .PIPE_RXPHALIGNDONE      ( PIPE_RXPHALIGNDONE  ),      
    .PIPE_RXDLYSRESETDONE    ( PIPE_RXDLYSRESETDONE),     
    .PIPE_RXSYNCDONE         ( PIPE_RXSYNCDONE     ),       
    .PIPE_RXDISPERR          ( PIPE_RXDISPERR      ),       
    .PIPE_RXNOTINTABLE       ( PIPE_RXNOTINTABLE   ),      
    .PIPE_RXCOMMADET         ( PIPE_RXCOMMADET     ),        

    .PIPE_DEBUG_0             (PIPE_DEBUG_0 ),
    .PIPE_DEBUG_1             (PIPE_DEBUG_1 ),
    .PIPE_DEBUG_2             (PIPE_DEBUG_2  ),
    .PIPE_DEBUG_3             (PIPE_DEBUG_3 ),
    .PIPE_DEBUG_4             (PIPE_DEBUG_4  ),
    .PIPE_DEBUG_5             (PIPE_DEBUG_5  ),
    .PIPE_DEBUG_6             (PIPE_DEBUG_6  ),
    .PIPE_DEBUG_7             (PIPE_DEBUG_7  ),
    .PIPE_DEBUG_8             (PIPE_DEBUG_8 ),
    .PIPE_DEBUG_9             (PIPE_DEBUG_9  ),
    .PIPE_DEBUG               (PIPE_DEBUG),

    .PIPE_RXEQ_CONVERGE       ( ),
    .PIPE_DMONITOROUT         ( PIPE_DMONITOROUT ),
    .PIPE_QDRP_FSM(),
    .PIPE_RXEQ_FSM(),
    .PIPE_TXEQ_FSM(),
    .INT_MMCM_LOCK_OUT(),
    .CPLLPD                   (CPLLPD),
    .TXPD                     (TXPD),
    .RXPD                     (RXPD),
    .TXPDELECIDLEMODE         (TXPDELECIDLEMODE),
    .TXDETECTRX               (TXDETECTRX),
    .TXELECIDLE               (TXELECIDLE),
    .QPLLPD                   (QPLLPD),
    .POWERDOWN                (POWERDOWN)

);

assign PIPE_RXSTATUS = gt_rx_status_wire[((3*PL_LINK_CAP_MAX_LINK_WIDTH)-1):0];

// Concatenate/Deconcatenate busses to generate correct GT wrapper and PCIe Block connectivity
assign pipe_rx0_phy_status = gt_rx_phy_status_wire[0] ;
assign pipe_rx1_phy_status = (PL_LINK_CAP_MAX_LINK_WIDTH >= 2 ) ? gt_rx_phy_status_wire[1] : 1'b0;
assign pipe_rx2_phy_status = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_rx_phy_status_wire[2] : 1'b0;
assign pipe_rx3_phy_status = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_rx_phy_status_wire[3] : 1'b0;
assign pipe_rx4_phy_status = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_phy_status_wire[4] : 1'b0;
assign pipe_rx5_phy_status = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_phy_status_wire[5] : 1'b0;
assign pipe_rx6_phy_status = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_phy_status_wire[6] : 1'b0;
assign pipe_rx7_phy_status = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_phy_status_wire[7] : 1'b0;


assign {pipe_rx7_chanisaligned,pipe_rx6_chanisaligned,pipe_rx5_chanisaligned,pipe_rx4_chanisaligned,pipe_rx3_chanisaligned,pipe_rx2_chanisaligned,pipe_rx1_chanisaligned,pipe_rx0_chanisaligned} = gt_rxchanisaligned_wire;

assign pipe_rx0_char_is_k =  {gt_rx_data_k_wire[1], gt_rx_data_k_wire[0]};
assign pipe_rx1_char_is_k =  (PL_LINK_CAP_MAX_LINK_WIDTH >= 2 ) ? {gt_rx_data_k_wire[5], gt_rx_data_k_wire[4]} : 2'b0;
assign pipe_rx2_char_is_k =  (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? {gt_rx_data_k_wire[9], gt_rx_data_k_wire[8]} : 2'b0;
assign pipe_rx3_char_is_k =  (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? {gt_rx_data_k_wire[13], gt_rx_data_k_wire[12]} : 2'b0;
assign pipe_rx4_char_is_k =  (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? {gt_rx_data_k_wire[17], gt_rx_data_k_wire[16]} : 2'b0;
assign pipe_rx5_char_is_k =  (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? {gt_rx_data_k_wire[21], gt_rx_data_k_wire[20]} : 2'b0;
assign pipe_rx6_char_is_k =  (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? {gt_rx_data_k_wire[25], gt_rx_data_k_wire[24]} : 2'b0;
assign pipe_rx7_char_is_k =  (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? {gt_rx_data_k_wire[29], gt_rx_data_k_wire[28]} : 2'b0;

assign pipe_rx0_data = {gt_rx_data_wire[31: 0]};
assign pipe_rx1_data = (PL_LINK_CAP_MAX_LINK_WIDTH >= 2 ) ? gt_rx_data_wire[63:32] : 32'h0;
assign pipe_rx2_data = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_rx_data_wire[95:64] : 32'h0;
assign pipe_rx3_data = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_rx_data_wire[127:96] : 32'h0;
assign pipe_rx4_data = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_data_wire[159:128] : 32'h0;
assign pipe_rx5_data = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_data_wire[191:160] : 32'h0;
assign pipe_rx6_data = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_data_wire[223:192] : 32'h0;
assign pipe_rx7_data = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_data_wire[255:224] : 32'h0;

assign pipe_rx0_elec_idle = gt_rx_elec_idle_wire[0];   // workaround pcie_tx_elec_idle_filter
assign pipe_rx1_elec_idle = (PL_LINK_CAP_MAX_LINK_WIDTH >= 2 ) ? gt_rx_elec_idle_wire[1] : 1'b1;
assign pipe_rx2_elec_idle = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_rx_elec_idle_wire[2] : 1'b1;
assign pipe_rx3_elec_idle = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_rx_elec_idle_wire[3] : 1'b1;
assign pipe_rx4_elec_idle = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_elec_idle_wire[4] : 1'b1;
assign pipe_rx5_elec_idle = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_elec_idle_wire[5] : 1'b1;
assign pipe_rx6_elec_idle = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_elec_idle_wire[6] : 1'b1;
assign pipe_rx7_elec_idle = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_elec_idle_wire[7] : 1'b1;

assign pipe_rx0_status = gt_rx_status_wire[ 2: 0];
assign pipe_rx1_status = (PL_LINK_CAP_MAX_LINK_WIDTH >= 2 ) ? gt_rx_status_wire[ 5: 3] : 3'b0;
assign pipe_rx2_status = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_rx_status_wire[ 8: 6] : 3'b0;
assign pipe_rx3_status = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_rx_status_wire[11: 9] : 3'b0;
assign pipe_rx4_status = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_status_wire[14:12] : 3'b0;
assign pipe_rx5_status = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_status_wire[17:15] : 3'b0;
assign pipe_rx6_status = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_status_wire[20:18] : 3'b0;
assign pipe_rx7_status = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_status_wire[23:21] : 3'b0;

assign pipe_rx0_valid = gt_rx_valid_wire[0];
assign pipe_rx1_valid = (PL_LINK_CAP_MAX_LINK_WIDTH >= 2 ) ? gt_rx_valid_wire[1] : 1'b0;
assign pipe_rx2_valid = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_rx_valid_wire[2] : 1'b0;
assign pipe_rx3_valid = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_rx_valid_wire[3] : 1'b0;
assign pipe_rx4_valid = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_valid_wire[4] : 1'b0;
assign pipe_rx5_valid = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_valid_wire[5] : 1'b0;
assign pipe_rx6_valid = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_valid_wire[6] : 1'b0;
assign pipe_rx7_valid = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_valid_wire[7] : 1'b0;

assign gt_rx_polarity[0] = pipe_rx0_polarity;
assign gt_rx_polarity[1] = pipe_rx1_polarity;
assign gt_rx_polarity[2] = pipe_rx2_polarity;
assign gt_rx_polarity[3] = pipe_rx3_polarity;
assign gt_rx_polarity[4] = pipe_rx4_polarity;
assign gt_rx_polarity[5] = pipe_rx5_polarity;
assign gt_rx_polarity[6] = pipe_rx6_polarity;
assign gt_rx_polarity[7] = pipe_rx7_polarity;

assign gt_power_down[ 1: 0] = pipe_tx0_powerdown;
assign gt_power_down[ 3: 2] = pipe_tx1_powerdown;
assign gt_power_down[ 5: 4] = pipe_tx2_powerdown;
assign gt_power_down[ 7: 6] = pipe_tx3_powerdown;
assign gt_power_down[ 9: 8] = pipe_tx4_powerdown;
assign gt_power_down[11:10] = pipe_tx5_powerdown;
assign gt_power_down[13:12] = pipe_tx6_powerdown;
assign gt_power_down[15:14] = pipe_tx7_powerdown;

// Removed gt_tx_char_disp_mode = pipe_tx_compliance_q.
//   Moved logic to pcie_tx_elec_idle_filtered.

assign gt_tx_data_k = {2'd0,
                       pipe_tx7_char_is_k,
                       2'd0,
                       pipe_tx6_char_is_k,
                       2'd0,
                       pipe_tx5_char_is_k,
                       2'd0,
                       pipe_tx4_char_is_k,
                       2'd0,
                       pipe_tx3_char_is_k,
                       2'd0,
                       pipe_tx2_char_is_k,
                       2'd0,
                       pipe_tx1_char_is_k,
                       2'd0,
                       pipe_tx0_char_is_k};

assign gt_tx_data = {pipe_tx7_data,
                     pipe_tx6_data,
                     pipe_tx5_data,
                     pipe_tx4_data,
                     pipe_tx3_data,
                     pipe_tx2_data,
                     pipe_tx1_data,
                     pipe_tx0_data};

assign gt_tx_detect_rx_loopback = pipe_tx_rcvr_det;

assign gt_tx_elec_idle = {pipe_tx7_elec_idle,
                          pipe_tx6_elec_idle,
                          pipe_tx5_elec_idle,
                          pipe_tx4_elec_idle,
                          pipe_tx3_elec_idle,
                          pipe_tx2_elec_idle,
                          pipe_tx1_elec_idle,
                          pipe_tx0_elec_idle};



assign gt_tx_compliance = {pipe_tx7_compliance,
                          pipe_tx6_compliance,
                          pipe_tx5_compliance,
                          pipe_tx4_compliance,
                          pipe_tx3_compliance,
                          pipe_tx2_compliance,
                          pipe_tx1_compliance,
                          pipe_tx0_compliance};

assign                                 drp_clk=1'b0;
assign                                 drp_en=1'b0;
assign                                 drp_we=1'b0;
assign                                 drp_addr=11'b0;
assign                                 drp_di=16'b0;


assign gt_tx_eq_control[ 1: 0] = pipe_tx0_eqcontrol;
assign gt_tx_eq_control[ 3: 2] = pipe_tx1_eqcontrol;
assign gt_tx_eq_control[ 5: 4] = pipe_tx2_eqcontrol;
assign gt_tx_eq_control[ 7: 6] = pipe_tx3_eqcontrol;
assign gt_tx_eq_control[ 9: 8] = pipe_tx4_eqcontrol;
assign gt_tx_eq_control[11:10] = pipe_tx5_eqcontrol;
assign gt_tx_eq_control[13:12] = pipe_tx6_eqcontrol;
assign gt_tx_eq_control[15:14] = pipe_tx7_eqcontrol;

assign gt_tx_eq_preset[3:0]   = pipe_tx0_eqpreset;
assign gt_tx_eq_preset[7:4]   = pipe_tx1_eqpreset;
assign gt_tx_eq_preset[11:8]  = pipe_tx2_eqpreset;
assign gt_tx_eq_preset[15:12] = pipe_tx3_eqpreset;
assign gt_tx_eq_preset[19:16] = pipe_tx4_eqpreset;
assign gt_tx_eq_preset[23:20] = pipe_tx5_eqpreset;
assign gt_tx_eq_preset[27:24] = pipe_tx6_eqpreset;
assign gt_tx_eq_preset[31:28] = pipe_tx7_eqpreset;

assign gt_tx_eq_deemph[5:0] = pipe_tx0_eqdeemph;
assign gt_tx_eq_deemph[11:6] = pipe_tx1_eqdeemph;
assign gt_tx_eq_deemph[17:12] = pipe_tx2_eqdeemph;
assign gt_tx_eq_deemph[23:18] = pipe_tx3_eqdeemph;
assign gt_tx_eq_deemph[29:24] = pipe_tx4_eqdeemph;
assign gt_tx_eq_deemph[35:30] = pipe_tx5_eqdeemph;
assign gt_tx_eq_deemph[41:36] = pipe_tx6_eqdeemph;
assign gt_tx_eq_deemph[47:42] = pipe_tx7_eqdeemph;
assign {pipe_tx7_eqdone,pipe_tx6_eqdone,pipe_tx5_eqdone,pipe_tx4_eqdone,pipe_tx3_eqdone,pipe_tx2_eqdone,pipe_tx1_eqdone,pipe_tx0_eqdone} = gt_tx_eq_done;


assign pipe_tx0_eqcoeff = gt_tx_eq_coeff[17:0];
assign pipe_tx1_eqcoeff = (PL_LINK_CAP_MAX_LINK_WIDTH >= 2 ) ? gt_tx_eq_coeff[35:18]   : 18'b0;
assign pipe_tx2_eqcoeff = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_tx_eq_coeff[53:36]   : 18'b0;
assign pipe_tx3_eqcoeff = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_tx_eq_coeff[71:54]   : 18'b0;
assign pipe_tx4_eqcoeff = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_tx_eq_coeff[89:72]   : 18'b0;
assign pipe_tx5_eqcoeff = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_tx_eq_coeff[107:90]  : 18'b0;
assign pipe_tx6_eqcoeff = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_tx_eq_coeff[125:108] : 18'b0;
assign pipe_tx7_eqcoeff = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_tx_eq_coeff[143:126] : 18'b0;

assign gt_rx_eq_control[ 1: 0] = pipe_rx0_eqcontrol;
assign gt_rx_eq_control[ 3: 2] = pipe_rx1_eqcontrol;
assign gt_rx_eq_control[ 5: 4] = pipe_rx2_eqcontrol;
assign gt_rx_eq_control[ 7: 6] = pipe_rx3_eqcontrol;
assign gt_rx_eq_control[ 9: 8] = pipe_rx4_eqcontrol;
assign gt_rx_eq_control[11:10] = pipe_rx5_eqcontrol;
assign gt_rx_eq_control[13:12] = pipe_rx6_eqcontrol;
assign gt_rx_eq_control[15:14] = pipe_rx7_eqcontrol;

assign gt_rx_eq_preset[2:0]   = pipe_rx0_eqpreset;
assign gt_rx_eq_preset[5:3]   = pipe_rx1_eqpreset;
assign gt_rx_eq_preset[8:6]   = pipe_rx2_eqpreset;
assign gt_rx_eq_preset[11:9]  = pipe_rx3_eqpreset;
assign gt_rx_eq_preset[14:12] = pipe_rx4_eqpreset;
assign gt_rx_eq_preset[17:15] = pipe_rx5_eqpreset;
assign gt_rx_eq_preset[20:18] = pipe_rx6_eqpreset;
assign gt_rx_eq_preset[23:21] = pipe_rx7_eqpreset;

assign gt_rx_eq_lffs[5:0]   = pipe_rx0_eq_lffs;
assign gt_rx_eq_lffs[11:6]  = pipe_rx1_eq_lffs;
assign gt_rx_eq_lffs[17:12] = pipe_rx2_eq_lffs;
assign gt_rx_eq_lffs[23:18] = pipe_rx3_eq_lffs;
assign gt_rx_eq_lffs[29:24] = pipe_rx4_eq_lffs;
assign gt_rx_eq_lffs[35:30] = pipe_rx5_eq_lffs;
assign gt_rx_eq_lffs[41:36] = pipe_rx6_eq_lffs;
assign gt_rx_eq_lffs[47:42] = pipe_rx7_eq_lffs;

assign gt_rx_eq_txpreset[3:0]   = pipe_rx0_eq_txpreset;
assign gt_rx_eq_txpreset[7:4]   = pipe_rx1_eq_txpreset;
assign gt_rx_eq_txpreset[11:8]  = pipe_rx2_eq_txpreset;
assign gt_rx_eq_txpreset[15:12] = pipe_rx3_eq_txpreset;
assign gt_rx_eq_txpreset[19:16] = pipe_rx4_eq_txpreset;
assign gt_rx_eq_txpreset[23:20] = pipe_rx5_eq_txpreset;
assign gt_rx_eq_txpreset[27:24] = pipe_rx6_eq_txpreset;
assign gt_rx_eq_txpreset[31:28] = pipe_rx7_eq_txpreset;

assign pipe_rx0_eq_new_txcoeff = gt_rx_eq_new_txcoeff[17:0] ;
assign pipe_rx1_eq_new_txcoeff = (PL_LINK_CAP_MAX_LINK_WIDTH >= 2 ) ? gt_rx_eq_new_txcoeff[35:18]   : 1'b0;
assign pipe_rx2_eq_new_txcoeff = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_rx_eq_new_txcoeff[53:36]   : 1'b0;
assign pipe_rx3_eq_new_txcoeff = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_rx_eq_new_txcoeff[71:54]   : 1'b0;
assign pipe_rx4_eq_new_txcoeff = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_eq_new_txcoeff[89:72]   : 1'b0;
assign pipe_rx5_eq_new_txcoeff = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_eq_new_txcoeff[107:90]  : 1'b0;
assign pipe_rx6_eq_new_txcoeff = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_eq_new_txcoeff[125:108] : 1'b0;
assign pipe_rx7_eq_new_txcoeff = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_eq_new_txcoeff[143:126] : 1'b0;

assign pipe_rx0_eq_lffs_sel = gt_rx_eq_lffs_sel[0];
assign pipe_rx1_eq_lffs_sel = (PL_LINK_CAP_MAX_LINK_WIDTH >= 2 ) ? gt_rx_eq_lffs_sel[1] : 1'b0;
assign pipe_rx2_eq_lffs_sel = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_rx_eq_lffs_sel[2] : 1'b0;
assign pipe_rx3_eq_lffs_sel = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_rx_eq_lffs_sel[3] : 1'b0;
assign pipe_rx4_eq_lffs_sel = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_eq_lffs_sel[4] : 1'b0;
assign pipe_rx5_eq_lffs_sel = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_eq_lffs_sel[5] : 1'b0;
assign pipe_rx6_eq_lffs_sel = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_eq_lffs_sel[6] : 1'b0;
assign pipe_rx7_eq_lffs_sel = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_eq_lffs_sel[7] : 1'b0;

assign pipe_rx0_eq_adapt_done = gt_rx_eq_adapt_done[0];
assign pipe_rx1_eq_adapt_done = (PL_LINK_CAP_MAX_LINK_WIDTH >= 2 ) ? gt_rx_eq_adapt_done[1] : 1'b0;
assign pipe_rx2_eq_adapt_done = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_rx_eq_adapt_done[2] : 1'b0;
assign pipe_rx3_eq_adapt_done = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_rx_eq_adapt_done[3] : 1'b0;
assign pipe_rx4_eq_adapt_done = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_eq_adapt_done[4] : 1'b0;
assign pipe_rx5_eq_adapt_done = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_eq_adapt_done[5] : 1'b0;
assign pipe_rx6_eq_adapt_done = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_eq_adapt_done[6] : 1'b0;
assign pipe_rx7_eq_adapt_done = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_eq_adapt_done[7] : 1'b0;

assign pipe_rx0_eqdone = gt_rx_eq_done[0];
assign pipe_rx1_eqdone = (PL_LINK_CAP_MAX_LINK_WIDTH >= 2 ) ? gt_rx_eq_done[1] : 1'b0;
assign pipe_rx2_eqdone = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_rx_eq_done[2] : 1'b0;
assign pipe_rx3_eqdone = (PL_LINK_CAP_MAX_LINK_WIDTH >= 4 ) ? gt_rx_eq_done[3] : 1'b0;
assign pipe_rx4_eqdone = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_eq_done[4] : 1'b0;
assign pipe_rx5_eqdone = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_eq_done[5] : 1'b0;
assign pipe_rx6_eqdone = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_eq_done[6] : 1'b0;
assign pipe_rx7_eqdone = (PL_LINK_CAP_MAX_LINK_WIDTH >= 8 ) ? gt_rx_eq_done[7] : 1'b0;

assign phy_rdy_int = ~|pipe_phystatus_rst;

  // Synchronize MMCM lock output
  always @ (posedge user_clk or negedge mmcm_lock) begin

    if (!mmcm_lock)
      reg_clock_locked[1:0] <= #TCQ 2'b11;
    else
      reg_clock_locked[1:0] <= #TCQ {reg_clock_locked[0], 1'b0};

  end
  assign  clock_locked = !reg_clock_locked[1];

  // Synchronize PHY Ready
  always @ (posedge user_clk or negedge phy_rdy_int) begin

    if (!phy_rdy_int)
      reg_phy_rdy[1:0] <= #TCQ 2'b11;
    else
      reg_phy_rdy[1:0] <= #TCQ {reg_phy_rdy[0], 1'b0};

  end
  assign  phy_rdy = !reg_phy_rdy[1];

endmodule
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_gt_wrapper.v
// Version    : 4.0
//------------------------------------------------------------------------------
//  Filename     :  rp_gt_wrapper.v
//  Description  :  GT Wrapper Module for 7 Series Transceiver
//  Version      :  19.0
//------------------------------------------------------------------------------



`timescale 1ns / 1ps



//---------- GT Wrapper --------------------------------------------------------

module rp_gt_wrapper #
(
    
    parameter PCIE_SIM_MODE                 = "FALSE",      // PCIe sim mode
    parameter PCIE_SIM_SPEEDUP              = "FALSE",      // PCIe sim speedup
    parameter PCIE_SIM_TX_EIDLE_DRIVE_LEVEL = "1",          // PCIe sim TX electrical idle drive level
    parameter PCIE_GT_DEVICE                = "GTX",        // PCIe GT device
    parameter PCIE_USE_MODE                 = "3.0",        // PCIe use mode
    parameter PCIE_PLL_SEL                  = "CPLL",       // PCIe PLL select for Gen1/Gen2
    parameter PCIE_LPM_DFE                  = "LPM",        // PCIe LPM or DFE mode for Gen1/Gen2 only
    parameter PCIE_LPM_DFE_GEN3             = "DFE",        // PCIe LPM or DFE mode for Gen3      only
    parameter PCIE_ASYNC_EN                 = "FALSE",      // PCIe async enable
    parameter PCIE_TXBUF_EN                 = "FALSE",      // PCIe TX buffer enable for Gen1/Gen2 only
    parameter PCIE_TXSYNC_MODE              = 0,            // PCIe TX sync mode
    parameter PCIE_RXSYNC_MODE              = 0,            // PCIe RX sync mode
    parameter PCIE_CHAN_BOND                = 0,            // PCIe channel bonding mode
    parameter PCIE_CHAN_BOND_EN             = "TRUE",       // PCIe channel bonding enable for Gen1/Gen2 only
    parameter PCIE_LANE                     = 1,            // PCIe number of lane
    parameter PCIE_REFCLK_FREQ              = 0,            // PCIe reference clock frequency
    parameter PCIE_TX_EIDLE_ASSERT_DELAY    = 3'd4,         // PCIe TX electrical idle assert delay
    parameter PCIE_OOBCLK_MODE              = 1,            // PCIe OOB clock mode
 
    parameter TX_MARGIN_FULL_0              = 7'b1001111,   // 1000 mV
    parameter TX_MARGIN_FULL_1              = 7'b1001110,   // 950 mV
    parameter TX_MARGIN_FULL_2              = 7'b1001101,   // 900 mV
    parameter TX_MARGIN_FULL_3              = 7'b1001100,   // 850 mV
    parameter TX_MARGIN_FULL_4              = 7'b1000011,   // 400 mV
    parameter TX_MARGIN_LOW_0               = 7'b1000101,   // 500 mV
    parameter TX_MARGIN_LOW_1               = 7'b1000110 ,  // 450 mV
    parameter TX_MARGIN_LOW_2               = 7'b1000011,   // 400 mV
    parameter TX_MARGIN_LOW_3               = 7'b1000010 ,  // 350 mV
    parameter TX_MARGIN_LOW_4               = 7'b1000000 ,

    parameter PCIE_DEBUG_MODE               = 0             // PCIe debug mode
)

(    
    
    //---------- GT User Ports -----------------------------
    input               GT_MASTER,
    input               GT_GEN3, 
    input               GT_RX_CONVERGE,
    
    //---------- GT Clock Ports ----------------------------
    input		GT_CPLLPDREFCLK,
    input               GT_GTREFCLK0,
    input               GT_QPLLCLK,
    input               GT_QPLLREFCLK,
    input               GT_TXUSRCLK,
    input               GT_RXUSRCLK,
    input               GT_TXUSRCLK2,
    input               GT_RXUSRCLK2, 
    input               GT_OOBCLK,
    input       [ 1:0]  GT_TXSYSCLKSEL,
    input       [ 1:0]  GT_RXSYSCLKSEL,                
                         
    output              GT_TXOUTCLK,
    output              GT_RXOUTCLK,
    output              GT_CPLLLOCK,
    output              GT_RXCDRLOCK,
    
    //---------- GT Reset Ports ----------------------------
    input               GT_CPLLPD,
    input               GT_CPLLRESET,
    input               GT_TXUSERRDY,
    input               GT_RXUSERRDY,
    input               GT_RESETOVRD,
    input               GT_GTTXRESET,
    input               GT_GTRXRESET,
    input               GT_TXPMARESET,
    input               GT_RXPMARESET,
    input               GT_RXCDRRESET,
    input               GT_RXCDRFREQRESET,
    input               GT_RXDFELPMRESET,
    input               GT_EYESCANRESET,
    input               GT_TXPCSRESET,
    input               GT_RXPCSRESET,
    input               GT_RXBUFRESET,
    
    output              GT_EYESCANDATAERROR,
    output              GT_TXRESETDONE,
    output              GT_RXRESETDONE,
    output              GT_RXPMARESETDONE,
    
    //---------- GT TX Data Ports --------------------------
    input       [31:0]  GT_TXDATA,
    input       [ 3:0]  GT_TXDATAK,
    
    output              GT_TXP,
    output              GT_TXN,
    
    //---------- GT RX Data Ports --------------------------
    input               GT_RXN,
    input               GT_RXP,
    
    output      [31:0]  GT_RXDATA,
    output      [ 3:0]  GT_RXDATAK,
    
    //---------- GT Command Ports --------------------------
    input               GT_TXDETECTRX,
    input               GT_TXELECIDLE,
    input               GT_TXCOMPLIANCE,
    input               GT_RXPOLARITY,
    input       [ 1:0]  GT_TXPOWERDOWN,
    input       [ 1:0]  GT_RXPOWERDOWN,
    input       [ 2:0]  GT_TXRATE,
    input       [ 2:0]  GT_RXRATE,
      
    //---------- GT Electrical Command Ports ---------------
    input       [ 2:0]  GT_TXMARGIN,
    input               GT_TXSWING,
    input               GT_TXDEEMPH,
    input       [ 4:0]  GT_TXPRECURSOR,
    input       [ 6:0]  GT_TXMAINCURSOR,
    input       [ 4:0]  GT_TXPOSTCURSOR,
       
    //---------- GT Status Ports ---------------------------
    output              GT_RXVALID,
    output              GT_PHYSTATUS,
    output              GT_RXELECIDLE,
    output      [ 2:0]  GT_RXSTATUS,
    output      [ 2:0]  GT_RXBUFSTATUS,
    output              GT_TXRATEDONE,
    output              GT_RXRATEDONE,
    output      [7:0]   GT_RXDISPERR,  
    output      [7:0]   GT_RXNOTINTABLE,

    //---------- GT DRP Ports ------------------------------
    input               GT_DRPCLK,
    input       [ 8:0]  GT_DRPADDR,
    input               GT_DRPEN,
    input       [15:0]  GT_DRPDI,
    input               GT_DRPWE,
    
    output      [15:0]  GT_DRPDO,
    output              GT_DRPRDY,
    
    //---------- GT TX Sync Ports --------------------------
    input               GT_TXPHALIGN,     
    input               GT_TXPHALIGNEN,  
    input               GT_TXPHINIT, 
    input               GT_TXDLYBYPASS,
    input               GT_TXDLYSRESET,
    input               GT_TXDLYEN,       
    
    output              GT_TXDLYSRESETDONE,
    output              GT_TXPHINITDONE,  
    output              GT_TXPHALIGNDONE,
    
    input               GT_TXPHDLYRESET,
    input               GT_TXSYNCMODE,                      // GTH
    input               GT_TXSYNCIN,                        // GTH
    input               GT_TXSYNCALLIN,                     // GTH
        
    output              GT_TXSYNCOUT,                       // GTH                                                                        
    output              GT_TXSYNCDONE,                      // GTH                                                                        
                                                                            
    //---------- GT RX Sync Ports --------------------------
    input               GT_RXPHALIGN,
    input               GT_RXPHALIGNEN,
    input               GT_RXDLYBYPASS,
    input               GT_RXDLYSRESET,
    input               GT_RXDLYEN,
    input               GT_RXDDIEN,
    
    output              GT_RXDLYSRESETDONE,
    output              GT_RXPHALIGNDONE,    
    
    input               GT_RXSYNCMODE,                      // GTH
    input               GT_RXSYNCIN,                        // GTH
    input               GT_RXSYNCALLIN,                     // GTH
    
    output              GT_RXSYNCOUT,                       // GTH
    output              GT_RXSYNCDONE,                      // GTH
    
    //---------- GT Comma Alignment Ports ------------------
    input               GT_RXSLIDE,
    
    output              GT_RXCOMMADET,                        
    output      [ 3:0]  GT_RXCHARISCOMMA,                      
    output              GT_RXBYTEISALIGNED,                   
    output              GT_RXBYTEREALIGN,                     
    
    //---------- GT Channel Bonding Ports ------------------
    input               GT_RXCHBONDEN,
    input       [ 4:0]  GT_RXCHBONDI,
    input       [ 2:0]  GT_RXCHBONDLEVEL,
    input               GT_RXCHBONDMASTER,
    input               GT_RXCHBONDSLAVE,
    
    output              GT_RXCHANISALIGNED,
    output      [ 4:0]  GT_RXCHBONDO,
    
    //---------- GT PRBS/Loopback Ports --------------------
    input       [ 2:0]  GT_TXPRBSSEL,
    input       [ 2:0]  GT_RXPRBSSEL,
    input               GT_TXPRBSFORCEERR,
    input               GT_RXPRBSCNTRESET,
    input       [ 2:0]  GT_LOOPBACK,
    
    output              GT_RXPRBSERR,
    input               GT_TXINHIBIT,
    
    //---------- GT Debug Ports ----------------------------
    output      [14:0]  GT_DMONITOROUT,
   
    input               TXPDELECIDLEMODE,
    input               POWERDOWN

);

    //---------- Internal Signals --------------------------
    wire        [ 2:0]  txoutclksel;
    wire        [ 2:0]  rxoutclksel;
    wire        [63:0]  rxdata;
    wire        [ 7:0]  rxdatak;
    wire        [ 7:0]  rxchariscomma;
    wire                rxlpmen;
    wire        [14:0]  dmonitorout;
    wire                dmonitorclk;


    wire cpllpd;
    wire cpllrst;

    wire txpdelecidlemode_mux;

    //---------- Select CPLL and Clock Dividers ------------
    localparam          CPLL_REFCLK_DIV = 1;
    localparam          CPLL_FBDIV_45   = 5;
    localparam          CPLL_FBDIV      = (PCIE_REFCLK_FREQ == 2) ?  2 : 
                                          (PCIE_REFCLK_FREQ == 1) ?  4 : 5;
    localparam          OUT_DIV         = (PCIE_PLL_SEL == "QPLL") ? 4 : 2;                                                     
    localparam          CLK25_DIV       = (PCIE_REFCLK_FREQ == 2) ? 10 : 
                                          (PCIE_REFCLK_FREQ == 1) ?  5 : 4;
    
    //---------- Select IES vs. GES ------------------------
    localparam          CLKMUX_PD = ((PCIE_USE_MODE == "1.0") || (PCIE_USE_MODE == "1.1")) ?  1'd0      :  1'd1;
    
    //---------- Select GTP CPLL configuration -------------
    //  PLL0/1_CFG[ 5:2] = CP1 : [    8, 4, 2, 1] units
    //  PLL0/1_CFG[10:6] = CP2 : [16, 8, 4, 2, 1] units
    //  CP2/CP1 = 2 to 3  
    //  (8/4=2)    = 27'h01F0210 = 0000_0001_1111_0000_0010_0001_0000
    //  (9/3=3)    = 27'h01F024C = 0000_0001_1111_0000_0010_0100_1100
    //  (8/3=2.67) = 27'h01F020C = 0000_0001_1111_0000_0010_0000_1100
    //  (7/3=2.33) = 27'h01F01CC = 0000_0001_1111_0000_0001_1100_1100
    //  (6/3=2)    = 27'h01F018C = 0000_0001_1111_0000_0001_1000_1100
    //  (5/3=1.67) = 27'h01F014C = 0000_0001_1111_0000_0001_0100_1100
    //  (6/2=3)    = 27'h01F0188 = 0000_0001_1111_0000_0001_1000_1000
    //---------- Select GTX CPLL configuration -------------
    //  CPLL_CFG[ 5: 2]  = CP1 : [    8, 4, 2, 1] units 
    //  CPLL_CFG[22:18]  = CP2 : [16, 8, 4, 2, 1] units
    //  CP2/CP1 = 2 to 3 
    //  (9/3=3)    = 1010_0100_0000_0111_1100_1100
    //------------------------------------------------------
    localparam          CPLL_CFG  = ((PCIE_USE_MODE == "1.0") || (PCIE_USE_MODE == "1.1")) ? 24'hB407CC : 24'hA407CC;
    
    //---------- Select TX XCLK ----------------------------      
    //  TXOUT for TX Buffer Use     
    //  TXUSR for TX Buffer Bypass  
    //------------------------------------------------------                                            
    localparam          TX_XCLK_SEL = (PCIE_TXBUF_EN == "TRUE") ? "TXOUT" : "TXUSR";
                                                   
    //---------- Select TX Receiver Detection Configuration 
    localparam          TX_RXDETECT_CFG = (PCIE_REFCLK_FREQ == 2) ? 14'd250 : 
                                          (PCIE_REFCLK_FREQ == 1) ? 14'd125 : 14'd100;
    localparam          TX_RXDETECT_REF = (((PCIE_USE_MODE == "1.0") || (PCIE_USE_MODE == "1.1")) && (PCIE_SIM_MODE == "FALSE")) ? 3'b000 : 3'b011;                                                                 
                                                      
    localparam          SIM_VERSION =  "2.0";                                                                 
    //localparam          SIM_VERSION = (PCIE_SIM_MODE == "FALSE") ? PCIE_USE_MODE : "2.0";                                                                 

    //---------- Select PCS_RSVD_ATTR ----------------------
    //  [0]: 1 = enable latch when bypassing TX buffer, 0 = disable latch when using TX buffer 
    //  [1]: 1 = enable manual TX sync,                 0 = enable auto TX sync
    //  [2]: 1 = enable manual RX sync,                 0 = enable auto RX sync
    //  [3]: 1 = select external clock for OOB          0 = select reference clock for OOB    
    //  [6]: 1 = enable DMON                            0 = disable DMON     
    //  [7]: 1 = filter stale TX[P/N] data when exiting TX electrical idle
    //  [8]: 1 = power up OOB                           0 = power down OOB
    //------------------------------------------------------
    localparam          OOBCLK_SEL    = (PCIE_OOBCLK_MODE == 0) ? 1'd0  : 1'd1;      // GTX
    localparam          RXOOB_CLK_CFG = (PCIE_OOBCLK_MODE == 0) ? "PMA" : "FABRIC";  // GTH/GTP
    
    localparam          PCS_RSVD_ATTR = ((PCIE_USE_MODE == "1.0")                           && (PCIE_TXBUF_EN == "FALSE")) ? {44'h0000000001C, OOBCLK_SEL, 3'd1} :
                                        ((PCIE_USE_MODE == "1.0")                           && (PCIE_TXBUF_EN == "TRUE" )) ? {44'h0000000001C, OOBCLK_SEL, 3'd0} : 
                                        ((PCIE_RXSYNC_MODE == 0) && (PCIE_TXSYNC_MODE == 0) && (PCIE_TXBUF_EN == "FALSE")) ? {44'h0000000001C, OOBCLK_SEL, 3'd7} : 
                                        ((PCIE_RXSYNC_MODE == 0) && (PCIE_TXSYNC_MODE == 0) && (PCIE_TXBUF_EN == "TRUE" )) ? {44'h0000000001C, OOBCLK_SEL, 3'd6} :   
                                        ((PCIE_RXSYNC_MODE == 0) && (PCIE_TXSYNC_MODE == 1) && (PCIE_TXBUF_EN == "FALSE")) ? {44'h0000000001C, OOBCLK_SEL, 3'd5} : 
                                        ((PCIE_RXSYNC_MODE == 0) && (PCIE_TXSYNC_MODE == 1) && (PCIE_TXBUF_EN == "TRUE" )) ? {44'h0000000001C, OOBCLK_SEL, 3'd4} : 
                                        ((PCIE_RXSYNC_MODE == 1) && (PCIE_TXSYNC_MODE == 0) && (PCIE_TXBUF_EN == "FALSE")) ? {44'h0000000001C, OOBCLK_SEL, 3'd3} : 
                                        ((PCIE_RXSYNC_MODE == 1) && (PCIE_TXSYNC_MODE == 0) && (PCIE_TXBUF_EN == "TRUE" )) ? {44'h0000000001C, OOBCLK_SEL, 3'd2} : 
                                        ((PCIE_RXSYNC_MODE == 1) && (PCIE_TXSYNC_MODE == 1) && (PCIE_TXBUF_EN == "FALSE")) ? {44'h0000000001C, OOBCLK_SEL, 3'd1} : 
                                        ((PCIE_RXSYNC_MODE == 1) && (PCIE_TXSYNC_MODE == 1) && (PCIE_TXBUF_EN == "TRUE" )) ? {44'h0000000001C, OOBCLK_SEL, 3'd0} : {44'h0000000001C, OOBCLK_SEL, 3'd7};                                      
                             
    //---------- Select RXCDR_CFG --------------------------
    
    //---------- GTX Note ----------------------------------
    // For GTX PCIe Gen1/Gen2 with 8B/10B, the following CDR setting may provide more margin
    // Async 72'h03_8000_23FF_1040_0020
    // Sync: 72'h03_0000_23FF_1040_0020   
    //------------------------------------------------------      
    
    localparam          RXCDR_CFG_GTX = ((PCIE_USE_MODE == "1.0") || (PCIE_USE_MODE == "1.1")) ? 
                                        ((PCIE_ASYNC_EN == "TRUE") ? 72'b0000_0010_0000_0111_1111_1110_0010_0000_0110_0000_0010_0001_0001_0000_0000000000010000
                                                                   : 72'h11_07FE_4060_0104_0000):   // IES setting
                                        ((PCIE_ASYNC_EN == "TRUE") ? 72'h03_8000_23FF_1020_0020     // 
                                                                   : 72'h03_0000_23FF_1020_0020);   // optimized for GES silicon                                                                                
                            
    localparam          RXCDR_CFG_GTH = (PCIE_USE_MODE == "2.0") ? 
                                        ((PCIE_ASYNC_EN == "TRUE") ? 83'h0_0011_07FE_4060_2104_1010   
                                                                   : 83'h0_0011_07FE_4060_0104_1010):  // Optimized for IES silicon
                                        ((PCIE_ASYNC_EN == "TRUE") ? 83'h0_0020_07FE_2000_C208_8018   
                                                                   : 83'h0_0020_07FE_2000_C208_0018);  // Optimized for 1.2 silicon     
                                                                                 
    localparam          RXCDR_CFG_GTP = ((PCIE_ASYNC_EN == "TRUE") ? 83'h0_0001_07FE_4060_2104_1010
                                                                   : 83'h0_0001_07FE_4060_0104_1010);  // Optimized for IES silicon
                   
                         
                                                                                           
                            
    //---------- Select TX and RX Sync Mode ----------------                                            
    localparam          TXSYNC_OVRD      = (PCIE_TXSYNC_MODE == 1) ? 1'd0 : 1'd1;                             
    localparam          RXSYNC_OVRD      = (PCIE_TXSYNC_MODE == 1) ? 1'd0 : 1'd1;     
                                                                          
    localparam          TXSYNC_MULTILANE = (PCIE_LANE == 1) ? 1'd0 : 1'd1;  
    localparam          RXSYNC_MULTILANE = (PCIE_LANE == 1) ? 1'd0 : 1'd1;                                             
                                       
    //---------- Select Clock Correction Min and Max Latency
    //  CLK_COR_MIN_LAT = Larger of (2 * RXCHBONDLEVEL + 13) or (CHAN_BOND_MAX_SKEW + 11)
    //                  = 13 when PCIE_LANE = 1
    //  CLK_COR_MAX_LAT = CLK_COR_MIN_LAT + CLK_COR_SEQ_LEN + 1
    //                  = CLK_COR_MIN_LAT + 2
    //------------------------------------------------------
   
    //---------- CLK_COR_MIN_LAT Look-up Table -------------
    // Lane | One-Hop  | Daisy-Chain | Binary-Tree
    //------------------------------------------------------
    //    0 |       13 |       13    |       13
    //    1 | 15 to 18 | 15 to 18    | 15 to 18
    //    2 | 15 to 18 | 17 to 18    | 15 to 18
    //    3 | 15 to 18 |       19    | 17 to 18
    //    4 | 15 to 18 |       21    | 17 to 18
    //    5 | 15 to 18 |       23    |       19
    //    6 | 15 to 18 |       25    |       19
    //    7 | 15 to 18 |       27    |       21
    //------------------------------------------------------
    
    localparam          CLK_COR_MIN_LAT = ((PCIE_LANE == 8) && (PCIE_CHAN_BOND != 0) && (PCIE_CHAN_BOND_EN == "TRUE"))  ? ((PCIE_CHAN_BOND == 1) ? 27 : 21) : 
                                          ((PCIE_LANE == 7) && (PCIE_CHAN_BOND != 0) && (PCIE_CHAN_BOND_EN == "TRUE"))  ? ((PCIE_CHAN_BOND == 1) ? 25 : 19) : 
                                          ((PCIE_LANE == 6) && (PCIE_CHAN_BOND != 0) && (PCIE_CHAN_BOND_EN == "TRUE"))  ? ((PCIE_CHAN_BOND == 1) ? 23 : 19) : 
                                          ((PCIE_LANE == 5) && (PCIE_CHAN_BOND != 0) && (PCIE_CHAN_BOND_EN == "TRUE"))  ? ((PCIE_CHAN_BOND == 1) ? 21 : 18) : 
                                          ((PCIE_LANE == 4) && (PCIE_CHAN_BOND != 0) && (PCIE_CHAN_BOND_EN == "TRUE"))  ? ((PCIE_CHAN_BOND == 1) ? 19 : 18) :
                                          ((PCIE_LANE == 3) && (PCIE_CHAN_BOND != 0) && (PCIE_CHAN_BOND_EN == "TRUE"))  ? ((PCIE_CHAN_BOND == 1) ? 18 : 18) :
                                          ((PCIE_LANE == 2) && (PCIE_CHAN_BOND != 0) && (PCIE_CHAN_BOND_EN == "TRUE"))  ? ((PCIE_CHAN_BOND == 1) ? 18 : 18) :
                                          ((PCIE_LANE == 1)                          || (PCIE_CHAN_BOND_EN == "FALSE")) ? 13 : 18; 
                                           
    localparam          CLK_COR_MAX_LAT = CLK_COR_MIN_LAT + 2;                                                     
    
    //---------- Simulation Speedup ------------------------
  //localparam          CFOK_CFG_GTH = (PCIE_SIM_MODE == "TRUE") ? 42'h240_0004_0F80 : 42'h248_0004_0E80;  // [8] : 1 = Skip CFOK
  //localparam          CFOK_CFG_GTP = (PCIE_SIM_MODE == "TRUE") ? 43'h000_0000_0000 : 43'h000_0000_0100;  // [2] : 1 = Skip CFOK

    //---------- Select [TX/RX]OUTCLK ----------------------
    assign txoutclksel = GT_MASTER ? 3'd3 : 3'd0;
    assign rxoutclksel = ((PCIE_DEBUG_MODE == 1) || ((PCIE_ASYNC_EN == "TRUE") && GT_MASTER)) ? 3'd2 : 3'd0;
 
    //---------- Select DFE vs. LPM ------------------------
    //  Gen1/2 = Use LPM by default.  Option to use DFE.
    //  Gen3   = Use DFE by default.  Option to use LPM.
    //------------------------------------------------------
    assign rxlpmen = GT_GEN3 ? ((PCIE_LPM_DFE_GEN3 == "LPM") ? 1'd1 : 1'd0) : ((PCIE_LPM_DFE == "LPM") ? 1'd1 : 1'd0);
  
    assign txpdelecidlemode_mux = (POWERDOWN) ? TXPDELECIDLEMODE : 1'b0;


rp_gtx_cpllpd_ovrd cpllPDInst (
   .i_ibufds_gte2(GT_CPLLPDREFCLK),
   .o_cpllpd_ovrd(cpllpd),
   .o_cpllreset_ovrd(cpllrst));

 
//---------- Generate DMONITOR Clock Buffer for Debug ------  
generate if (PCIE_DEBUG_MODE == 1)
 
    begin : dmonitorclk_i
    //---------- DMONITOR CLK ------------------------------
    BUFG dmonitorclk_i
    (
        //---------- Input ---------------------------------
        .I                              (dmonitorout[7]),   
        //---------- Output --------------------------------
        .O                              (dmonitorclk)
    ); 
    end
    
else

    begin : dmonitorclk_i_disable
    assign dmonitorclk = 1'd0;
    end
    
endgenerate
   
 
 
//---------- Select GTX or GTH or GTP ------------------------------------------
//  Notes  :  Attributes that are commented out always use the GT default settings
//------------------------------------------------------------------------------
generate if (PCIE_GT_DEVICE == "GTP") 

    begin : gtp_channel

    //---------- GTP Channel Module --------------------------------------------
    GTPE2_CHANNEL #
    (
                
        //---------- Simulation Attributes -------------------------------------
        .SIM_RESET_SPEEDUP              (PCIE_SIM_SPEEDUP),                     //
        .SIM_RECEIVER_DETECT_PASS       ("TRUE"),                               //    
        .SIM_TX_EIDLE_DRIVE_LEVEL       (PCIE_SIM_TX_EIDLE_DRIVE_LEVEL),        // 
        .SIM_VERSION                    (PCIE_USE_MODE),                        //
                                                                                 
        //---------- Clock Attributes ------------------------------------------                                      
        .TXOUT_DIV                      (OUT_DIV),                              //
        .RXOUT_DIV                      (OUT_DIV),                              // 
        .TX_CLK25_DIV                   (CLK25_DIV),                            //
        .RX_CLK25_DIV                   (CLK25_DIV),                            //
      //.TX_CLKMUX_EN                   ( 1'b1),                                // GTP rename
      //.RX_CLKMUX_EN                   ( 1'b1),                                // GTP rename
        .TX_XCLK_SEL                    (TX_XCLK_SEL),                          // TXOUT = use TX buffer, TXUSR = bypass TX buffer
        .RX_XCLK_SEL                    ("RXREC"),                              // RXREC = use RX buffer, RXUSR = bypass RX buffer
      //.OUTREFCLK_SEL_INV              ( 2'b11),                               //
                                                                                 
        //---------- Reset Attributes ------------------------------------------                
        .TXPCSRESET_TIME                ( 5'b00001),                            //
        .RXPCSRESET_TIME                ( 5'b00001),                            //
        .TXPMARESET_TIME                ( 5'b00011),                            //
        .RXPMARESET_TIME                ( 5'b00011),                            // Optimized for sim
      //.RXISCANRESET_TIME              ( 5'b00001),                            //
                                                                                 
        //---------- TX Data Attributes ----------------------------------------                
        .TX_DATA_WIDTH                  (20),                                   // 2-byte external datawidth for Gen1/Gen2
        
        //---------- RX Data Attributes ----------------------------------------                
        .RX_DATA_WIDTH                  (20),                                   // 2-byte external datawidth for Gen1/Gen2
        
        //---------- Command Attributes ----------------------------------------                
        .TX_RXDETECT_CFG                (TX_RXDETECT_CFG),                      // 
        .TX_RXDETECT_REF                ( 3'b011),                              // 
        .RX_CM_SEL                      ( 2'd3),                                // 0 = AVTT, 1 = GND, 2 = Float, 3 = Programmable
        .RX_CM_TRIM	                    ( 4'b1010),                             // Select 800mV, Changed from 3 to 4-bits, optimized for IES
        .TX_EIDLE_ASSERT_DELAY          (PCIE_TX_EIDLE_ASSERT_DELAY),           // Optimized for sim
        .TX_EIDLE_DEASSERT_DELAY        ( 3'b010),                              // Optimized for sim
      //.PD_TRANS_TIME_FROM_P2          (12'h03C),                              //
        .PD_TRANS_TIME_NONE_P2          ( 8'h09),                               //
      //.PD_TRANS_TIME_TO_P2            ( 8'h64),                               //
      //.TRANS_TIME_RATE                ( 8'h0E),                               //
                                                                                 
        //---------- Electrical Command Attributes -----------------------------                
        .TX_DRIVE_MODE                  ("PIPE"),                               // Gen1/Gen2 = PIPE, Gen3 = PIPEGEN3
        .TX_DEEMPH0                     ( 5'b10100),                            //  6.0 dB
        .TX_DEEMPH1                     ( 5'b01011),                            //  3.5 dB
        .TX_MARGIN_FULL_0               ( 7'b1001111),                          // 1000 mV
        .TX_MARGIN_FULL_1               ( 7'b1001110),                          //  950 mV
        .TX_MARGIN_FULL_2               ( 7'b1001101),                          //  900 mV
        .TX_MARGIN_FULL_3               ( 7'b1001100),                          //  850 mV
        .TX_MARGIN_FULL_4               ( 7'b1000011),                          //  400 mV
        .TX_MARGIN_LOW_0                ( 7'b1000101),                          //  500 mV
        .TX_MARGIN_LOW_1                ( 7'b1000110),                          //  450 mV
        .TX_MARGIN_LOW_2                ( 7'b1000011),                          //  400 mV
        .TX_MARGIN_LOW_3                ( 7'b1000010),                          //  350 mV
        .TX_MARGIN_LOW_4                ( 7'b1000000),                          //  250 mV
        .TX_MAINCURSOR_SEL              ( 1'b0),                                //
        .TX_PREDRIVER_MODE              ( 1'b0),                                // GTP
                                                                                
        //---------- Status Attributes -----------------------------------------                
      //.RX_SIG_VALID_DLY               ( 4),                                   // CHECK
                                                                                 
        //---------- DRP Attributes --------------------------------------------                
                          
        //---------- PCS Attributes --------------------------------------------                
        .PCS_PCIE_EN                    ("TRUE"),                               // PCIe
        .PCS_RSVD_ATTR                  (48'h0000_0000_0100),                   // [8] : 1 = OOB power-up
                                                                                 
         //---------- PMA Attributes ------------------------------------------- 
      //.CLK_COMMON_SWING               ( 1'b0),                                // GTP new              
      //.PMA_RSV                        (32'd0),                                // 
        .PMA_RSV2                       (32'h00002040),                         // Optimized for GES
      //.PMA_RSV3                       ( 2'd0),                                // 
      //.PMA_RSV4                       ( 4'd0),                                // Changed from 15 to 4-bits
      //.PMA_RSV5                       ( 1'd0),                                // Changed from 4 to 1-bit
      //.PMA_RSV6                       ( 1'd0),                                // GTP new
      //.PMA_RSV7                       ( 1'd0),                                // GTP new
        .RX_BIAS_CFG                    (16'h0F33),                             // Optimized for IES
        .TERM_RCAL_CFG                  (15'b100001000010000),                  // Optimized for IES
        .TERM_RCAL_OVRD                 ( 3'b000),                              // Optimized for IES 
                                             
         //---------- TX PI ----------------------------------------------------                                              
      //.TXPI_CFG0                      ( 2'd0),                                //                                            
      //.TXPI_CFG1                      ( 2'd0),                                //                                            
      //.TXPI_CFG2                      ( 2'd0),                                //                                            
      //.TXPI_CFG3                      ( 1'd0),                                //                                            
      //.TXPI_CFG4                      ( 1'd0),                                //                                            
      //.TXPI_CFG5                      ( 3'd000),                              //                                            
      //.TXPI_GREY_SEL                  ( 1'd0),                                //                                            
      //.TXPI_INVSTROBE_SEL             ( 1'd0),                                //                                            
      //.TXPI_PPMCLK_SEL                ("TXUSRCLK2"),                          //                                            
      //.TXPI_PPM_CFG                   ( 8'd0),                                //                                            
      //.TXPI_SYNFREQ_PPM               ( 3'd0),                                //                                            
                                                                                                                               
        //---------- RX PI -----------------------------------------------------                                              
        .RXPI_CFG0                      ( 3'd0),                                // Changed from 3 to 2-bits, Optimized for IES                                           
        .RXPI_CFG1                      ( 1'd1),                                // Changed from 2 to 1-bits, Optimized for IES                                          
        .RXPI_CFG2                      ( 1'd1),                                // Changed from 2 to 1-bits, Optimized for IES                                                      
                                             
       //---------- CDR Attributes ---------------------------------------------
      //.RXCDR_CFG                      (72'b0000_001000000_11111_11111_001000000_011_0000111_000_001000_010000_100000000000000),  // CHECK  
        .RXCDR_CFG                      (RXCDR_CFG_GTP),       // Optimized for IES                       
        .RXCDR_LOCK_CFG                 ( 6'b010101),                           // [5:3] Window Refresh, [2:1] Window Size, [0] Enable Detection (sensitive lock = 6'b111001)  CHECK
        .RXCDR_HOLD_DURING_EIDLE        ( 1'd1),                                // Hold  RX CDR           on electrical idle for Gen1/Gen2
        .RXCDR_FR_RESET_ON_EIDLE        ( 1'd0),                                // Reset RX CDR frequency on electrical idle for Gen3
        .RXCDR_PH_RESET_ON_EIDLE        ( 1'd0),                                // Reset RX CDR phase     on electrical idle for Gen3
      //.RXCDRFREQRESET_TIME            ( 5'b00001),                            // 
      //.RXCDRPHRESET_TIME              ( 5'b00001),                            // 
                                  
        //---------- LPM Attributes --------------------------------------------               
      //.RXLPMRESET_TIME                ( 7'b0001111),                          // GTP new
      //.RXLPM_BIAS_STARTUP_DISABLE     ( 1'b0),                                // GTP new
        .RXLPM_CFG                      ( 4'b0110),                             // GTP new, optimized for IES
      //.RXLPM_CFG1                     ( 1'b0),                                // GTP new
      //.RXLPM_CM_CFG                   ( 1'b0),                                // GTP new
        .RXLPM_GC_CFG                   ( 9'b111100010),                        // GTP new, optimized for IES
        .RXLPM_GC_CFG2                  ( 3'b001),                              // GTP new, optimized for IES
      //.RXLPM_HF_CFG                   (14'b00001111110000),                   //
        .RXLPM_HF_CFG2                  ( 5'b01010),                            // GTP new
      //.RXLPM_HF_CFG3                  ( 4'b0000),                             // GTP new
        .RXLPM_HOLD_DURING_EIDLE        ( 1'b1),                                // GTP new
        .RXLPM_INCM_CFG                 ( 1'b1),                                // GTP new, optimized for IES
        .RXLPM_IPCM_CFG                 ( 1'b0),                                // GTP new, optimized for IES
      //.RXLPM_LF_CFG                   (18'b000000001111110000),               // 
        .RXLPM_LF_CFG2                  ( 5'b01010),                            // GTP new, optimized for IES
        .RXLPM_OSINT_CFG                ( 3'b100),                              // GTP new, optimized for IES
                                                                           
        //---------- OS Attributes ---------------------------------------------
        .RX_OS_CFG                      (13'h0080),                             // CHECK
        .RXOSCALRESET_TIME              (5'b00011),                             // Optimized for IES
        .RXOSCALRESET_TIMEOUT           (5'b00000),                             // Disable timeout, Optimized for IES     
                                                                                 
        //---------- Eye Scan Attributes --------------------------------------- 
      //.ES_CLK_PHASE_SEL               ( 1'b0),                                //
      //.ES_CONTROL                     ( 6'd0),                                //
      //.ES_ERRDET_EN                   ("FALSE"),                              //
        .ES_EYE_SCAN_EN                 ("FALSE"),                               // 
      //.ES_HORZ_OFFSET                 (12'd0),                                //
      //.ES_PMA_CFG                     (10'd0),                                //
      //.ES_PRESCALE                    ( 5'd0),                                //
      //.ES_QUAL_MASK                   (80'd0),                                //
      //.ES_QUALIFIER                   (80'd0),                                //
      //.ES_SDATA_MASK                  (80'd0),                                //
      //.ES_VERT_OFFSET                 ( 9'd0),                                //
                                                                                 
        //---------- TX Buffer Attributes --------------------------------------               
        .TXBUF_EN                       (PCIE_TXBUF_EN),                        // 
        .TXBUF_RESET_ON_RATE_CHANGE     ("TRUE"),                               //
                                                                                 
        //---------- RX Buffer Attributes --------------------------------------                
        .RXBUF_EN                       ("TRUE"),                               //
      //.RX_BUFFER_CFG                  ( 6'd0),                                //
        .RX_DEFER_RESET_BUF_EN          ("TRUE"),                               // 
        .RXBUF_ADDR_MODE                ("FULL"),                               //
        .RXBUF_EIDLE_HI_CNT	            ( 4'd4),                                // Optimized for sim
        .RXBUF_EIDLE_LO_CNT	            ( 4'd0),                                // Optimized for sim
        .RXBUF_RESET_ON_CB_CHANGE       ("TRUE"),                               //
        .RXBUF_RESET_ON_COMMAALIGN      ("FALSE"),                              //
        .RXBUF_RESET_ON_EIDLE           ("TRUE"),                               // PCIe
        .RXBUF_RESET_ON_RATE_CHANGE     ("TRUE"),                               //
        .RXBUF_THRESH_OVRD              ("FALSE"),                              //
        .RXBUF_THRESH_OVFLW             (61),                                   //
        .RXBUF_THRESH_UNDFLW            ( 4),                                   //
      //.RXBUFRESET_TIME                ( 5'b00001),                            //
                                                                                 
        //---------- TX Sync Attributes ----------------------------------------                
        .TXPH_CFG                       (16'h0780),                             // 
        .TXPH_MONITOR_SEL               ( 5'd0),                                // 
        .TXPHDLY_CFG                    (24'h084020),                           // [19] : 1 = full range, 0 = half range
        .TXDLY_CFG                      (16'h001F),                             // 
        .TXDLY_LCFG	                    ( 9'h030),                              // 
        .TXDLY_TAP_CFG                  (16'd0),                                // 
                 
        .TXSYNC_OVRD                    (TXSYNC_OVRD),                          //
        .TXSYNC_MULTILANE               (TXSYNC_MULTILANE),                     //
        .TXSYNC_SKIP_DA                 (1'b0),                                 //
                                                                                 
        //---------- RX Sync Attributes ----------------------------------------            
        .RXPH_CFG                       (24'd0),                                //
        .RXPH_MONITOR_SEL               ( 5'd0),                                //
        .RXPHDLY_CFG                    (24'h004020),                           // [19] : 1 = full range, 0 = half range
        .RXDLY_CFG                      (16'h001F),                             // 
        .RXDLY_LCFG	                    ( 9'h030),                              //
        .RXDLY_TAP_CFG                  (16'd0),                                //
        .RX_DDI_SEL	                    ( 6'd0),                                //
            
        .RXSYNC_OVRD                    (RXSYNC_OVRD),                          //    
        .RXSYNC_MULTILANE               (RXSYNC_MULTILANE),                     //
        .RXSYNC_SKIP_DA                 (1'b0),                                 //
                                                                                 
        //---------- Comma Alignment Attributes --------------------------------            
        .ALIGN_COMMA_DOUBLE             ("FALSE"),                              //   
        .ALIGN_COMMA_ENABLE             (10'b1111111111),                       // PCIe
        .ALIGN_COMMA_WORD               ( 1),                                   //
        .ALIGN_MCOMMA_DET               ("TRUE"),                               //
        .ALIGN_MCOMMA_VALUE             (10'b1010000011),                       //
        .ALIGN_PCOMMA_DET               ("TRUE"),                               //
        .ALIGN_PCOMMA_VALUE             (10'b0101111100),                       //
        .DEC_MCOMMA_DETECT              ("TRUE"),                               //
        .DEC_PCOMMA_DETECT              ("TRUE"),                               //
        .DEC_VALID_COMMA_ONLY           ("FALSE"),                              // PCIe
        .SHOW_REALIGN_COMMA             ("FALSE"),                              // PCIe
        .RXSLIDE_AUTO_WAIT              ( 7),                                   // 
        .RXSLIDE_MODE                   ("PMA"),                                // PCIe
                                                                                 
        //---------- Channel Bonding Attributes --------------------------------                
        .CHAN_BOND_KEEP_ALIGN           ("TRUE"),                               // PCIe
        .CHAN_BOND_MAX_SKEW             ( 7),                                   // 
        .CHAN_BOND_SEQ_LEN              ( 4),                                   // PCIe
        .CHAN_BOND_SEQ_1_ENABLE         ( 4'b1111),                             //
        .CHAN_BOND_SEQ_1_1              (10'b0001001010),                       // D10.2 (4A) - TS1 
        .CHAN_BOND_SEQ_1_2              (10'b0001001010),                       // D10.2 (4A) - TS1
        .CHAN_BOND_SEQ_1_3              (10'b0001001010),                       // D10.2 (4A) - TS1
        .CHAN_BOND_SEQ_1_4              (10'b0110111100),                       // K28.5 (BC) - COM
        .CHAN_BOND_SEQ_2_USE            ("TRUE"),                               // PCIe
        .CHAN_BOND_SEQ_2_ENABLE         (4'b1111),                              //
        .CHAN_BOND_SEQ_2_1              (10'b0001000101),                       // D5.2  (45) - TS2
        .CHAN_BOND_SEQ_2_2              (10'b0001000101),                       // D5.2  (45) - TS2
        .CHAN_BOND_SEQ_2_3              (10'b0001000101),                       // D5.2  (45) - TS2
        .CHAN_BOND_SEQ_2_4              (10'b0110111100),                       // K28.5 (BC) - COM
        .FTS_DESKEW_SEQ_ENABLE          ( 4'b1111),                             // 
        .FTS_LANE_DESKEW_EN             ("TRUE"),                               // PCIe
        .FTS_LANE_DESKEW_CFG            ( 4'b1111),                             // 
                                                                                 
        //---------- Clock Correction Attributes -------------------------------        
        .CBCC_DATA_SOURCE_SEL           ("DECODED"),                            //
        .CLK_CORRECT_USE                ("TRUE"),                               //
        .CLK_COR_KEEP_IDLE              ("TRUE"),                               // PCIe
        .CLK_COR_MAX_LAT                (CLK_COR_MAX_LAT),                      // 
        .CLK_COR_MIN_LAT                (CLK_COR_MIN_LAT),                      // 
        .CLK_COR_PRECEDENCE             ("TRUE"),                               //
        .CLK_COR_REPEAT_WAIT            ( 0),                                   // 
        .CLK_COR_SEQ_LEN                ( 1),                                   //
        .CLK_COR_SEQ_1_ENABLE           ( 4'b1111),                             //
        .CLK_COR_SEQ_1_1                (10'b0100011100),                       // K28.0 (1C) - SKP
        .CLK_COR_SEQ_1_2                (10'b0000000000),                       // Disabled
        .CLK_COR_SEQ_1_3                (10'b0000000000),                       // Disabled
        .CLK_COR_SEQ_1_4                (10'b0000000000),                       // Disabled
        .CLK_COR_SEQ_2_ENABLE           ( 4'b0000),                             // Disabled
        .CLK_COR_SEQ_2_USE              ("FALSE"),                              //
        .CLK_COR_SEQ_2_1                (10'b0000000000),                       // Disabled
        .CLK_COR_SEQ_2_2                (10'b0000000000),                       // Disabled
        .CLK_COR_SEQ_2_3                (10'b0000000000),                       // Disabled
        .CLK_COR_SEQ_2_4                (10'b0000000000),                       // Disabled
                                                                                 
        //---------- 8b10b Attributes ------------------------------------------                
        .RX_DISPERR_SEQ_MATCH           ("TRUE"),                               //
                                                                                 
        //---------- 64b/66b & 64b/67b Attributes ------------------------------                
        .GEARBOX_MODE                   ( 3'd0),                                //
        .TXGEARBOX_EN                   ("FALSE"),                              //
        .RXGEARBOX_EN                   ("FALSE"),                              //
                                                                                 
       //---------- PRBS & Loopback Attributes ---------------------------------      
        .LOOPBACK_CFG                    ( 1'd0),                               // Enable latch when bypassing TX buffer, equivalent to GTX PCS_RSVD_ATTR[0]      
        .RXPRBS_ERR_LOOPBACK             ( 1'd0),                               //
        .TX_LOOPBACK_DRIVE_HIZ           ("FALSE"),                             //
                                                                                 
       //---------- OOB & SATA Attributes --------------------------------------                
        .TXOOB_CFG                      ( 1'd1),                                // Filter stale TX data when exiting TX electrical idle, equivalent to GTX PCS_RSVD_ATTR[7]
      //.RXOOB_CFG                      ( 7'b0000110),                          //
        .RXOOB_CLK_CFG                  (RXOOB_CLK_CFG),                        // 
      //.SAS_MAX_COM                    (64),                                   //
      //.SAS_MIN_COM                    (36),                                   //
      //.SATA_BURST_SEQ_LEN             ( 4'b1111),                             //
      //.SATA_BURST_VAL                 ( 3'b100),                              //
      //.SATA_PLL_CFG                   ("VCO_3000MHZ"),                        //
      //.SATA_EIDLE_VAL                 ( 3'b100),                              //
      //.SATA_MAX_BURST                 ( 8),                                   //
      //.SATA_MAX_INIT                  (21),                                   //
      //.SATA_MAX_WAKE                  ( 7),                                   //
      //.SATA_MIN_BURST                 ( 4),                                   //
      //.SATA_MIN_INIT                  (12),                                   //
      //.SATA_MIN_WAKE                  ( 4),                                   //  
                                                                                 
        //---------- MISC ------------------------------------------------------               
        .DMONITOR_CFG                   (24'h000B01),                           // 
        .RX_DEBUG_CFG                   (14'h0000),                             // Optimized for IES
      //.TST_RSV                        (32'd0),                                //
      //.UCODEER_CLR                    ( 1'd0)                                 // 
      
        //---------- GTP -------------------------------------------------------
      //.ACJTAG_DEBUG_MODE              (1'd0),                                 //
      //.ACJTAG_MODE                    (1'd0),                                 //
      //.ACJTAG_RESET                   (1'd0),                                 //
      //.ADAPT_CFG0                     (20'd0),                                //
        .CFOK_CFG                       (43'h490_0004_0E80),                    // Changed from 42 to 43-bits, Optimized for IES
        .CFOK_CFG2                      ( 7'b010_0000),                         // Changed from 6 to 7-bits, Optimized for IES
        .CFOK_CFG3                      ( 7'b010_0000),                         // Changed from 6 to 7-bits, Optimized for IES
        .CFOK_CFG4                      ( 1'd0),                                // GTP new, Optimized for IES
        .CFOK_CFG5                      ( 2'd0),                                // GTP new, Optimized for IES
        .CFOK_CFG6                      ( 4'd0)                                 // GTP new, Optimized for IES
      
     )                                                                        
     gtpe2_channel_i                                                                     
     (                                                                           
                                                                                 
        //---------- Clock -----------------------------------------------------                
        .PLL0CLK                        (GT_QPLLCLK),                           //
        .PLL1CLK                        (1'd0),                                 //
        .PLL0REFCLK                     (GT_QPLLREFCLK),                        //
        .PLL1REFCLK                     (1'd0),                                 //
        .TXUSRCLK                       (GT_TXUSRCLK),                          //
        .RXUSRCLK                       (GT_RXUSRCLK),                          //
        .TXUSRCLK2                      (GT_TXUSRCLK2),                         //
        .RXUSRCLK2                      (GT_RXUSRCLK2),                         //
        .TXSYSCLKSEL                    (GT_TXSYSCLKSEL),                       // 
        .RXSYSCLKSEL                    (GT_RXSYSCLKSEL),                       // 
        .TXOUTCLKSEL                    (txoutclksel),                          //
        .RXOUTCLKSEL                    (rxoutclksel),                          //
        .CLKRSVD0                       (1'd0),                                 // 
        .CLKRSVD1                       (1'd0),                                 // 
                                                                                
        .TXOUTCLK                       (GT_TXOUTCLK),                          //
        .RXOUTCLK                       (GT_RXOUTCLK),                          //
        .TXOUTCLKFABRIC                 (),                                     //
        .RXOUTCLKFABRIC                 (),                                     //
        .TXOUTCLKPCS                    (),                                     //
        .RXOUTCLKPCS                    (),                                     //
        .RXCDRLOCK                      (GT_RXCDRLOCK),                         //
                                                                                
        //---------- Reset -----------------------------------------------------                
        .TXUSERRDY                      (GT_TXUSERRDY),                         //
        .RXUSERRDY                      (GT_RXUSERRDY),                         //
        .CFGRESET                       (1'd0),                                 //
        .GTRESETSEL                     (1'd0),                                 //
        .RESETOVRD                      (GT_RESETOVRD),                         //
        .GTTXRESET                      (GT_GTTXRESET),                         //
        .GTRXRESET                      (GT_GTRXRESET),                         //
                                                                               
        .TXRESETDONE                    (GT_TXRESETDONE),                       //
        .RXRESETDONE                    (GT_RXRESETDONE),                       //
                                                                                
        //---------- TX Data ---------------------------------------------------                
        .TXDATA                         (GT_TXDATA),                            //
        .TXCHARISK                      (GT_TXDATAK),                           //
                                                                                
        .GTPTXP                         (GT_TXP),                               // GTP
        .GTPTXN                         (GT_TXN),                               // GTP 
                                                                                
        //---------- RX Data ---------------------------------------------------                
        .GTPRXP                         (GT_RXP),                               // GTP 
        .GTPRXN                         (GT_RXN),                               // GTP
                                                                              
        .RXDATA                         (rxdata[31:0]),                         //
        .RXCHARISK                      (rxdatak[3:0]),                         //
                                                                                
        //---------- Command ---------------------------------------------------                
        .TXDETECTRX                     (GT_TXDETECTRX),                        //
        .TXPDELECIDLEMODE               ( 1'd0),                                //
        .RXELECIDLEMODE                 ( 2'd0),                                //
        .TXELECIDLE                     (GT_TXELECIDLE),                        //
        .TXCHARDISPMODE                 ({3'd0, GT_TXCOMPLIANCE}),              // Changed from 8 to 4-bits
        .TXCHARDISPVAL                  ( 4'd0),                                // Changed from 8 to 4-bits
        .TXPOLARITY                     ( 1'd0),                                //
        .RXPOLARITY                     (GT_RXPOLARITY),                        //
        .TXPD                           (GT_TXPOWERDOWN),                       //
        .RXPD                           (GT_RXPOWERDOWN),                       //
        .TXRATE                         (GT_TXRATE),                            //
        .RXRATE                         (GT_RXRATE),                            //
        .TXRATEMODE                     (1'b0),                                 //
        .RXRATEMODE                     (1'b0),                                 //
                                                                                
        //---------- Electrical Command ----------------------------------------                
        .TXMARGIN                       (GT_TXMARGIN),                          //
        .TXSWING                        (GT_TXSWING),                           //
        .TXDEEMPH                       (GT_TXDEEMPH),                          //
        //.TXINHIBIT                      (1'd0),                                 // 
        .TXBUFDIFFCTRL                  (3'b100),                               // 
        .TXDIFFCTRL                     (4'b1100),                              // Select 850mV 
        .TXPRECURSOR                    (GT_TXPRECURSOR),                       // 
        .TXPRECURSORINV                 (1'd0),                                 // 
        .TXMAINCURSOR                   (GT_TXMAINCURSOR),                      // 
        .TXPOSTCURSOR                   (GT_TXPOSTCURSOR),                      // 
        .TXPOSTCURSORINV                (1'd0),                                 // 
                                                                                
        //---------- Status ----------------------------------------------------                
        .RXVALID                        (GT_RXVALID),                           //
        .PHYSTATUS                      (GT_PHYSTATUS),                         //
        .RXELECIDLE                     (GT_RXELECIDLE),                        // 
        .RXSTATUS                       (GT_RXSTATUS),                          //
        .TXRATEDONE                     (GT_TXRATEDONE),                        //
        .RXRATEDONE                     (GT_RXRATEDONE),                        //
                                                                                
        //---------- DRP -------------------------------------------------------                
        .DRPCLK                         (GT_DRPCLK),                            //
        .DRPADDR                        (GT_DRPADDR),                           //
        .DRPEN                          (GT_DRPEN),                             //
        .DRPDI                          (GT_DRPDI),                             //
        .DRPWE                          (GT_DRPWE),                             //
                                                                                
        .DRPDO                          (GT_DRPDO),                             //
        .DRPRDY                         (GT_DRPRDY),                            //
                                                                                
        //---------- PMA -------------------------------------------------------                
        .TXPMARESET                     (GT_TXPMARESET),                        //
        .RXPMARESET                     (GT_RXPMARESET),                        //
        .RXLPMRESET                     ( 1'd0),		                            // GTP new  
        .RXLPMOSINTNTRLEN               ( 1'd0),                                // GTP new   
        .RXLPMHFHOLD                    ( 1'd0),                                // 
        .RXLPMHFOVRDEN                  ( 1'd0),                                // 
        .RXLPMLFHOLD                    ( 1'd0),                                // 
        .RXLPMLFOVRDEN                  ( 1'd0),                                // 
        .PMARSVDIN0                     ( 1'd0),                                // GTP new 
        .PMARSVDIN1                     ( 1'd0),                                // GTP new 
        .PMARSVDIN2                     ( 1'd0),                                // GTP new  
        .PMARSVDIN3                     ( 1'd0),                                // GTP new 
        .PMARSVDIN4                     ( 1'd0),                                // GTP new 
        .GTRSVD                         (16'd0),                                // 
              
        .PMARSVDOUT0                    (),                                     // GTP new
        .PMARSVDOUT1                    (),                                     // GTP new                                                                       
        .DMONITOROUT                    (dmonitorout),                          // GTP 15-bits 
                                                                              
        //---------- PCS -------------------------------------------------------                
        .TXPCSRESET                     (GT_TXPCSRESET),                        //
        .RXPCSRESET                     (GT_RXPCSRESET),                        //
        .PCSRSVDIN                      (16'd0),                                // [0]: 1 = TXRATE async, [1]: 1 = RXRATE async    
        
        .PCSRSVDOUT                     (),                                     // 
        
        //---------- CDR -------------------------------------------------------                
        .RXCDRRESET                     (GT_RXCDRRESET),                        //
        .RXCDRRESETRSV                  (1'd0),                                 // 
        .RXCDRFREQRESET                 (GT_RXCDRFREQRESET),                    // 
        .RXCDRHOLD                      (1'd0),                                 // 
        .RXCDROVRDEN                    (1'd0),                                 // 
         
        //---------- PI --------------------------------------------------------
        .TXPIPPMEN                      (1'd0),                                 //
        .TXPIPPMOVRDEN                  (1'd0),                                 //
        .TXPIPPMPD                      (1'd0),                                 //
        .TXPIPPMSEL                     (1'd0),                                 //
        .TXPIPPMSTEPSIZE                (5'd0),                                 // 
        .TXPISOPD                       (1'd0),                                 // GTP new 
         
        //---------- DFE -------------------------------------------------------                
        .RXDFEXYDEN                     (1'd0),                                 //  
        
        //---------- OS --------------------------------------------------------         
        .RXOSHOLD                       (1'd0),                                 // Optimized for IES
        .RXOSOVRDEN                     (1'd0),                                 // Optimized for IES                          
        .RXOSINTEN                      (1'd1),                                 // Optimized for IES           
        .RXOSINTHOLD                    (1'd0),                                 // Optimized for IES                                                                                                      
        .RXOSINTNTRLEN                  (1'd0),                                 // Optimized for IES           
        .RXOSINTOVRDEN                  (1'd0),                                 // Optimized for IES            
        .RXOSINTPD                      (1'd0),                                 // GTP new, Optimized for IES             
        .RXOSINTSTROBE                  (1'd0),                                 // Optimized for IES           
        .RXOSINTTESTOVRDEN              (1'd0),                                 // Optimized for IES           
        .RXOSINTCFG                     (4'b0010),                              // Optimized for IES                     
        .RXOSINTID0                     (4'd0),                                 // Optimized for IES
                                  
        .RXOSINTDONE                    (),                                     //
        .RXOSINTSTARTED                 (),                                     //
        .RXOSINTSTROBEDONE              (),                                     //
        .RXOSINTSTROBESTARTED           (),                                     //
                                                                                
        //---------- Eye Scan --------------------------------------------------                
        .EYESCANRESET                   (GT_EYESCANRESET),                      // 
        .EYESCANMODE                    (1'd0),                                 // 
        .EYESCANTRIGGER                 (1'd0),                                 // 
                                                                                
        .EYESCANDATAERROR               (GT_EYESCANDATAERROR),                  // 
                                                                                
        //---------- TX Buffer -------------------------------------------------                
        .TXBUFSTATUS                    (),                                     //
                                                                                
        //---------- RX Buffer -------------------------------------------------                
        .RXBUFRESET                     (GT_RXBUFRESET),                        // 
        
        .RXBUFSTATUS                    (GT_RXBUFSTATUS),                       //
                                                                                
        //---------- TX Sync ---------------------------------------------------                
        .TXPHDLYRESET                   (GT_TXPHDLYRESET),                      //
        .TXPHDLYTSTCLK                  (1'd0),                                 //
        .TXPHALIGN                      (GT_TXPHALIGN),                         // 
        .TXPHALIGNEN                    (GT_TXPHALIGNEN),                       //  
        .TXPHDLYPD                      (1'd0),                                 // 
        .TXPHINIT                       (GT_TXPHINIT),                          //  
        .TXPHOVRDEN                     (1'd0),                                 //
        .TXDLYBYPASS                    (GT_TXDLYBYPASS),                       //  
        .TXDLYSRESET                    (GT_TXDLYSRESET),                       // 
        .TXDLYEN                        (GT_TXDLYEN),                           //  
        .TXDLYOVRDEN                    (1'd0),                                 //
        .TXDLYHOLD                      (1'd0),                                 // 
        .TXDLYUPDOWN                    (1'd0),                                 //
                                                                                
        .TXPHALIGNDONE                  (GT_TXPHALIGNDONE),                     // 
        .TXPHINITDONE                   (GT_TXPHINITDONE),                      // 
        .TXDLYSRESETDONE                (GT_TXDLYSRESETDONE),                   //
        
        .TXSYNCMODE                     (GT_TXSYNCMODE),                        //
        .TXSYNCIN                       (GT_TXSYNCIN),                          //
        .TXSYNCALLIN                    (GT_TXSYNCALLIN),                       //
        
        .TXSYNCDONE                     (GT_TXSYNCDONE),                        //
        .TXSYNCOUT                      (GT_TXSYNCOUT),                         //
        
        //---------- RX Sync ---------------------------------------------------                  
        .RXPHDLYRESET                   (1'd0),                                 //
        .RXPHALIGN                      (GT_RXPHALIGN),                         //
        .RXPHALIGNEN                    (GT_RXPHALIGNEN),                       //
        .RXPHDLYPD                      (1'd0),                                 // 
        .RXPHOVRDEN                     (1'd0),                                 // 
        .RXDLYBYPASS                    (GT_RXDLYBYPASS),                       //  
        .RXDLYSRESET                    (GT_RXDLYSRESET),                       // 
        .RXDLYEN                        (GT_RXDLYEN),                           // 
        .RXDLYOVRDEN                    (1'd0),                                 //
        .RXDDIEN                        (GT_RXDDIEN),                           //
                                                                                
        .RXPHALIGNDONE                  (GT_RXPHALIGNDONE),                     //  
        .RXPHMONITOR                    (),                                     //
        .RXPHSLIPMONITOR                (),                                     // 
        .RXDLYSRESETDONE                (GT_RXDLYSRESETDONE),                   // 

        .RXSYNCMODE                     (GT_RXSYNCMODE),                        //
        .RXSYNCIN                       (GT_RXSYNCIN),                          //
        .RXSYNCALLIN                    (GT_RXSYNCALLIN),                       //
        
        .RXSYNCDONE                     (GT_RXSYNCDONE),                        //
        .RXSYNCOUT                      (GT_RXSYNCOUT),                         //
                
        //---------- Comma Alignment -------------------------------------------                 
        .RXCOMMADETEN                   (1'd1),                                 //
        .RXMCOMMAALIGNEN                (1'd1),                                 // No Gen3 support in GTP
        .RXPCOMMAALIGNEN                (1'd1),                                 // No Gen3 support in GTP
        .RXSLIDE                        (GT_RXSLIDE),                           //
        .RXCOMMADET                     (GT_RXCOMMADET),                        //
        .RXCHARISCOMMA                  (rxchariscomma[3:0]),                   // 
        .RXBYTEISALIGNED                (GT_RXBYTEISALIGNED),                   //
        .RXBYTEREALIGN                  (GT_RXBYTEREALIGN),                     //
                                                                                
        //---------- Channel Bonding -------------------------------------------                
        .RXCHBONDEN                     (GT_RXCHBONDEN),                        //
        .RXCHBONDI                      (GT_RXCHBONDI[3:0]),                    //
        .RXCHBONDLEVEL                  (GT_RXCHBONDLEVEL),                     //
        .RXCHBONDMASTER                 (GT_RXCHBONDMASTER),                    //
        .RXCHBONDSLAVE                  (GT_RXCHBONDSLAVE),                     //
                                                                                
        .RXCHANBONDSEQ                  (),                                     // 
        .RXCHANISALIGNED                (GT_RXCHANISALIGNED),                   //
        .RXCHANREALIGN                  (),                                     //
        .RXCHBONDO                      (GT_RXCHBONDO[3:0]),                    //
                                                                                
        //---------- Clock Correction  -----------------------------------------                
        .RXCLKCORCNT                    (),                                     //
                                                                                
        //---------- 8b10b -----------------------------------------------------                
        .TX8B10BBYPASS                  (4'd0),                                 //
        .TX8B10BEN                      (1'b1),                                 // No Gen3 support in GTP
        .RX8B10BEN                      (1'b1),                                 // No Gen3 support in GTP
                                                                                
        .RXDISPERR                      (GT_RXDISPERR),                         //
        .RXNOTINTABLE                   (GT_RXNOTINTABLE),                      //
                                                                                
        //---------- 64b/66b & 64b/67b -----------------------------------------                  
        .TXHEADER                       (3'd0),                                 //
        .TXSEQUENCE                     (7'd0),                                 //
        .TXSTARTSEQ                     (1'd0),                                 //                                                              
        .RXGEARBOXSLIP                  (1'd0),                                 //
                                                                                
        .TXGEARBOXREADY                 (),                                     // 
        .RXDATAVALID                    (),                                     //
        .RXHEADER                       (),                                     //
        .RXHEADERVALID                  (),                                     //
        .RXSTARTOFSEQ                   (),                                     //
                                                                                
        //---------- PRBS/Loopback ---------------------------------------------                
        .TXPRBSSEL                      (GT_TXPRBSSEL),                         //
        .RXPRBSSEL                      (GT_RXPRBSSEL),                         //
        .TXPRBSFORCEERR                 (GT_TXPRBSFORCEERR),                    //
        .RXPRBSCNTRESET                 (GT_RXPRBSCNTRESET),                    // 
        .LOOPBACK                       (GT_LOOPBACK),                          // 
                                                                                
        .RXPRBSERR                      (GT_RXPRBSERR),                         //
        .TXINHIBIT                      (GT_TXINHIBIT),//(1'd0),                                 // 
                                                                                
        //---------- OOB -------------------------------------------------------      
        .SIGVALIDCLK                    (GT_OOBCLK),                            // Optimized for debug           
        .TXCOMINIT                      (1'd0),                                 //
        .TXCOMSAS                       (1'd0),                                 //
        .TXCOMWAKE                      (1'd0),                                 //
        .RXOOBRESET                     (1'd0),                                 // 
                                                                                
        .TXCOMFINISH                    (),                                     //
        .RXCOMINITDET                   (),                                     //
        .RXCOMSASDET                    (),                                     //
        .RXCOMWAKEDET                   (),                                     //
                                                                                
        //---------- MISC ------------------------------------------------------                
        .SETERRSTATUS                   ( 1'd0),                                // 
        .TXDIFFPD                       ( 1'd0),                                // 
        .TSTIN                          (20'hFFFFF),                            //  
                 
        //---------- GTP -------------------------------------------------------                                                                        
        .RXADAPTSELTEST                 (14'd0),                                //
        .DMONFIFORESET                  ( 1'd0),                                //
        .DMONITORCLK                    (dmonitorclk),                          //  
        .RXOSCALRESET                   ( 1'd0),                                //                     
                             
        .RXPMARESETDONE                 (GT_RXPMARESETDONE),                    // GTP
        .TXPMARESETDONE                 ()                                      //
        
     );         
     
     assign GT_CPLLLOCK = 1'b0;

    end

else if (PCIE_GT_DEVICE == "GTH") 

    begin : gth_channel
    
    //---------- GTH Channel Module --------------------------------------------
    GTHE2_CHANNEL #
    (
               
        //---------- Simulation Attributes -------------------------------------               
        .SIM_CPLLREFCLK_SEL             (3'b001),                               //
        .SIM_RESET_SPEEDUP              (PCIE_SIM_SPEEDUP),                     //
        .SIM_RECEIVER_DETECT_PASS       ("TRUE"),                               //    
        .SIM_TX_EIDLE_DRIVE_LEVEL       (PCIE_SIM_TX_EIDLE_DRIVE_LEVEL),        // 
        .SIM_VERSION                    (SIM_VERSION),                          //
                                                                               
        //---------- Clock Attributes ------------------------------------------                                      
        .CPLL_REFCLK_DIV                (CPLL_REFCLK_DIV),                      //
        .CPLL_FBDIV_45                  (CPLL_FBDIV_45),                        //
        .CPLL_FBDIV                     (CPLL_FBDIV),                           //
        .TXOUT_DIV                      (OUT_DIV),                              //
        .RXOUT_DIV                      (OUT_DIV),                              // 
        .TX_CLK25_DIV                   (CLK25_DIV),                            //
        .RX_CLK25_DIV                   (CLK25_DIV),                            //
        .TX_CLKMUX_PD                   ( 1'b1),                                // GTH
        .RX_CLKMUX_PD                   ( 1'b1),                                // GTH
        .TX_XCLK_SEL                    (TX_XCLK_SEL),                          // TXOUT = use TX buffer, TXUSR = bypass TX buffer
        .RX_XCLK_SEL                    ("RXREC"),                              // RXREC = use RX buffer, RXUSR = bypass RX buffer
        .OUTREFCLK_SEL_INV              ( 2'b11),                               //
        .CPLL_CFG                       (29'h00A407CC),                         // Changed from 24 to 29-bits, Optimized for PCIe PLL BW 
        .CPLL_INIT_CFG                  (24'h00001E),                           // Optimized for IES
        .CPLL_LOCK_CFG                  (16'h01E8),                             // Optimized for IES
        //.USE_PCS_CLK_PHASE_SEL        ( 1'd0)                                 // GTH new
                                                                               
        //---------- Reset Attributes ------------------------------------------                
        .TXPCSRESET_TIME                (5'b00001),                             //
        .RXPCSRESET_TIME                (5'b00001),                             //
        .TXPMARESET_TIME                (5'b00011),                             //
        .RXPMARESET_TIME                (5'b00011),                             // Optimized for sim and for DRP
        //.RXISCANRESET_TIME            (5'b00001),                             //
        //.RESET_POWERSAVE_DISABLE      ( 1'd0),                                // GTH new
                                                                               
        //---------- TX Data Attributes ----------------------------------------                
        .TX_DATA_WIDTH                  (20),                                   // 2-byte external datawidth for Gen1/Gen2
        .TX_INT_DATAWIDTH               ( 0),                                   // 2-byte internal datawidth for Gen1/Gen2
                                                                               
        //---------- RX Data Attributes ----------------------------------------                
        .RX_DATA_WIDTH                  (20),                                   // 2-byte external datawidth for Gen1/Gen2
        .RX_INT_DATAWIDTH               ( 0),                                   // 2-byte internal datawidth for Gen1/Gen2
                                                                               
        //---------- Command Attributes ----------------------------------------                
        .TX_RXDETECT_CFG                (TX_RXDETECT_CFG),                      //
        .TX_RXDETECT_PRECHARGE_TIME     (17'h00001),                            // GTH new, Optimized for sim
        .TX_RXDETECT_REF                ( 3'b011),                              // 
        .RX_CM_SEL                      ( 2'b11),                                // 0 = AVTT, 1 = GND, 2 = Float, 3 = Programmable, optimized for silicon
        .RX_CM_TRIM                     ( 4'b1010),                             // Select 800mV, Changed from 3 to 4-bits, optimized for silicon
        .TX_EIDLE_ASSERT_DELAY          (PCIE_TX_EIDLE_ASSERT_DELAY),           // Optimized for sim (3'd4)
        .TX_EIDLE_DEASSERT_DELAY        ( 3'b100),                              // Optimized for sim
      //.PD_TRANS_TIME_FROM_P2          (12'h03C),                              //
        .PD_TRANS_TIME_NONE_P2          ( 8'h09),                               // Optimized for sim
      //.PD_TRANS_TIME_TO_P2            ( 8'h64),                               //
      //.TRANS_TIME_RATE                ( 8'h0E),                               //
                                                                               
        //---------- Electrical Command Attributes -----------------------------                
        .TX_DRIVE_MODE                  ("PIPE"),                               // Gen1/Gen2 = PIPE, Gen3 = PIPEGEN3
        .TX_DEEMPH0                     ( 6'b010100),                           //  6.0 dB, optimized for compliance, changed from 5 to 6-bits
        .TX_DEEMPH1                     ( 6'b001011),                           //  3.5 dB, optimized for compliance, changed from 5 to 6-bits
        .TX_MARGIN_FULL_0               ( 7'b1001111),                          // 1000 mV
        .TX_MARGIN_FULL_1               ( 7'b1001110),                          //  950 mV
        .TX_MARGIN_FULL_2               ( 7'b1001101),                          //  900 mV
        .TX_MARGIN_FULL_3               ( 7'b1001100),                          //  850 mV
        .TX_MARGIN_FULL_4               ( 7'b1000011),                          //  400 mV
        .TX_MARGIN_LOW_0                ( 7'b1000101),                          //  500 mV
        .TX_MARGIN_LOW_1                ( 7'b1000110),                          //  450 mV
        .TX_MARGIN_LOW_2                ( 7'b1000011),                          //  400 mV
        .TX_MARGIN_LOW_3                ( 7'b1000010),                          //  350 mV
        .TX_MARGIN_LOW_4                ( 7'b1000000),                          //  250 mV
        .TX_MAINCURSOR_SEL              ( 1'b0),                                //
        .TX_QPI_STATUS_EN               ( 1'b0),                                //
                                                                               
        //---------- Status Attributes -----------------------------------------                
        .RX_SIG_VALID_DLY               (4),                                    // Optimized for sim
                                                                               
        //---------- DRP Attributes --------------------------------------------                
                     
        //---------- PCS Attributes --------------------------------------------                
        .PCS_PCIE_EN                    ("TRUE"),                               // PCIe 
        .PCS_RSVD_ATTR                  (48'h0000_0000_0140),                   // [8] : 1 = OOB power-up, [6] : 1 = DMON enable, Optimized for IES       
                                                                               
        //---------- PMA Attributes --------------------------------------------                
        .PMA_RSV                        (32'h00000080),                         // Optimized for IES 
        .PMA_RSV2                       (32'h1C00000A),                         // Changed from 16 to 32-bits, Optimized for IES
      //.PMA_RSV3                       ( 2'h0),                                // 
        .PMA_RSV4                       (15'h0008),                             // GTH new, Optimized for IES
      //.PMA_RSV5                       ( 4'h00),                               // GTH new
        .RX_BIAS_CFG                    (24'h0C0010),                           // Changed from 12 to 24-bits, Optimized for IES
        .TERM_RCAL_CFG                  (15'b100001000010000),                  // Changed from  5 to 15-bits, Optimized for IES
        .TERM_RCAL_OVRD                 ( 3'b000),                              // Changed from  1 to  3-bits, Optimized for IES
                  
        //---------- TX PI -----------------------------------------------------             
      //.TXPI_CFG0                      ( 2'd0),                                // GTH new
      //.TXPI_CFG1                      ( 2'd0),                                // GTH new
      //.TXPI_CFG2                      ( 2'd0),                                // GTH new
      //.TXPI_CFG3                      ( 1'd0),                                // GTH new
      //.TXPI_CFG4                      ( 1'd0),                                // GTH new
      //.TXPI_CFG5                      ( 3'b100),                              // GTH new 
      //.TXPI_GREY_SEL                  ( 1'd0),                                // GTH new
      //.TXPI_INVSTROBE_SEL             ( 1'd0),                                // GTH new
      //.TXPI_PPMCLK_SEL                ("TXUSRCLK2"),                          // GTH new
      //.TXPI_PPM_CFG                   ( 8'd0),                                // GTH new
      //.TXPI_SYNFREQ_PPM               ( 3'd0),                                // GTH new
              
        //---------- RX PI -----------------------------------------------------  
        .RXPI_CFG0                      (2'b00),                                // GTH new
        .RXPI_CFG1                      (2'b11),                                // GTH new
        .RXPI_CFG2                      (2'b11),                                // GTH new
        .RXPI_CFG3                      (2'b11),                                // GTH new
        .RXPI_CFG4                      (1'b0),                                 // GTH new
        .RXPI_CFG5                      (1'b0),                                 // GTH new
        .RXPI_CFG6                      (3'b100),                               // GTH new

        //---------- CDR Attributes --------------------------------------------
        .RXCDR_CFG                      (RXCDR_CFG_GTH),                        //
      //.RXCDR_CFG                      (83'h0_0011_07FE_4060_0104_1010),       // A. Changed from 72 to 83-bits, optimized for IES div1 (Gen2), +/-000ppm, default, converted from GTX GES VnC,(2 Gen1)
      //.RXCDR_CFG                      (83'h0_0011_07FE_4060_2104_1010),       // B. Changed from 72 to 83-bits, optimized for IES div1 (Gen2), +/-300ppm, default, converted from GTX GES VnC,(2 Gen1)
      //.RXCDR_CFG                      (83'h0_0011_07FE_2060_0104_1010),       // C. Changed from 72 to 83-bits, optimized for IES div1 (Gen2), +/-000ppm, converted from GTX GES recommended, (3 Gen1)
      //.RXCDR_CFG                      (83'h0_0011_07FE_2060_2104_1010),       // D. Changed from 72 to 83-bits, optimized for IES div1 (Gen2), +/-300ppm, converted from GTX GES recommended, (3 Gen1)
      //.RXCDR_CFG                      (83'h0_0001_07FE_1060_0110_1010),       // E. Changed from 72 to 83-bits, optimized for IES div2 (Gen1), +/-000ppm, default, (3 Gen2)
      //.RXCDR_CFG                      (83'h0_0001_07FE_1060_2110_1010),       // F. Changed from 72 to 83-bits, optimized for IES div2 (Gen1), +/-300ppm, default, (3 Gen2)
      //.RXCDR_CFG                      (83'h0_0011_07FE_1060_0110_1010),       // G. Changed from 72 to 83-bits, optimized for IES div2 (Gen1), +/-000ppm, converted from GTX GES recommended, (3 Gen2)
      //.RXCDR_CFG                      (83'h0_0011_07FE_1060_2110_1010),       // H. Changed from 72 to 83-bits, optimized for IES div2 (Gen1), +/-300ppm, converted from GTX GES recommended, (2 Gen1)
        .RXCDR_LOCK_CFG                 ( 6'b010101),                           // [5:3] Window Refresh, [2:1] Window Size, [0] Enable Detection (sensitive lock = 6'b111001)
        .RXCDR_HOLD_DURING_EIDLE        ( 1'd1),                                // Hold  RX CDR           on electrical idle for Gen1/Gen2
        .RXCDR_FR_RESET_ON_EIDLE        ( 1'd0),                                // Reset RX CDR frequency on electrical idle for Gen3
        .RXCDR_PH_RESET_ON_EIDLE        ( 1'd0),                                // Reset RX CDR phase     on electrical idle for Gen3
      //.RXCDRFREQRESET_TIME            ( 5'b00001),                            // optimized for IES
      //.RXCDRPHRESET_TIME              ( 5'b00001),                            // optimized for IES
                         
        //---------- LPM Attributes --------------------------------------------               
        .RXLPM_HF_CFG                   (14'h0200),                             // Optimized for IES   
        .RXLPM_LF_CFG                   (18'h09000),                            // Changed from 14 to 18-bits, Optimized for IES       
                                                                                
        //---------- DFE Attributes --------------------------------------------                
        .RXDFELPMRESET_TIME	            ( 7'h0F),                               // Optimized for IES     
        .RX_DFE_AGC_CFG0                ( 2'h0),                                // GTH new, optimized for IES    
        .RX_DFE_AGC_CFG1                ( 3'h4),                                // GTH new, optimized for IES, DFE
        .RX_DFE_AGC_CFG2                ( 4'h0),                                // GTH new, optimized for IES 
        .RX_DFE_AGC_OVRDEN              ( 1'h1),                                // GTH new, optimized for IES
        .RX_DFE_GAIN_CFG                (23'h0020C0),                           // Optimized for IES
        .RX_DFE_H2_CFG                  (12'h000),                              // Optimized for IES 
        .RX_DFE_H3_CFG                  (12'h040),                              // Optimized for IES
        .RX_DFE_H4_CFG                  (11'h0E0),                              // Optimized for IES
        .RX_DFE_H5_CFG                  (11'h0E0),                              // Optimized for IES
        .RX_DFE_H6_CFG                  (11'h020),                              // GTH new, optimized for IES
        .RX_DFE_H7_CFG                  (11'h020),                              // GTH new, optimized for IES
        .RX_DFE_KL_CFG                  (33'h000000310),                        // Changed from 13 to 33-bits, optimized for IES
        .RX_DFE_KL_LPM_KH_CFG0          ( 2'h2),                                // GTH new, optimized for IES, DFE
        .RX_DFE_KL_LPM_KH_CFG1          ( 3'h2),                                // GTH new, optimized for IES
        .RX_DFE_KL_LPM_KH_CFG2          ( 4'h2),                                // GTH new, optimized for IES
        .RX_DFE_KL_LPM_KH_OVRDEN        ( 1'h1),                                // GTH new, optimized for IES
        .RX_DFE_KL_LPM_KL_CFG0          ( 2'h2),                                // GTH new, optimized for IES, DFE
        .RX_DFE_KL_LPM_KL_CFG1          ( 3'h2),                                // GTH new, optimized for IES
        .RX_DFE_KL_LPM_KL_CFG2          ( 4'h2),                                // GTH new, optimized for IES
        .RX_DFE_KL_LPM_KL_OVRDEN        ( 1'b1),                                // GTH new, optimized for IES
        .RX_DFE_LPM_CFG                 (16'h0080),                             // Optimized for IES  
        .RX_DFELPM_CFG0                 ( 4'h6),                                // GTH new, optimized for IES
        .RX_DFELPM_CFG1                 ( 4'h0),                                // GTH new, optimized for IES
        .RX_DFELPM_KLKH_AGC_STUP_EN     ( 1'h1),                                // GTH new, optimized for IES
        .RX_DFE_LPM_HOLD_DURING_EIDLE   ( 1'h1),                                // PCIe use mode 
        .RX_DFE_ST_CFG                  (54'h00_C100_000C_003F),                // GTH new, optimized for IES
        .RX_DFE_UT_CFG                  (17'h03800),                            // Optimized for IES
        .RX_DFE_VP_CFG                  (17'h03AA3),                            // Optimized for IES
     
        //---------- OS Attributes ---------------------------------------------
        .RX_OS_CFG                      (13'h0080),                             // Optimized for IES
        .A_RXOSCALRESET                 ( 1'd0),                                // GTH new, optimized for IES
        .RXOSCALRESET_TIME              ( 5'b00011),                            // GTH new, optimized for IES
        .RXOSCALRESET_TIMEOUT           ( 5'b00000),                            // GTH new, disable timeout, optimized for IES
      
        //---------- Eye Scan Attributes ---------------------------------------
      //.ES_CLK_PHASE_SEL               ( 1'd0),                                // GTH new
      //.ES_CONTROL                     ( 6'd0),                                //
      //.ES_ERRDET_EN                   ("FALSE"),                              //
        .ES_EYE_SCAN_EN                 ("FALSE"),                               // Optimized for IES
        .ES_HORZ_OFFSET                 (12'h000),                              // Optimized for IES
      //.ES_PMA_CFG                     (10'd0),                                //
      //.ES_PRESCALE                    ( 5'd0),                                //
      //.ES_QUAL_MASK                   (80'd0),                                //
      //.ES_QUALIFIER                   (80'd0),                                //
      //.ES_SDATA_MASK                  (80'd0),                                //
      //.ES_VERT_OFFSET                 ( 9'd0),                                //
                                                                              
        //---------- TX Buffer Attributes --------------------------------------
        .TXBUF_EN                       (PCIE_TXBUF_EN),                        // 
        .TXBUF_RESET_ON_RATE_CHANGE	    ("TRUE"),                               //
                                                                              
        //---------- RX Buffer Attributes --------------------------------------
        .RXBUF_EN                       ("TRUE"),                               //
      //.RX_BUFFER_CFG                  ( 6'd0),                                //
        .RX_DEFER_RESET_BUF_EN          ("TRUE"),                               // 
        .RXBUF_ADDR_MODE                ("FULL"),                               //
        .RXBUF_EIDLE_HI_CNT	            ( 4'd4),                                // Optimized for sim
        .RXBUF_EIDLE_LO_CNT	            ( 4'd0),                                // Optimized for sim
        .RXBUF_RESET_ON_CB_CHANGE       ("TRUE"),                               //
        .RXBUF_RESET_ON_COMMAALIGN      ("FALSE"),                              //
        .RXBUF_RESET_ON_EIDLE           ("TRUE"),                               // PCIe
        .RXBUF_RESET_ON_RATE_CHANGE	    ("TRUE"),                               //
        .RXBUF_THRESH_OVRD              ("FALSE"),                              //
        .RXBUF_THRESH_OVFLW	            (61),                                   //
        .RXBUF_THRESH_UNDFLW            ( 4),                                   //
      //.RXBUFRESET_TIME                ( 5'b00001),                            //
                                                                              
        //---------- TX Sync Attributes ----------------------------------------
      //.TXPH_CFG                       (16'h0780),                             // 
        .TXPH_MONITOR_SEL               ( 5'd0),                                // 
      //.TXPHDLY_CFG                    (24'h084020),                           // [19] : 1 = full range, 0 = half range
      //.TXDLY_CFG                      (16'h001F),                             // 
      //.TXDLY_LCFG	                    ( 9'h030),                              // 
      //.TXDLY_TAP_CFG                  (16'd0),                                // 
        
        .TXSYNC_OVRD                    (TXSYNC_OVRD),                          // GTH new
        .TXSYNC_MULTILANE               (TXSYNC_MULTILANE),                     // GTH new     
        .TXSYNC_SKIP_DA                 (1'b0),                                 // GTH new   
                                                                              
        //---------- RX Sync Attributes ----------------------------------------
      //.RXPH_CFG                       (24'd0),                                //
        .RXPH_MONITOR_SEL               ( 5'd0),                                //
        .RXPHDLY_CFG                    (24'h004020),                           // [19] : 1 = full range, 0 = half range
      //.RXDLY_CFG                      (16'h001F),                             // 
      //.RXDLY_LCFG	                    ( 9'h030),                              // 
      //.RXDLY_TAP_CFG                  (16'd0),                                //
        .RX_DDI_SEL	                    ( 6'd0),                                //
                
        .RXSYNC_OVRD                    (RXSYNC_OVRD),                          // GTH new        
        .RXSYNC_MULTILANE               (RXSYNC_MULTILANE),                     // GTH new    
        .RXSYNC_SKIP_DA                 (1'b0),                                 // GTH new      
                                                                              
        //---------- Comma Alignment Attributes --------------------------------
        .ALIGN_COMMA_DOUBLE             ("FALSE"),                              //   
        .ALIGN_COMMA_ENABLE             (10'b1111111111),                       // PCIe
        .ALIGN_COMMA_WORD               ( 1),                                   //
        .ALIGN_MCOMMA_DET               ("TRUE"),                               //
        .ALIGN_MCOMMA_VALUE             (10'b1010000011),                       //
        .ALIGN_PCOMMA_DET               ("TRUE"),                               //
        .ALIGN_PCOMMA_VALUE             (10'b0101111100),                       //
        .DEC_MCOMMA_DETECT              ("TRUE"),                               //
        .DEC_PCOMMA_DETECT              ("TRUE"),                               //
        .DEC_VALID_COMMA_ONLY           ("FALSE"),                              // PCIe
        .SHOW_REALIGN_COMMA             ("FALSE"),                              // PCIe
        .RXSLIDE_AUTO_WAIT              ( 7),                                   // 
        .RXSLIDE_MODE                   ("PMA"),                                // PCIe
                                                                              
        //---------- Channel Bonding Attributes --------------------------------
        .CHAN_BOND_KEEP_ALIGN           ("TRUE"),                               // PCIe
        .CHAN_BOND_MAX_SKEW             ( 7),                                   // 
        .CHAN_BOND_SEQ_LEN              ( 4),                                   // PCIe
        .CHAN_BOND_SEQ_1_ENABLE         ( 4'b1111),                             //
        .CHAN_BOND_SEQ_1_1              (10'b0001001010),                       // D10.2 (4A) - TS1 
        .CHAN_BOND_SEQ_1_2              (10'b0001001010),                       // D10.2 (4A) - TS1
        .CHAN_BOND_SEQ_1_3              (10'b0001001010),                       // D10.2 (4A) - TS1
        .CHAN_BOND_SEQ_1_4              (10'b0110111100),                       // K28.5 (BC) - COM
        .CHAN_BOND_SEQ_2_USE            ("TRUE"),                               // PCIe
        .CHAN_BOND_SEQ_2_ENABLE         ( 4'b1111),                             //
        .CHAN_BOND_SEQ_2_1              (10'b0001000101),                       // D5.2  (45) - TS2
        .CHAN_BOND_SEQ_2_2              (10'b0001000101),                       // D5.2  (45) - TS2
        .CHAN_BOND_SEQ_2_3              (10'b0001000101),                       // D5.2  (45) - TS2
        .CHAN_BOND_SEQ_2_4              (10'b0110111100),                       // K28.5 (BC) - COM
        .FTS_DESKEW_SEQ_ENABLE          ( 4'b1111),                             // 
        .FTS_LANE_DESKEW_EN	            ("TRUE"),                               // PCIe
        .FTS_LANE_DESKEW_CFG            ( 4'b1111),                             // 
                                                                              
        //---------- Clock Correction Attributes -------------------------------
        .CBCC_DATA_SOURCE_SEL           ("DECODED"),                            //
        .CLK_CORRECT_USE                ("TRUE"),                               //
        .CLK_COR_KEEP_IDLE              ("TRUE"),                               // PCIe
        .CLK_COR_MAX_LAT                (CLK_COR_MAX_LAT),                      // 
        .CLK_COR_MIN_LAT                (CLK_COR_MIN_LAT),                      // 
        .CLK_COR_PRECEDENCE             ("TRUE"),                               //
        .CLK_COR_REPEAT_WAIT            ( 0),                                   // 
        .CLK_COR_SEQ_LEN                ( 1),                                   //
        .CLK_COR_SEQ_1_ENABLE           ( 4'b1111),                             //
        .CLK_COR_SEQ_1_1                (10'b0100011100),                       // K28.0 (1C) - SKP
        .CLK_COR_SEQ_1_2                (10'b0000000000),                       // Disabled
        .CLK_COR_SEQ_1_3                (10'b0000000000),                       // Disabled
        .CLK_COR_SEQ_1_4                (10'b0000000000),                       // Disabled
        .CLK_COR_SEQ_2_ENABLE           ( 4'b0000),                             // Disabled
        .CLK_COR_SEQ_2_USE              ("FALSE"),                              //
        .CLK_COR_SEQ_2_1                (10'b0000000000),                       // Disabled
        .CLK_COR_SEQ_2_2                (10'b0000000000),                       // Disabled
        .CLK_COR_SEQ_2_3                (10'b0000000000),                       // Disabled
        .CLK_COR_SEQ_2_4                (10'b0000000000),                       // Disabled
                                                                              
        //---------- 8b10b Attributes ------------------------------------------
        .RX_DISPERR_SEQ_MATCH           ("TRUE"),                               //
                                                                              
        //---------- 64b/66b & 64b/67b Attributes ------------------------------
        .GEARBOX_MODE                   (3'd0),                                 //
        .TXGEARBOX_EN                   ("FALSE"),                              //
        .RXGEARBOX_EN                   ("FALSE"),                              //
                                                                              
        //---------- PRBS & Loopback Attributes --------------------------------
        .LOOPBACK_CFG                   ( 1'd1),                                // GTH new, enable latch when bypassing TX buffer, equivalent to GTX PCS_RSVD_ATTR[0]
        .RXPRBS_ERR_LOOPBACK            ( 1'd0),                                //
        .TX_LOOPBACK_DRIVE_HIZ          ("FALSE"),                              //
                                                                              
        //---------- OOB & SATA Attributes -------------------------------------
        .TXOOB_CFG                      ( 1'd1),                                // GTH new, filter stale TX data when exiting TX electrical idle, equivalent to GTX PCS_RSVD_ATTR[7]
      //.RXOOB_CFG                      ( 7'b0000110),                          //
        .RXOOB_CLK_CFG                  (RXOOB_CLK_CFG),                        // GTH new
      //.SAS_MAX_COM                    (64),                                   //
      //.SAS_MIN_COM                    (36),                                   //
      //.SATA_BURST_SEQ_LEN             ( 4'b1111),                             //
      //.SATA_BURST_VAL                 ( 3'b100),                              //
      //.SATA_CPLL_CFG                  ("VCO_3000MHZ"),                        //
      //.SATA_EIDLE_VAL                 ( 3'b100),                              //
      //.SATA_MAX_BURST                 ( 8),                                   //
      //.SATA_MAX_INIT                  (21),                                   //
      //.SATA_MAX_WAKE                  ( 7),                                   //
      //.SATA_MIN_BURST                 ( 4),                                   //
      //.SATA_MIN_INIT                  (12),                                   //
      //.SATA_MIN_WAKE                  ( 4),                                   //  
                                                                              
        //---------- MISC ------------------------------------------------------
        .DMONITOR_CFG                   (24'h000AB1),                           // Optimized for debug; [7:4] : 1011 = AGC
      //.DMONITOR_CFG                   (24'h000AB1),                           // Optimized for debug; [7:4] : 0000 = CDR FSM
        .RX_DEBUG_CFG                   (14'b00000011000000),                   // Changed from 12 to 14-bits, optimized for IES
      //.TST_RSV                        (32'd0),                                //
      //.UCODEER_CLR                    ( 1'd0),                                //
        
        //---------- GTH -------------------------------------------------------
      //.ACJTAG_DEBUG_MODE              ( 1'd0),                                // GTH new
      //.ACJTAG_MODE                    ( 1'd0),                                // GTH new
      //.ACJTAG_RESET                   ( 1'd0),                                // GTH new
        .ADAPT_CFG0                     (20'h00C10),                            // GTH new, optimized for IES
        .CFOK_CFG                       (42'h248_0004_0E80),                    // GTH new, optimized for IES, [8] : 1 = Skip CFOK
        .CFOK_CFG2                      ( 6'b100000),                           // GTH new, optimized for IES
        .CFOK_CFG3                      ( 6'b100000)                            // GTH new, optimized for IES
            
    ) 
    gthe2_channel_i 
    (
           
        //---------- Clock -----------------------------------------------------
        .GTGREFCLK                      (1'd0),                                 //
        .GTREFCLK0                      (GT_GTREFCLK0),                         //
        .GTREFCLK1                      (1'd0),                                 //
        .GTNORTHREFCLK0                 (1'd0),                                 //
        .GTNORTHREFCLK1                 (1'd0),                                 //
        .GTSOUTHREFCLK0                 (1'd0),                                 //
        .GTSOUTHREFCLK1                 (1'd0),                                 //
        .QPLLCLK                        (GT_QPLLCLK),                           //
        .QPLLREFCLK                     (GT_QPLLREFCLK),                        //
        .TXUSRCLK                       (GT_TXUSRCLK),                          //
        .RXUSRCLK                       (GT_RXUSRCLK),                          //
        .TXUSRCLK2                      (GT_TXUSRCLK2),                         //
        .RXUSRCLK2                      (GT_RXUSRCLK2),                         //
        .TXSYSCLKSEL                    (GT_TXSYSCLKSEL),                       // 
        .RXSYSCLKSEL                    (GT_RXSYSCLKSEL),                       // 
        .TXOUTCLKSEL                    (txoutclksel),                          //
        .RXOUTCLKSEL                    (rxoutclksel),                          //
        .CPLLREFCLKSEL                  (3'd1),                                 //
        .CPLLLOCKDETCLK                 (1'd0),                                 //
        .CPLLLOCKEN                     (1'd1),                                 // 
        .CLKRSVD0                       (1'd0),                                 // GTH
        .CLKRSVD1                       (1'd0),                                 // GTH
        
        .TXOUTCLK                       (GT_TXOUTCLK),                          //
        .RXOUTCLK                       (GT_RXOUTCLK),                          //
        .TXOUTCLKFABRIC                 (),                                     //
        .RXOUTCLKFABRIC                 (),                                     //
        .TXOUTCLKPCS                    (),                                     //
        .RXOUTCLKPCS                    (),                                     //
        .CPLLLOCK                       (GT_CPLLLOCK),                          // 
        .CPLLREFCLKLOST                 (),                                     // 
        .CPLLFBCLKLOST                  (),                                     // 
        .RXCDRLOCK                      (GT_RXCDRLOCK),                         //
        .GTREFCLKMONITOR                (),                                     // 
                                                                                
        //---------- Reset -----------------------------------------------------                 
        .CPLLPD                         (cpllpd | GT_CPLLPD),                   // 
        .CPLLRESET                      (cpllrst | GT_CPLLRESET),               //
        .TXUSERRDY                      (GT_TXUSERRDY),                         //
        .RXUSERRDY                      (GT_RXUSERRDY),                         //
        .CFGRESET                       (1'd0),                                 //
        .GTRESETSEL                     (1'd0),                                 // 
        .RESETOVRD                      (GT_RESETOVRD),                         //
        .GTTXRESET                      (GT_GTTXRESET),                         //
        .GTRXRESET                      (GT_GTRXRESET),                         //
                                                                               
        .TXRESETDONE                    (GT_TXRESETDONE),                       //
        .RXRESETDONE                    (GT_RXRESETDONE),                       //
                                                                                
        //---------- TX Data ---------------------------------------------------                 
        .TXDATA                         ({32'd0, GT_TXDATA}),                   //
        .TXCHARISK                      ({ 4'd0, GT_TXDATAK}),                  //
                                                                                
        .GTHTXP                         (GT_TXP),                               // GTH
        .GTHTXN                         (GT_TXN),                               // GTH
                                                                                
        //---------- RX Data ---------------------------------------------------                 
        .GTHRXP                         (GT_RXP),                               // GTH
        .GTHRXN                         (GT_RXN),                               // GTH
                                                                                
        .RXDATA                         (rxdata),                               //
        .RXCHARISK                      (rxdatak),                              //
        
        //---------- Command ---------------------------------------------------
        .TXDETECTRX                     (GT_TXDETECTRX),                        //
        .TXPDELECIDLEMODE               ( txpdelecidlemode_mux ),                                //
        .RXELECIDLEMODE                 ( 2'd0),                                //
        .TXELECIDLE                     (GT_TXELECIDLE),                        //
        .TXCHARDISPMODE                 ({7'd0, GT_TXCOMPLIANCE}),              //
        .TXCHARDISPVAL                  ( 8'd0),                                //
        .TXPOLARITY                     ( 1'd0),                                //
        .RXPOLARITY                     (GT_RXPOLARITY),                        //
        .TXPD                           (GT_TXPOWERDOWN),                       //
        .RXPD                           (GT_RXPOWERDOWN),                       //
        .TXRATE                         (GT_TXRATE),                            //
        .RXRATE                         (GT_RXRATE),                            //
        .TXRATEMODE                     (1'd0),                                 // GTH
        .RXRATEMODE                     (1'd0),                                 // GTH
         
        //---------- Electrical Command ----------------------------------------
        .TXMARGIN                       (GT_TXMARGIN),                          //
        .TXSWING                        (GT_TXSWING),                           //
        .TXDEEMPH                       (GT_TXDEEMPH),                          //
        //.TXINHIBIT                      (1'd0),                                 // 
        .TXBUFDIFFCTRL                  (3'b100),                               // 
        .TXDIFFCTRL                     (4'b1111),                              // Select 850mV
        .TXPRECURSOR                    (GT_TXPRECURSOR),                       // 
        .TXPRECURSORINV                 (1'd0),                                 // 
        .TXMAINCURSOR                   (GT_TXMAINCURSOR),                      // 
        .TXPOSTCURSOR                   (GT_TXPOSTCURSOR),                      // 
        .TXPOSTCURSORINV                (1'd0),                                 // 
                                                                              
        //---------- Status ----------------------------------------------------
        .RXVALID                        (GT_RXVALID),                           //
        .PHYSTATUS                      (GT_PHYSTATUS),                         //
        .RXELECIDLE                     (GT_RXELECIDLE),                        // 
        .RXSTATUS                       (GT_RXSTATUS),                          //
        .TXRATEDONE                     (GT_TXRATEDONE),                        //
        .RXRATEDONE                     (GT_RXRATEDONE),                        //
                                                                              
        //---------- DRP -------------------------------------------------------
        .DRPCLK                         (GT_DRPCLK),                            //
        .DRPADDR                        (GT_DRPADDR),                           //
        .DRPEN                          (GT_DRPEN),                             //
        .DRPDI                          (GT_DRPDI),                             //
        .DRPWE                          (GT_DRPWE),                             //
                                                                             
        .DRPDO                          (GT_DRPDO),                             // 
        .DRPRDY                         (GT_DRPRDY),                            // 
                                                                              
        //---------- PMA -------------------------------------------------------
        .TXPMARESET                     (GT_TXPMARESET),                        //
        .RXPMARESET                     (GT_RXPMARESET),                        //
        .RXLPMEN                        (rxlpmen),                              // ***
        .RXLPMHFHOLD                    (GT_RX_CONVERGE),                       // Set to 1 after convergence
        .RXLPMHFOVRDEN                  ( 1'd0),                                // 
        .RXLPMLFHOLD                    (GT_RX_CONVERGE),                       // Set to 1 after convergence
        .RXLPMLFKLOVRDEN                ( 1'd0),                                // 
        .TXQPIBIASEN                    ( 1'd0),                                // 
        .TXQPISTRONGPDOWN               ( 1'd0),                                // 
        .TXQPIWEAKPUP                   ( 1'd0),                                // 
        .RXQPIEN                        ( 1'd0),                                // Optimized for IES
        .PMARSVDIN                      ( 5'd0),                                // 
        .GTRSVD                         (16'd0),                                // 
                                                                              
        .TXQPISENP                      (),                                     // 
        .TXQPISENN                      (),                                     // 
        .RXQPISENP                      (),                                     // 
        .RXQPISENN                      (),                                     // 
        .DMONITOROUT                    (dmonitorout),                          // GTH 15-bits.
                                                                              
        //---------- PCS -------------------------------------------------------                 
        .TXPCSRESET                     (GT_TXPCSRESET),                        //
        .RXPCSRESET                     (GT_RXPCSRESET),                        //
        .PCSRSVDIN                      (16'd0),                                // [0]: 1 = TXRATE async, [1]: 1 = RXRATE async  
        .PCSRSVDIN2                     ( 5'd0),                                // 
                                                                                
        .PCSRSVDOUT                     (),                                     // 
       
        //---------- CDR -------------------------------------------------------                  
        .RXCDRRESET                     (GT_RXCDRRESET),                        //
        .RXCDRRESETRSV                  (1'd0),                                 // 
        .RXCDRFREQRESET                 (GT_RXCDRFREQRESET),                    // 
        .RXCDRHOLD                      (1'd0),                                 // 
        .RXCDROVRDEN                    (1'd0),                                 // 
                      
         //---------- PI --------------------------------------------------------
        .TXPIPPMEN                      (1'd0),                                 // GTH new
        .TXPIPPMOVRDEN                  (1'd0),                                 // GTH new
        .TXPIPPMPD                      (1'd0),                                 // GTH new
        .TXPIPPMSEL                     (1'd0),                                 // GTH new
        .TXPIPPMSTEPSIZE                (5'd0),                                 // GTH new            
                                                                
        //---------- DFE -------------------------------------------------------   
        .RXDFELPMRESET                  (GT_RXDFELPMRESET),                     //  
        .RXDFEAGCTRL                    (5'b10000),                             // GTH new, optimized for IES
        .RXDFECM1EN                     (1'd0),                                 // 
        .RXDFEVSEN                      (1'd0),                                 // 
        .RXDFETAP2HOLD                  (1'd0),                                 // 
        .RXDFETAP2OVRDEN                (1'd0),                                 // 
        .RXDFETAP3HOLD                  (1'd0),                                 // 
        .RXDFETAP3OVRDEN                (1'd0),                                 // 
        .RXDFETAP4HOLD                  (1'd0),                                 // 
        .RXDFETAP4OVRDEN                (1'd0),                                 // 
        .RXDFETAP5HOLD                  (1'd0),                                 // 
        .RXDFETAP5OVRDEN                (1'd0),                                 // 
        .RXDFETAP6HOLD                  (1'd0),                                 // GTH new
        .RXDFETAP6OVRDEN                (1'd0),                                 // GTH new
        .RXDFETAP7HOLD                  (1'd0),                                 // GTH new
        .RXDFETAP7OVRDEN                (1'd0),                                 // GTH new
        .RXDFEAGCHOLD                   (GT_RX_CONVERGE),                       // Set to 1 after convergence
        .RXDFEAGCOVRDEN                 (rxlpmen),                              // 
        .RXDFELFHOLD                    (GT_RX_CONVERGE),                       // Set to 1 after convergence 
        .RXDFELFOVRDEN                  (1'd0),                                 // 
        .RXDFEUTHOLD                    (1'd0),                                 // 
        .RXDFEUTOVRDEN                  (1'd0),                                 // 
        .RXDFEVPHOLD                    (1'd0),                                 // 
        .RXDFEVPOVRDEN                  (1'd0),                                 // 
        .RXDFEXYDEN                     (1'd1),                                 // Optimized for IES 
        .RXMONITORSEL                   (2'd0),                                 //
        .RXDFESLIDETAP                  (5'd0),                                 // GTH new
        .RXDFESLIDETAPID                (6'd0),                                 // GTH new
        .RXDFESLIDETAPHOLD              (1'd0),                                 // GTH new
        .RXDFESLIDETAPOVRDEN            (1'd0),                                 // GTH new
        .RXDFESLIDETAPADAPTEN           (1'd0),                                 // GTH new
        .RXDFESLIDETAPINITOVRDEN        (1'd0),                                 // GTH new
        .RXDFESLIDETAPONLYADAPTEN       (1'd0),                                 // GTH new
        .RXDFESLIDETAPSTROBE            (1'd0),                                 // GTH new
    
        .RXMONITOROUT                   (),                                     // 
        .RXDFESLIDETAPSTARTED           (),                                     // GTH new
        .RXDFESLIDETAPSTROBEDONE        (),                                     // GTH new
        .RXDFESLIDETAPSTROBESTARTED     (),                                     // GTH new
        .RXDFESTADAPTDONE               (),                                     // GTH new
        
        //---------- OS --------------------------------------------------------
        .RXOSHOLD                       (1'd0),                                 // optimized for IES
        .RXOSOVRDEN                     (1'd0),                                 // optimized for IES
        .RXOSINTEN                      (1'd1),                                 // GTH new, optimized for IES
        .RXOSINTHOLD                    (1'd0),                                 // GTH new, optimized for IES
        .RXOSINTNTRLEN                  (1'd0),                                 // GTH new, optimized for IES
        .RXOSINTOVRDEN                  (1'd0),                                 // GTH new, optimized for IES
        .RXOSINTSTROBE                  (1'd0),                                 // GTH new, optimized for IES
        .RXOSINTTESTOVRDEN              (1'd0),                                 // GTH new, optimized for IES
        .RXOSINTCFG                     (4'b0110),                              // GTH new, optimized for IES
        .RXOSINTID0                     (4'b0000),                              // GTH new, optimized for IES
        .RXOSCALRESET                   ( 1'd0),                                // GTH, optimized for IES
        
        .RSOSINTDONE                    (),                                     // GTH new
        .RXOSINTSTARTED                 (),                                     // GTH new
        .RXOSINTSTROBEDONE              (),                                     // GTH new
        .RXOSINTSTROBESTARTED           (),                                     // GTH new
        
        //---------- Eye Scan --------------------------------------------------
        .EYESCANRESET                   (GT_EYESCANRESET),                      // 
        .EYESCANMODE                    (1'd0),                                 // 
        .EYESCANTRIGGER                 (1'd0),                                 // 
        
        .EYESCANDATAERROR               (GT_EYESCANDATAERROR),                  // 
     
        //---------- TX Buffer -------------------------------------------------
        .TXBUFSTATUS                    (),                                     //
        
        //---------- RX Buffer -------------------------------------------------
        .RXBUFRESET                     (GT_RXBUFRESET),                        //
        
        .RXBUFSTATUS                    (GT_RXBUFSTATUS),                       //
       
        //---------- TX Sync ---------------------------------------------------
        .TXPHDLYRESET                   (GT_TXPHDLYRESET),                      //
        .TXPHDLYTSTCLK                  (1'd0),                                 //
        .TXPHALIGN                      (GT_TXPHALIGN),                         // 
        .TXPHALIGNEN                    (GT_TXPHALIGNEN),                       //  
        .TXPHDLYPD                      (1'd0),                                 // 
        .TXPHINIT                       (GT_TXPHINIT),                          //  
        .TXPHOVRDEN                     (1'd0),                                 //
        .TXDLYBYPASS                    (GT_TXDLYBYPASS),                       //  
        .TXDLYSRESET                    (GT_TXDLYSRESET),                       // 
        .TXDLYEN                        (GT_TXDLYEN),                           //  
        .TXDLYOVRDEN                    (1'd0),                                 //
        .TXDLYHOLD                      (1'd0),                                 // 
        .TXDLYUPDOWN                    (1'd0),                                 //
        
        .TXPHALIGNDONE                  (GT_TXPHALIGNDONE),                     // 
        .TXPHINITDONE                   (GT_TXPHINITDONE),                      // 
        .TXDLYSRESETDONE                (GT_TXDLYSRESETDONE),                   //

        .TXSYNCMODE                     (GT_TXSYNCMODE),                        // GTH
        .TXSYNCIN                       (GT_TXSYNCIN),                          // GTH
        .TXSYNCALLIN                    (GT_TXSYNCALLIN),                       // GTH
        
        .TXSYNCDONE                     (GT_TXSYNCDONE),                        // GTH
        .TXSYNCOUT                      (GT_TXSYNCOUT),                         // GTH
        
        //---------- RX Sync ---------------------------------------------------  
        .RXPHDLYRESET                   (1'd0),                                 //
        .RXPHALIGN                      (GT_RXPHALIGN),                         //
        .RXPHALIGNEN                    (GT_RXPHALIGNEN),                       //
        .RXPHDLYPD                      (1'd0),                                 // 
        .RXPHOVRDEN                     (1'd0),                                 // 
        .RXDLYBYPASS                    (GT_RXDLYBYPASS),                       //  
        .RXDLYSRESET                    (GT_RXDLYSRESET),                       // 
        .RXDLYEN                        (GT_RXDLYEN),                           // 
        .RXDLYOVRDEN                    (1'd0),                                 //
        .RXDDIEN                        (GT_RXDDIEN),                           //
        
        .RXPHALIGNDONE                  (GT_RXPHALIGNDONE),                     //  
        .RXPHMONITOR                    (),                                     //
        .RXPHSLIPMONITOR                (),                                     // 
        .RXDLYSRESETDONE                (GT_RXDLYSRESETDONE),                   // 
         
        .RXSYNCMODE                     (GT_RXSYNCMODE),                        // GTH
        .RXSYNCIN                       (GT_RXSYNCIN),                          // GTH
        .RXSYNCALLIN                    (GT_RXSYNCALLIN),                       // GTH
        
        .RXSYNCDONE                     (GT_RXSYNCDONE),                        // GTH
        .RXSYNCOUT                      (GT_RXSYNCOUT),                         // GTH
         
        //---------- Comma Alignment ------------------------------------------- 
        .RXCOMMADETEN                   ( 1'd1),                                //
        .RXMCOMMAALIGNEN                (!GT_GEN3),                             // 0 = disable comma alignment in Gen3
        .RXPCOMMAALIGNEN                (!GT_GEN3),                             // 0 = disable comma alignment in Gen3
        .RXSLIDE                        ( GT_RXSLIDE),                          //
         
        .RXCOMMADET                     (GT_RXCOMMADET),                        //
        .RXCHARISCOMMA                  (rxchariscomma),                        // 
        .RXBYTEISALIGNED                (GT_RXBYTEISALIGNED),                   //
        .RXBYTEREALIGN                  (GT_RXBYTEREALIGN),                     //
         
        //---------- Channel Bonding -------------------------------------------
        .RXCHBONDEN                     (GT_RXCHBONDEN),                        //
        .RXCHBONDI                      (GT_RXCHBONDI),                         //
        .RXCHBONDLEVEL                  (GT_RXCHBONDLEVEL),                     //
        .RXCHBONDMASTER                 (GT_RXCHBONDMASTER),                    //
        .RXCHBONDSLAVE                  (GT_RXCHBONDSLAVE),                     //
    
        .RXCHANBONDSEQ                  (),                                     //
        .RXCHANISALIGNED                (GT_RXCHANISALIGNED),                   //
        .RXCHANREALIGN                  (),                                     //
        .RXCHBONDO                      (GT_RXCHBONDO),                         //
         
        //---------- Clock Correction  -----------------------------------------
        .RXCLKCORCNT                    (),                                     //
         
        //---------- 8b10b -----------------------------------------------------
        .TX8B10BBYPASS                  (8'd0),                                 //
        .TX8B10BEN                      (!GT_GEN3),                             // 0 = disable TX 8b10b in Gen3
        .RX8B10BEN                      (!GT_GEN3),                             // 0 = disable RX 8b10b in Gen3
        
        .RXDISPERR                      (GT_RXDISPERR),                         //
        .RXNOTINTABLE                   (GT_RXNOTINTABLE),                      //
    
        //---------- 64b/66b & 64b/67b -----------------------------------------
        .TXHEADER                       (3'd0),                                 //
        .TXSEQUENCE                     (7'd0),                                 //
        .TXSTARTSEQ                     (1'd0),                                 //
        .RXGEARBOXSLIP                  (1'd0),                                 //
        
        .TXGEARBOXREADY                 (),                                     // 
        .RXDATAVALID                    (),                                     //
        .RXHEADER                       (),                                     //
        .RXHEADERVALID                  (),                                     //
        .RXSTARTOFSEQ                   (),                                     //
        
        //---------- PRBS & Loopback -------------------------------------------
        .TXPRBSSEL                      (GT_TXPRBSSEL),                         //
        .RXPRBSSEL                      (GT_RXPRBSSEL),                         //
        .TXPRBSFORCEERR                 (GT_TXPRBSFORCEERR),                    //
        .RXPRBSCNTRESET                 (GT_RXPRBSCNTRESET),                    // 
        .LOOPBACK                       (GT_LOOPBACK),                          // 
                                                                                
        .RXPRBSERR                      (GT_RXPRBSERR),                         //
        .TXINHIBIT                      (GT_TXINHIBIT),//(1'd0),                                 // 
         
        //---------- OOB -------------------------------------------------------
        .SIGVALIDCLK                    (GT_OOBCLK),                            // GTH, optimized for debug
        .TXCOMINIT                      (1'd0),                                 //
        .TXCOMSAS                       (1'd0),                                 //
        .TXCOMWAKE                      (1'd0),                                 //
        .RXOOBRESET                     (1'd0),                                 // 
    
        .TXCOMFINISH                    (),                                     //
        .RXCOMINITDET                   (),                                     //
        .RXCOMSASDET                    (),                                     //
        .RXCOMWAKEDET                   (),                                     //
    
        //---------- MISC ------------------------------------------------------
        .SETERRSTATUS                   ( 1'd0),                                // 
        .TXDIFFPD                       ( 1'd0),                                // 
        .TXPISOPD                       ( 1'd0),                                // 
        .TSTIN                          (20'hFFFFF),                            //  
        
        //---------- GTH -------------------------------------------------------
        .RXADAPTSELTEST                 (14'd0),                                // GTH new
        .DMONFIFORESET                  ( 1'd0),                                // GTH
        .DMONITORCLK                    (dmonitorclk),                          // GTH, optimized for debug
      //.DMONITORCLK                    (GT_DRPCLK),                            // GTH, optimized for debug
        
        .RXPMARESETDONE                 (GT_RXPMARESETDONE),                    // GTH
        .TXPMARESETDONE                 ()                                      // GTH

    );
    
    end
    
else

    begin : gtx_channel

    //---------- GTX Channel Module --------------------------------------------
    GTXE2_CHANNEL #
    (
               
        //---------- Simulation Attributes -------------------------------------
        .SIM_CPLLREFCLK_SEL             (3'b001),                               //
        .SIM_RESET_SPEEDUP              (PCIE_SIM_SPEEDUP),                     //
        .SIM_RECEIVER_DETECT_PASS       ("TRUE"),                               //    
        .SIM_TX_EIDLE_DRIVE_LEVEL       (PCIE_SIM_TX_EIDLE_DRIVE_LEVEL),        // 
        .SIM_VERSION                    (PCIE_USE_MODE),                        //
                                                                                
        //---------- Clock Attributes ------------------------------------------                                      
        .CPLL_REFCLK_DIV                (CPLL_REFCLK_DIV),                      //
        .CPLL_FBDIV_45                  (CPLL_FBDIV_45),                        //
        .CPLL_FBDIV                     (CPLL_FBDIV),                           //
        .TXOUT_DIV                      (OUT_DIV),                              //
        .RXOUT_DIV                      (OUT_DIV),                              // 
        .TX_CLK25_DIV                   (CLK25_DIV),                            //
        .RX_CLK25_DIV                   (CLK25_DIV),                            //
        .TX_CLKMUX_PD                   (CLKMUX_PD),                            // GTX
        .RX_CLKMUX_PD                   (CLKMUX_PD),                            // GTX
        .TX_XCLK_SEL                    (TX_XCLK_SEL),                          // TXOUT = use TX buffer, TXUSR = bypass TX buffer
        .RX_XCLK_SEL                    ("RXREC"),                              // RXREC = use RX buffer, RXUSR = bypass RX buffer
        .OUTREFCLK_SEL_INV              ( 2'b11),                               //
        .CPLL_CFG                       (CPLL_CFG),                             // Optimized for silicon
      //.CPLL_INIT_CFG                  (24'h00001E),                           // 
      //.CPLL_LOCK_CFG                  (16'h01E8),                             //
                                                                                
        //---------- Reset Attributes ------------------------------------------                
        .TXPCSRESET_TIME                (5'b00001),                             //
        .RXPCSRESET_TIME                (5'b00001),                             //
        .TXPMARESET_TIME                (5'b00011),                             //
        .RXPMARESET_TIME                (5'b00011),                             // Optimized for sim and for DRP
      //.RXISCANRESET_TIME              (5'b00001),                             //
                                                                                
        //---------- TX Data Attributes ----------------------------------------                
        .TX_DATA_WIDTH                  (20),                                   // 2-byte external datawidth for Gen1/Gen2
        .TX_INT_DATAWIDTH               ( 0),                                   // 2-byte internal datawidth for Gen1/Gen2
                                                                                
        //---------- RX Data Attributes ----------------------------------------                
        .RX_DATA_WIDTH                  (20),                                   // 2-byte external datawidth for Gen1/Gen2
        .RX_INT_DATAWIDTH               ( 0),                                   // 2-byte internal datawidth for Gen1/Gen2
                                                                                
        //---------- Command Attributes ----------------------------------------                
        .TX_RXDETECT_CFG                (TX_RXDETECT_CFG),                      //
        .TX_RXDETECT_REF                (TX_RXDETECT_REF),                      // 
        .RX_CM_SEL                      ( 2'd3),                                // 0 = AVTT, 1 = GND, 2 = Float, 3 = Programmable
        .RX_CM_TRIM	                    ( 3'b010),                              // Select 800mV
        .TX_EIDLE_ASSERT_DELAY          (PCIE_TX_EIDLE_ASSERT_DELAY),           // Optimized for sim (3'd4)
        .TX_EIDLE_DEASSERT_DELAY        ( 3'b100),                              // Optimized for sim
      //.PD_TRANS_TIME_FROM_P2          (12'h03C),                              //
        .PD_TRANS_TIME_NONE_P2          ( 8'h09),                               //
      //.PD_TRANS_TIME_TO_P2            ( 8'h64),                               //
      //.TRANS_TIME_RATE                ( 8'h0E),                               //
                                                                                
        //---------- Electrical Command Attributes -----------------------------                
        .TX_DRIVE_MODE                  ("PIPE"),                               // Gen1/Gen2 = PIPE, Gen3 = PIPEGEN3
        .TX_DEEMPH0                     ( 5'b10100),                            //  6.0 dB
        .TX_DEEMPH1                     ( 5'b01011),                            //  3.5 dB
        .TX_MARGIN_FULL_0               ( 7'b1001111),                          // 1000 mV
        .TX_MARGIN_FULL_1               ( 7'b1001110),                          //  950 mV
        .TX_MARGIN_FULL_2               ( 7'b1001101),                          //  900 mV
        .TX_MARGIN_FULL_3               ( 7'b1001100),                          //  850 mV
        .TX_MARGIN_FULL_4               ( 7'b1000011),                          //  400 mV
        .TX_MARGIN_LOW_0                ( 7'b1000101),                          //  500 mV
        .TX_MARGIN_LOW_1                ( 7'b1000110),                          //  450 mV
        .TX_MARGIN_LOW_2                ( 7'b1000011),                          //  400 mV
        .TX_MARGIN_LOW_3                ( 7'b1000010),                          //  350 mV
        .TX_MARGIN_LOW_4                ( 7'b1000000),                          //  250 mV
        .TX_MAINCURSOR_SEL              ( 1'b0),                                //
        .TX_PREDRIVER_MODE              ( 1'b0),                                // GTX
        .TX_QPI_STATUS_EN               ( 1'b0),                                //
                                                                                
        //---------- Status Attributes -----------------------------------------                
        .RX_SIG_VALID_DLY               (4),                                    // Optimized for sim
                                                                                
        //---------- DRP Attributes --------------------------------------------                
                         
        //---------- PCS Attributes --------------------------------------------                
        .PCS_PCIE_EN                    ("TRUE"),                               // PCIe
        .PCS_RSVD_ATTR                  (PCS_RSVD_ATTR),                        //         
                                                                                
        //---------- PMA Attributes --------------------------------------------                
        .PMA_RSV                        (32'h00018480),                         // Optimized for GES Gen1/Gen2
        .PMA_RSV2                       (16'h2050),                             // Optimized for silicon, [4] RX_CM_TRIM[4], [5] = 1 Enable Eye Scan
      //.PMA_RSV3                       ( 2'd0),                                // 
      //.PMA_RSV4                       (32'd0),                                // GTX 3.0 new
        .RX_BIAS_CFG                    (12'b000000000100),                     // Optimized for GES
      //.TERM_RCAL_CFG                  ( 5'b10000),                            // 
      //.TERM_RCAL_OVRD                 ( 1'd0),                                // 
    
        //---------- CDR Attributes --------------------------------------------
        .RXCDR_CFG                      (RXCDR_CFG_GTX),                        // 
        .RXCDR_LOCK_CFG                 ( 6'b010101),                           // [5:3] Window Refresh, [2:1] Window Size, [0] Enable Detection (sensitive lock = 6'b111001)
        .RXCDR_HOLD_DURING_EIDLE        ( 1'd1),                                // Hold  RX CDR           on electrical idle for Gen1/Gen2
        .RXCDR_FR_RESET_ON_EIDLE        ( 1'd0),                                // Reset RX CDR frequency on electrical idle for Gen3
        .RXCDR_PH_RESET_ON_EIDLE        ( 1'd0),                                // Reset RX CDR phase     on electrical idle for Gen3
      //.RXCDRFREQRESET_TIME            ( 5'b00001),                            // 
      //.RXCDRPHRESET_TIME              ( 5'b00001),                            // 
                                 
        //---------- LPM Attributes --------------------------------------------               
        .RXLPM_HF_CFG                   (14'h00F0),                             // Optimized for silicon
        .RXLPM_LF_CFG                   (14'h00F0),                             // Optimized for silicon
                                                                          
        //---------- DFE Attributes --------------------------------------------                
      //.RXDFELPMRESET_TIME	            ( 7'b0001111),                          // 
        .RX_DFE_GAIN_CFG                (23'h020FEA),                           // Optimized for GES, IES = 23'h001F0A 
        .RX_DFE_H2_CFG                  (12'b000000000000),                     // Optimized for GES
        .RX_DFE_H3_CFG                  (12'b000001000000),                     // Optimized for GES
        .RX_DFE_H4_CFG                  (11'b00011110000),                      // Optimized for GES
        .RX_DFE_H5_CFG                  (11'b00011100000),                      // Optimized for GES
        .RX_DFE_KL_CFG                  (13'b0000011111110),                    // Optimized for GES
        .RX_DFE_KL_CFG2                 (32'h3290D86C),                         // Optimized for GES, GTX new, CTLE 3 3 5, default = 32'h3010D90C
        .RX_DFE_LPM_CFG                 (16'h0954),                             // Optimized for GES
        .RX_DFE_LPM_HOLD_DURING_EIDLE   ( 1'd1),                                // Optimized for PCIe
        .RX_DFE_UT_CFG                  (17'b10001111000000000),                // Optimized for GES, IES = 17'h08F00
        .RX_DFE_VP_CFG                  (17'b00011111100000011),                // Optimized for GES
        .RX_DFE_XYD_CFG                 (13'h0000),                             // Optimized for 4.0
      
        //---------- OS Attributes ---------------------------------------------
        .RX_OS_CFG                      (13'b0000010000000),                    // Optimized for GES
                                                                                
        //---------- Eye Scan Attributes ---------------------------------------                
      //.ES_CONTROL                     ( 6'd0),                                //
      //.ES_ERRDET_EN                   ("FALSE"),                              //
        .ES_EYE_SCAN_EN                 ("FALSE"),                               // 
        .ES_HORZ_OFFSET                 (12'd0),                                //
      //.ES_PMA_CFG                     (10'd0),                                //
      //.ES_PRESCALE                    ( 5'd0),                                //
      //.ES_QUAL_MASK                   (80'd0),                                //
      //.ES_QUALIFIER                   (80'd0),                                //
      //.ES_SDATA_MASK                  (80'd0),                                //
      //.ES_VERT_OFFSET                 ( 9'd0),                                //
                                                                                
        //---------- TX Buffer Attributes --------------------------------------               
        .TXBUF_EN                       (PCIE_TXBUF_EN),                        // 
        .TXBUF_RESET_ON_RATE_CHANGE	    ("TRUE"),                               //
                                                                                
        //---------- RX Buffer Attributes --------------------------------------                
        .RXBUF_EN                       ("TRUE"),                               //
      //.RX_BUFFER_CFG                  ( 6'd0),                                //
        .RX_DEFER_RESET_BUF_EN          ("TRUE"),                               // 
        .RXBUF_ADDR_MODE                ("FULL"),                               //
        .RXBUF_EIDLE_HI_CNT	            ( 4'd4),                                // Optimized for sim
        .RXBUF_EIDLE_LO_CNT	            ( 4'd0),                                // Optimized for sim
        .RXBUF_RESET_ON_CB_CHANGE       ("TRUE"),                               //
        .RXBUF_RESET_ON_COMMAALIGN      ("FALSE"),                              //
        .RXBUF_RESET_ON_EIDLE           ("TRUE"),                               // PCIe
        .RXBUF_RESET_ON_RATE_CHANGE	    ("TRUE"),                               //
        .RXBUF_THRESH_OVRD              ("FALSE"),                              //
        .RXBUF_THRESH_OVFLW	            (61),                                   //
        .RXBUF_THRESH_UNDFLW            ( 4),                                   //
      //.RXBUFRESET_TIME                ( 5'b00001),                            //
                                                                                
        //---------- TX Sync Attributes ----------------------------------------                
      //.TXPH_CFG                       (16'h0780),                             // 
        .TXPH_MONITOR_SEL               ( 5'd0),                                // 
      //.TXPHDLY_CFG                    (24'h084020),                           // 
      //.TXDLY_CFG                      (16'h001F),                             // 
      //.TXDLY_LCFG	                    ( 9'h030),                              // 
      //.TXDLY_TAP_CFG                  (16'd0),                                // 
                                                                                
        //---------- RX Sync Attributes ----------------------------------------            
      //.RXPH_CFG                       (24'd0),                                //
        .RXPH_MONITOR_SEL               ( 5'd0),                                //
        .RXPHDLY_CFG                    (24'h004020),                           // Optimized for sim
      //.RXDLY_CFG                      (16'h001F),                             // 
      //.RXDLY_LCFG	                    ( 9'h030),                              //
      //.RXDLY_TAP_CFG                  (16'd0),                                //
        .RX_DDI_SEL	                    ( 6'd0),                                //
                                                                                
        //---------- Comma Alignment Attributes --------------------------------            
        .ALIGN_COMMA_DOUBLE             ("FALSE"),                              //   
        .ALIGN_COMMA_ENABLE             (10'b1111111111),                       // PCIe
        .ALIGN_COMMA_WORD               ( 1),                                   //
        .ALIGN_MCOMMA_DET               ("TRUE"),                               //
        .ALIGN_MCOMMA_VALUE             (10'b1010000011),                       //
        .ALIGN_PCOMMA_DET               ("TRUE"),                               //
        .ALIGN_PCOMMA_VALUE             (10'b0101111100),                       //
        .DEC_MCOMMA_DETECT              ("TRUE"),                               //
        .DEC_PCOMMA_DETECT              ("TRUE"),                               //
        .DEC_VALID_COMMA_ONLY           ("FALSE"),                              // PCIe
        .SHOW_REALIGN_COMMA             ("FALSE"),                              // PCIe
        .RXSLIDE_AUTO_WAIT              ( 7),                                   // 
        .RXSLIDE_MODE                   ("PMA"),                                // PCIe
                                                                                
        //---------- Channel Bonding Attributes --------------------------------                
        .CHAN_BOND_KEEP_ALIGN           ("TRUE"),                               // PCIe
        .CHAN_BOND_MAX_SKEW             ( 7),                                   // 
        .CHAN_BOND_SEQ_LEN              ( 4),                                   // PCIe
        .CHAN_BOND_SEQ_1_ENABLE         ( 4'b1111),                             //
        .CHAN_BOND_SEQ_1_1              (10'b0001001010),                       // D10.2 (4A) - TS1 
        .CHAN_BOND_SEQ_1_2              (10'b0001001010),                       // D10.2 (4A) - TS1
        .CHAN_BOND_SEQ_1_3              (10'b0001001010),                       // D10.2 (4A) - TS1
        .CHAN_BOND_SEQ_1_4              (10'b0110111100),                       // K28.5 (BC) - COM
        .CHAN_BOND_SEQ_2_USE            ("TRUE"),                               // PCIe
        .CHAN_BOND_SEQ_2_ENABLE         ( 4'b1111),                             //
        .CHAN_BOND_SEQ_2_1              (10'b0001000101),                       // D5.2  (45) - TS2
        .CHAN_BOND_SEQ_2_2              (10'b0001000101),                       // D5.2  (45) - TS2
        .CHAN_BOND_SEQ_2_3              (10'b0001000101),                       // D5.2  (45) - TS2
        .CHAN_BOND_SEQ_2_4              (10'b0110111100),                       // K28.5 (BC) - COM
        .FTS_DESKEW_SEQ_ENABLE          ( 4'b1111),                             // 
        .FTS_LANE_DESKEW_EN	            ("TRUE"),                               // PCIe
        .FTS_LANE_DESKEW_CFG            ( 4'b1111),                             // 
                                                                                
        //---------- Clock Correction Attributes -------------------------------            
        .CBCC_DATA_SOURCE_SEL           ("DECODED"),                            //
        .CLK_CORRECT_USE                ("TRUE"),                               //
        .CLK_COR_KEEP_IDLE              ("TRUE"),                               // PCIe
        .CLK_COR_MAX_LAT                (CLK_COR_MAX_LAT),                      // 
        .CLK_COR_MIN_LAT                (CLK_COR_MIN_LAT),                      // 
        .CLK_COR_PRECEDENCE             ("TRUE"),                               //
        .CLK_COR_REPEAT_WAIT            ( 0),                                   // 
        .CLK_COR_SEQ_LEN                ( 1),                                   //
        .CLK_COR_SEQ_1_ENABLE           ( 4'b1111),                             //
        .CLK_COR_SEQ_1_1                (10'b0100011100),                       // K28.0 (1C) - SKP
        .CLK_COR_SEQ_1_2                (10'b0000000000),                       // Disabled
        .CLK_COR_SEQ_1_3                (10'b0000000000),                       // Disabled
        .CLK_COR_SEQ_1_4                (10'b0000000000),                       // Disabled
        .CLK_COR_SEQ_2_ENABLE           ( 4'b0000),                             // Disabled
        .CLK_COR_SEQ_2_USE              ("FALSE"),                              //
        .CLK_COR_SEQ_2_1                (10'b0000000000),                       // Disabled
        .CLK_COR_SEQ_2_2                (10'b0000000000),                       // Disabled
        .CLK_COR_SEQ_2_3                (10'b0000000000),                       // Disabled
        .CLK_COR_SEQ_2_4                (10'b0000000000),                       // Disabled
                                                                                
        //---------- 8b10b Attributes ------------------------------------------                
        .RX_DISPERR_SEQ_MATCH           ("TRUE"),                               //
                                                                                
        //---------- 64b/66b & 64b/67b Attributes ------------------------------                
        .GEARBOX_MODE                   (3'd0),                                 //
        .TXGEARBOX_EN                   ("FALSE"),                              //
        .RXGEARBOX_EN                   ("FALSE"),                              //
                                                                                
        //---------- PRBS & Loopback Attributes --------------------------------                
        .RXPRBS_ERR_LOOPBACK            (1'd0),                                 //
        .TX_LOOPBACK_DRIVE_HIZ          ("FALSE"),                              //
                                                                                
        //---------- OOB & SATA Attributes -------------------------------------                
      //.RXOOB_CFG                      ( 7'b0000110),                          //
      //.SAS_MAX_COM                    (64),                                   //
      //.SAS_MIN_COM                    (36),                                   //
      //.SATA_BURST_SEQ_LEN             ( 4'b1111),                             //
      //.SATA_BURST_VAL                 ( 3'b100),                              //
      //.SATA_CPLL_CFG                  ("VCO_3000MHZ"),                        //
      //.SATA_EIDLE_VAL                 ( 3'b100),                              //
      //.SATA_MAX_BURST                 ( 8),                                   //
      //.SATA_MAX_INIT                  (21),                                   //
      //.SATA_MAX_WAKE                  ( 7),                                   //
      //.SATA_MIN_BURST                 ( 4),                                   //
      //.SATA_MIN_INIT                  (12),                                   //
      //.SATA_MIN_WAKE                  ( 4),                                   //  
                                                                                
        //---------- MISC ------------------------------------------------------               
        .DMONITOR_CFG                   (24'h000B01),                           // Optimized for debug
        .RX_DEBUG_CFG                   (12'd0)                                 // Optimized for GES
      //.TST_RSV                        (32'd0),                                //
      //.UCODEER_CLR                    ( 1'd0)                                 //
                                                                                
    )                                                                           
    gtxe2_channel_i                                                                     
    (                                                                           
                                                                                
        //---------- Clock -----------------------------------------------------                
        .GTGREFCLK                      (1'd0),                                 //
        .GTREFCLK0                      (GT_GTREFCLK0),                         //
        .GTREFCLK1                      (1'd0),                                 //
        .GTNORTHREFCLK0                 (1'd0),                                 //
        .GTNORTHREFCLK1                 (1'd0),                                 //
        .GTSOUTHREFCLK0                 (1'd0),                                 //
        .GTSOUTHREFCLK1                 (1'd0),                                 //
        .QPLLCLK                        (GT_QPLLCLK),                           //
        .QPLLREFCLK                     (GT_QPLLREFCLK),                        //
        .TXUSRCLK                       (GT_TXUSRCLK),                          //
        .RXUSRCLK                       (GT_RXUSRCLK),                          //
        .TXUSRCLK2                      (GT_TXUSRCLK2),                         //
        .RXUSRCLK2                      (GT_RXUSRCLK2),                         //
        .TXSYSCLKSEL                    (GT_TXSYSCLKSEL),                       // 
        .RXSYSCLKSEL                    (GT_RXSYSCLKSEL),                       // 
        .TXOUTCLKSEL                    (txoutclksel),                          //
        .RXOUTCLKSEL                    (rxoutclksel),                          //
        .CPLLREFCLKSEL                  (3'd1),                                 //
        .CPLLLOCKDETCLK                 (1'd0),                                 //
        .CPLLLOCKEN                     (1'd1),                                 // 
        .CLKRSVD                        ({2'd0, dmonitorclk, GT_OOBCLK}),       // Optimized for debug
                                                                                
        .TXOUTCLK                       (GT_TXOUTCLK),                          //
        .RXOUTCLK                       (GT_RXOUTCLK),                          //
        .TXOUTCLKFABRIC                 (),                                     //
        .RXOUTCLKFABRIC                 (),                                     //
        .TXOUTCLKPCS                    (),                                     //
        .RXOUTCLKPCS                    (),                                     //
        .CPLLLOCK                       (GT_CPLLLOCK),                          //
        .CPLLREFCLKLOST                 (),                                     //
        .CPLLFBCLKLOST                  (),                                     //
        .RXCDRLOCK                      (GT_RXCDRLOCK),                         //
        .GTREFCLKMONITOR                (),                                     //
                                                                                
        //---------- Reset -----------------------------------------------------                
        .CPLLPD                         (cpllpd | GT_CPLLPD),                    // 
        .CPLLRESET                      (cpllrst | GT_CPLLRESET),               //
        .TXUSERRDY                      (GT_TXUSERRDY),                         //
        .RXUSERRDY                      (GT_RXUSERRDY),                         //
        .CFGRESET                       (1'd0),                                 //
        .GTRESETSEL                     (1'd0),                                 //
        .RESETOVRD                      (GT_RESETOVRD),                         //
        .GTTXRESET                      (GT_GTTXRESET),                         //
        .GTRXRESET                      (GT_GTRXRESET),                         //
                                                                               
        .TXRESETDONE                    (GT_TXRESETDONE),                       //
        .RXRESETDONE                    (GT_RXRESETDONE),                       //
                                                                                
        //---------- TX Data ---------------------------------------------------                
        .TXDATA                         ({32'd0, GT_TXDATA}),                   //
        .TXCHARISK                      ({ 4'd0, GT_TXDATAK}),                  //
                                                                                
        .GTXTXP                         (GT_TXP),                               // GTX
        .GTXTXN                         (GT_TXN),                               // GTX
                                                                                
        //---------- RX Data ---------------------------------------------------                
        .GTXRXP                         (GT_RXP),                               // GTX
        .GTXRXN                         (GT_RXN),                               // GTX
                                                                                
        .RXDATA                         (rxdata),                               //
        .RXCHARISK                      (rxdatak),                              //
                                                                                
        //---------- Command ---------------------------------------------------                
        .TXDETECTRX                     (GT_TXDETECTRX),                        //
        .TXPDELECIDLEMODE               ( 1'd0),                                //
        .RXELECIDLEMODE                 ( 2'd0),                                //
        .TXELECIDLE                     (GT_TXELECIDLE),                        //
        .TXCHARDISPMODE                 ({7'd0, GT_TXCOMPLIANCE}),              //
        .TXCHARDISPVAL                  ( 8'd0),                                //
        .TXPOLARITY                     ( 1'd0),                                //
        .RXPOLARITY                     (GT_RXPOLARITY),                        //
        .TXPD                           (GT_TXPOWERDOWN),                       //
        .RXPD                           (GT_RXPOWERDOWN),                       //
        .TXRATE                         (GT_TXRATE),                            //
        .RXRATE                         (GT_RXRATE),                            //
                                                                                
        //---------- Electrical Command ----------------------------------------                
        .TXMARGIN                       (GT_TXMARGIN),                          //
        .TXSWING                        (GT_TXSWING),                           //
        .TXDEEMPH                       (GT_TXDEEMPH),                          //
        //.TXINHIBIT                      (1'd0),                                 // 
        .TXBUFDIFFCTRL                  (3'b100),                               // 
        .TXDIFFCTRL                     (4'b1100),                              // 
        .TXPRECURSOR                    (GT_TXPRECURSOR),                       // 
        .TXPRECURSORINV                 (1'd0),                                 // 
        .TXMAINCURSOR                   (GT_TXMAINCURSOR),                      // 
        .TXPOSTCURSOR                   (GT_TXPOSTCURSOR),                      // 
        .TXPOSTCURSORINV                (1'd0),                                 // 
                                                                                
        //---------- Status ----------------------------------------------------                
        .RXVALID                        (GT_RXVALID),                           //
        .PHYSTATUS                      (GT_PHYSTATUS),                         //
        .RXELECIDLE                     (GT_RXELECIDLE),                        // 
        .RXSTATUS                       (GT_RXSTATUS),                          //
        .TXRATEDONE                     (GT_TXRATEDONE),                        //
        .RXRATEDONE                     (GT_RXRATEDONE),                        //
                                                                                
        //---------- DRP -------------------------------------------------------                
        .DRPCLK                         (GT_DRPCLK),                            //
        .DRPADDR                        (GT_DRPADDR),                           //
        .DRPEN                          (GT_DRPEN),                             //
        .DRPDI                          (GT_DRPDI),                             //
        .DRPWE                          (GT_DRPWE),                             //
                                                                                
        .DRPDO                          (GT_DRPDO),                             //
        .DRPRDY                         (GT_DRPRDY),                            //
                                                                                
        //---------- PMA -------------------------------------------------------                
        .TXPMARESET                     (GT_TXPMARESET),                        //
        .RXPMARESET                     (GT_RXPMARESET),                        //
        .RXLPMEN                        (rxlpmen),                              // 
        .RXLPMHFHOLD                    ( 1'd0),                                // 
        .RXLPMHFOVRDEN                  ( 1'd0),                                // 
        .RXLPMLFHOLD                    ( 1'd0),                                // 
        .RXLPMLFKLOVRDEN                ( 1'd0),                                // 
        .TXQPIBIASEN                    ( 1'd0),                                // 
        .TXQPISTRONGPDOWN               ( 1'd0),                                // 
        .TXQPIWEAKPUP                   ( 1'd0),                                // 
        .RXQPIEN                        ( 1'd0),                                // 
        .PMARSVDIN                      ( 5'd0),                                // 
        .PMARSVDIN2                     ( 5'd0),                                // GTX 
        .GTRSVD                         (16'd0),                                // 
                                                                                
        .TXQPISENP                      (),                                     // 
        .TXQPISENN                      (),                                     // 
        .RXQPISENP                      (),                                     // 
        .RXQPISENN                      (),                                     // 
        .DMONITOROUT                    (dmonitorout[7:0]),                     // GTX 8-bits
                                                                                
        //---------- PCS -------------------------------------------------------                
        .TXPCSRESET                     (GT_TXPCSRESET),                        //
        .RXPCSRESET                     (GT_RXPCSRESET),                        //
        .PCSRSVDIN                      (16'd0),                                // [0]: 1 = TXRATE async, [1]: 1 = RXRATE async  
        .PCSRSVDIN2                     ( 5'd0),                                // 
                                                                                
        .PCSRSVDOUT                     (),                                     // 
        //---------- CDR -------------------------------------------------------                
        .RXCDRRESET                     (GT_RXCDRRESET),                        //
        .RXCDRRESETRSV                  (1'd0),                                 // 
        .RXCDRFREQRESET                 (GT_RXCDRFREQRESET),                    // 
        .RXCDRHOLD                      (1'd0),                                 // 
        .RXCDROVRDEN                    (1'd0),                                 // 
                                                                                
        //---------- DFE -------------------------------------------------------                
        .RXDFELPMRESET                  (GT_RXDFELPMRESET),                     //  
        .RXDFECM1EN                     (1'd0),                                 // 
        .RXDFEVSEN                      (1'd0),                                 // 
        .RXDFETAP2HOLD                  (1'd0),                                 // 
        .RXDFETAP2OVRDEN                (1'd0),                                 // 
        .RXDFETAP3HOLD                  (1'd0),                                 // 
        .RXDFETAP3OVRDEN                (1'd0),                                 // 
        .RXDFETAP4HOLD                  (1'd0),                                 // 
        .RXDFETAP4OVRDEN                (1'd0),                                 // 
        .RXDFETAP5HOLD                  (1'd0),                                 // 
        .RXDFETAP5OVRDEN                (1'd0),                                 // 
        .RXDFEAGCHOLD                   (GT_RX_CONVERGE),                       // Optimized for GES, Set to 1 after convergence 
        .RXDFEAGCOVRDEN                 (1'd0),                                 // 
        .RXDFELFHOLD                    (1'd0),                                 // 
        .RXDFELFOVRDEN                  (1'd1),                                 // Optimized for GES
        .RXDFEUTHOLD                    (1'd0),                                 // 
        .RXDFEUTOVRDEN                  (1'd0),                                 // 
        .RXDFEVPHOLD                    (1'd0),                                 // 
        .RXDFEVPOVRDEN                  (1'd0),                                 // 
        .RXDFEXYDEN                     (1'd0),                                 // 
        .RXDFEXYDHOLD                   (1'd0),                                 // GTX 
        .RXDFEXYDOVRDEN                 (1'd0),                                 // GTX
        .RXMONITORSEL                   (2'd0),                                 //
                                                                                
        .RXMONITOROUT                   (),                                     // 
             
        //---------- OS --------------------------------------------------------         
        .RXOSHOLD                       (1'd0),                                 // 
        .RXOSOVRDEN                     (1'd0),                                 //        
                                                                                
        //---------- Eye Scan --------------------------------------------------                
        .EYESCANRESET                   (GT_EYESCANRESET),                      // 
        .EYESCANMODE                    (1'd0),                                 // 
        .EYESCANTRIGGER                 (1'd0),                                 // 
                                                                                
        .EYESCANDATAERROR               (GT_EYESCANDATAERROR),                  // 
                                                                                
        //---------- TX Buffer -------------------------------------------------                
        .TXBUFSTATUS                    (),                                     //
                                                                                
        //---------- RX Buffer -------------------------------------------------                
        .RXBUFRESET                     (GT_RXBUFRESET),                        //
                                                                                
        .RXBUFSTATUS                    (GT_RXBUFSTATUS),                       //
                                                                                
        //---------- TX Sync ---------------------------------------------------                
        .TXPHDLYRESET                   (1'd0),                                 //
        .TXPHDLYTSTCLK                  (1'd0),                                 //
        .TXPHALIGN                      (GT_TXPHALIGN),                         // 
        .TXPHALIGNEN                    (GT_TXPHALIGNEN),                       //  
        .TXPHDLYPD                      (1'd0),                                 // 
        .TXPHINIT                       (GT_TXPHINIT),                          //  
        .TXPHOVRDEN                     (1'd0),                                 //
        .TXDLYBYPASS                    (GT_TXDLYBYPASS),                       //  
        .TXDLYSRESET                    (GT_TXDLYSRESET),                       // 
        .TXDLYEN                        (GT_TXDLYEN),                           //  
        .TXDLYOVRDEN                    (1'd0),                                 //
        .TXDLYHOLD                      (1'd0),                                 // 
        .TXDLYUPDOWN                    (1'd0),                                 //
                                                                                
        .TXPHALIGNDONE                  (GT_TXPHALIGNDONE),                     // 
        .TXPHINITDONE                   (GT_TXPHINITDONE),                      // 
        .TXDLYSRESETDONE                (GT_TXDLYSRESETDONE),                   //
                                                                                
        //---------- RX Sync ---------------------------------------------------                  
        .RXPHDLYRESET                   (1'd0),                                 //
        .RXPHALIGN                      (GT_RXPHALIGN),                         //
        .RXPHALIGNEN                    (GT_RXPHALIGNEN),                       //
        .RXPHDLYPD                      (1'd0),                                 // 
        .RXPHOVRDEN                     (1'd0),                                 // 
        .RXDLYBYPASS                    (GT_RXDLYBYPASS),                       //  
        .RXDLYSRESET                    (GT_RXDLYSRESET),                       // 
        .RXDLYEN                        (GT_RXDLYEN),                           // 
        .RXDLYOVRDEN                    (1'd0),                                 //
        .RXDDIEN                        (GT_RXDDIEN),                           //
                                                                                
        .RXPHALIGNDONE                  (GT_RXPHALIGNDONE),                     //  
        .RXPHMONITOR                    (),                                     //
        .RXPHSLIPMONITOR                (),                                     // 
        .RXDLYSRESETDONE                (GT_RXDLYSRESETDONE),                   // 
                                                                                
        //---------- Comma Alignment -------------------------------------------                 
        .RXCOMMADETEN                   ( 1'd1),                                //
        .RXMCOMMAALIGNEN                (!GT_GEN3),                             // 0 = disable comma alignment in Gen3
        .RXPCOMMAALIGNEN                (!GT_GEN3),                             // 0 = disable comma alignment in Gen3
        .RXSLIDE                        ( GT_RXSLIDE),                          //
                                                                                
        .RXCOMMADET                     (GT_RXCOMMADET),                        //
        .RXCHARISCOMMA                  (rxchariscomma),                        // 
        .RXBYTEISALIGNED                (GT_RXBYTEISALIGNED),                   //
        .RXBYTEREALIGN                  (GT_RXBYTEREALIGN),                     //
                                                                                
        //---------- Channel Bonding -------------------------------------------                
        .RXCHBONDEN                     (GT_RXCHBONDEN),                        //
        .RXCHBONDI                      (GT_RXCHBONDI),                         //
        .RXCHBONDLEVEL                  (GT_RXCHBONDLEVEL),                     //
        .RXCHBONDMASTER                 (GT_RXCHBONDMASTER),                    //
        .RXCHBONDSLAVE                  (GT_RXCHBONDSLAVE),                     //
                                                                                
        .RXCHANBONDSEQ                  (),                                     //
        .RXCHANISALIGNED                (GT_RXCHANISALIGNED),                   //
        .RXCHANREALIGN                  (),                                     //
        .RXCHBONDO                      (GT_RXCHBONDO),                         //
                                                                                
        //---------- Clock Correction  -----------------------------------------                
        .RXCLKCORCNT                    (),                                     //
                                                                                
        //---------- 8b10b -----------------------------------------------------                
        .TX8B10BBYPASS                  (8'd0),                                 //
        .TX8B10BEN                      (!GT_GEN3),                             // 0 = disable TX 8b10b in Gen3
        .RX8B10BEN                      (!GT_GEN3),                             // 0 = disable RX 8b10b in Gen3
                                                                                
        .RXDISPERR                      (GT_RXDISPERR),                         //
        .RXNOTINTABLE                   (GT_RXNOTINTABLE),                      //
                                                                                
        //---------- 64b/66b & 64b/67b -----------------------------------------                  
        .TXHEADER                       (3'd0),                                 //
        .TXSEQUENCE                     (7'd0),                                 //
        .TXSTARTSEQ                     (1'd0),                                 //                                                              
        .RXGEARBOXSLIP                  (1'd0),                                 //
                                                                                
        .TXGEARBOXREADY                 (),                                     // 
        .RXDATAVALID                    (),                                     //
        .RXHEADER                       (),                                     //
        .RXHEADERVALID                  (),                                     //
        .RXSTARTOFSEQ                   (),                                     //
                                                                                
        //---------- PRBS/Loopback ---------------------------------------------                
        .TXPRBSSEL                      (GT_TXPRBSSEL),                         //
        .RXPRBSSEL                      (GT_RXPRBSSEL),                         //
        .TXPRBSFORCEERR                 (GT_TXPRBSFORCEERR),                    //
        .RXPRBSCNTRESET                 (GT_RXPRBSCNTRESET),                    // 
        .LOOPBACK                       (GT_LOOPBACK),                          // 
                                                                                
        .RXPRBSERR                      (GT_RXPRBSERR),                         //
        .TXINHIBIT                      (GT_TXINHIBIT),//(1'd0),                                 // 
                                                                                
        //---------- OOB -------------------------------------------------------                
        .TXCOMINIT                      (1'd0),                                 //
        .TXCOMSAS                       (1'd0),                                 //
        .TXCOMWAKE                      (1'd0),                                 //
        .RXOOBRESET                     (1'd0),                                 // 
                                                                                
        .TXCOMFINISH                    (),                                     //
        .RXCOMINITDET                   (),                                     //
        .RXCOMSASDET                    (),                                     //
        .RXCOMWAKEDET                   (),                                     //
                                                                                
        //---------- MISC ------------------------------------------------------                
        .SETERRSTATUS                   ( 1'd0),                                // 
        .TXDIFFPD                       ( 1'd0),                                // 
        .TXPISOPD                       ( 1'd0),                                // 
        .TSTIN                          (20'hFFFFF),                            //  
                                                                                
        .TSTOUT                         ()                                      // GTX
    
    );
    
    //---------- Default -------------------------------------------------------
    assign dmonitorout[14:8] = 7'd0;                                            // GTH GTP
    assign GT_TXSYNCOUT      = 1'd0;                                            // GTH GTP  
    assign GT_TXSYNCDONE     = 1'd0;                                            // GTH GTP 
    assign GT_RXSYNCOUT      = 1'd0;                                            // GTH GTP
    assign GT_RXSYNCDONE     = 1'd0;                                            // GTH GTP
    assign GT_RXPMARESETDONE = 1'd0;                                            // GTH GTP               
            
    end

endgenerate
    
    
    
//---------- GT Wrapper Outputs ------------------------------------------------
assign GT_RXDATA        = rxdata [31:0];
assign GT_RXDATAK       = rxdatak[ 3:0];
assign GT_RXCHARISCOMMA = rxchariscomma[ 3:0];
assign GT_DMONITOROUT   = dmonitorout;
 


endmodule
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_gtx_cpllpd_ovrd.v
// Version    : 4.0
`timescale 1ns / 1ps
module rp_gtx_cpllpd_ovrd (                                                                                        
    input   i_ibufds_gte2,                                                                                     
    output  o_cpllpd_ovrd,                                                                                     
    output  o_cpllreset_ovrd                                                                                   
    );                                                                                                         
    (* equivalent_register_removal="no" *)  reg [95:0] cpllpd_wait = 96'hFFFFFFFFFFFFFFFFFFFFFFFF;             
    (* equivalent_register_removal="no" *)  reg [127:0] cpllreset_wait = 128'h000000000000000000000000000000FF;
    always @(posedge i_ibufds_gte2)                                                                            
    begin                                                                                                      
        cpllpd_wait <= {cpllpd_wait[94:0], 1'b0};                                                              
        cpllreset_wait <= {cpllreset_wait[126:0], 1'b0};                                                       
    end                                                                                                        
    assign o_cpllpd_ovrd = cpllpd_wait[95];                                                                    
    assign o_cpllreset_ovrd = cpllreset_wait[127];                                                             
endmodule
/*
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pcie_3_0_7vx.v
// Version    : 4.0
//----------------------------------------------------------------------------//
// Project      : Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
// Filename     : <CoreName>_pcie_3_0_7vx.v                                   //
// Description  : Instantiates PCIe Top Level and GT top level and connects   //
//                 them via PIPE interface.                                   //
//                                                                            //
//---------- PIPE Wrapper Hierarchy ------------------------------------------//
//  pcie_3_0_7vx.v                                                            //
//      gt_top.v                                                              //
//          pcie_tx_elec_idle_filter_7vx.v                                    //
//          pipe_clock.v                                                      //
//          pipe_reset.v                                                      //
//          qpll_reset.v                                                      //
//              * Generate GTHE2_CHANNEL for every lane.                      //
//                  pipe_user.v                                               //
//                  pipe_rate.v                                               //
//                  pipe_sync.v                                               //
//                  pipe_drp.v                                                //
//                  pipe_eq.v                                                 //
//                      rxeq_scan.v                                           //
//                  gt_wrapper.v                                              //
//                      GTHE2_CHANNEL                                         //
//                      GTHE2_COMMON                                          //
//              * Generate GTHE2_COMMON for every quad.                       //
//                  qpll_drp.v                                                //
//                  qpll_wrapper.v                                            //
//      pcie_top.v                                                            //
//          pcie_init_ctrl.v                                                  //
//          pcie_tlp_tph_tbl_7vx.v                                            //
//          pcie_7vx.v                                                        //
//              PCIE_3_0                                                      //
//              pcie_bram_7vx.v                                               //
//                  pcie_bram_7vx_rep.v                                       //
//                      pcie_bram_7vx_rep_8k.v                                //
//                  pcie_bram_7vx_req.v                                       //
//                      pcie_bram_7vx_8k.v                                    //
//                  pcie_bram_7vx_cpl.v                                       //
//                      pcie_bram_7vx_8k.v                                    //
//                      pcie_bram_7vx_16k.v                                   //
//          pcie_pipe_pipeline.v                                              //
//              pcie_pipe_lane.v                                              //
//              pcie_pipe_misc.v                                              //
//      tandem_cpler.v                                                        //
//          tandem_cpler_ctl_arb.v                                            //
//          PIO_RX_ENGINE.v                                                   //
//          PIO_TX_ENGINE.v                                                   //
//          PIO_INTR_CTRL.v                                                   //
//      Fast_PCIe_config_top.v                                                //
//          pr_loader.v                                                       //
//              PIO_FPC.v                                                     //
//                  PIO_TO_CTRL_FPC.v                                         //
//                  PIO_EP_FPC.v                                              //
//                      PIO_EP_MA_FPC.v                                       //
//                      PIO_TX_ENG_FPC.v                                      //
//                      PIO_RX_ENG_FPC.v                                      //
//                      icap_access.v                                         //
//                      data_transfer.v                                       //
//                          fastConfigFIFO.v                                  //
//----------------------------------------------------------------------------//

`timescale 1ps/1ps

module rp_pcie_3_0_7vx # (
  parameter integer TCQ = 100,
  parameter         component_name = "pcie3_7x_v4_0",
  // The following parameters can be changed to configure the link to a different width/speed.
  // See Product Guide for details: Table "Data Width and Clock Frequency Settings for the Client Interfaces"
  parameter  [2:0]  PL_LINK_CAP_MAX_LINK_SPEED = 3'h4, // Maximum Link Speed
  parameter  [3:0]  PL_LINK_CAP_MAX_LINK_WIDTH = 4'h8, // Maximum Link Width
  parameter integer USER_CLK2_FREQ = 4,                // AXI Client Interface Frequency
  parameter         C_DATA_WIDTH = 256,                // AXI Client Interface Width
  parameter integer PIPE_PIPELINE_STAGES = 0,          // PIPE Interface pipeline: 0-None, 1- single pipeline, 2-double pipeline
  parameter         PIPE_SIM = "FALSE",                // No effect in RTL using this parameter.  
  parameter         PIPE_SIM_MODE = "FALSE",           // Use this paramter to control PIPE mode simulation logic; in-side this module    
  parameter         EXT_PIPE_SIM = "FALSE",
  //GT Parameters
  parameter         REF_CLK_FREQ = 0,                  // Reference Clock Frequency
  parameter         PCIE_EXT_CLK = "TRUE",
  parameter         PCIE_EXT_GT_COMMON = "FALSE",
  parameter         EXT_CH_GT_DRP      = "FALSE",      // PCIe external CH DRP
  parameter         PCIE_DRP           = "FALSE",      // PCIe DRP

  parameter         TRANSCEIVER_CTRL_STATUS_PORTS = "FALSE",  
  parameter         PCIE_TXBUF_EN = "FALSE",
  parameter         PCIE_GT_DEVICE = "GTH",
  parameter integer PCIE_CHAN_BOND = 0,
  parameter         PCIE_CHAN_BOND_EN = "FALSE",
  parameter         PCIE_USE_MODE = "2.0",
  parameter         PCIE_LPM_DFE = "LPM",
  parameter integer PCIE_LINK_SPEED  = 3,
  parameter integer KEEP_WIDTH  = (C_DATA_WIDTH/32),
  parameter         TX_MARGIN_FULL_0          = 7'b1001111,    
  parameter         TX_MARGIN_FULL_1          = 7'b1001110,   
  parameter         TX_MARGIN_FULL_2          = 7'b1001101,  
  parameter         TX_MARGIN_FULL_3          = 7'b1001100, 
  parameter         TX_MARGIN_FULL_4          = 7'b1000011,
  parameter         TX_MARGIN_LOW_0           = 7'b1000101,
  parameter         TX_MARGIN_LOW_1           = 7'b1000110,
  parameter         TX_MARGIN_LOW_2           = 7'b1000011, 
  parameter         TX_MARGIN_LOW_3           =7'b1000010, 
  parameter         TX_MARGIN_LOW_4           =7'b1000000,
  // PCIe 3_0 Core parameters
  parameter         ARI_CAP_ENABLE = "FALSE",
  parameter         AXISTEN_IF_CC_ALIGNMENT_MODE = "FALSE",
  parameter         AXISTEN_IF_CC_PARITY_CHK = "FALSE",
  parameter         AXISTEN_IF_CQ_ALIGNMENT_MODE = "FALSE",
  parameter         AXISTEN_IF_ENABLE_CLIENT_TAG = "FALSE",
  parameter [17:0]  AXISTEN_IF_ENABLE_MSG_ROUTE = 18'h2FFFF,
  parameter         AXISTEN_IF_ENABLE_RX_MSG_INTFC = "FALSE",
  parameter         AXISTEN_IF_RC_ALIGNMENT_MODE = "FALSE",
  parameter         AXISTEN_IF_RC_STRADDLE = "FALSE",
  parameter         AXISTEN_IF_RQ_ALIGNMENT_MODE = "FALSE",
  parameter         AXISTEN_IF_RQ_PARITY_CHK = "FALSE",
  parameter  [7:0]  DNSTREAM_LINK_NUM = 8'h00,
  parameter  [1:0]  GEN3_PCS_AUTO_REALIGN = 2'h1,
  parameter         GEN3_PCS_RX_ELECIDLE_INTERNAL = "TRUE",
  parameter  [8:0]  LL_ACK_TIMEOUT = 9'h000,
  parameter         LL_ACK_TIMEOUT_EN = "FALSE",
  parameter integer LL_ACK_TIMEOUT_FUNC = 0,
  parameter [15:0]  LL_CPL_FC_UPDATE_TIMER = 16'h0000,
  parameter         LL_CPL_FC_UPDATE_TIMER_OVERRIDE = "FALSE",
  parameter [15:0]  LL_FC_UPDATE_TIMER = 16'h0000,
  parameter         LL_FC_UPDATE_TIMER_OVERRIDE = "FALSE",
  parameter [15:0]  LL_NP_FC_UPDATE_TIMER = 16'h0000,
  parameter         LL_NP_FC_UPDATE_TIMER_OVERRIDE = "FALSE",
  parameter [15:0]  LL_P_FC_UPDATE_TIMER = 16'h0000,
  parameter         LL_P_FC_UPDATE_TIMER_OVERRIDE = "FALSE",
  parameter  [8:0]  LL_REPLAY_TIMEOUT = 9'h000,
  parameter         LL_REPLAY_TIMEOUT_EN = "FALSE",
  parameter integer LL_REPLAY_TIMEOUT_FUNC = 0,
  parameter  [9:0]  LTR_TX_MESSAGE_MINIMUM_INTERVAL = 10'h0FA,
  parameter         LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE = "FALSE",
  parameter         LTR_TX_MESSAGE_ON_LTR_ENABLE = "FALSE",
  parameter         PF0_AER_CAP_ECRC_CHECK_CAPABLE = "FALSE",
  parameter         PF0_AER_CAP_ECRC_GEN_CAPABLE = "FALSE",
  parameter [11:0]  PF0_AER_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  PF0_ARI_CAP_NEXTPTR = 12'h000,
  parameter  [7:0]  PF0_ARI_CAP_NEXT_FUNC = 8'h00,
  parameter  [3:0]  PF0_ARI_CAP_VER = 4'h1,
  parameter  [4:0]  PF0_BAR0_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR0_CONTROL = 3'h4,
  parameter  [4:0]  PF0_BAR1_APERTURE_SIZE = 5'h00,
  parameter  [2:0]  PF0_BAR1_CONTROL = 3'h0,
  parameter  [4:0]  PF0_BAR2_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR2_CONTROL = 3'h4,
  parameter  [4:0]  PF0_BAR3_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR3_CONTROL = 3'h0,
  parameter  [4:0]  PF0_BAR4_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR4_CONTROL = 3'h4,
  parameter  [4:0]  PF0_BAR5_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR5_CONTROL = 3'h0,
  parameter  [7:0]  PF0_BIST_REGISTER = 8'h00,
  parameter  [7:0]  PF0_CAPABILITY_POINTER = 8'h50,
  parameter [23:0]  PF0_CLASS_CODE = 24'h000000,
  parameter [15:0]  PF0_VENDOR_ID = 16'h10EE,
  parameter [15:0]  PF0_DEVICE_ID = 16'h0007,
  parameter         PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT = "TRUE",
  parameter         PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT = "TRUE",
  parameter         PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT = "TRUE",
  parameter         PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE = "TRUE",
  parameter         PF0_DEV_CAP2_LTR_SUPPORT = "TRUE",
  parameter  [1:0]  PF0_DEV_CAP2_OBFF_SUPPORT = 2'h0,
  parameter         PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT = "FALSE",
  parameter integer PF0_DEV_CAP_ENDPOINT_L0S_LATENCY = 0,
  parameter integer PF0_DEV_CAP_ENDPOINT_L1_LATENCY = 0,
  parameter         PF0_DEV_CAP_EXT_TAG_SUPPORTED = "TRUE",
  parameter         PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE = "TRUE",
  parameter  [2:0]  PF0_DEV_CAP_MAX_PAYLOAD_SIZE = 3'h3,
  parameter [11:0]  PF0_DPA_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF0_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF1_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF2_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF3_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF4_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF5_ARI_CAP_NEXTPTR = 12'h000,
  parameter         VF0_TPHR_CAP_DEV_SPECIFIC_MODE = "FALSE",
  parameter         VF0_TPHR_CAP_ENABLE = "FALSE",
  parameter         VF0_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  VF0_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0]   VF0_TPHR_CAP_ST_MODE_SEL = 3'b010,
  parameter [1:0]   VF0_TPHR_CAP_ST_TABLE_LOC = 3'b10,
  parameter [10:0]  VF0_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0]   VF0_TPHR_CAP_VER = 4'h1,
  parameter         VF1_TPHR_CAP_DEV_SPECIFIC_MODE = "FALSE",
  parameter         VF1_TPHR_CAP_ENABLE = "FALSE",
  parameter         VF1_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  VF1_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0]   VF1_TPHR_CAP_ST_MODE_SEL = 3'b010,
  parameter [1:0]   VF1_TPHR_CAP_ST_TABLE_LOC = 3'b10,
  parameter [10:0]  VF1_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0]   VF1_TPHR_CAP_VER = 4'h1,
  parameter         VF2_TPHR_CAP_DEV_SPECIFIC_MODE = "FALSE",
  parameter         VF2_TPHR_CAP_ENABLE = "FALSE",
  parameter         VF2_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  VF2_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0]   VF2_TPHR_CAP_ST_MODE_SEL = 3'b010,
  parameter [1:0]   VF2_TPHR_CAP_ST_TABLE_LOC = 3'b10,
  parameter [10:0]  VF2_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0]   VF2_TPHR_CAP_VER = 4'h1,
  parameter         VF3_TPHR_CAP_DEV_SPECIFIC_MODE = "FALSE",
  parameter         VF3_TPHR_CAP_ENABLE = "FALSE",
  parameter         VF3_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  VF3_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0]   VF3_TPHR_CAP_ST_MODE_SEL = 3'b010,
  parameter [1:0]   VF3_TPHR_CAP_ST_TABLE_LOC = 3'b10,
  parameter [10:0]  VF3_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0]   VF3_TPHR_CAP_VER = 4'h1,
  parameter         VF4_TPHR_CAP_DEV_SPECIFIC_MODE = "FALSE",
  parameter         VF4_TPHR_CAP_ENABLE = "FALSE",
  parameter         VF4_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  VF4_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0]   VF4_TPHR_CAP_ST_MODE_SEL = 3'b010,
  parameter [1:0]   VF4_TPHR_CAP_ST_TABLE_LOC = 3'b10,
  parameter [10:0]  VF4_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0]   VF4_TPHR_CAP_VER = 4'h1,
  parameter         VF5_TPHR_CAP_DEV_SPECIFIC_MODE = "FALSE",
  parameter         VF5_TPHR_CAP_ENABLE = "FALSE",
  parameter         VF5_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  VF5_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0]   VF5_TPHR_CAP_ST_MODE_SEL = 3'b010,
  parameter [1:0]   VF5_TPHR_CAP_ST_TABLE_LOC = 3'b10,
  parameter [10:0]  VF5_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0]   VF5_TPHR_CAP_VER = 4'h1,
  parameter  [4:0]  PF0_DPA_CAP_SUB_STATE_CONTROL = 5'h00,
  parameter         PF0_DPA_CAP_SUB_STATE_CONTROL_EN = "TRUE",
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 = 8'h00,
  parameter  [3:0]  PF0_DPA_CAP_VER = 4'h1,
  parameter [11:0]  PF0_DSN_CAP_NEXTPTR = 12'h10C,
  parameter  [4:0]  PF0_EXPANSION_ROM_APERTURE_SIZE = 5'h03,
  parameter         PF0_EXPANSION_ROM_ENABLE = "FALSE",
  parameter  [7:0]  PF0_INTERRUPT_LINE = 8'h00,
  parameter  [2:0]  PF0_INTERRUPT_PIN = 3'h1,
  parameter integer PF0_LINK_CAP_ASPM_SUPPORT = 0,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3 = 7,
  parameter         PF0_LINK_STATUS_SLOT_CLOCK_CONFIG = "TRUE",
  parameter  [9:0]  PF0_LTR_CAP_MAX_NOSNOOP_LAT = 10'h000,
  parameter  [9:0]  PF0_LTR_CAP_MAX_SNOOP_LAT = 10'h000,
  parameter [11:0]  PF0_LTR_CAP_NEXTPTR = 12'h000,
  parameter  [3:0]  PF0_LTR_CAP_VER = 4'h1,
  parameter  [7:0]  PF0_MSIX_CAP_NEXTPTR = 8'h00,
  parameter integer PF0_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  PF0_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer PF0_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  PF0_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  PF0_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer PF0_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  PF0_MSI_CAP_NEXTPTR = 8'h00,
  parameter [11:0]  PF0_PB_CAP_NEXTPTR = 12'h000,
  parameter         PF0_PB_CAP_SYSTEM_ALLOCATED = "FALSE",
  parameter  [3:0]  PF0_PB_CAP_VER = 4'h1,
  parameter  [7:0]  PF0_PM_CAP_ID = 8'h01,
  parameter  [7:0]  PF0_PM_CAP_NEXTPTR = 8'h00,
  parameter         PF0_PM_CAP_PMESUPPORT_D0 = "TRUE",
  parameter         PF0_PM_CAP_PMESUPPORT_D1 = "TRUE",
  parameter         PF0_PM_CAP_PMESUPPORT_D3HOT = "TRUE",
  parameter         PF0_PM_CAP_SUPP_D1_STATE = "TRUE",
  parameter  [2:0]  PF0_PM_CAP_VER_ID = 3'h3,
  parameter         PF0_PM_CSR_NOSOFTRESET = "TRUE",
  parameter         PF0_RBAR_CAP_ENABLE = "FALSE",
  parameter  [2:0]  PF0_RBAR_CAP_INDEX0 = 3'h0,
  parameter  [2:0]  PF0_RBAR_CAP_INDEX1 = 3'h0,
  parameter  [2:0]  PF0_RBAR_CAP_INDEX2 = 3'h0,
  parameter [11:0]  PF0_RBAR_CAP_NEXTPTR = 12'h000,
  parameter [19:0]  PF0_RBAR_CAP_SIZE0 = 20'h00000,
  parameter [19:0]  PF0_RBAR_CAP_SIZE1 = 20'h00000,
  parameter [19:0]  PF0_RBAR_CAP_SIZE2 = 20'h00000,
  parameter  [3:0]  PF0_RBAR_CAP_VER = 4'h1,
  parameter  [2:0]  PF0_RBAR_NUM = 3'h1,
  parameter  [7:0]  PF0_REVISION_ID = 8'h00,
  parameter  [4:0]  PF0_SRIOV_BAR0_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR0_CONTROL = 3'h4,
  parameter  [4:0]  PF0_SRIOV_BAR1_APERTURE_SIZE = 5'h00,
  parameter  [2:0]  PF0_SRIOV_BAR1_CONTROL = 3'h0,
  parameter  [4:0]  PF0_SRIOV_BAR2_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR2_CONTROL = 3'h4,
  parameter  [4:0]  PF0_SRIOV_BAR3_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR3_CONTROL = 3'h0,
  parameter  [4:0]  PF0_SRIOV_BAR4_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR4_CONTROL = 3'h4,
  parameter  [4:0]  PF0_SRIOV_BAR5_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR5_CONTROL = 3'h0,
  parameter [15:0]  PF0_SRIOV_CAP_INITIAL_VF = 16'h0000,
  parameter [11:0]  PF0_SRIOV_CAP_NEXTPTR = 12'h000,
  parameter [15:0]  PF0_SRIOV_CAP_TOTAL_VF = 16'h0000,
  parameter  [3:0]  PF0_SRIOV_CAP_VER = 4'h1,
  parameter [15:0]  PF0_SRIOV_FIRST_VF_OFFSET = 16'h0000,
  parameter [15:0]  PF0_SRIOV_FUNC_DEP_LINK = 16'h0000,
  parameter [31:0]  PF0_SRIOV_SUPPORTED_PAGE_SIZE = 32'h00000000,
  parameter [15:0]  PF0_SRIOV_VF_DEVICE_ID = 16'h0000,
  parameter [15:0]  PF0_SUBSYSTEM_VENDOR_ID = 16'h0000,
  parameter [15:0]  PF0_SUBSYSTEM_ID = 16'h0000,
  parameter         PF0_TPHR_CAP_DEV_SPECIFIC_MODE = "FALSE",
  parameter         PF0_TPHR_CAP_ENABLE = "TRUE",
  parameter         PF0_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  PF0_TPHR_CAP_NEXTPTR = 12'h300,
  parameter  [2:0]  PF0_TPHR_CAP_ST_MODE_SEL = 3'b010,
  parameter  [1:0]  PF0_TPHR_CAP_ST_TABLE_LOC = 2'b10,
  parameter [10:0]  PF0_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter  [3:0]  PF0_TPHR_CAP_VER = 4'h1,
  parameter [11:0]  PF0_VC_CAP_NEXTPTR = 12'h000,
  parameter  [3:0]  PF0_VC_CAP_VER = 4'h1,
  parameter         PF1_AER_CAP_ECRC_CHECK_CAPABLE = "FALSE",
  parameter         PF1_AER_CAP_ECRC_GEN_CAPABLE = "FALSE",
  parameter [11:0]  PF1_AER_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  PF1_ARI_CAP_NEXTPTR = 12'h000,
  parameter  [7:0]  PF1_ARI_CAP_NEXT_FUNC = 8'h00,
  parameter  [4:0]  PF1_BAR0_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR0_CONTROL = 3'h4,
  parameter  [4:0]  PF1_BAR1_APERTURE_SIZE = 5'h00,
  parameter  [2:0]  PF1_BAR1_CONTROL = 3'h0,
  parameter  [4:0]  PF1_BAR2_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR2_CONTROL = 3'h4,
  parameter  [4:0]  PF1_BAR3_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR3_CONTROL = 3'h0,
  parameter  [4:0]  PF1_BAR4_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR4_CONTROL = 3'h4,
  parameter  [4:0]  PF1_BAR5_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR5_CONTROL = 3'h0,
  parameter  [7:0]  PF1_BIST_REGISTER = 8'h00,
  parameter  [7:0]  PF1_CAPABILITY_POINTER = 8'h50,
  parameter [23:0]  PF1_CLASS_CODE = 24'h000000,
  parameter [15:0]  PF1_DEVICE_ID = 16'h0000,
  parameter  [2:0]  PF1_DEV_CAP_MAX_PAYLOAD_SIZE = 3'h3,
  parameter [11:0]  PF1_DPA_CAP_NEXTPTR = 12'h000,
  parameter  [4:0]  PF1_DPA_CAP_SUB_STATE_CONTROL = 5'h00,
  parameter         PF1_DPA_CAP_SUB_STATE_CONTROL_EN = "TRUE",
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 = 8'h00,
  parameter  [3:0]  PF1_DPA_CAP_VER = 4'h1,
  parameter [11:0]  PF1_DSN_CAP_NEXTPTR = 12'h10C,
  parameter  [4:0]  PF1_EXPANSION_ROM_APERTURE_SIZE = 5'h03,
  parameter         PF1_EXPANSION_ROM_ENABLE = "FALSE",
  parameter  [7:0]  PF1_INTERRUPT_LINE = 8'h00,
  parameter  [2:0]  PF1_INTERRUPT_PIN = 3'h1,
  parameter  [7:0]  PF1_MSIX_CAP_NEXTPTR = 8'h00,
  parameter integer PF1_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  PF1_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer PF1_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  PF1_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  PF1_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer PF1_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  PF1_MSI_CAP_NEXTPTR = 8'h00,
  parameter [11:0]  PF1_PB_CAP_NEXTPTR = 12'h000,
  parameter         PF1_PB_CAP_SYSTEM_ALLOCATED = "FALSE",
  parameter  [3:0]  PF1_PB_CAP_VER = 4'h1,
  parameter  [7:0]  PF1_PM_CAP_ID = 8'h01,
  parameter  [7:0]  PF1_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  PF1_PM_CAP_VER_ID = 3'h3,
  parameter         PF1_RBAR_CAP_ENABLE = "FALSE",
  parameter  [2:0]  PF1_RBAR_CAP_INDEX0 = 3'h0,
  parameter  [2:0]  PF1_RBAR_CAP_INDEX1 = 3'h0,
  parameter  [2:0]  PF1_RBAR_CAP_INDEX2 = 3'h0,
  parameter [11:0]  PF1_RBAR_CAP_NEXTPTR = 12'h000,
  parameter [19:0]  PF1_RBAR_CAP_SIZE0 = 20'h00000,
  parameter [19:0]  PF1_RBAR_CAP_SIZE1 = 20'h00000,
  parameter [19:0]  PF1_RBAR_CAP_SIZE2 = 20'h00000,
  parameter  [3:0]  PF1_RBAR_CAP_VER = 4'h1,
  parameter  [2:0]  PF1_RBAR_NUM = 3'h1,
  parameter  [7:0]  PF1_REVISION_ID = 8'h00,
  parameter  [4:0]  PF1_SRIOV_BAR0_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR0_CONTROL = 3'h4,
  parameter  [4:0]  PF1_SRIOV_BAR1_APERTURE_SIZE = 5'h00,
  parameter  [2:0]  PF1_SRIOV_BAR1_CONTROL = 3'h0,
  parameter  [4:0]  PF1_SRIOV_BAR2_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR2_CONTROL = 3'h4,
  parameter  [4:0]  PF1_SRIOV_BAR3_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR3_CONTROL = 3'h0,
  parameter  [4:0]  PF1_SRIOV_BAR4_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR4_CONTROL = 3'h4,
  parameter  [4:0]  PF1_SRIOV_BAR5_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR5_CONTROL = 3'h0,
  parameter [15:0]  PF1_SRIOV_CAP_INITIAL_VF = 16'h0000,
  parameter [11:0]  PF1_SRIOV_CAP_NEXTPTR = 12'h000,
  parameter [15:0]  PF1_SRIOV_CAP_TOTAL_VF = 16'h0000,
  parameter  [3:0]  PF1_SRIOV_CAP_VER = 4'h1,
  parameter [15:0]  PF1_SRIOV_FIRST_VF_OFFSET = 16'h0000,
  parameter [15:0]  PF1_SRIOV_FUNC_DEP_LINK = 16'h0000,
  parameter [31:0]  PF1_SRIOV_SUPPORTED_PAGE_SIZE = 32'h00000000,
  parameter [15:0]  PF1_SRIOV_VF_DEVICE_ID = 16'h0000,
  parameter [15:0]  PF1_SUBSYSTEM_ID = 16'h0000,
  parameter         PF1_TPHR_CAP_DEV_SPECIFIC_MODE = "FALSE",
  parameter         PF1_TPHR_CAP_ENABLE = "TRUE",
  parameter         PF1_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  PF1_TPHR_CAP_NEXTPTR = 12'h300,
  parameter  [2:0]  PF1_TPHR_CAP_ST_MODE_SEL = 3'b010,
  parameter  [1:0]  PF1_TPHR_CAP_ST_TABLE_LOC = 2'b10,
  parameter [10:0]  PF1_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter  [3:0]  PF1_TPHR_CAP_VER = 4'h1,
  parameter         PL_DISABLE_EI_INFER_IN_L0 = "FALSE",
  parameter         PL_DISABLE_GEN3_DC_BALANCE = "FALSE",
  parameter         PL_DISABLE_SCRAMBLING = "FALSE",
  parameter         PL_DISABLE_UPCONFIG_CAPABLE = "FALSE",
  parameter         PL_EQ_ADAPT_DISABLE_COEFF_CHECK = "FALSE",
  parameter         PL_EQ_ADAPT_DISABLE_PRESET_CHECK = "FALSE",
  parameter  [4:0]  PL_EQ_ADAPT_ITER_COUNT = 5'h02,
  parameter  [1:0]  PL_EQ_ADAPT_REJECT_RETRY_COUNT = 2'h1,
  parameter         PL_EQ_BYPASS_PHASE23 = "FALSE",
  parameter         PL_EQ_SHORT_ADAPT_PHASE = "FALSE",
  parameter [15:0]  PL_LANE0_EQ_CONTROL = 16'h3400,
  parameter [15:0]  PL_LANE1_EQ_CONTROL = 16'h3400,
  parameter [15:0]  PL_LANE2_EQ_CONTROL = 16'h3400,
  parameter [15:0]  PL_LANE3_EQ_CONTROL = 16'h3400,
  parameter [15:0]  PL_LANE4_EQ_CONTROL = 16'h3400,
  parameter [15:0]  PL_LANE5_EQ_CONTROL = 16'h3400,
  parameter [15:0]  PL_LANE6_EQ_CONTROL = 16'h3400,
  parameter [15:0]  PL_LANE7_EQ_CONTROL = 16'h3400,
  parameter integer PL_N_FTS_COMCLK_GEN1 = 255,
  parameter integer PL_N_FTS_COMCLK_GEN2 = 255,
  parameter integer PL_N_FTS_COMCLK_GEN3 = 255,
  parameter integer PL_N_FTS_GEN1 = 255,
  parameter integer PL_N_FTS_GEN2 = 255,
  parameter integer PL_N_FTS_GEN3 = 255,
  parameter         PL_UPSTREAM_FACING = "TRUE",
  parameter [15:0]  PM_ASPML0S_TIMEOUT = 16'h05DC,
  parameter [19:0]  PM_ASPML1_ENTRY_DELAY = 20'h00ABE,
  parameter         PM_ENABLE_SLOT_POWER_CAPTURE = "TRUE",
  parameter [31:0]  PM_L1_REENTRY_DELAY = 32'h000061A8,
  parameter [19:0]  PM_PME_SERVICE_TIMEOUT_DELAY = 20'h186A0,
  parameter [15:0]  PM_PME_TURNOFF_ACK_DELAY = 16'h0064,
  parameter         SIM_VERSION = "1.0",
  parameter integer SPARE_BIT0 = 0,
  parameter integer SPARE_BIT1 = 0,
  parameter integer SPARE_BIT2 = 0,
  parameter integer SPARE_BIT3 = 0,
  parameter integer SPARE_BIT4 = 0,
  parameter integer SPARE_BIT5 = 0,
  parameter integer SPARE_BIT6 = 0,
  parameter integer SPARE_BIT7 = 0,
  parameter integer SPARE_BIT8 = 0,
  parameter  [7:0]  SPARE_BYTE0 = 8'h00,
  parameter  [7:0]  SPARE_BYTE1 = 8'h00,
  parameter  [7:0]  SPARE_BYTE2 = 8'h00,
  parameter  [7:0]  SPARE_BYTE3 = 8'h00,
  parameter [31:0]  SPARE_WORD0 = 32'h00000000,
  parameter [31:0]  SPARE_WORD1 = 32'h00000000,
  parameter [31:0]  SPARE_WORD2 = 32'h00000000,
  parameter [31:0]  SPARE_WORD3 = 32'h00000000,
  parameter         SRIOV_CAP_ENABLE = "FALSE",
  parameter [23:0]  TL_COMPL_TIMEOUT_REG0 = 24'hBEBC20,
  parameter [27:0]  TL_COMPL_TIMEOUT_REG1 = 28'h3211620,
  parameter [11:0]  TL_CREDITS_CD = 12'h3E0,
  parameter  [7:0]  TL_CREDITS_CH = 8'h20,
  parameter [11:0]  TL_CREDITS_NPD = 12'h028,
  parameter  [7:0]  TL_CREDITS_NPH = 8'h20,
  parameter [11:0]  TL_CREDITS_PD = 12'h198,
  parameter  [7:0]  TL_CREDITS_PH = 8'h20,
  parameter         TL_ENABLE_MESSAGE_RID_CHECK_ENABLE = "TRUE",
  parameter         TL_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE = "FALSE",
  parameter         TL_LEGACY_CFG_EXTEND_INTERFACE_ENABLE = "FALSE",
  parameter         TL_LEGACY_MODE_ENABLE = "FALSE",
  parameter         TL_PF_ENABLE_REG = "FALSE",
  parameter         TL_TAG_MGMT_ENABLE = "TRUE",
  parameter  [7:0]  VF0_CAPABILITY_POINTER = 8'h50,
  parameter integer VF0_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF0_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF0_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF0_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF0_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF0_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF0_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF0_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF0_PM_CAP_VER_ID = 3'h3,
  parameter integer VF1_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF1_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF1_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF1_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF1_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF1_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF1_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF1_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF1_PM_CAP_VER_ID = 3'h3,
  parameter integer VF2_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF2_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF2_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF2_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF2_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF2_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF2_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF2_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF2_PM_CAP_VER_ID = 3'h3,
  parameter integer VF3_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF3_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF3_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF3_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF3_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF3_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF3_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF3_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF3_PM_CAP_VER_ID = 3'h3,
  parameter integer VF4_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF4_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF4_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF4_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF4_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF4_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF4_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF4_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF4_PM_CAP_VER_ID = 3'h3,
  parameter integer VF5_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF5_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF5_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF5_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF5_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF5_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF5_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF5_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF5_PM_CAP_VER_ID = 3'h3,
  parameter         IMPL_TARGET = "HARD",
  parameter         NO_DECODE_LOGIC = "FALSE",
  parameter         COMPLETION_SPACE = "16KB",
  // Tandem PROM/PCIe Parameters
  parameter         MCAP_ENABLEMENT = "NONE",  // NONE, TANDEM_PROM, TANDEM_PCIE
  //Parameters below are used during GU Customization.  Do not change.
  parameter         gen_x0y0_ucf = "FALSE",
  parameter         gen_x0y1_ucf = "FALSE",
  parameter         gen_x0y2_ucf = "FALSE",
  parameter         gen_x0y3_ucf = "FALSE",
  parameter         pcie_blk_locn = 0,
  parameter         silicon_revision = "GES",
  parameter         xlnx_ref_board = 0,
  parameter         MSI_EN = "TRUE",
  parameter         MSIX_EN = "FALSE",
  parameter         SHARED_LOGIC_IN_CORE = "FALSE",
  parameter         TX_FC_IF = "FALSE",
  parameter         CFG_FC_IF = "FALSE",
  parameter         CFG_EXT_IF = "FALSE",
  parameter         CFG_STATUS_IF = "FALSE",
  parameter         PER_FUNC_STATUS_IF = "FALSE",
  parameter         CFG_MGMT_IF = "FALSE",
  parameter         RCV_MSG_IF = "FALSE",
  parameter         CFG_TX_MSG_IF = "FALSE",
  parameter         CFG_CTL_IF = "FALSE",
  parameter         EXT_STARTUP_PRIMITIVE = "FALSE",
  parameter         EXT_PIPE_INTERFACE = "FALSE",
  parameter         POWER_DOWN = "FALSE",
  parameter         PCIE_ASYNC_EN = "TRUE"

)  (

  //----------------------------------------------------------------------------------------------------------------//
  // 1. PCI Express (pci_exp) Interface                                                                             //
  //----------------------------------------------------------------------------------------------------------------//

  // Tx
  output [(PL_LINK_CAP_MAX_LINK_WIDTH-1):0]   pci_exp_txn,
  output [(PL_LINK_CAP_MAX_LINK_WIDTH-1):0]   pci_exp_txp,

  // Rx
  input  [(PL_LINK_CAP_MAX_LINK_WIDTH-1):0]   pci_exp_rxn,
  input  [(PL_LINK_CAP_MAX_LINK_WIDTH-1):0]   pci_exp_rxp,

  //----------------------------------------------------------------------------------------------------------------//
  // 2. Clock & GT COMMON Sharing Interface                                                                         //
  //----------------------------------------------------------------------------------------------------------------//
  // Shared Logic Internal
  output                                     int_pclk_out_slave,
  output                                     int_pipe_rxusrclk_out,
  output [(PL_LINK_CAP_MAX_LINK_WIDTH-1):0]  int_rxoutclk_out,
  output                                     int_dclk_out,
  output                                     int_userclk1_out,
  output                                     int_userclk2_out,
  output                                     int_oobclk_out,
  output  [1:0]                              int_qplllock_out,
  output  [1:0]                              int_qplloutclk_out,
  output  [1:0]                              int_qplloutrefclk_out,
  input  [(PL_LINK_CAP_MAX_LINK_WIDTH-1):0]  int_pclk_sel_slave,
 
  // Shared Logic External Clock
  input                                       pipe_pclk_in,
  input                                       pipe_rxusrclk_in,
  input  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_rxoutclk_in,
  input                                       pipe_dclk_in,
  input                                       pipe_userclk1_in,
  input                                       pipe_userclk2_in,
  input                                       pipe_oobclk_in,
  input                                       pipe_mmcm_lock_in,
  output                                      pipe_txoutclk_out,
  output [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_rxoutclk_out,
  output [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_pclk_sel_out,
  output                                      pipe_gen3_out,

  // Shared Logic External GT COMMON  

  input  [11:0]                               qpll_drp_crscode,
  input  [17:0]                               qpll_drp_fsm,
  input  [1:0]                                qpll_drp_done,
  input  [1:0]                                qpll_drp_reset,
  input  [1:0]                                qpll_qplllock,
  input  [1:0]                                qpll_qplloutclk,
  input  [1:0]                                qpll_qplloutrefclk,
  output                                      qpll_qplld,
  output [1:0]                                qpll_qpllreset,
  output                                      qpll_drp_clk,
  output                                      qpll_drp_rst_n,
  output                                      qpll_drp_ovrd,
  output                                      qpll_drp_gen3,
  output                                      qpll_drp_start,


//----------------------------------------------------------------------------------------------------------------//
  // 3. AXI Interface                                                                                               //
  //----------------------------------------------------------------------------------------------------------------//

  // Common
  output                                     user_clk,
  output reg                                 user_reset,
  output                                     user_lnk_up,
  output                                     user_app_rdy,

  input                                      s_axis_rq_tlast,
  input  [C_DATA_WIDTH-1:0]                  s_axis_rq_tdata,
  input  [59:0]                              s_axis_rq_tuser,
  input  [KEEP_WIDTH-1:0]                    s_axis_rq_tkeep,
  output                                     s_axis_rq_tready,
  input                                      s_axis_rq_tvalid,

  output  [C_DATA_WIDTH-1:0]                 m_axis_rc_tdata,
  output  [74:0]                             m_axis_rc_tuser,
  output                                     m_axis_rc_tlast,
  output  [KEEP_WIDTH-1:0]                   m_axis_rc_tkeep,
  output                                     m_axis_rc_tvalid,
  input                                      m_axis_rc_tready,

  output  [C_DATA_WIDTH-1:0]                 m_axis_cq_tdata,
  output  [84:0]                             m_axis_cq_tuser,
  output                                     m_axis_cq_tlast,
  output  [KEEP_WIDTH-1:0]                   m_axis_cq_tkeep,
  output                                     m_axis_cq_tvalid,
  input                                      m_axis_cq_tready,

  input  [C_DATA_WIDTH-1:0]                  s_axis_cc_tdata,
  input  [32:0]                              s_axis_cc_tuser,
  input                                      s_axis_cc_tlast,
  input  [KEEP_WIDTH-1:0]                    s_axis_cc_tkeep,
  input                                      s_axis_cc_tvalid,
  output                                     s_axis_cc_tready,

  output  [3:0]                              pcie_rq_seq_num,
  output                                     pcie_rq_seq_num_vld,
  output  [5:0]                              pcie_rq_tag,
  output                                     pcie_rq_tag_vld,

  output  [1:0]                              pcie_tfc_nph_av,
  output  [1:0]                              pcie_tfc_npd_av,
  input                                      pcie_cq_np_req,
  output  [5:0]                              pcie_cq_np_req_count,

  //----------------------------------------------------------------------------------------------------------------//
  // 4. Configuration (CFG) Interface                                                                               //
  //----------------------------------------------------------------------------------------------------------------//

  //----------------------------------------------------------------------------------------------------------------//
  // EP and RP                                                                                                      //
  //----------------------------------------------------------------------------------------------------------------//

  output                                     cfg_phy_link_down,
  output  [1:0]                              cfg_phy_link_status,
  output  [3:0]                              cfg_negotiated_width,
  output  [2:0]                              cfg_current_speed,
  output  [2:0]                              cfg_max_payload,
  output  [2:0]                              cfg_max_read_req,
  output  [7:0]                              cfg_function_status,
  output  [5:0]                              cfg_function_power_state,
  output  [11:0]                             cfg_vf_status,
  output  [17:0]                             cfg_vf_power_state,
  output  [1:0]                              cfg_link_power_state,

  // Management Interface
  input  [18:0]                              cfg_mgmt_addr,
  input                                      cfg_mgmt_write,
  input  [31:0]                              cfg_mgmt_write_data,
  input  [3:0]                               cfg_mgmt_byte_enable,
  input                                      cfg_mgmt_read,
  output  [31:0]                             cfg_mgmt_read_data,
  output                                     cfg_mgmt_read_write_done,
  input                                      cfg_mgmt_type1_cfg_reg_access,

  // Error Reporting Interface
  output                                     cfg_err_cor_out,
  output                                     cfg_err_nonfatal_out,
  output                                     cfg_err_fatal_out,
 // output                                   cfg_local_error,

  output                                     cfg_ltr_enable,
  output  [5:0]                              cfg_ltssm_state,
  output  [1:0]                              cfg_rcb_status,
  output  [1:0]                              cfg_dpa_substate_change,
  output  [1:0]                              cfg_obff_enable,
  output                                     cfg_pl_status_change,

  output  [1:0]                              cfg_tph_requester_enable,
  output  [5:0]                              cfg_tph_st_mode,
  output  [5:0]                              cfg_vf_tph_requester_enable,
  output  [17:0]                             cfg_vf_tph_st_mode,

  output                                     cfg_msg_received,
  output  [7:0]                              cfg_msg_received_data,
  output  [4:0]                              cfg_msg_received_type,

  input                                      cfg_msg_transmit,
  input   [2:0]                              cfg_msg_transmit_type,
  input   [31:0]                             cfg_msg_transmit_data,
  output                                     cfg_msg_transmit_done,

  output  [7:0]                              cfg_fc_ph,
  output  [11:0]                             cfg_fc_pd,
  output  [7:0]                              cfg_fc_nph,
  output  [11:0]                             cfg_fc_npd,
  output  [7:0]                              cfg_fc_cplh,
  output  [11:0]                             cfg_fc_cpld,
  input   [2:0]                              cfg_fc_sel,

  input   [2:0]                              cfg_per_func_status_control,
  output  [15:0]                             cfg_per_func_status_data,
  input   [2:0]                              cfg_per_function_number,
  input                                      cfg_per_function_output_request,
  output                                     cfg_per_function_update_done,

  input   [15:0]                             cfg_subsys_vend_id,
  input   [63:0]                             cfg_dsn,
  input                                      cfg_power_state_change_ack,
  output                                     cfg_power_state_change_interrupt,
  input                                      cfg_err_cor_in,
  input                                      cfg_err_uncor_in,

  output  [1:0]                              cfg_flr_in_process,
  input   [1:0]                              cfg_flr_done,
  output  [5:0]                              cfg_vf_flr_in_process,
  input   [5:0]                              cfg_vf_flr_done,

  input                                      cfg_link_training_enable,

  output                                     cfg_ext_read_received,
  output                                     cfg_ext_write_received,
  output  [9:0]                              cfg_ext_register_number,
  output  [7:0]                              cfg_ext_function_number,
  output  [31:0]                             cfg_ext_write_data,
  output  [3:0]                              cfg_ext_write_byte_enable,
  input   [31:0]                             cfg_ext_read_data,
  input                                      cfg_ext_read_data_valid,

  // Interrupt Interface Signals
  input   [3:0]                              cfg_interrupt_int,
  input   [1:0]                              cfg_interrupt_pending,
  output                                     cfg_interrupt_sent,

  output  [1:0]                              cfg_interrupt_msi_enable,
  output  [5:0]                              cfg_interrupt_msi_vf_enable,
  output  [5:0]                              cfg_interrupt_msi_mmenable,
  output                                     cfg_interrupt_msi_mask_update,
  output  [31:0]                             cfg_interrupt_msi_data,
  input   [3:0]                              cfg_interrupt_msi_select,
  input   [31:0]                             cfg_interrupt_msi_int,
  input   [63:0]                             cfg_interrupt_msi_pending_status,
  output                                     cfg_interrupt_msi_sent,
  output                                     cfg_interrupt_msi_fail,

  output  [1:0]                              cfg_interrupt_msix_enable,
  output  [1:0]                              cfg_interrupt_msix_mask,
  output  [5:0]                              cfg_interrupt_msix_vf_enable,
  output  [5:0]                              cfg_interrupt_msix_vf_mask,
  input   [31:0]                             cfg_interrupt_msix_data,
  input   [63:0]                             cfg_interrupt_msix_address,
  input                                      cfg_interrupt_msix_int,
  output                                     cfg_interrupt_msix_sent,
  output                                     cfg_interrupt_msix_fail,

  input   [2:0]                              cfg_interrupt_msi_attr,
  input                                      cfg_interrupt_msi_tph_present,
  input   [1:0]                              cfg_interrupt_msi_tph_type,
  input   [8:0]                              cfg_interrupt_msi_tph_st_tag,
  input   [2:0]                              cfg_interrupt_msi_function_number,

  output                                     cfg_hot_reset_out,
  input                                      cfg_config_space_enable,
  input                                      cfg_req_pm_transition_l23_ready,

  //----------------------------------------------------------------------------------------------------------------//
  // RP Only                                                                                                        //
  //----------------------------------------------------------------------------------------------------------------//

  input                                      cfg_hot_reset_in,
  input   [7:0]                              cfg_ds_port_number,
  input   [7:0]                              cfg_ds_bus_number,
  input   [4:0]                              cfg_ds_device_number,
  input   [2:0]                              cfg_ds_function_number,

  //----------------------------------------------------------------------------------------------------------------//
  // 6. TPH Interface                                                                                               //
  //----------------------------------------------------------------------------------------------------------------//
  input   [4:0]                              user_tph_stt_address,
  input   [2:0]                              user_tph_function_num,
  output  [31:0]                             user_tph_stt_read_data,
  output                                     user_tph_stt_read_data_valid,
  input                                      user_tph_stt_read_enable,

  //----------------------------------------------------------------------------------------------------------------//
  // 7. System(SYS) Interface                                                                                       //
  //----------------------------------------------------------------------------------------------------------------//

  input wire                                 sys_clk,
  input wire                                 sys_reset,
  input					                     pipe_mmcm_rst_n,

//--------------TRANSCEIVER_DEBUG---------------------------------


  input   [ 2:0]                               pipe_txprbssel,        
  input   [ 2:0]                               pipe_rxprbssel,     
  input                                        pipe_txprbsforceerr,
  input                                        pipe_rxprbscntreset,
  input   [ 2:0]                               pipe_loopback,     

  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_rxprbserr,   
  input  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]      pipe_txinhibit,   


  output  [4:0]                                pipe_rst_fsm,         
  output  [11:0]                               pipe_qrst_fsm,       
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH*5)-1:0] pipe_rate_fsm,      
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH*6)-1:0] pipe_sync_fsm_tx,  
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH*7)-1:0] pipe_sync_fsm_rx, 
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH*7)-1:0] pipe_drp_fsm,    

  output                                       pipe_rst_idle,         
  output                                       pipe_qrst_idle,       
  output                                       pipe_rate_idle,      
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_eyescandataerror,          
  output  [PL_LINK_CAP_MAX_LINK_WIDTH*3-1:0]   pipe_rxstatus,
  output  [PL_LINK_CAP_MAX_LINK_WIDTH*15-1:0]  pipe_dmonitorout,

  output  [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    pipe_cpll_lock,
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH-1)>>2:0] pipe_qpll_lock,
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    pipe_rxpmaresetdone,       
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH*3)-1:0]  pipe_rxbufstatus,         
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    pipe_txphaligndone,       
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    pipe_txphinitdone,        
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    pipe_txdlysresetdone,    
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    pipe_rxphaligndone,      
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    pipe_rxdlysresetdone,     
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    pipe_rxsyncdone,       
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH*8)-1:0]  pipe_rxdisperr,       
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH*8)-1:0]  pipe_rxnotintable,      
  output  [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    pipe_rxcommadet,        

  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     gt_ch_drp_rdy,
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_0,          
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_1,         
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_2,        
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_3,       
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_4,      
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_5,     
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_6,    
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_7,   
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_8,  
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     pipe_debug_9, 
  output  [31:0]                               pipe_debug,

//---- PIPE Ports to Core Top Level for PIPE Mode Simulation with 3rd Party IP/BFM/Xilinx BFM ------------------------
  input   [25:0]                               common_commands_in,
  input   [83:0]                               pipe_rx_0_sigs,
  input   [83:0]                               pipe_rx_1_sigs,
  input   [83:0]                               pipe_rx_2_sigs,
  input   [83:0]                               pipe_rx_3_sigs,
  input   [83:0]                               pipe_rx_4_sigs,
  input   [83:0]                               pipe_rx_5_sigs,
  input   [83:0]                               pipe_rx_6_sigs,
  input   [83:0]                               pipe_rx_7_sigs,
                         
  output  [25:0]                               common_commands_out,
  output  [83:0]                               pipe_tx_0_sigs,
  output  [83:0]                               pipe_tx_1_sigs,
  output  [83:0]                               pipe_tx_2_sigs,
  output  [83:0]                               pipe_tx_3_sigs,
  output  [83:0]                               pipe_tx_4_sigs,
  output  [83:0]                               pipe_tx_5_sigs,
  output  [83:0]                               pipe_tx_6_sigs,
  output  [83:0]                               pipe_tx_7_sigs,

  //--------------Channel DRP---------------------------------
  output                                       ext_ch_gt_drpclk,
  input   [(PL_LINK_CAP_MAX_LINK_WIDTH*9)-1:0] ext_ch_gt_drpaddr,
  input   [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     ext_ch_gt_drpen,
  input   [(PL_LINK_CAP_MAX_LINK_WIDTH*16)-1:0]ext_ch_gt_drpdi,
  input   [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     ext_ch_gt_drpwe,

  output  [(PL_LINK_CAP_MAX_LINK_WIDTH*16)-1:0]ext_ch_gt_drpdo,
  output  [PL_LINK_CAP_MAX_LINK_WIDTH-1:0]     ext_ch_gt_drprdy,
  //----------------------------------------------------------------------------------------------------------------//
  // 9. Tandem PROM/PCIE ICAP Primitive Ports                                                                       //
  //----------------------------------------------------------------------------------------------------------------//
  input                                        icap_clk,
  input                                        icap_csib,
  input                                        icap_rdwrb,
  input   [31:0]                               icap_i,
  output  [31:0]                               icap_o,

  output                                       pcie_drp_rdy,
  output             [15:0]                    pcie_drp_do,
  input                                        pcie_drp_clk,
  input                                        pcie_drp_en,
  input                                        pcie_drp_we,
  input              [10:0]                    pcie_drp_addr,
  input              [15:0]                    pcie_drp_di,


  //----------------------------------------------------------------------------------------------------------------//
  // 10. Tandem PROM/PCIE STARTUP primitive Ports                                                                    //
  //----------------------------------------------------------------------------------------------------------------//

  // This input should be used when the startup block is generated exteranl to the PCI Express Core
  input                                       startup_eos_in,     // 1-bit input: This signal should be driven by the EOS output of the STARTUP primitive.
  // These inputs and outputs may be use when the startup block is generated internal to the PCI Express Core.
  output                                      startup_cfgclk,     // 1-bit output: Configuration main clock output
  output                                      startup_cfgmclk,    // 1-bit output: Configuration internal oscillator clock output
  output                                      startup_eos,        // 1-bit output: Active high output signal indicating the End Of Startup
  output                                      startup_preq,       // 1-bit output: PROGRAM request to fabric output
  input                                       startup_clk,        // 1-bit input: User start-up clock input
  input                                       startup_gsr,        // 1-bit input: Global Set/Reset input (GSR cannot be used for the port name)
  input                                       startup_gts,        // 1-bit input: Global 3-state input (GTS cannot be used for the port name)
  input                                       startup_keyclearb,  // 1-bit input: Clear AES Decrypter Key input from Battery-Backed RAM (BBRAM)
  input                                       startup_pack,       // 1-bit input: PROGRAM acknowledge input
  input                                       startup_usrcclko,   // 1-bit input: User CCLK input
  input                                       startup_usrcclkts,  // 1-bit input: User CCLK 3-state enable input
  input                                       startup_usrdoneo,   // 1-bit input: User DONE pin output control
  input                                       startup_usrdonets,  // 1-bit input: User DONE 3-state enable output

  input [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    cpllpd, 
  input [(PL_LINK_CAP_MAX_LINK_WIDTH*2)-1:0]  txpd,
  input [(PL_LINK_CAP_MAX_LINK_WIDTH*2)-1:0]  rxpd,
  input [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    txpdelecidlemode,
  input [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    txdetectrx,
  input [(PL_LINK_CAP_MAX_LINK_WIDTH)-1:0]    txelecidle,
  input [(PL_LINK_CAP_MAX_LINK_WIDTH-1)>>2:0] qpllpd, 
  input                                       powerdown

);


  localparam integer USER_CLK_FREQ              = ((PL_LINK_CAP_MAX_LINK_SPEED == 3'h4) ? 5 : 4);
  localparam  [1:0]  CRM_USER_CLK_FREQ          = ((USER_CLK2_FREQ == 4) ? 2'b10: ((USER_CLK2_FREQ == 3) ? 2'b01 : 2'b00));
  localparam  [1:0]  AXISTEN_IF_WIDTH           = (C_DATA_WIDTH == 256) ? 2'b10 : ((C_DATA_WIDTH == 128) ? 2'b01 : 2'b00);
  localparam         CRM_CORE_CLK_FREQ_500      = ((PL_LINK_CAP_MAX_LINK_SPEED == 3'h4) ? "TRUE" : "FALSE");
  localparam         INTERFACE_SPEED            = ((PL_LINK_CAP_MAX_LINK_SPEED == 3'h4) ? "500 MHZ" : "250 MHZ");
  localparam         ENABLE_FAST_SIM_TRAINING   = "TRUE";

  wire         drp_clk_wire;
  wire         drp_en_wire;
  wire         drp_we_wire;
  wire [10:0]  drp_addr_wire;
  wire [15:0]  drp_di_wire;

  wire         drp_rdy_wire;
  wire  [15:0] drp_do_wire;

  wire         dt_654524_drp_clk;
  wire         dt_654524_drp_en;
  wire         dt_654524_drp_we;
  wire [10:0]  dt_654524_drp_addr;
  wire [15:0]  dt_654524_drp_di;

  wire         cfg_local_error;
  wire         rec_clk;
  wire         pipe_clk;
  wire         core_clk;
  wire         phy_rdy;

  wire [15:0]  cfg_vend_id        = PF0_VENDOR_ID;
  wire [15:0]  cfg_dev_id         = PF0_DEVICE_ID;
  wire [7:0]   cfg_rev_id         = PF0_REVISION_ID;
//  wire [15:0]  cfg_subsys_vend_id = PF0_SUBSYSTEM_VENDOR_ID;
  wire [15:0]  cfg_subsys_id      = PF0_SUBSYSTEM_ID;

  // PIPE Interface Wires
  wire         pipe_tx_reset;
  wire         pipe_rx0_polarity;
  wire         pipe_rx1_polarity;
  wire         pipe_rx2_polarity;
  wire         pipe_rx3_polarity;
  wire         pipe_rx4_polarity;
  wire         pipe_rx5_polarity;
  wire         pipe_rx6_polarity;
  wire         pipe_rx7_polarity;

  wire         pipe_tx0_compliance;
  wire         pipe_tx1_compliance;
  wire         pipe_tx2_compliance;
  wire         pipe_tx3_compliance;
  wire         pipe_tx4_compliance;
  wire         pipe_tx5_compliance;
  wire         pipe_tx6_compliance;
  wire         pipe_tx7_compliance;

  wire         pipe_rx0_data_valid;
  wire         pipe_rx1_data_valid;
  wire         pipe_rx2_data_valid;
  wire         pipe_rx3_data_valid;
  wire         pipe_rx4_data_valid;
  wire         pipe_rx5_data_valid;
  wire         pipe_rx6_data_valid;
  wire         pipe_rx7_data_valid;

  wire         pipe_tx0_elec_idle;
  wire         pipe_tx1_elec_idle;
  wire         pipe_tx2_elec_idle;
  wire         pipe_tx3_elec_idle;
  wire         pipe_tx4_elec_idle;
  wire         pipe_tx5_elec_idle;
  wire         pipe_tx6_elec_idle;
  wire         pipe_tx7_elec_idle;

  wire         pipe_rx0_start_block;
  wire         pipe_rx1_start_block;
  wire         pipe_rx2_start_block;
  wire         pipe_rx3_start_block;
  wire         pipe_rx4_start_block;
  wire         pipe_rx5_start_block;
  wire         pipe_rx6_start_block;
  wire         pipe_rx7_start_block;

  wire         pipe_tx_deemph;
  wire         pipe_tx_rcvr_det;
  wire   [1:0] pipe_tx_rate;
  wire   [2:0] pipe_tx_margin;
  wire         pipe_tx_swing;
  wire   [5:0] pipe_tx_eqfs;
  wire   [5:0] pipe_tx_eqlf;

  wire   [1:0] pipe_rx0_eqcontrol;
  wire   [1:0] pipe_rx1_eqcontrol;
  wire   [1:0] pipe_rx2_eqcontrol;
  wire   [1:0] pipe_rx3_eqcontrol;
  wire   [1:0] pipe_rx4_eqcontrol;
  wire   [1:0] pipe_rx5_eqcontrol;
  wire   [1:0] pipe_rx6_eqcontrol;
  wire   [1:0] pipe_rx7_eqcontrol;

  wire   [1:0] pipe_tx0_char_is_k;
  wire   [1:0] pipe_tx1_char_is_k;
  wire   [1:0] pipe_tx2_char_is_k;
  wire   [1:0] pipe_tx3_char_is_k;
  wire   [1:0] pipe_tx4_char_is_k;
  wire   [1:0] pipe_tx5_char_is_k;
  wire   [1:0] pipe_tx6_char_is_k;
  wire   [1:0] pipe_tx7_char_is_k;

  wire   [1:0] pipe_tx0_eqcontrol;
  wire   [1:0] pipe_tx1_eqcontrol;
  wire   [1:0] pipe_tx2_eqcontrol;
  wire   [1:0] pipe_tx3_eqcontrol;
  wire   [1:0] pipe_tx4_eqcontrol;
  wire   [1:0] pipe_tx5_eqcontrol;
  wire   [1:0] pipe_tx6_eqcontrol;
  wire   [1:0] pipe_tx7_eqcontrol;

  wire   [1:0] pipe_tx0_powerdown;
  wire   [1:0] pipe_tx1_powerdown;
  wire   [1:0] pipe_tx2_powerdown;
  wire   [1:0] pipe_tx3_powerdown;
  wire   [1:0] pipe_tx4_powerdown;
  wire   [1:0] pipe_tx5_powerdown;
  wire   [1:0] pipe_tx6_powerdown;
  wire   [1:0] pipe_tx7_powerdown;

  wire   [1:0] pipe_rx0_syncheader;
  wire   [1:0] pipe_rx1_syncheader;
  wire   [1:0] pipe_rx2_syncheader;
  wire   [1:0] pipe_rx3_syncheader;
  wire   [1:0] pipe_rx4_syncheader;
  wire   [1:0] pipe_rx5_syncheader;
  wire   [1:0] pipe_rx6_syncheader;
  wire   [1:0] pipe_rx7_syncheader;

  wire   [2:0] pipe_rx0_eqpreset;
  wire   [2:0] pipe_rx1_eqpreset;
  wire   [2:0] pipe_rx2_eqpreset;
  wire   [2:0] pipe_rx3_eqpreset;
  wire   [2:0] pipe_rx4_eqpreset;
  wire   [2:0] pipe_rx5_eqpreset;
  wire   [2:0] pipe_rx6_eqpreset;
  wire   [2:0] pipe_rx7_eqpreset;

  wire  [31:0] pipe_tx0_data;
  wire  [31:0] pipe_tx1_data;
  wire  [31:0] pipe_tx2_data;
  wire  [31:0] pipe_tx3_data;
  wire  [31:0] pipe_tx4_data;
  wire  [31:0] pipe_tx5_data;
  wire  [31:0] pipe_tx6_data;
  wire  [31:0] pipe_tx7_data;

  wire   [3:0] pipe_rx0_eq_txpreset;
  wire   [3:0] pipe_rx1_eq_txpreset;
  wire   [3:0] pipe_rx2_eq_txpreset;
  wire   [3:0] pipe_rx3_eq_txpreset;
  wire   [3:0] pipe_rx4_eq_txpreset;
  wire   [3:0] pipe_rx5_eq_txpreset;
  wire   [3:0] pipe_rx6_eq_txpreset;
  wire   [3:0] pipe_rx7_eq_txpreset;

  wire   [3:0] pipe_tx0_eqpreset;
  wire   [3:0] pipe_tx1_eqpreset;
  wire   [3:0] pipe_tx2_eqpreset;
  wire   [3:0] pipe_tx3_eqpreset;
  wire   [3:0] pipe_tx4_eqpreset;
  wire   [3:0] pipe_tx5_eqpreset;
  wire   [3:0] pipe_tx6_eqpreset;
  wire   [3:0] pipe_tx7_eqpreset;

  wire   [5:0] pipe_rx0_eq_lffs;
  wire   [5:0] pipe_rx1_eq_lffs;
  wire   [5:0] pipe_rx2_eq_lffs;
  wire   [5:0] pipe_rx3_eq_lffs;
  wire   [5:0] pipe_rx4_eq_lffs;
  wire   [5:0] pipe_rx5_eq_lffs;
  wire   [5:0] pipe_rx6_eq_lffs;
  wire   [5:0] pipe_rx7_eq_lffs;

  wire   [5:0] pipe_tx0_eqdeemph;
  wire   [5:0] pipe_tx1_eqdeemph;
  wire   [5:0] pipe_tx2_eqdeemph;
  wire   [5:0] pipe_tx3_eqdeemph;
  wire   [5:0] pipe_tx4_eqdeemph;
  wire   [5:0] pipe_tx5_eqdeemph;
  wire   [5:0] pipe_tx6_eqdeemph;
  wire   [5:0] pipe_tx7_eqdeemph;

  wire   [7:0] pipe_rx_slide;

  wire         pipe_rx0_elec_idle;
  wire         pipe_rx1_elec_idle;
  wire         pipe_rx2_elec_idle;
  wire         pipe_rx3_elec_idle;
  wire         pipe_rx4_elec_idle;
  wire         pipe_rx5_elec_idle;
  wire         pipe_rx6_elec_idle;
  wire         pipe_rx7_elec_idle;

  wire         pipe_rx0_eqdone;
  wire         pipe_rx1_eqdone;
  wire         pipe_rx2_eqdone;
  wire         pipe_rx3_eqdone;
  wire         pipe_rx4_eqdone;
  wire         pipe_rx5_eqdone;
  wire         pipe_rx6_eqdone;
  wire         pipe_rx7_eqdone;

  wire         pipe_rx0_eq_adapt_done;
  wire         pipe_rx1_eq_adapt_done;
  wire         pipe_rx2_eq_adapt_done;
  wire         pipe_rx3_eq_adapt_done;
  wire         pipe_rx4_eq_adapt_done;
  wire         pipe_rx5_eq_adapt_done;
  wire         pipe_rx6_eq_adapt_done;
  wire         pipe_rx7_eq_adapt_done;

  wire         pipe_rx0_eq_lffs_sel;
  wire         pipe_rx1_eq_lffs_sel;
  wire         pipe_rx2_eq_lffs_sel;
  wire         pipe_rx3_eq_lffs_sel;
  wire         pipe_rx4_eq_lffs_sel;
  wire         pipe_rx5_eq_lffs_sel;
  wire         pipe_rx6_eq_lffs_sel;
  wire         pipe_rx7_eq_lffs_sel;

  wire         pipe_rx0_phy_status;
  wire         pipe_rx1_phy_status;
  wire         pipe_rx2_phy_status;
  wire         pipe_rx3_phy_status;
  wire         pipe_rx4_phy_status;
  wire         pipe_rx5_phy_status;
  wire         pipe_rx6_phy_status;
  wire         pipe_rx7_phy_status;

  wire         pipe_rx0_valid;
  wire         pipe_rx1_valid;
  wire         pipe_rx2_valid;
  wire         pipe_rx3_valid;
  wire         pipe_rx4_valid;
  wire         pipe_rx5_valid;
  wire         pipe_rx6_valid;
  wire         pipe_rx7_valid;

  wire         pipe_tx0_eqdone;
  wire         pipe_tx1_eqdone;
  wire         pipe_tx2_eqdone;
  wire         pipe_tx3_eqdone;
  wire         pipe_tx4_eqdone;
  wire         pipe_tx5_eqdone;
  wire         pipe_tx6_eqdone;
  wire         pipe_tx7_eqdone;

  wire  [17:0] pipe_rx0_eq_new_txcoeff;
  wire  [17:0] pipe_rx1_eq_new_txcoeff;
  wire  [17:0] pipe_rx2_eq_new_txcoeff;
  wire  [17:0] pipe_rx3_eq_new_txcoeff;
  wire  [17:0] pipe_rx4_eq_new_txcoeff;
  wire  [17:0] pipe_rx5_eq_new_txcoeff;
  wire  [17:0] pipe_rx6_eq_new_txcoeff;
  wire  [17:0] pipe_rx7_eq_new_txcoeff;

  wire  [17:0] pipe_tx0_eqcoeff;
  wire  [17:0] pipe_tx1_eqcoeff;
  wire  [17:0] pipe_tx2_eqcoeff;
  wire  [17:0] pipe_tx3_eqcoeff;
  wire  [17:0] pipe_tx4_eqcoeff;
  wire  [17:0] pipe_tx5_eqcoeff;
  wire  [17:0] pipe_tx6_eqcoeff;
  wire  [17:0] pipe_tx7_eqcoeff;

  wire   [1:0] pipe_rx0_char_is_k;
  wire   [1:0] pipe_rx1_char_is_k;
  wire   [1:0] pipe_rx2_char_is_k;
  wire   [1:0] pipe_rx3_char_is_k;
  wire   [1:0] pipe_rx4_char_is_k;
  wire   [1:0] pipe_rx5_char_is_k;
  wire   [1:0] pipe_rx6_char_is_k;
  wire   [1:0] pipe_rx7_char_is_k;

  wire   [2:0] pipe_rx0_status;
  wire   [2:0] pipe_rx1_status;
  wire   [2:0] pipe_rx2_status;
  wire   [2:0] pipe_rx3_status;
  wire   [2:0] pipe_rx4_status;
  wire   [2:0] pipe_rx5_status;
  wire   [2:0] pipe_rx6_status;
  wire   [2:0] pipe_rx7_status;

  wire  [31:0] pipe_rx0_data;
  wire  [31:0] pipe_rx1_data;
  wire  [31:0] pipe_rx2_data;
  wire  [31:0] pipe_rx3_data;
  wire  [31:0] pipe_rx4_data;
  wire  [31:0] pipe_rx5_data;
  wire  [31:0] pipe_rx6_data;
  wire  [31:0] pipe_rx7_data;

  wire   [7:0] pipe_rx_syncdone;
  wire         PIPE_GEN3_OUT_wire;

  wire         sys_or_hot_rst;
  wire         user_lnk_up_int;
  reg          user_reset_int;

  // Wire Declaration for Inputs that are issolated in Tandem configuration
  wire         cfg_mgmt_write_wire;
  wire         cfg_mgmt_read_wire;
  wire   [2:0] cfg_per_func_status_control_wire;
  wire         cfg_per_function_output_request_wire;
  wire  [63:0] cfg_dsn_wire;
  wire         cfg_power_state_change_ack_wire;
  wire         cfg_err_cor_in_wire;
  wire         cfg_err_uncor_in_wire;
  wire   [1:0] cfg_flr_done_wire;
  wire   [5:0] cfg_vf_flr_done_wire;
  wire         cfg_link_training_enable_wire;
  wire         cfg_ext_read_data_valid_wire;
  wire   [1:0] cfg_interrupt_pending_wire;
  wire   [3:0] cfg_interrupt_msi_select_wire;
  wire  [63:0] cfg_interrupt_msi_pending_status_wire;
  wire         cfg_config_space_enable_wire;
  wire         cfg_req_pm_transition_l23_ready_wire;
  wire         cfg_hot_reset_in_wire;
  wire   [7:0] cfg_ds_port_number_wire;
  wire   [7:0] cfg_ds_bus_number_wire;
  wire   [4:0] cfg_ds_device_number_wire;
  wire   [2:0] cfg_ds_function_number_wire;
  wire   [4:0] user_tph_stt_address_wire;
  wire   [2:0] user_tph_function_num_wire;
  wire         user_tph_stt_read_enable_wire;
  // Wire Declaration for Outputs that are issolated in Tandem configuration
  wire         cfg_phy_link_down_wire;
  wire   [1:0] cfg_phy_link_status_wire;
  wire   [5:0] cfg_ltssm_state_wire;
  wire         cfg_hot_reset_out_wire;
  // Wire Declarations for tandem_cplr to pcie_top connections
  wire [C_DATA_WIDTH-1:0] s_axis_cc_tdata_wire;
  wire   [KEEP_WIDTH-1:0] s_axis_cc_tkeep_wire;
  wire                    s_axis_cc_tlast_wire;
  wire                    s_axis_cc_tvalid_wire;
  wire  [32:0]            s_axis_cc_tuser_wire;
  wire   [3:0]            s_axis_cc_tready_wire;
  wire                    s_axis_rq_tlast_wire;
  wire [C_DATA_WIDTH-1:0] s_axis_rq_tdata_wire;
  wire  [59:0]            s_axis_rq_tuser_wire;
  wire   [KEEP_WIDTH-1:0] s_axis_rq_tkeep_wire;
  wire   [3:0]            s_axis_rq_tready_wire;
  wire                    s_axis_rq_tvalid_wire;
  wire                    cfg_msg_transmit_done_wire;
  wire                    cfg_msg_transmit_wire;
  wire   [2:0]            cfg_msg_transmit_type_wire;
  wire  [31:0]            cfg_msg_transmit_data_wire;
  wire   [5:0]            pcie_rq_tag_wire;
  wire                    pcie_rq_tag_vld_wire;
  wire   [1:0]            pcie_tfc_nph_av_wire;
  wire   [1:0]            pcie_tfc_npd_av_wire;
  wire   [3:0]            pcie_rq_seq_num_wire;
  wire                    pcie_rq_seq_num_vld_wire;
  wire   [7:0]            cfg_fc_ph_wire;
  wire   [7:0]            cfg_fc_nph_wire;
  wire   [7:0]            cfg_fc_cplh_wire;
  wire  [11:0]            cfg_fc_pd_wire;
  wire  [11:0]            cfg_fc_npd_wire;
  wire  [11:0]            cfg_fc_cpld_wire;
  wire   [2:0]            cfg_fc_sel_wire;
  wire [C_DATA_WIDTH-1:0] m_axis_cq_tdata_wire;
  wire                    m_axis_cq_tlast_wire;
  wire                    m_axis_cq_tvalid_wire;
  wire  [84:0]            m_axis_cq_tuser_wire;
  wire  [KEEP_WIDTH-1:0]  m_axis_cq_tkeep_wire;
  wire  [21:0]            m_axis_cq_tready_wire;
  wire                    pcie_cq_np_req_wire;
  wire   [5:0]            pcie_cq_np_req_count_wire;
  wire [C_DATA_WIDTH-1:0] m_axis_rc_tdata_wire;
  wire                    m_axis_rc_tlast_wire;
  wire                    m_axis_rc_tvalid_wire;
  wire  [74:0]            m_axis_rc_tuser_wire;
  wire  [KEEP_WIDTH-1:0]  m_axis_rc_tkeep_wire;
  wire  [21:0]            m_axis_rc_tready_wire;
  wire                    cfg_msg_received_wire;
  wire   [4:0]            cfg_msg_received_type_wire;
  wire   [7:0]            cfg_msg_received_data_wire;
  wire   [3:0]            cfg_interrupt_int_wire;
  wire  [31:0]            cfg_interrupt_msi_int_wire;
  wire                    cfg_interrupt_msix_int_wire;
  wire [C_DATA_WIDTH-1:0] s_axis_cc_tdata_cplr;
  wire   [KEEP_WIDTH-1:0] s_axis_cc_tkeep_cplr;
  wire                    s_axis_cc_tlast_cplr;
  wire                    s_axis_cc_tvalid_cplr;
  wire  [32:0]            s_axis_cc_tuser_cplr;
  wire                    m_axis_cq_tready_cplr;
  wire                    s_axis_rq_tlast_cplr;
  wire [C_DATA_WIDTH-1:0] s_axis_rq_tdata_cplr;
  wire  [59:0]            s_axis_rq_tuser_cplr;
  wire   [KEEP_WIDTH-1:0] s_axis_rq_tkeep_cplr;
  wire                    s_axis_rq_tvalid_cplr;
  wire                    cfg_msg_transmit_cplr;
  wire   [2:0]            cfg_msg_transmit_type_cplr;
  wire  [31:0]            cfg_msg_transmit_data_cplr;
  wire   [2:0]            cfg_fc_sel_cplr;
  wire                    pcie_cq_np_req_cplr;
  wire                    m_axis_rc_tready_cplr;
  wire                    mmcm_lock;

  // user_app_rdy signals which control the issolation muxes
  wire                         user_app_rdy_req;

// Variables and Parameters for Pipe mode Simulation

  wire  [7:0] pipe_rxeq_user_en          ;
  wire  [143:0] pipe_rxeq_user_txcoeff   ;

  generate
  if(PIPE_SIM_MODE=="FALSE") begin
     assign   pipe_rxeq_user_en      = 8'h00  ;
     assign   pipe_rxeq_user_txcoeff = 144'h0 ;
     assign         pipe_rx0_data_valid =  1'b0;
     assign         pipe_rx1_data_valid =  1'b0;
     assign         pipe_rx2_data_valid =  1'b0;
     assign         pipe_rx3_data_valid =  1'b0;
     assign         pipe_rx4_data_valid =  1'b0;
     assign         pipe_rx5_data_valid =  1'b0;
     assign         pipe_rx6_data_valid =  1'b0;
     assign         pipe_rx7_data_valid =  1'b0;
     assign         pipe_rx0_start_block = 1'b0;
     assign         pipe_rx1_start_block = 1'b0;
     assign         pipe_rx2_start_block = 1'b0;
     assign         pipe_rx3_start_block = 1'b0;
     assign         pipe_rx4_start_block = 1'b0;
     assign         pipe_rx5_start_block = 1'b0;
     assign         pipe_rx6_start_block = 1'b0;
     assign         pipe_rx7_start_block = 1'b0;
     assign         pipe_rx0_syncheader =  2'b0;
     assign         pipe_rx1_syncheader =  2'b0;
     assign         pipe_rx2_syncheader =  2'b0;
     assign         pipe_rx3_syncheader =  2'b0;
     assign         pipe_rx4_syncheader =  2'b0;
     assign         pipe_rx5_syncheader =  2'b0;
     assign         pipe_rx6_syncheader =  2'b0;
     assign         pipe_rx7_syncheader =  2'b0;
  end
  else begin
     assign   pipe_rxeq_user_en      =  8'hff;
     assign   pipe_rxeq_user_txcoeff =  {8{6'd00,6'd30,6'd10}} ;
  end
  endgenerate
  //------------------------------------------------------------------------------------------------------------------//
  // Convert incoming reset from AXI required active High                                                             //
  // to active low as that is what is required by GT and PCIe Block                                                   //
  //------------------------------------------------------------------------------------------------------------------//
  wire sys_rst_n;
  wire PIPE_MMCM_LOCK_IN_wire;
      
  assign sys_rst_n = !sys_reset;
  assign PIPE_MMCM_LOCK_IN_wire = pipe_mmcm_lock_in;

  assign user_lnk_up_int = (cfg_phy_link_status_wire == 2'b11) ? 1'b1 : 1'b0;

  assign sys_or_hot_rst = !sys_rst_n || cfg_hot_reset_out_wire;

  //------------------------------------------------------------------------------------------------------------------//
  // Generate user_reset                                                                                              //
  // Once user reset output of PCIE and Phy Layer is active, de-assert reset                                          //
  // Only assert reset if system reset or hot reset is seen.  Keep AXI backend/user application alive otherwise       //
  //------------------------------------------------------------------------------------------------------------------//
  always @(posedge user_clk or posedge sys_or_hot_rst)
  begin
    if (sys_or_hot_rst) begin
      user_reset_int <= #TCQ 1'b1;
    end else if (cfg_phy_link_status_wire[1] && !cfg_phy_link_down_wire) begin
      user_reset_int <= #TCQ 1'b0;
    end
  end

  // Invert active low reset to active high AXI reset
  always @(posedge user_clk or posedge sys_or_hot_rst)
  begin
    if (sys_or_hot_rst) begin
      user_reset <= #TCQ 1'b1;
    end else begin
      user_reset <= #TCQ user_reset_int;
    end
  end


 rp_pcie_top #(
  .TCQ                                                  ( TCQ ),
  .PIPE_SIM_MODE                                        (PIPE_SIM_MODE ),
  .PIPE_PIPELINE_STAGES                                 ( PIPE_PIPELINE_STAGES ),
  .ARI_CAP_ENABLE                                       ( ARI_CAP_ENABLE ),
  .AXISTEN_IF_CC_ALIGNMENT_MODE                         ( AXISTEN_IF_CC_ALIGNMENT_MODE ),
  .AXISTEN_IF_CC_PARITY_CHK                             ( AXISTEN_IF_CC_PARITY_CHK ),
  .AXISTEN_IF_CQ_ALIGNMENT_MODE                         ( AXISTEN_IF_CQ_ALIGNMENT_MODE ),
  .AXISTEN_IF_ENABLE_CLIENT_TAG                         ( AXISTEN_IF_ENABLE_CLIENT_TAG ),
  .AXISTEN_IF_ENABLE_MSG_ROUTE                          ( AXISTEN_IF_ENABLE_MSG_ROUTE ),
  .AXISTEN_IF_ENABLE_RX_MSG_INTFC                       ( AXISTEN_IF_ENABLE_RX_MSG_INTFC ),
  .AXISTEN_IF_RC_ALIGNMENT_MODE                         ( AXISTEN_IF_RC_ALIGNMENT_MODE ),
  .AXISTEN_IF_RC_STRADDLE                               ( AXISTEN_IF_RC_STRADDLE ),
  .AXISTEN_IF_RQ_ALIGNMENT_MODE                         ( AXISTEN_IF_RQ_ALIGNMENT_MODE ),
  .AXISTEN_IF_RQ_PARITY_CHK                             ( AXISTEN_IF_RQ_PARITY_CHK ),
  .AXISTEN_IF_WIDTH                                     ( AXISTEN_IF_WIDTH ),
  .C_DATA_WIDTH                                         ( C_DATA_WIDTH ),
  .CRM_CORE_CLK_FREQ_500                                ( CRM_CORE_CLK_FREQ_500 ),
  .CRM_USER_CLK_FREQ                                    ( CRM_USER_CLK_FREQ ),
  .DNSTREAM_LINK_NUM                                    ( DNSTREAM_LINK_NUM ),
  .GEN3_PCS_AUTO_REALIGN                                ( GEN3_PCS_AUTO_REALIGN ),
  .GEN3_PCS_RX_ELECIDLE_INTERNAL                        ( GEN3_PCS_RX_ELECIDLE_INTERNAL ),
  .LL_ACK_TIMEOUT                                       ( LL_ACK_TIMEOUT ),
  .LL_ACK_TIMEOUT_EN                                    ( LL_ACK_TIMEOUT_EN ),
  .LL_ACK_TIMEOUT_FUNC                                  ( LL_ACK_TIMEOUT_FUNC ),
  .LL_CPL_FC_UPDATE_TIMER                               ( LL_CPL_FC_UPDATE_TIMER ),
  .LL_CPL_FC_UPDATE_TIMER_OVERRIDE                      ( LL_CPL_FC_UPDATE_TIMER_OVERRIDE ),
  .LL_FC_UPDATE_TIMER                                   ( LL_FC_UPDATE_TIMER ),
  .LL_FC_UPDATE_TIMER_OVERRIDE                          ( LL_FC_UPDATE_TIMER_OVERRIDE ),
  .LL_NP_FC_UPDATE_TIMER                                ( LL_NP_FC_UPDATE_TIMER ),
  .LL_NP_FC_UPDATE_TIMER_OVERRIDE                       ( LL_NP_FC_UPDATE_TIMER_OVERRIDE ),
  .LL_P_FC_UPDATE_TIMER                                 ( LL_P_FC_UPDATE_TIMER ),
  .LL_P_FC_UPDATE_TIMER_OVERRIDE                        ( LL_P_FC_UPDATE_TIMER_OVERRIDE ),
  .LL_REPLAY_TIMEOUT                                    ( LL_REPLAY_TIMEOUT ),
  .LL_REPLAY_TIMEOUT_EN                                 ( LL_REPLAY_TIMEOUT_EN ),
  .LL_REPLAY_TIMEOUT_FUNC                               ( LL_REPLAY_TIMEOUT_FUNC ),
  .LTR_TX_MESSAGE_MINIMUM_INTERVAL                      ( LTR_TX_MESSAGE_MINIMUM_INTERVAL ),
  .LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE            ( LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE ),
  .LTR_TX_MESSAGE_ON_LTR_ENABLE                         ( LTR_TX_MESSAGE_ON_LTR_ENABLE ),
  .PF0_AER_CAP_ECRC_CHECK_CAPABLE                       ( PF0_AER_CAP_ECRC_CHECK_CAPABLE ),
  .PF0_AER_CAP_ECRC_GEN_CAPABLE                         ( PF0_AER_CAP_ECRC_GEN_CAPABLE ),
  .PF0_AER_CAP_NEXTPTR                                  ( PF0_AER_CAP_NEXTPTR ),
  .PF0_ARI_CAP_NEXTPTR                                  ( PF0_ARI_CAP_NEXTPTR ),
  .PF0_ARI_CAP_NEXT_FUNC                                ( PF0_ARI_CAP_NEXT_FUNC ),
  .PF0_ARI_CAP_VER                                      ( PF0_ARI_CAP_VER ),
  .PF0_BAR0_APERTURE_SIZE                               ( PF0_BAR0_APERTURE_SIZE ),
  .PF0_BAR0_CONTROL                                     ( PF0_BAR0_CONTROL ),
  .PF0_BAR1_APERTURE_SIZE                               ( PF0_BAR1_APERTURE_SIZE ),
  .PF0_BAR1_CONTROL                                     ( PF0_BAR1_CONTROL ),
  .PF0_BAR2_APERTURE_SIZE                               ( PF0_BAR2_APERTURE_SIZE ),
  .PF0_BAR2_CONTROL                                     ( PF0_BAR2_CONTROL ),
  .PF0_BAR3_APERTURE_SIZE                               ( PF0_BAR3_APERTURE_SIZE ),
  .PF0_BAR3_CONTROL                                     ( PF0_BAR3_CONTROL ),
  .PF0_BAR4_APERTURE_SIZE                               ( PF0_BAR4_APERTURE_SIZE ),
  .PF0_BAR4_CONTROL                                     ( PF0_BAR4_CONTROL ),
  .PF0_BAR5_APERTURE_SIZE                               ( PF0_BAR5_APERTURE_SIZE ),
  .PF0_BAR5_CONTROL                                     ( PF0_BAR5_CONTROL ),
  .PF0_BIST_REGISTER                                    ( PF0_BIST_REGISTER ),
  .PF0_CAPABILITY_POINTER                               ( PF0_CAPABILITY_POINTER ),
  .PF0_CLASS_CODE                                       ( PF0_CLASS_CODE ),
  .PF0_DEVICE_ID                                        ( PF0_DEVICE_ID ),
  .PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT       ( PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT ),
  .PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT            ( PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT ),
  .PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT            ( PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT ),
  .PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE                     ( PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE ),
  .PF0_DEV_CAP2_LTR_SUPPORT                             ( PF0_DEV_CAP2_LTR_SUPPORT ),
  .PF0_DEV_CAP2_OBFF_SUPPORT                            ( PF0_DEV_CAP2_OBFF_SUPPORT ),
  .PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT                   ( PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT ),
  .PF0_DEV_CAP_ENDPOINT_L0S_LATENCY                     ( PF0_DEV_CAP_ENDPOINT_L0S_LATENCY ),
  .PF0_DEV_CAP_ENDPOINT_L1_LATENCY                      ( PF0_DEV_CAP_ENDPOINT_L1_LATENCY ),
  .PF0_DEV_CAP_EXT_TAG_SUPPORTED                        ( PF0_DEV_CAP_EXT_TAG_SUPPORTED ),
  .PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE             ( PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE ),
  .PF0_DEV_CAP_MAX_PAYLOAD_SIZE                         ( PF0_DEV_CAP_MAX_PAYLOAD_SIZE ),
  .PF0_DPA_CAP_NEXTPTR                                  ( PF0_DPA_CAP_NEXTPTR ),
  .VF0_ARI_CAP_NEXTPTR                                  ( VF0_ARI_CAP_NEXTPTR ),
  .VF1_ARI_CAP_NEXTPTR                                  ( VF1_ARI_CAP_NEXTPTR ),
  .VF2_ARI_CAP_NEXTPTR                                  ( VF2_ARI_CAP_NEXTPTR ),
  .VF3_ARI_CAP_NEXTPTR                                  ( VF3_ARI_CAP_NEXTPTR ),
  .VF4_ARI_CAP_NEXTPTR                                  ( VF4_ARI_CAP_NEXTPTR ),
  .VF5_ARI_CAP_NEXTPTR                                  ( VF5_ARI_CAP_NEXTPTR ),
  .VF0_TPHR_CAP_DEV_SPECIFIC_MODE                       ( VF0_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .VF0_TPHR_CAP_ENABLE                                  ( VF0_TPHR_CAP_ENABLE ),
  .VF0_TPHR_CAP_INT_VEC_MODE                            ( VF0_TPHR_CAP_INT_VEC_MODE ),
  .VF0_TPHR_CAP_NEXTPTR                                 ( VF0_TPHR_CAP_NEXTPTR ),
  .VF0_TPHR_CAP_ST_MODE_SEL                             ( VF0_TPHR_CAP_ST_MODE_SEL ),
  .VF0_TPHR_CAP_ST_TABLE_LOC                            ( VF0_TPHR_CAP_ST_TABLE_LOC ),
  .VF0_TPHR_CAP_ST_TABLE_SIZE                           ( VF0_TPHR_CAP_ST_TABLE_SIZE ),
  .VF0_TPHR_CAP_VER                                     ( VF0_TPHR_CAP_VER ),
  .VF1_TPHR_CAP_DEV_SPECIFIC_MODE                       ( VF1_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .VF1_TPHR_CAP_ENABLE                                  ( VF1_TPHR_CAP_ENABLE ),
  .VF1_TPHR_CAP_INT_VEC_MODE                            ( VF1_TPHR_CAP_INT_VEC_MODE ),
  .VF1_TPHR_CAP_NEXTPTR                                 ( VF1_TPHR_CAP_NEXTPTR ),
  .VF1_TPHR_CAP_ST_MODE_SEL                             ( VF1_TPHR_CAP_ST_MODE_SEL ),
  .VF1_TPHR_CAP_ST_TABLE_LOC                            ( VF1_TPHR_CAP_ST_TABLE_LOC ),
  .VF1_TPHR_CAP_ST_TABLE_SIZE                           ( VF1_TPHR_CAP_ST_TABLE_SIZE ),
  .VF1_TPHR_CAP_VER                                     ( VF1_TPHR_CAP_VER ),
  .VF2_TPHR_CAP_DEV_SPECIFIC_MODE                       ( VF2_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .VF2_TPHR_CAP_ENABLE                                  ( VF2_TPHR_CAP_ENABLE ),
  .VF2_TPHR_CAP_INT_VEC_MODE                            ( VF2_TPHR_CAP_INT_VEC_MODE ),
  .VF2_TPHR_CAP_NEXTPTR                                 ( VF2_TPHR_CAP_NEXTPTR ),
  .VF2_TPHR_CAP_ST_MODE_SEL                             ( VF2_TPHR_CAP_ST_MODE_SEL ),
  .VF2_TPHR_CAP_ST_TABLE_LOC                            ( VF2_TPHR_CAP_ST_TABLE_LOC ),
  .VF2_TPHR_CAP_ST_TABLE_SIZE                           ( VF2_TPHR_CAP_ST_TABLE_SIZE ),
  .VF2_TPHR_CAP_VER                                     ( VF2_TPHR_CAP_VER ),
  .VF3_TPHR_CAP_DEV_SPECIFIC_MODE                       ( VF3_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .VF3_TPHR_CAP_ENABLE                                  ( VF3_TPHR_CAP_ENABLE ),
  .VF3_TPHR_CAP_INT_VEC_MODE                            ( VF3_TPHR_CAP_INT_VEC_MODE ),
  .VF3_TPHR_CAP_NEXTPTR                                 ( VF3_TPHR_CAP_NEXTPTR ),
  .VF3_TPHR_CAP_ST_MODE_SEL                             ( VF3_TPHR_CAP_ST_MODE_SEL ),
  .VF3_TPHR_CAP_ST_TABLE_LOC                            ( VF3_TPHR_CAP_ST_TABLE_LOC ),
  .VF3_TPHR_CAP_ST_TABLE_SIZE                           ( VF3_TPHR_CAP_ST_TABLE_SIZE ),
  .VF3_TPHR_CAP_VER                                     ( VF3_TPHR_CAP_VER ),
  .VF4_TPHR_CAP_DEV_SPECIFIC_MODE                       ( VF4_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .VF4_TPHR_CAP_ENABLE                                  ( VF4_TPHR_CAP_ENABLE ),
  .VF4_TPHR_CAP_INT_VEC_MODE                            ( VF4_TPHR_CAP_INT_VEC_MODE ),
  .VF4_TPHR_CAP_NEXTPTR                                 ( VF4_TPHR_CAP_NEXTPTR ),
  .VF4_TPHR_CAP_ST_MODE_SEL                             ( VF4_TPHR_CAP_ST_MODE_SEL ),
  .VF4_TPHR_CAP_ST_TABLE_LOC                            ( VF4_TPHR_CAP_ST_TABLE_LOC ),
  .VF4_TPHR_CAP_ST_TABLE_SIZE                           ( VF4_TPHR_CAP_ST_TABLE_SIZE ),
  .VF4_TPHR_CAP_VER                                     ( VF4_TPHR_CAP_VER ),
  .VF5_TPHR_CAP_DEV_SPECIFIC_MODE                       ( VF5_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .VF5_TPHR_CAP_ENABLE                                  ( VF5_TPHR_CAP_ENABLE ),
  .VF5_TPHR_CAP_INT_VEC_MODE                            ( VF5_TPHR_CAP_INT_VEC_MODE ),
  .VF5_TPHR_CAP_NEXTPTR                                 ( VF5_TPHR_CAP_NEXTPTR ),
  .VF5_TPHR_CAP_ST_MODE_SEL                             ( VF5_TPHR_CAP_ST_MODE_SEL ),
  .VF5_TPHR_CAP_ST_TABLE_LOC                            ( VF5_TPHR_CAP_ST_TABLE_LOC ),
  .VF5_TPHR_CAP_ST_TABLE_SIZE                           ( VF5_TPHR_CAP_ST_TABLE_SIZE ),
  .VF5_TPHR_CAP_VER                                     ( VF5_TPHR_CAP_VER ),
  .PF0_DPA_CAP_SUB_STATE_CONTROL                        ( PF0_DPA_CAP_SUB_STATE_CONTROL ),
  .PF0_DPA_CAP_SUB_STATE_CONTROL_EN                     ( PF0_DPA_CAP_SUB_STATE_CONTROL_EN ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION0              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION1              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION2              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION3              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION4              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION5              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION6              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 ),
  .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION7              ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 ),
  .PF0_DPA_CAP_VER                                      ( PF0_DPA_CAP_VER ),
  .PF0_DSN_CAP_NEXTPTR                                  ( PF0_DSN_CAP_NEXTPTR ),
  .PF0_EXPANSION_ROM_APERTURE_SIZE                      ( PF0_EXPANSION_ROM_APERTURE_SIZE ),
  .PF0_EXPANSION_ROM_ENABLE                             ( PF0_EXPANSION_ROM_ENABLE ),
  .PF0_INTERRUPT_LINE                                   ( PF0_INTERRUPT_LINE ),
  .PF0_INTERRUPT_PIN                                    ( PF0_INTERRUPT_PIN ),
  .PF0_LINK_CAP_ASPM_SUPPORT                            ( PF0_LINK_CAP_ASPM_SUPPORT ),
  .PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1            ( PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1 ),
  .PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2            ( PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2 ),
  .PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3            ( PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3 ),
  .PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1                   ( PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1 ),
  .PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2                   ( PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2 ),
  .PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3                   ( PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3 ),
  .PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1             ( PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1 ),
  .PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2             ( PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2 ),
  .PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3             ( PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3 ),
  .PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1                    ( PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1 ),
  .PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2                    ( PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2 ),
  .PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3                    ( PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3 ),
  .PF0_LINK_STATUS_SLOT_CLOCK_CONFIG                    ( PF0_LINK_STATUS_SLOT_CLOCK_CONFIG ),
  .PF0_LTR_CAP_MAX_NOSNOOP_LAT                          ( PF0_LTR_CAP_MAX_NOSNOOP_LAT ),
  .PF0_LTR_CAP_MAX_SNOOP_LAT                            ( PF0_LTR_CAP_MAX_SNOOP_LAT ),
  .PF0_LTR_CAP_NEXTPTR                                  ( PF0_LTR_CAP_NEXTPTR ),
  .PF0_LTR_CAP_VER                                      ( PF0_LTR_CAP_VER ),
  .PF0_MSIX_CAP_NEXTPTR                                 ( PF0_MSIX_CAP_NEXTPTR ),
  .PF0_MSIX_CAP_PBA_BIR                                 ( PF0_MSIX_CAP_PBA_BIR ),
  .PF0_MSIX_CAP_PBA_OFFSET                              ( PF0_MSIX_CAP_PBA_OFFSET ),
  .PF0_MSIX_CAP_TABLE_BIR                               ( PF0_MSIX_CAP_TABLE_BIR ),
  .PF0_MSIX_CAP_TABLE_OFFSET                            ( PF0_MSIX_CAP_TABLE_OFFSET ),
  .PF0_MSIX_CAP_TABLE_SIZE                              ( PF0_MSIX_CAP_TABLE_SIZE ),
  .PF0_MSI_CAP_MULTIMSGCAP                              ( PF0_MSI_CAP_MULTIMSGCAP ),
  .PF0_MSI_CAP_NEXTPTR                                  ( PF0_MSI_CAP_NEXTPTR ),
  .PF0_PB_CAP_NEXTPTR                                   ( PF0_PB_CAP_NEXTPTR ),
  .PF0_PB_CAP_SYSTEM_ALLOCATED                          ( PF0_PB_CAP_SYSTEM_ALLOCATED ),
  .PF0_PB_CAP_VER                                       ( PF0_PB_CAP_VER ),
  .PF0_PM_CAP_ID                                        ( PF0_PM_CAP_ID ),
  .PF0_PM_CAP_NEXTPTR                                   ( PF0_PM_CAP_NEXTPTR ),
  .PF0_PM_CAP_PMESUPPORT_D0                             ( PF0_PM_CAP_PMESUPPORT_D0 ),
  .PF0_PM_CAP_PMESUPPORT_D1                             ( PF0_PM_CAP_PMESUPPORT_D1 ),
  .PF0_PM_CAP_PMESUPPORT_D3HOT                          ( PF0_PM_CAP_PMESUPPORT_D3HOT ),
  .PF0_PM_CAP_SUPP_D1_STATE                             ( PF0_PM_CAP_SUPP_D1_STATE ),
  .PF0_PM_CAP_VER_ID                                    ( PF0_PM_CAP_VER_ID ),
  .PF0_PM_CSR_NOSOFTRESET                               ( PF0_PM_CSR_NOSOFTRESET ),
  .PF0_RBAR_CAP_ENABLE                                  ( PF0_RBAR_CAP_ENABLE ),
  .PF0_RBAR_CAP_INDEX0                                  ( PF0_RBAR_CAP_INDEX0 ),
  .PF0_RBAR_CAP_INDEX1                                  ( PF0_RBAR_CAP_INDEX1 ),
  .PF0_RBAR_CAP_INDEX2                                  ( PF0_RBAR_CAP_INDEX2 ),
  .PF0_RBAR_CAP_NEXTPTR                                 ( PF0_RBAR_CAP_NEXTPTR ),
  .PF0_RBAR_CAP_SIZE0                                   ( PF0_RBAR_CAP_SIZE0 ),
  .PF0_RBAR_CAP_SIZE1                                   ( PF0_RBAR_CAP_SIZE1 ),
  .PF0_RBAR_CAP_SIZE2                                   ( PF0_RBAR_CAP_SIZE2 ),
  .PF0_RBAR_CAP_VER                                     ( PF0_RBAR_CAP_VER ),
  .PF0_RBAR_NUM                                         ( PF0_RBAR_NUM ),
  .PF0_REVISION_ID                                      ( PF0_REVISION_ID ),
  .PF0_SRIOV_BAR0_APERTURE_SIZE                         ( PF0_SRIOV_BAR0_APERTURE_SIZE ),
  .PF0_SRIOV_BAR0_CONTROL                               ( PF0_SRIOV_BAR0_CONTROL ),
  .PF0_SRIOV_BAR1_APERTURE_SIZE                         ( PF0_SRIOV_BAR1_APERTURE_SIZE ),
  .PF0_SRIOV_BAR1_CONTROL                               ( PF0_SRIOV_BAR1_CONTROL ),
  .PF0_SRIOV_BAR2_APERTURE_SIZE                         ( PF0_SRIOV_BAR2_APERTURE_SIZE ),
  .PF0_SRIOV_BAR2_CONTROL                               ( PF0_SRIOV_BAR2_CONTROL ),
  .PF0_SRIOV_BAR3_APERTURE_SIZE                         ( PF0_SRIOV_BAR3_APERTURE_SIZE ),
  .PF0_SRIOV_BAR3_CONTROL                               ( PF0_SRIOV_BAR3_CONTROL ),
  .PF0_SRIOV_BAR4_APERTURE_SIZE                         ( PF0_SRIOV_BAR4_APERTURE_SIZE ),
  .PF0_SRIOV_BAR4_CONTROL                               ( PF0_SRIOV_BAR4_CONTROL ),
  .PF0_SRIOV_BAR5_APERTURE_SIZE                         ( PF0_SRIOV_BAR5_APERTURE_SIZE ),
  .PF0_SRIOV_BAR5_CONTROL                               ( PF0_SRIOV_BAR5_CONTROL ),
  .PF0_SRIOV_CAP_INITIAL_VF                             ( PF0_SRIOV_CAP_INITIAL_VF ),
  .PF0_SRIOV_CAP_NEXTPTR                                ( PF0_SRIOV_CAP_NEXTPTR ),
  .PF0_SRIOV_CAP_TOTAL_VF                               ( PF0_SRIOV_CAP_TOTAL_VF ),
  .PF0_SRIOV_CAP_VER                                    ( PF0_SRIOV_CAP_VER ),
  .PF0_SRIOV_FIRST_VF_OFFSET                            ( PF0_SRIOV_FIRST_VF_OFFSET ),
  .PF0_SRIOV_FUNC_DEP_LINK                              ( PF0_SRIOV_FUNC_DEP_LINK ),
  .PF0_SRIOV_SUPPORTED_PAGE_SIZE                        ( PF0_SRIOV_SUPPORTED_PAGE_SIZE ),
  .PF0_SRIOV_VF_DEVICE_ID                               ( PF0_SRIOV_VF_DEVICE_ID ),
  .PF0_SUBSYSTEM_ID                                     ( PF0_SUBSYSTEM_ID ),
  .PF0_TPHR_CAP_DEV_SPECIFIC_MODE                       ( PF0_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .PF0_TPHR_CAP_ENABLE                                  ( PF0_TPHR_CAP_ENABLE ),
  .PF0_TPHR_CAP_INT_VEC_MODE                            ( PF0_TPHR_CAP_INT_VEC_MODE ),
  .PF0_TPHR_CAP_NEXTPTR                                 ( PF0_TPHR_CAP_NEXTPTR ),
  .PF0_TPHR_CAP_ST_MODE_SEL                             ( PF0_TPHR_CAP_ST_MODE_SEL ),
  .PF0_TPHR_CAP_ST_TABLE_LOC                            ( PF0_TPHR_CAP_ST_TABLE_LOC ),
  .PF0_TPHR_CAP_ST_TABLE_SIZE                           ( PF0_TPHR_CAP_ST_TABLE_SIZE ),
  .PF0_TPHR_CAP_VER                                     ( PF0_TPHR_CAP_VER ),
  .PF0_VC_CAP_NEXTPTR                                   ( PF0_VC_CAP_NEXTPTR ),
  .PF0_VC_CAP_VER                                       ( PF0_VC_CAP_VER ),
  .PF1_AER_CAP_ECRC_CHECK_CAPABLE                       ( PF1_AER_CAP_ECRC_CHECK_CAPABLE ),
  .PF1_AER_CAP_ECRC_GEN_CAPABLE                         ( PF1_AER_CAP_ECRC_GEN_CAPABLE ),
  .PF1_AER_CAP_NEXTPTR                                  ( PF1_AER_CAP_NEXTPTR ),
  .PF1_ARI_CAP_NEXTPTR                                  ( PF1_ARI_CAP_NEXTPTR ),
  .PF1_ARI_CAP_NEXT_FUNC                                ( PF1_ARI_CAP_NEXT_FUNC ),
  .PF1_BAR0_APERTURE_SIZE                               ( PF1_BAR0_APERTURE_SIZE ),
  .PF1_BAR0_CONTROL                                     ( PF1_BAR0_CONTROL ),
  .PF1_BAR1_APERTURE_SIZE                               ( PF1_BAR1_APERTURE_SIZE ),
  .PF1_BAR1_CONTROL                                     ( PF1_BAR1_CONTROL ),
  .PF1_BAR2_APERTURE_SIZE                               ( PF1_BAR2_APERTURE_SIZE ),
  .PF1_BAR2_CONTROL                                     ( PF1_BAR2_CONTROL ),
  .PF1_BAR3_APERTURE_SIZE                               ( PF1_BAR3_APERTURE_SIZE ),
  .PF1_BAR3_CONTROL                                     ( PF1_BAR3_CONTROL ),
  .PF1_BAR4_APERTURE_SIZE                               ( PF1_BAR4_APERTURE_SIZE ),
  .PF1_BAR4_CONTROL                                     ( PF1_BAR4_CONTROL ),
  .PF1_BAR5_APERTURE_SIZE                               ( PF1_BAR5_APERTURE_SIZE ),
  .PF1_BAR5_CONTROL                                     ( PF1_BAR5_CONTROL ),
  .PF1_BIST_REGISTER                                    ( PF1_BIST_REGISTER ),
  .PF1_CAPABILITY_POINTER                               ( PF1_CAPABILITY_POINTER ),
  .PF1_CLASS_CODE                                       ( PF1_CLASS_CODE ),
  .PF1_DEVICE_ID                                        ( PF1_DEVICE_ID ),
  .PF1_DEV_CAP_MAX_PAYLOAD_SIZE                         ( PF1_DEV_CAP_MAX_PAYLOAD_SIZE ),
  .PF1_DPA_CAP_NEXTPTR                                  ( PF1_DPA_CAP_NEXTPTR ),
  .PF1_DPA_CAP_SUB_STATE_CONTROL                        ( PF1_DPA_CAP_SUB_STATE_CONTROL ),
  .PF1_DPA_CAP_SUB_STATE_CONTROL_EN                     ( PF1_DPA_CAP_SUB_STATE_CONTROL_EN ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION0              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION1              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION2              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION3              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION4              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION5              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION6              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 ),
  .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION7              ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 ),
  .PF1_DPA_CAP_VER                                      ( PF1_DPA_CAP_VER ),
  .PF1_DSN_CAP_NEXTPTR                                  ( PF1_DSN_CAP_NEXTPTR ),
  .PF1_EXPANSION_ROM_APERTURE_SIZE                      ( PF1_EXPANSION_ROM_APERTURE_SIZE ),
  .PF1_EXPANSION_ROM_ENABLE                             ( PF1_EXPANSION_ROM_ENABLE ),
  .PF1_INTERRUPT_LINE                                   ( PF1_INTERRUPT_LINE ),
  .PF1_INTERRUPT_PIN                                    ( PF1_INTERRUPT_PIN ),
  .PF1_MSIX_CAP_NEXTPTR                                 ( PF1_MSIX_CAP_NEXTPTR ),
  .PF1_MSIX_CAP_PBA_BIR                                 ( PF1_MSIX_CAP_PBA_BIR ),
  .PF1_MSIX_CAP_PBA_OFFSET                              ( PF1_MSIX_CAP_PBA_OFFSET ),
  .PF1_MSIX_CAP_TABLE_BIR                               ( PF1_MSIX_CAP_TABLE_BIR ),
  .PF1_MSIX_CAP_TABLE_OFFSET                            ( PF1_MSIX_CAP_TABLE_OFFSET ),
  .PF1_MSIX_CAP_TABLE_SIZE                              ( PF1_MSIX_CAP_TABLE_SIZE ),
  .PF1_MSI_CAP_MULTIMSGCAP                              ( PF1_MSI_CAP_MULTIMSGCAP ),
  .PF1_MSI_CAP_NEXTPTR                                  ( PF1_MSI_CAP_NEXTPTR ),
  .PF1_PB_CAP_NEXTPTR                                   ( PF1_PB_CAP_NEXTPTR ),
  .PF1_PB_CAP_SYSTEM_ALLOCATED                          ( PF1_PB_CAP_SYSTEM_ALLOCATED ),
  .PF1_PB_CAP_VER                                       ( PF1_PB_CAP_VER ),
  .PF1_PM_CAP_ID                                        ( PF1_PM_CAP_ID ),
  .PF1_PM_CAP_NEXTPTR                                   ( PF1_PM_CAP_NEXTPTR ),
  .PF1_PM_CAP_VER_ID                                    ( PF1_PM_CAP_VER_ID ),
  .PF1_RBAR_CAP_ENABLE                                  ( PF1_RBAR_CAP_ENABLE ),
  .PF1_RBAR_CAP_INDEX0                                  ( PF1_RBAR_CAP_INDEX0 ),
  .PF1_RBAR_CAP_INDEX1                                  ( PF1_RBAR_CAP_INDEX1 ),
  .PF1_RBAR_CAP_INDEX2                                  ( PF1_RBAR_CAP_INDEX2 ),
  .PF1_RBAR_CAP_NEXTPTR                                 ( PF1_RBAR_CAP_NEXTPTR ),
  .PF1_RBAR_CAP_SIZE0                                   ( PF1_RBAR_CAP_SIZE0 ),
  .PF1_RBAR_CAP_SIZE1                                   ( PF1_RBAR_CAP_SIZE1 ),
  .PF1_RBAR_CAP_SIZE2                                   ( PF1_RBAR_CAP_SIZE2 ),
  .PF1_RBAR_CAP_VER                                     ( PF1_RBAR_CAP_VER ),
  .PF1_RBAR_NUM                                         ( PF1_RBAR_NUM ),
  .PF1_REVISION_ID                                      ( PF1_REVISION_ID ),
  .PF1_SRIOV_BAR0_APERTURE_SIZE                         ( PF1_SRIOV_BAR0_APERTURE_SIZE ),
  .PF1_SRIOV_BAR0_CONTROL                               ( PF1_SRIOV_BAR0_CONTROL ),
  .PF1_SRIOV_BAR1_APERTURE_SIZE                         ( PF1_SRIOV_BAR1_APERTURE_SIZE ),
  .PF1_SRIOV_BAR1_CONTROL                               ( PF1_SRIOV_BAR1_CONTROL ),
  .PF1_SRIOV_BAR2_APERTURE_SIZE                         ( PF1_SRIOV_BAR2_APERTURE_SIZE ),
  .PF1_SRIOV_BAR2_CONTROL                               ( PF1_SRIOV_BAR2_CONTROL ),
  .PF1_SRIOV_BAR3_APERTURE_SIZE                         ( PF1_SRIOV_BAR3_APERTURE_SIZE ),
  .PF1_SRIOV_BAR3_CONTROL                               ( PF1_SRIOV_BAR3_CONTROL ),
  .PF1_SRIOV_BAR4_APERTURE_SIZE                         ( PF1_SRIOV_BAR4_APERTURE_SIZE ),
  .PF1_SRIOV_BAR4_CONTROL                               ( PF1_SRIOV_BAR4_CONTROL ),
  .PF1_SRIOV_BAR5_APERTURE_SIZE                         ( PF1_SRIOV_BAR5_APERTURE_SIZE ),
  .PF1_SRIOV_BAR5_CONTROL                               ( PF1_SRIOV_BAR5_CONTROL ),
  .PF1_SRIOV_CAP_INITIAL_VF                             ( PF1_SRIOV_CAP_INITIAL_VF ),
  .PF1_SRIOV_CAP_NEXTPTR                                ( PF1_SRIOV_CAP_NEXTPTR ),
  .PF1_SRIOV_CAP_TOTAL_VF                               ( PF1_SRIOV_CAP_TOTAL_VF ),
  .PF1_SRIOV_CAP_VER                                    ( PF1_SRIOV_CAP_VER ),
  .PF1_SRIOV_FIRST_VF_OFFSET                            ( PF1_SRIOV_FIRST_VF_OFFSET ),
  .PF1_SRIOV_FUNC_DEP_LINK                              ( PF1_SRIOV_FUNC_DEP_LINK ),
  .PF1_SRIOV_SUPPORTED_PAGE_SIZE                        ( PF1_SRIOV_SUPPORTED_PAGE_SIZE ),
  .PF1_SRIOV_VF_DEVICE_ID                               ( PF1_SRIOV_VF_DEVICE_ID ),
  .PF1_SUBSYSTEM_ID                                     ( PF1_SUBSYSTEM_ID ),
  .PF1_TPHR_CAP_DEV_SPECIFIC_MODE                       ( PF1_TPHR_CAP_DEV_SPECIFIC_MODE ),
  .PF1_TPHR_CAP_ENABLE                                  ( PF1_TPHR_CAP_ENABLE ),
  .PF1_TPHR_CAP_INT_VEC_MODE                            ( PF1_TPHR_CAP_INT_VEC_MODE ),
  .PF1_TPHR_CAP_NEXTPTR                                 ( PF1_TPHR_CAP_NEXTPTR ),
  .PF1_TPHR_CAP_ST_MODE_SEL                             ( PF1_TPHR_CAP_ST_MODE_SEL ),
  .PF1_TPHR_CAP_ST_TABLE_LOC                            ( PF1_TPHR_CAP_ST_TABLE_LOC ),
  .PF1_TPHR_CAP_ST_TABLE_SIZE                           ( PF1_TPHR_CAP_ST_TABLE_SIZE ),
  .PF1_TPHR_CAP_VER                                     ( PF1_TPHR_CAP_VER ),
  .PL_DISABLE_EI_INFER_IN_L0                            ( PL_DISABLE_EI_INFER_IN_L0 ),
  .PL_DISABLE_GEN3_DC_BALANCE                           ( PL_DISABLE_GEN3_DC_BALANCE ),
  .PL_DISABLE_SCRAMBLING                                ( PL_DISABLE_SCRAMBLING ),
  .PL_DISABLE_UPCONFIG_CAPABLE                          ( PL_DISABLE_UPCONFIG_CAPABLE ),
  .PL_EQ_ADAPT_DISABLE_COEFF_CHECK                      ( PL_EQ_ADAPT_DISABLE_COEFF_CHECK ),
  .PL_EQ_ADAPT_DISABLE_PRESET_CHECK                     ( PL_EQ_ADAPT_DISABLE_PRESET_CHECK ),
  .PL_EQ_ADAPT_ITER_COUNT                               ( PL_EQ_ADAPT_ITER_COUNT ),
  .PL_EQ_ADAPT_REJECT_RETRY_COUNT                       ( PL_EQ_ADAPT_REJECT_RETRY_COUNT ),
  .PL_EQ_BYPASS_PHASE23                                 ( PL_EQ_BYPASS_PHASE23 ),
  .PL_EQ_SHORT_ADAPT_PHASE                              ( PL_EQ_SHORT_ADAPT_PHASE ),
  .PL_LANE0_EQ_CONTROL                                  ( PL_LANE0_EQ_CONTROL ),
  .PL_LANE1_EQ_CONTROL                                  ( PL_LANE1_EQ_CONTROL ),
  .PL_LANE2_EQ_CONTROL                                  ( PL_LANE2_EQ_CONTROL ),
  .PL_LANE3_EQ_CONTROL                                  ( PL_LANE3_EQ_CONTROL ),
  .PL_LANE4_EQ_CONTROL                                  ( PL_LANE4_EQ_CONTROL ),
  .PL_LANE5_EQ_CONTROL                                  ( PL_LANE5_EQ_CONTROL ),
  .PL_LANE6_EQ_CONTROL                                  ( PL_LANE6_EQ_CONTROL ),
  .PL_LANE7_EQ_CONTROL                                  ( PL_LANE7_EQ_CONTROL ),
  .PL_LINK_CAP_MAX_LINK_SPEED                           ( PL_LINK_CAP_MAX_LINK_SPEED ),
  .PL_LINK_CAP_MAX_LINK_WIDTH                           ( PL_LINK_CAP_MAX_LINK_WIDTH ),
  .PL_N_FTS_COMCLK_GEN1                                 ( PL_N_FTS_COMCLK_GEN1 ),
  .PL_N_FTS_COMCLK_GEN2                                 ( PL_N_FTS_COMCLK_GEN2 ),
  .PL_N_FTS_COMCLK_GEN3                                 ( PL_N_FTS_COMCLK_GEN3 ),
  .PL_N_FTS_GEN1                                        ( PL_N_FTS_GEN1 ),
  .PL_N_FTS_GEN2                                        ( PL_N_FTS_GEN2 ),
  .PL_N_FTS_GEN3                                        ( PL_N_FTS_GEN3 ),
  // synthesis translate_off
  .PL_SIM_FAST_LINK_TRAINING                            ( ENABLE_FAST_SIM_TRAINING ),
  // synthesis translate_on
  .PL_UPSTREAM_FACING                                   ( PL_UPSTREAM_FACING ),
  .PM_ASPML0S_TIMEOUT                                   ( PM_ASPML0S_TIMEOUT ),
  .PM_ASPML1_ENTRY_DELAY                                ( PM_ASPML1_ENTRY_DELAY ),
  .PM_ENABLE_SLOT_POWER_CAPTURE                         ( PM_ENABLE_SLOT_POWER_CAPTURE ),
  .PM_L1_REENTRY_DELAY                                  ( PM_L1_REENTRY_DELAY ),
  .PM_PME_SERVICE_TIMEOUT_DELAY                         ( PM_PME_SERVICE_TIMEOUT_DELAY ),
  .PM_PME_TURNOFF_ACK_DELAY                             ( PM_PME_TURNOFF_ACK_DELAY ),
  .SIM_VERSION                                          ( SIM_VERSION ),
  .SPARE_BIT0                                           ( SPARE_BIT0 ),
  .SPARE_BIT1                                           ( SPARE_BIT1 ),
  .SPARE_BIT2                                           ( SPARE_BIT2 ),
  .SPARE_BIT3                                           ( SPARE_BIT3 ),
  .SPARE_BIT4                                           ( SPARE_BIT4 ),
  .SPARE_BIT5                                           ( SPARE_BIT5 ),
  .SPARE_BIT6                                           ( SPARE_BIT6 ),
  .SPARE_BIT7                                           ( SPARE_BIT7 ),
  .SPARE_BIT8                                           ( SPARE_BIT8 ),
  .SPARE_BYTE0                                          ( SPARE_BYTE0 ),
  .SPARE_BYTE1                                          ( SPARE_BYTE1 ),
  .SPARE_BYTE2                                          ( SPARE_BYTE2 ),
  .SPARE_BYTE3                                          ( SPARE_BYTE3 ),
  .SPARE_WORD0                                          ( SPARE_WORD0 ),
  .SPARE_WORD1                                          ( SPARE_WORD1 ),
  .SPARE_WORD2                                          ( SPARE_WORD2 ),
  .SPARE_WORD3                                          ( SPARE_WORD3 ),
  .SRIOV_CAP_ENABLE                                     ( SRIOV_CAP_ENABLE ),
  .TL_COMPL_TIMEOUT_REG0                                ( TL_COMPL_TIMEOUT_REG0 ),
  .TL_COMPL_TIMEOUT_REG1                                ( TL_COMPL_TIMEOUT_REG1 ),
  .TL_CREDITS_CD                                        ( TL_CREDITS_CD ),
  .TL_CREDITS_CH                                        ( TL_CREDITS_CH ),
  .TL_CREDITS_NPD                                       ( TL_CREDITS_NPD ),
  .TL_CREDITS_NPH                                       ( TL_CREDITS_NPH ),
  .TL_CREDITS_PD                                        ( TL_CREDITS_PD ),
  .TL_CREDITS_PH                                        ( TL_CREDITS_PH ),
  .TL_ENABLE_MESSAGE_RID_CHECK_ENABLE                   ( TL_ENABLE_MESSAGE_RID_CHECK_ENABLE ),
  .TL_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE              ( TL_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE ),
  .TL_LEGACY_CFG_EXTEND_INTERFACE_ENABLE                ( TL_LEGACY_CFG_EXTEND_INTERFACE_ENABLE ),
  .TL_LEGACY_MODE_ENABLE                                ( TL_LEGACY_MODE_ENABLE ),
  .TL_PF_ENABLE_REG                                     ( TL_PF_ENABLE_REG ),
  .TL_TAG_MGMT_ENABLE                                   ( TL_TAG_MGMT_ENABLE ),
  .VF0_CAPABILITY_POINTER                               ( VF0_CAPABILITY_POINTER ),
  .VF0_MSIX_CAP_PBA_BIR                                 ( VF0_MSIX_CAP_PBA_BIR ),
  .VF0_MSIX_CAP_PBA_OFFSET                              ( VF0_MSIX_CAP_PBA_OFFSET ),
  .VF0_MSIX_CAP_TABLE_BIR                               ( VF0_MSIX_CAP_TABLE_BIR ),
  .VF0_MSIX_CAP_TABLE_OFFSET                            ( VF0_MSIX_CAP_TABLE_OFFSET ),
  .VF0_MSIX_CAP_TABLE_SIZE                              ( VF0_MSIX_CAP_TABLE_SIZE ),
  .VF0_MSI_CAP_MULTIMSGCAP                              ( VF0_MSI_CAP_MULTIMSGCAP ),
  .VF0_PM_CAP_ID                                        ( VF0_PM_CAP_ID ),
  .VF0_PM_CAP_NEXTPTR                                   ( VF0_PM_CAP_NEXTPTR ),
  .VF0_PM_CAP_VER_ID                                    ( VF0_PM_CAP_VER_ID ),
  .VF1_MSIX_CAP_PBA_BIR                                 ( VF1_MSIX_CAP_PBA_BIR ),
  .VF1_MSIX_CAP_PBA_OFFSET                              ( VF1_MSIX_CAP_PBA_OFFSET ),
  .VF1_MSIX_CAP_TABLE_BIR                               ( VF1_MSIX_CAP_TABLE_BIR ),
  .VF1_MSIX_CAP_TABLE_OFFSET                            ( VF1_MSIX_CAP_TABLE_OFFSET ),
  .VF1_MSIX_CAP_TABLE_SIZE                              ( VF1_MSIX_CAP_TABLE_SIZE ),
  .VF1_MSI_CAP_MULTIMSGCAP                              ( VF1_MSI_CAP_MULTIMSGCAP ),
  .VF1_PM_CAP_ID                                        ( VF1_PM_CAP_ID ),
  .VF1_PM_CAP_NEXTPTR                                   ( VF1_PM_CAP_NEXTPTR ),
  .VF1_PM_CAP_VER_ID                                    ( VF1_PM_CAP_VER_ID ),
  .VF2_MSIX_CAP_PBA_BIR                                 ( VF2_MSIX_CAP_PBA_BIR ),
  .VF2_MSIX_CAP_PBA_OFFSET                              ( VF2_MSIX_CAP_PBA_OFFSET ),
  .VF2_MSIX_CAP_TABLE_BIR                               ( VF2_MSIX_CAP_TABLE_BIR ),
  .VF2_MSIX_CAP_TABLE_OFFSET                            ( VF2_MSIX_CAP_TABLE_OFFSET ),
  .VF2_MSIX_CAP_TABLE_SIZE                              ( VF2_MSIX_CAP_TABLE_SIZE ),
  .VF2_MSI_CAP_MULTIMSGCAP                              ( VF2_MSI_CAP_MULTIMSGCAP ),
  .VF2_PM_CAP_ID                                        ( VF2_PM_CAP_ID ),
  .VF2_PM_CAP_NEXTPTR                                   ( VF2_PM_CAP_NEXTPTR ),
  .VF2_PM_CAP_VER_ID                                    ( VF2_PM_CAP_VER_ID ),
  .VF3_MSIX_CAP_PBA_BIR                                 ( VF3_MSIX_CAP_PBA_BIR ),
  .VF3_MSIX_CAP_PBA_OFFSET                              ( VF3_MSIX_CAP_PBA_OFFSET ),
  .VF3_MSIX_CAP_TABLE_BIR                               ( VF3_MSIX_CAP_TABLE_BIR ),
  .VF3_MSIX_CAP_TABLE_OFFSET                            ( VF3_MSIX_CAP_TABLE_OFFSET ),
  .VF3_MSIX_CAP_TABLE_SIZE                              ( VF3_MSIX_CAP_TABLE_SIZE ),
  .VF3_MSI_CAP_MULTIMSGCAP                              ( VF3_MSI_CAP_MULTIMSGCAP ),
  .VF3_PM_CAP_ID                                        ( VF3_PM_CAP_ID ),
  .VF3_PM_CAP_NEXTPTR                                   ( VF3_PM_CAP_NEXTPTR ),
  .VF3_PM_CAP_VER_ID                                    ( VF3_PM_CAP_VER_ID ),
  .VF4_MSIX_CAP_PBA_BIR                                 ( VF4_MSIX_CAP_PBA_BIR ),
  .VF4_MSIX_CAP_PBA_OFFSET                              ( VF4_MSIX_CAP_PBA_OFFSET ),
  .VF4_MSIX_CAP_TABLE_BIR                               ( VF4_MSIX_CAP_TABLE_BIR ),
  .VF4_MSIX_CAP_TABLE_OFFSET                            ( VF4_MSIX_CAP_TABLE_OFFSET ),
  .VF4_MSIX_CAP_TABLE_SIZE                              ( VF4_MSIX_CAP_TABLE_SIZE ),
  .VF4_MSI_CAP_MULTIMSGCAP                              ( VF4_MSI_CAP_MULTIMSGCAP ),
  .VF4_PM_CAP_ID                                        ( VF4_PM_CAP_ID ),
  .VF4_PM_CAP_NEXTPTR                                   ( VF4_PM_CAP_NEXTPTR ),
  .VF4_PM_CAP_VER_ID                                    ( VF4_PM_CAP_VER_ID ),
  .VF5_MSIX_CAP_PBA_BIR                                 ( VF5_MSIX_CAP_PBA_BIR ),
  .VF5_MSIX_CAP_PBA_OFFSET                              ( VF5_MSIX_CAP_PBA_OFFSET ),
  .VF5_MSIX_CAP_TABLE_BIR                               ( VF5_MSIX_CAP_TABLE_BIR ),
  .VF5_MSIX_CAP_TABLE_OFFSET                            ( VF5_MSIX_CAP_TABLE_OFFSET ),
  .VF5_MSIX_CAP_TABLE_SIZE                              ( VF5_MSIX_CAP_TABLE_SIZE ),
  .VF5_MSI_CAP_MULTIMSGCAP                              ( VF5_MSI_CAP_MULTIMSGCAP ),
  .VF5_PM_CAP_ID                                        ( VF5_PM_CAP_ID ),
  .VF5_PM_CAP_NEXTPTR                                   ( VF5_PM_CAP_NEXTPTR ),
  .VF5_PM_CAP_VER_ID                                    ( VF5_PM_CAP_VER_ID ),
  .IMPL_TARGET                                          ( IMPL_TARGET ),
  .NO_DECODE_LOGIC                                      ( NO_DECODE_LOGIC ),
  .INTERFACE_SPEED                                      ( INTERFACE_SPEED ),
  .COMPLETION_SPACE                                     ( COMPLETION_SPACE )
) pcie_top_i (
  .core_clk                                             ( core_clk ),                     // I

  .rec_clk                                              ( rec_clk ),                      // I
  .user_clk                                             ( user_clk ),                     // I

  .pipe_clk                                             ( pipe_clk ),                     // I

  .phy_rdy                                              ( phy_rdy ),                      // I
  .mmcm_lock                                            ( mmcm_lock ),                    // I

  .s_axis_rq_tlast                                      ( s_axis_rq_tlast_wire ),         // I
  .s_axis_rq_tdata                                      ( s_axis_rq_tdata_wire ),         // I
  .s_axis_rq_tuser                                      ( s_axis_rq_tuser_wire ),         // I
  .s_axis_rq_tkeep                                      ( s_axis_rq_tkeep_wire ),         // I
  .s_axis_rq_tready                                     ( s_axis_rq_tready_wire ),        // O
  .s_axis_rq_tvalid                                     ( s_axis_rq_tvalid_wire ),        // I

  .m_axis_rc_tdata                                      ( m_axis_rc_tdata_wire ),         // O
  .m_axis_rc_tuser                                      ( m_axis_rc_tuser_wire ),         // O
  .m_axis_rc_tlast                                      ( m_axis_rc_tlast_wire ),         // O
  .m_axis_rc_tkeep                                      ( m_axis_rc_tkeep_wire ),         // O
  .m_axis_rc_tvalid                                     ( m_axis_rc_tvalid_wire ),        // O
  .m_axis_rc_tready                                     ( m_axis_rc_tready_wire ),        // I

  .m_axis_cq_tdata                                      ( m_axis_cq_tdata_wire ),         // O
  .m_axis_cq_tuser                                      ( m_axis_cq_tuser_wire ),         // O
  .m_axis_cq_tlast                                      ( m_axis_cq_tlast_wire ),         // O
  .m_axis_cq_tkeep                                      ( m_axis_cq_tkeep_wire ),         // O
  .m_axis_cq_tvalid                                     ( m_axis_cq_tvalid_wire ),        // O
  .m_axis_cq_tready                                     ( m_axis_cq_tready_wire ),        // I

  .s_axis_cc_tdata                                      ( s_axis_cc_tdata_wire ),         // I
  .s_axis_cc_tuser                                      ( s_axis_cc_tuser_wire ),         // I
  .s_axis_cc_tlast                                      ( s_axis_cc_tlast_wire ),         // I
  .s_axis_cc_tkeep                                      ( s_axis_cc_tkeep_wire ),         // I
  .s_axis_cc_tvalid                                     ( s_axis_cc_tvalid_wire ),        // I
  .s_axis_cc_tready                                     ( s_axis_cc_tready_wire ),        // O

  .pcie_rq_seq_num                                      ( pcie_rq_seq_num_wire ),         // O
  .pcie_rq_seq_num_vld                                  ( pcie_rq_seq_num_vld_wire ),     // O
  .pcie_rq_tag                                          ( pcie_rq_tag_wire ),             // O
  .pcie_rq_tag_vld                                      ( pcie_rq_tag_vld_wire ),         // O

  .pcie_tfc_nph_av                                      ( pcie_tfc_nph_av_wire ),         // O
  .pcie_tfc_npd_av                                      ( pcie_tfc_npd_av_wire ),         // O
  .pcie_cq_np_req                                       ( pcie_cq_np_req_wire ),          // I
  .pcie_cq_np_req_count                                 ( pcie_cq_np_req_count_wire ),    // O

  .cfg_mgmt_addr                                        ( cfg_mgmt_addr ),                // I
  .cfg_mgmt_write                                       ( cfg_mgmt_write_wire ),          // I
  .cfg_mgmt_write_data                                  ( cfg_mgmt_write_data ),          // I
  .cfg_mgmt_byte_enable                                 ( cfg_mgmt_byte_enable ),         // I
  .cfg_mgmt_read                                        ( cfg_mgmt_read_wire ),           // I
  .cfg_mgmt_read_data                                   ( cfg_mgmt_read_data ),           // O
  .cfg_mgmt_read_write_done                             ( cfg_mgmt_read_write_done ),     // O
  .cfg_mgmt_type1_cfg_reg_access                        ( cfg_mgmt_type1_cfg_reg_access ),// I

  .cfg_phy_link_down                                    ( cfg_phy_link_down_wire ),       // O
  .cfg_phy_link_status                                  ( cfg_phy_link_status_wire ),     // O
  .cfg_negotiated_width                                 ( cfg_negotiated_width ),         // O
  .cfg_current_speed                                    ( cfg_current_speed ),            // O
  .cfg_max_payload                                      ( cfg_max_payload ),              // O
  .cfg_max_read_req                                     ( cfg_max_read_req ),             // O
  .cfg_function_status                                  ( cfg_function_status ),          // O
  .cfg_function_power_state                             ( cfg_function_power_state ),     // O
  .cfg_vf_status                                        ( cfg_vf_status ),                // O
  .cfg_vf_power_state                                   ( cfg_vf_power_state ),           // O
  .cfg_link_power_state                                 ( cfg_link_power_state ),         // O

  .cfg_err_cor_out                                      ( cfg_err_cor_out ),              // O
  .cfg_err_nonfatal_out                                 ( cfg_err_nonfatal_out ),         // O
  .cfg_err_fatal_out                                    ( cfg_err_fatal_out ),            // O
  .cfg_local_error                                      ( cfg_local_error ),              // O
  .cfg_ltr_enable                                       ( cfg_ltr_enable ),               // O
  .cfg_ltssm_state                                      ( cfg_ltssm_state_wire ),         // O
  .cfg_rcb_status                                       ( cfg_rcb_status ),               // O
  .cfg_dpa_substate_change                              ( cfg_dpa_substate_change ),      // O
  .cfg_obff_enable                                      ( cfg_obff_enable ),              // O
  .cfg_pl_status_change                                 ( cfg_pl_status_change ),         // O

  .cfg_tph_requester_enable                             ( cfg_tph_requester_enable ),     // O
  .cfg_tph_st_mode                                      ( cfg_tph_st_mode ),              // O
  .cfg_vf_tph_requester_enable                          ( cfg_vf_tph_requester_enable ),  // O
  .cfg_vf_tph_st_mode                                   ( cfg_vf_tph_st_mode ),           // O

  .cfg_msg_received                                     ( cfg_msg_received_wire ),        // O
  .cfg_msg_received_data                                ( cfg_msg_received_data_wire ),   // O
  .cfg_msg_received_type                                ( cfg_msg_received_type_wire ),   // O

  .cfg_msg_transmit                                     ( cfg_msg_transmit_wire ),        // I
  .cfg_msg_transmit_type                                ( cfg_msg_transmit_type_wire ),   // I
  .cfg_msg_transmit_data                                ( cfg_msg_transmit_data_wire ),   // I
  .cfg_msg_transmit_done                                ( cfg_msg_transmit_done_wire ),   // O

  .cfg_fc_ph                                            ( cfg_fc_ph_wire ),               // O
  .cfg_fc_pd                                            ( cfg_fc_pd_wire ),               // O
  .cfg_fc_nph                                           ( cfg_fc_nph_wire ),              // O
  .cfg_fc_npd                                           ( cfg_fc_npd_wire ),              // O
  .cfg_fc_cplh                                          ( cfg_fc_cplh_wire ),             // O
  .cfg_fc_cpld                                          ( cfg_fc_cpld_wire ),             // O
  .cfg_fc_sel                                           ( cfg_fc_sel_wire ),              // I

  .cfg_per_func_status_control                          ( cfg_per_func_status_control_wire ),     // I
  .cfg_per_func_status_data                             ( cfg_per_func_status_data ),             // O
  .cfg_per_function_number                              ( cfg_per_function_number ),              // I
  .cfg_per_function_output_request                      ( cfg_per_function_output_request_wire ), // I
  .cfg_per_function_update_done                         ( cfg_per_function_update_done ),         // O

  .cfg_dsn                                              ( cfg_dsn_wire ),                         // I
  .cfg_power_state_change_ack                           ( cfg_power_state_change_ack_wire ),      // I
  .cfg_power_state_change_interrupt                     ( cfg_power_state_change_interrupt ),     // O
  .cfg_err_cor_in                                       ( cfg_err_cor_in_wire ),                  // I
  .cfg_err_uncor_in                                     ( cfg_err_uncor_in_wire ),                // I

  .cfg_flr_in_process                                   ( cfg_flr_in_process ),                   // O
  .cfg_flr_done                                         ( cfg_flr_done_wire ),                    // I
  .cfg_vf_flr_in_process                                ( cfg_vf_flr_in_process ),                // O
  .cfg_vf_flr_done                                      ( cfg_vf_flr_done_wire ),                 // I

  .cfg_link_training_enable                             ( cfg_link_training_enable_wire ),        // I

  .cfg_interrupt_int                                    ( cfg_interrupt_int_wire ),               // I
  .cfg_interrupt_pending                                ( cfg_interrupt_pending_wire ),           // I
  .cfg_interrupt_sent                                   ( cfg_interrupt_sent ),                   // O

  .cfg_interrupt_msi_enable                             ( cfg_interrupt_msi_enable ),             // O
  .cfg_interrupt_msi_vf_enable                          ( cfg_interrupt_msi_vf_enable ),          // O
  .cfg_interrupt_msi_mmenable                           ( cfg_interrupt_msi_mmenable ),           // O
  .cfg_interrupt_msi_mask_update                        ( cfg_interrupt_msi_mask_update ),        // O
  .cfg_interrupt_msi_data                               ( cfg_interrupt_msi_data ),               // O
  .cfg_interrupt_msi_select                             ( cfg_interrupt_msi_select_wire ),        // I
  .cfg_interrupt_msi_int                                ( cfg_interrupt_msi_int_wire ),           // I
  .cfg_interrupt_msi_pending_status                     ( cfg_interrupt_msi_pending_status_wire ),// I
  .cfg_interrupt_msi_sent                               ( cfg_interrupt_msi_sent ),               // O
  .cfg_interrupt_msi_fail                               ( cfg_interrupt_msi_fail ),               // O

  .cfg_interrupt_msix_enable                            ( cfg_interrupt_msix_enable ),            // O
  .cfg_interrupt_msix_mask                              ( cfg_interrupt_msix_mask ),              // O
  .cfg_interrupt_msix_vf_enable                         ( cfg_interrupt_msix_vf_enable ),         // O
  .cfg_interrupt_msix_vf_mask                           ( cfg_interrupt_msix_vf_mask ),           // O
  .cfg_interrupt_msix_data                              ( cfg_interrupt_msix_data ),              // I
  .cfg_interrupt_msix_address                           ( cfg_interrupt_msix_address ),           // I
  .cfg_interrupt_msix_int                               ( cfg_interrupt_msix_int_wire ),          // I
  .cfg_interrupt_msix_sent                              ( cfg_interrupt_msix_sent ),              // O
  .cfg_interrupt_msix_fail                              ( cfg_interrupt_msix_fail ),              // O

  .cfg_interrupt_msi_attr                               ( cfg_interrupt_msi_attr ),               // I
  .cfg_interrupt_msi_tph_present                        ( cfg_interrupt_msi_tph_present ),        // I
  .cfg_interrupt_msi_tph_type                           ( cfg_interrupt_msi_tph_type ),           // I
  .cfg_interrupt_msi_tph_st_tag                         ( cfg_interrupt_msi_tph_st_tag ),         // I
  .cfg_interrupt_msi_function_number                    ( cfg_interrupt_msi_function_number ),    // I

  .cfg_ext_read_received                                ( cfg_ext_read_received ),                // O
  .cfg_ext_write_received                               ( cfg_ext_write_received ),               // O
  .cfg_ext_register_number                              ( cfg_ext_register_number ),              // O
  .cfg_ext_function_number                              ( cfg_ext_function_number ),              // O
  .cfg_ext_write_data                                   ( cfg_ext_write_data ),                   // O
  .cfg_ext_write_byte_enable                            ( cfg_ext_write_byte_enable ),            // O
  .cfg_ext_read_data                                    ( cfg_ext_read_data ),                    // I
  .cfg_ext_read_data_valid                              ( cfg_ext_read_data_valid_wire ),         // I

  .cfg_dev_id                                           ( cfg_dev_id ),                           // I
  .cfg_vend_id                                          ( cfg_vend_id ),                          // I
  .cfg_rev_id                                           ( cfg_rev_id ),                           // I
  .cfg_subsys_id                                        ( cfg_subsys_id ),                        // I
  .cfg_subsys_vend_id                                   ( cfg_subsys_vend_id ),                   // I

  .cfg_hot_reset_out                                    ( cfg_hot_reset_out_wire ),               // O
  .cfg_config_space_enable                              ( cfg_config_space_enable_wire ),         // I
  .cfg_req_pm_transition_l23_ready                      ( cfg_req_pm_transition_l23_ready_wire ), // I

  .cfg_hot_reset_in                                     ( cfg_hot_reset_in_wire ),                // I

  .cfg_ds_port_number                                   ( cfg_ds_port_number_wire ),              // I
  .cfg_ds_bus_number                                    ( cfg_ds_bus_number_wire ),               // I
  .cfg_ds_device_number                                 ( cfg_ds_device_number_wire ),            // I
  .cfg_ds_function_number                               ( cfg_ds_function_number_wire ),          // I

  .user_tph_stt_address                                 ( user_tph_stt_address_wire ),            // I
  .user_tph_function_num                                ( user_tph_function_num_wire ),           // I
  .user_tph_stt_read_data                               ( user_tph_stt_read_data ),               // O
  .user_tph_stt_read_data_valid                         ( user_tph_stt_read_data_valid ),         // O
  .user_tph_stt_read_enable                             ( user_tph_stt_read_enable_wire ),        // I

  .drp_rdy                                              ( drp_rdy_wire ),                         // O
  .drp_do                                               ( drp_do_wire ),                          // O
  .drp_clk                                              ( drp_clk_wire ),                         // I
  .drp_en                                               ( drp_en_wire ),                          // I
  .drp_we                                               ( drp_we_wire ),                          // I
  .drp_addr                                             ( drp_addr_wire ),                        // I
  .drp_di                                               ( drp_di_wire ),                          // I

  .pipe_tx_reset_gt                                     ( pipe_tx_reset ),
  .pipe_rx0_polarity_gt                                 ( pipe_rx0_polarity ),
  .pipe_rx1_polarity_gt                                 ( pipe_rx1_polarity ),
  .pipe_rx2_polarity_gt                                 ( pipe_rx2_polarity ),
  .pipe_rx3_polarity_gt                                 ( pipe_rx3_polarity ),
  .pipe_rx4_polarity_gt                                 ( pipe_rx4_polarity ),
  .pipe_rx5_polarity_gt                                 ( pipe_rx5_polarity ),
  .pipe_rx6_polarity_gt                                 ( pipe_rx6_polarity ),
  .pipe_rx7_polarity_gt                                 ( pipe_rx7_polarity ),

  .pipe_tx0_compliance_gt                               ( pipe_tx0_compliance ),
  .pipe_tx1_compliance_gt                               ( pipe_tx1_compliance ),
  .pipe_tx2_compliance_gt                               ( pipe_tx2_compliance ),
  .pipe_tx3_compliance_gt                               ( pipe_tx3_compliance ),
  .pipe_tx4_compliance_gt                               ( pipe_tx4_compliance ),
  .pipe_tx5_compliance_gt                               ( pipe_tx5_compliance ),
  .pipe_tx6_compliance_gt                               ( pipe_tx6_compliance ),
  .pipe_tx7_compliance_gt                               ( pipe_tx7_compliance ),

  .pipe_tx0_data_valid_gt                               ( ),
  .pipe_tx1_data_valid_gt                               ( ),
  .pipe_tx2_data_valid_gt                               ( ),
  .pipe_tx3_data_valid_gt                               ( ),
  .pipe_tx4_data_valid_gt                               ( ),
  .pipe_tx5_data_valid_gt                               ( ),
  .pipe_tx6_data_valid_gt                               ( ),
  .pipe_tx7_data_valid_gt                               ( ),

  .pipe_tx0_elec_idle_gt                                ( pipe_tx0_elec_idle ),
  .pipe_tx1_elec_idle_gt                                ( pipe_tx1_elec_idle ),
  .pipe_tx2_elec_idle_gt                                ( pipe_tx2_elec_idle ),
  .pipe_tx3_elec_idle_gt                                ( pipe_tx3_elec_idle ),
  .pipe_tx4_elec_idle_gt                                ( pipe_tx4_elec_idle ),
  .pipe_tx5_elec_idle_gt                                ( pipe_tx5_elec_idle ),
  .pipe_tx6_elec_idle_gt                                ( pipe_tx6_elec_idle ),
  .pipe_tx7_elec_idle_gt                                ( pipe_tx7_elec_idle ),

  .pipe_tx0_start_block_gt                              ( ),
  .pipe_tx1_start_block_gt                              ( ),
  .pipe_tx2_start_block_gt                              ( ),
  .pipe_tx3_start_block_gt                              ( ),
  .pipe_tx4_start_block_gt                              ( ),
  .pipe_tx5_start_block_gt                              ( ),
  .pipe_tx6_start_block_gt                              ( ),
  .pipe_tx7_start_block_gt                              ( ),

  .pipe_tx_deemph_gt                                    ( pipe_tx_deemph ),
  .pipe_tx_rcvr_det_gt                                  ( pipe_tx_rcvr_det ),
  .pipe_tx_rate_gt                                      ( pipe_tx_rate ),
  .pipe_tx_margin_gt                                    ( pipe_tx_margin ),
  .pipe_tx_swing_gt                                     ( pipe_tx_swing ),
  .pipe_tx_eqfs_gt                                      ( pipe_tx_eqfs ),
  .pipe_tx_eqlf_gt                                      ( pipe_tx_eqlf ),

  .pipe_rx0_eqcontrol_gt                                ( pipe_rx0_eqcontrol ),
  .pipe_rx1_eqcontrol_gt                                ( pipe_rx1_eqcontrol ),
  .pipe_rx2_eqcontrol_gt                                ( pipe_rx2_eqcontrol ),
  .pipe_rx3_eqcontrol_gt                                ( pipe_rx3_eqcontrol ),
  .pipe_rx4_eqcontrol_gt                                ( pipe_rx4_eqcontrol ),
  .pipe_rx5_eqcontrol_gt                                ( pipe_rx5_eqcontrol ),
  .pipe_rx6_eqcontrol_gt                                ( pipe_rx6_eqcontrol ),
  .pipe_rx7_eqcontrol_gt                                ( pipe_rx7_eqcontrol ),

  .pipe_tx0_char_is_k_gt                                ( pipe_tx0_char_is_k ),
  .pipe_tx1_char_is_k_gt                                ( pipe_tx1_char_is_k ),
  .pipe_tx2_char_is_k_gt                                ( pipe_tx2_char_is_k ),
  .pipe_tx3_char_is_k_gt                                ( pipe_tx3_char_is_k ),
  .pipe_tx4_char_is_k_gt                                ( pipe_tx4_char_is_k ),
  .pipe_tx5_char_is_k_gt                                ( pipe_tx5_char_is_k ),
  .pipe_tx6_char_is_k_gt                                ( pipe_tx6_char_is_k ),
  .pipe_tx7_char_is_k_gt                                ( pipe_tx7_char_is_k ),

  .pipe_tx0_eqcontrol_gt                                ( pipe_tx0_eqcontrol ),
  .pipe_tx1_eqcontrol_gt                                ( pipe_tx1_eqcontrol ),
  .pipe_tx2_eqcontrol_gt                                ( pipe_tx2_eqcontrol ),
  .pipe_tx3_eqcontrol_gt                                ( pipe_tx3_eqcontrol ),
  .pipe_tx4_eqcontrol_gt                                ( pipe_tx4_eqcontrol ),
  .pipe_tx5_eqcontrol_gt                                ( pipe_tx5_eqcontrol ),
  .pipe_tx6_eqcontrol_gt                                ( pipe_tx6_eqcontrol ),
  .pipe_tx7_eqcontrol_gt                                ( pipe_tx7_eqcontrol ),

  .pipe_tx0_powerdown_gt                                ( pipe_tx0_powerdown ),
  .pipe_tx1_powerdown_gt                                ( pipe_tx1_powerdown ),
  .pipe_tx2_powerdown_gt                                ( pipe_tx2_powerdown ),
  .pipe_tx3_powerdown_gt                                ( pipe_tx3_powerdown ),
  .pipe_tx4_powerdown_gt                                ( pipe_tx4_powerdown ),
  .pipe_tx5_powerdown_gt                                ( pipe_tx5_powerdown ),
  .pipe_tx6_powerdown_gt                                ( pipe_tx6_powerdown ),
  .pipe_tx7_powerdown_gt                                ( pipe_tx7_powerdown ),

  .pipe_tx0_syncheader_gt                               ( ),
  .pipe_tx1_syncheader_gt                               ( ),
  .pipe_tx2_syncheader_gt                               ( ),
  .pipe_tx3_syncheader_gt                               ( ),
  .pipe_tx4_syncheader_gt                               ( ),
  .pipe_tx5_syncheader_gt                               ( ),
  .pipe_tx6_syncheader_gt                               ( ),
  .pipe_tx7_syncheader_gt                               ( ),

  .pipe_rx0_eqpreset_gt                                 ( pipe_rx0_eqpreset ),
  .pipe_rx1_eqpreset_gt                                 ( pipe_rx1_eqpreset ),
  .pipe_rx2_eqpreset_gt                                 ( pipe_rx2_eqpreset ),
  .pipe_rx3_eqpreset_gt                                 ( pipe_rx3_eqpreset ),
  .pipe_rx4_eqpreset_gt                                 ( pipe_rx4_eqpreset ),
  .pipe_rx5_eqpreset_gt                                 ( pipe_rx5_eqpreset ),
  .pipe_rx6_eqpreset_gt                                 ( pipe_rx6_eqpreset ),
  .pipe_rx7_eqpreset_gt                                 ( pipe_rx7_eqpreset ),

  .pipe_tx0_data_gt                                     ( pipe_tx0_data ),
  .pipe_tx1_data_gt                                     ( pipe_tx1_data ),
  .pipe_tx2_data_gt                                     ( pipe_tx2_data ),
  .pipe_tx3_data_gt                                     ( pipe_tx3_data ),
  .pipe_tx4_data_gt                                     ( pipe_tx4_data ),
  .pipe_tx5_data_gt                                     ( pipe_tx5_data ),
  .pipe_tx6_data_gt                                     ( pipe_tx6_data ),
  .pipe_tx7_data_gt                                     ( pipe_tx7_data ),

  .pipe_rx0_eqlp_txpreset_gt                            ( pipe_rx0_eq_txpreset ),
  .pipe_rx1_eqlp_txpreset_gt                            ( pipe_rx1_eq_txpreset ),
  .pipe_rx2_eqlp_txpreset_gt                            ( pipe_rx2_eq_txpreset ),
  .pipe_rx3_eqlp_txpreset_gt                            ( pipe_rx3_eq_txpreset ),
  .pipe_rx4_eqlp_txpreset_gt                            ( pipe_rx4_eq_txpreset ),
  .pipe_rx5_eqlp_txpreset_gt                            ( pipe_rx5_eq_txpreset ),
  .pipe_rx6_eqlp_txpreset_gt                            ( pipe_rx6_eq_txpreset ),
  .pipe_rx7_eqlp_txpreset_gt                            ( pipe_rx7_eq_txpreset ),

  .pipe_tx0_eqpreset_gt                                 ( pipe_tx0_eqpreset ),
  .pipe_tx1_eqpreset_gt                                 ( pipe_tx1_eqpreset ),
  .pipe_tx2_eqpreset_gt                                 ( pipe_tx2_eqpreset ),
  .pipe_tx3_eqpreset_gt                                 ( pipe_tx3_eqpreset ),
  .pipe_tx4_eqpreset_gt                                 ( pipe_tx4_eqpreset ),
  .pipe_tx5_eqpreset_gt                                 ( pipe_tx5_eqpreset ),
  .pipe_tx6_eqpreset_gt                                 ( pipe_tx6_eqpreset ),
  .pipe_tx7_eqpreset_gt                                 ( pipe_tx7_eqpreset ),

  .pipe_rx0_eqlp_lffs_gt                                ( pipe_rx0_eq_lffs ),
  .pipe_rx1_eqlp_lffs_gt                                ( pipe_rx1_eq_lffs ),
  .pipe_rx2_eqlp_lffs_gt                                ( pipe_rx2_eq_lffs ),
  .pipe_rx3_eqlp_lffs_gt                                ( pipe_rx3_eq_lffs ),
  .pipe_rx4_eqlp_lffs_gt                                ( pipe_rx4_eq_lffs ),
  .pipe_rx5_eqlp_lffs_gt                                ( pipe_rx5_eq_lffs ),
  .pipe_rx6_eqlp_lffs_gt                                ( pipe_rx6_eq_lffs ),
  .pipe_rx7_eqlp_lffs_gt                                ( pipe_rx7_eq_lffs ),

  .pipe_tx0_eqdeemph_gt                                 ( pipe_tx0_eqdeemph ),
  .pipe_tx1_eqdeemph_gt                                 ( pipe_tx1_eqdeemph ),
  .pipe_tx2_eqdeemph_gt                                 ( pipe_tx2_eqdeemph ),
  .pipe_tx3_eqdeemph_gt                                 ( pipe_tx3_eqdeemph ),
  .pipe_tx4_eqdeemph_gt                                 ( pipe_tx4_eqdeemph ),
  .pipe_tx5_eqdeemph_gt                                 ( pipe_tx5_eqdeemph ),
  .pipe_tx6_eqdeemph_gt                                 ( pipe_tx6_eqdeemph ),
  .pipe_tx7_eqdeemph_gt                                 ( pipe_tx7_eqdeemph ),

  .pipe_rx_slide_gt                                     ( pipe_rx_slide ),

  .pipe_rx0_data_valid_gt                               ( pipe_rx0_data_valid ),
  .pipe_rx1_data_valid_gt                               ( pipe_rx1_data_valid ),
  .pipe_rx2_data_valid_gt                               ( pipe_rx2_data_valid ),
  .pipe_rx3_data_valid_gt                               ( pipe_rx3_data_valid ),
  .pipe_rx4_data_valid_gt                               ( pipe_rx4_data_valid ),
  .pipe_rx5_data_valid_gt                               ( pipe_rx5_data_valid ),
  .pipe_rx6_data_valid_gt                               ( pipe_rx6_data_valid ),
  .pipe_rx7_data_valid_gt                               ( pipe_rx7_data_valid ),

  .pipe_rx0_elec_idle_gt                                ( pipe_rx0_elec_idle ),
  .pipe_rx1_elec_idle_gt                                ( pipe_rx1_elec_idle ),
  .pipe_rx2_elec_idle_gt                                ( pipe_rx2_elec_idle ),
  .pipe_rx3_elec_idle_gt                                ( pipe_rx3_elec_idle ),
  .pipe_rx4_elec_idle_gt                                ( pipe_rx4_elec_idle ),
  .pipe_rx5_elec_idle_gt                                ( pipe_rx5_elec_idle ),
  .pipe_rx6_elec_idle_gt                                ( pipe_rx6_elec_idle ),
  .pipe_rx7_elec_idle_gt                                ( pipe_rx7_elec_idle ),

  .pipe_rx0_eqdone_gt                                   ( pipe_rx0_eqdone ),
  .pipe_rx1_eqdone_gt                                   ( pipe_rx1_eqdone ),
  .pipe_rx2_eqdone_gt                                   ( pipe_rx2_eqdone ),
  .pipe_rx3_eqdone_gt                                   ( pipe_rx3_eqdone ),
  .pipe_rx4_eqdone_gt                                   ( pipe_rx4_eqdone ),
  .pipe_rx5_eqdone_gt                                   ( pipe_rx5_eqdone ),
  .pipe_rx6_eqdone_gt                                   ( pipe_rx6_eqdone ),
  .pipe_rx7_eqdone_gt                                   ( pipe_rx7_eqdone ),

  .pipe_rx0_eqlp_adaptdone_gt                           ( pipe_rx0_eq_adapt_done ),
  .pipe_rx1_eqlp_adaptdone_gt                           ( pipe_rx1_eq_adapt_done ),
  .pipe_rx2_eqlp_adaptdone_gt                           ( pipe_rx2_eq_adapt_done ),
  .pipe_rx3_eqlp_adaptdone_gt                           ( pipe_rx3_eq_adapt_done ),
  .pipe_rx4_eqlp_adaptdone_gt                           ( pipe_rx4_eq_adapt_done ),
  .pipe_rx5_eqlp_adaptdone_gt                           ( pipe_rx5_eq_adapt_done ),
  .pipe_rx6_eqlp_adaptdone_gt                           ( pipe_rx6_eq_adapt_done ),
  .pipe_rx7_eqlp_adaptdone_gt                           ( pipe_rx7_eq_adapt_done ),

  .pipe_rx0_eqlp_lffs_sel_gt                            ( pipe_rx0_eq_lffs_sel ),
  .pipe_rx1_eqlp_lffs_sel_gt                            ( pipe_rx1_eq_lffs_sel ),
  .pipe_rx2_eqlp_lffs_sel_gt                            ( pipe_rx2_eq_lffs_sel ),
  .pipe_rx3_eqlp_lffs_sel_gt                            ( pipe_rx3_eq_lffs_sel ),
  .pipe_rx4_eqlp_lffs_sel_gt                            ( pipe_rx4_eq_lffs_sel ),
  .pipe_rx5_eqlp_lffs_sel_gt                            ( pipe_rx5_eq_lffs_sel ),
  .pipe_rx6_eqlp_lffs_sel_gt                            ( pipe_rx6_eq_lffs_sel ),
  .pipe_rx7_eqlp_lffs_sel_gt                            ( pipe_rx7_eq_lffs_sel ),

  .pipe_rx0_phy_status_gt                               ( pipe_rx0_phy_status ),
  .pipe_rx1_phy_status_gt                               ( pipe_rx1_phy_status ),
  .pipe_rx2_phy_status_gt                               ( pipe_rx2_phy_status ),
  .pipe_rx3_phy_status_gt                               ( pipe_rx3_phy_status ),
  .pipe_rx4_phy_status_gt                               ( pipe_rx4_phy_status ),
  .pipe_rx5_phy_status_gt                               ( pipe_rx5_phy_status ),
  .pipe_rx6_phy_status_gt                               ( pipe_rx6_phy_status ),
  .pipe_rx7_phy_status_gt                               ( pipe_rx7_phy_status ),

  .pipe_rx0_start_block_gt                              ( pipe_rx0_start_block ),
  .pipe_rx1_start_block_gt                              ( pipe_rx1_start_block ),
  .pipe_rx2_start_block_gt                              ( pipe_rx2_start_block ),
  .pipe_rx3_start_block_gt                              ( pipe_rx3_start_block ),
  .pipe_rx4_start_block_gt                              ( pipe_rx4_start_block ),
  .pipe_rx5_start_block_gt                              ( pipe_rx5_start_block ),
  .pipe_rx6_start_block_gt                              ( pipe_rx6_start_block ),
  .pipe_rx7_start_block_gt                              ( pipe_rx7_start_block ),

  .pipe_rx0_valid_gt                                    ( pipe_rx0_valid ),
  .pipe_rx1_valid_gt                                    ( pipe_rx1_valid ),
  .pipe_rx2_valid_gt                                    ( pipe_rx2_valid ),
  .pipe_rx3_valid_gt                                    ( pipe_rx3_valid ),
  .pipe_rx4_valid_gt                                    ( pipe_rx4_valid ),
  .pipe_rx5_valid_gt                                    ( pipe_rx5_valid ),
  .pipe_rx6_valid_gt                                    ( pipe_rx6_valid ),
  .pipe_rx7_valid_gt                                    ( pipe_rx7_valid ),

  .pipe_tx0_eqdone_gt                                   ( pipe_tx0_eqdone ),
  .pipe_tx1_eqdone_gt                                   ( pipe_tx1_eqdone ),
  .pipe_tx2_eqdone_gt                                   ( pipe_tx2_eqdone ),
  .pipe_tx3_eqdone_gt                                   ( pipe_tx3_eqdone ),
  .pipe_tx4_eqdone_gt                                   ( pipe_tx4_eqdone ),
  .pipe_tx5_eqdone_gt                                   ( pipe_tx5_eqdone ),
  .pipe_tx6_eqdone_gt                                   ( pipe_tx6_eqdone ),
  .pipe_tx7_eqdone_gt                                   ( pipe_tx7_eqdone ),

  .pipe_rx0_eqlp_new_txcoef_forpreset_gt                ( pipe_rx0_eq_new_txcoeff ),
  .pipe_rx1_eqlp_new_txcoef_forpreset_gt                ( pipe_rx1_eq_new_txcoeff ),
  .pipe_rx2_eqlp_new_txcoef_forpreset_gt                ( pipe_rx2_eq_new_txcoeff ),
  .pipe_rx3_eqlp_new_txcoef_forpreset_gt                ( pipe_rx3_eq_new_txcoeff ),
  .pipe_rx4_eqlp_new_txcoef_forpreset_gt                ( pipe_rx4_eq_new_txcoeff ),
  .pipe_rx5_eqlp_new_txcoef_forpreset_gt                ( pipe_rx5_eq_new_txcoeff ),
  .pipe_rx6_eqlp_new_txcoef_forpreset_gt                ( pipe_rx6_eq_new_txcoeff ),
  .pipe_rx7_eqlp_new_txcoef_forpreset_gt                ( pipe_rx7_eq_new_txcoeff ),

  .pipe_tx0_eqcoeff_gt                                  ( pipe_tx0_eqcoeff ),
  .pipe_tx1_eqcoeff_gt                                  ( pipe_tx1_eqcoeff ),
  .pipe_tx2_eqcoeff_gt                                  ( pipe_tx2_eqcoeff ),
  .pipe_tx3_eqcoeff_gt                                  ( pipe_tx3_eqcoeff ),
  .pipe_tx4_eqcoeff_gt                                  ( pipe_tx4_eqcoeff ),
  .pipe_tx5_eqcoeff_gt                                  ( pipe_tx5_eqcoeff ),
  .pipe_tx6_eqcoeff_gt                                  ( pipe_tx6_eqcoeff ),
  .pipe_tx7_eqcoeff_gt                                  ( pipe_tx7_eqcoeff ),

  .pipe_rx0_char_is_k_gt                                ( pipe_rx0_char_is_k ),
  .pipe_rx1_char_is_k_gt                                ( pipe_rx1_char_is_k ),
  .pipe_rx2_char_is_k_gt                                ( pipe_rx2_char_is_k ),
  .pipe_rx3_char_is_k_gt                                ( pipe_rx3_char_is_k ),
  .pipe_rx4_char_is_k_gt                                ( pipe_rx4_char_is_k ),
  .pipe_rx5_char_is_k_gt                                ( pipe_rx5_char_is_k ),
  .pipe_rx6_char_is_k_gt                                ( pipe_rx6_char_is_k ),
  .pipe_rx7_char_is_k_gt                                ( pipe_rx7_char_is_k ),

  .pipe_rx0_syncheader_gt                               ( pipe_rx0_syncheader ),
  .pipe_rx1_syncheader_gt                               ( pipe_rx1_syncheader ),
  .pipe_rx2_syncheader_gt                               ( pipe_rx2_syncheader ),
  .pipe_rx3_syncheader_gt                               ( pipe_rx3_syncheader ),
  .pipe_rx4_syncheader_gt                               ( pipe_rx4_syncheader ),
  .pipe_rx5_syncheader_gt                               ( pipe_rx5_syncheader ),
  .pipe_rx6_syncheader_gt                               ( pipe_rx6_syncheader ),
  .pipe_rx7_syncheader_gt                               ( pipe_rx7_syncheader ),

  .pipe_rx0_status_gt                                   ( pipe_rx0_status ),
  .pipe_rx1_status_gt                                   ( pipe_rx1_status ),
  .pipe_rx2_status_gt                                   ( pipe_rx2_status ),
  .pipe_rx3_status_gt                                   ( pipe_rx3_status ),
  .pipe_rx4_status_gt                                   ( pipe_rx4_status ),
  .pipe_rx5_status_gt                                   ( pipe_rx5_status ),
  .pipe_rx6_status_gt                                   ( pipe_rx6_status ),
  .pipe_rx7_status_gt                                   ( pipe_rx7_status ),

  .pipe_rx0_data_gt                                     ( pipe_rx0_data ),
  .pipe_rx1_data_gt                                     ( pipe_rx1_data ),
  .pipe_rx2_data_gt                                     ( pipe_rx2_data ),
  .pipe_rx3_data_gt                                     ( pipe_rx3_data ),
  .pipe_rx4_data_gt                                     ( pipe_rx4_data ),
  .pipe_rx5_data_gt                                     ( pipe_rx5_data ),
  .pipe_rx6_data_gt                                     ( pipe_rx6_data ),
  .pipe_rx7_data_gt                                     ( pipe_rx7_data ),

  .pipe_rx_syncdone_gt                                  ( pipe_rx_syncdone )
);

axi_pcie3_0_gt_top #(
    .TCQ                                                  ( TCQ ),
    .PL_LINK_CAP_MAX_LINK_WIDTH                           ( PL_LINK_CAP_MAX_LINK_WIDTH ),
    .PL_LINK_CAP_MAX_LINK_SPEED                           ( PL_LINK_CAP_MAX_LINK_SPEED ),
    .REF_CLK_FREQ                                         ( REF_CLK_FREQ ),
    .USER_CLK2_FREQ                                       ( USER_CLK2_FREQ ),
    .USER_CLK_FREQ                                        ( USER_CLK_FREQ ),
    .PCIE_ASYNC_EN                                        ( PCIE_ASYNC_EN ),
    // synthesis translate_off
    .PL_SIM_FAST_LINK_TRAINING                            ( ENABLE_FAST_SIM_TRAINING ),
    // synthesis translate_on
    .PCIE_EXT_CLK                                         ( PCIE_EXT_CLK ),
    .PCIE_EXT_GT_COMMON                                   ( PCIE_EXT_GT_COMMON ),
    .EXT_CH_GT_DRP                                        ( EXT_CH_GT_DRP ),
    .TX_MARGIN_FULL_0                                     ( TX_MARGIN_FULL_0 ),
    .TX_MARGIN_FULL_1                                     ( TX_MARGIN_FULL_1 ),
    .TX_MARGIN_FULL_2                                     ( TX_MARGIN_FULL_2 ),
    .TX_MARGIN_FULL_3                                     ( TX_MARGIN_FULL_3 ),
    .TX_MARGIN_FULL_4                                     ( TX_MARGIN_FULL_4 ),
    .TX_MARGIN_LOW_0                                      ( TX_MARGIN_LOW_0 ), 
    .TX_MARGIN_LOW_1                                      ( TX_MARGIN_LOW_1 ), 
    .TX_MARGIN_LOW_2                                      ( TX_MARGIN_LOW_2 ),
    .TX_MARGIN_LOW_3                                      ( TX_MARGIN_LOW_3 ),
    .TX_MARGIN_LOW_4                                      ( TX_MARGIN_LOW_4 ),
    .PCIE_TXBUF_EN                                        ( PCIE_TXBUF_EN ),
    .PCIE_GT_DEVICE                                       ( PCIE_GT_DEVICE ),
    .PCIE_CHAN_BOND                                       ( PCIE_CHAN_BOND ),
    .PCIE_CHAN_BOND_EN                                    ( PCIE_CHAN_BOND_EN ),
    .PCIE_USE_MODE                                        ( PCIE_USE_MODE ),
    .PCIE_LPM_DFE                                         ( PCIE_LPM_DFE ),
    .PCIE_LINK_SPEED                                      ( PCIE_LINK_SPEED )
  ) gt_top_i(

    //------------------------------------------------------------------------------------//
    // Pipe Per-Link Signals                                                              //
    //------------------------------------------------------------------------------------//
    .pipe_tx_rcvr_det                                    ( pipe_tx_rcvr_det        ),
    .pipe_tx_reset                                       ( pipe_tx_reset           ),
    .pipe_tx_rate                                        ( pipe_tx_rate            ),
    .pipe_tx_deemph                                      ( pipe_tx_deemph          ),
    .pipe_tx_margin                                      ( pipe_tx_margin          ),
    .pipe_tx_swing                                       ( pipe_tx_swing           ),
    .pipe_txeq_fs                                        ( pipe_tx_eqfs            ),
    .pipe_txeq_lf                                        ( pipe_tx_eqlf            ),
    .pipe_rxslide                                        ( pipe_rx_slide           ),
    .pipe_rxsync_done                                    ( pipe_rx_syncdone        ),
    .cfg_ltssm_state                                     ( cfg_ltssm_state_wire    ),

    // Pipe Per-Lane Signals - Lane 0
    .pipe_rx0_char_is_k                                  ( pipe_rx0_char_is_k      ),
    .pipe_rx0_data                                       ( pipe_rx0_data           ),
    .pipe_rx0_valid                                      ( pipe_rx0_valid          ),
    .pipe_rx0_chanisaligned                              ( ),
    .pipe_rx0_status                                     ( pipe_rx0_status         ),
    .pipe_rx0_phy_status                                 ( pipe_rx0_phy_status     ),
    .pipe_rx0_elec_idle                                  ( pipe_rx0_elec_idle      ),
    .pipe_rx0_polarity                                   ( pipe_rx0_polarity       ),
    .pipe_tx0_compliance                                 ( pipe_tx0_compliance     ),
    .pipe_tx0_char_is_k                                  ( pipe_tx0_char_is_k      ),
    .pipe_tx0_data                                       ( pipe_tx0_data           ),
    .pipe_tx0_elec_idle                                  ( pipe_tx0_elec_idle      ),
    .pipe_tx0_powerdown                                  ( pipe_tx0_powerdown      ),
    .pipe_tx0_eqcontrol                                  ( pipe_tx0_eqcontrol      ),
    .pipe_tx0_eqpreset                                   ( pipe_tx0_eqpreset       ),
    .pipe_tx0_eqdeemph                                   ( pipe_tx0_eqdeemph       ),
    .pipe_tx0_eqdone                                     ( pipe_tx0_eqdone         ),
    .pipe_tx0_eqcoeff                                    ( pipe_tx0_eqcoeff        ),
    .pipe_rx0_eqcontrol                                  ( pipe_rx0_eqcontrol      ),
    .pipe_rx0_eqpreset                                   ( pipe_rx0_eqpreset       ),
    .pipe_rx0_eq_lffs                                    ( pipe_rx0_eq_lffs        ),
    .pipe_rx0_eq_txpreset                                ( pipe_rx0_eq_txpreset    ),
    .pipe_rx0_eq_new_txcoeff                             ( pipe_rx0_eq_new_txcoeff ),
    .pipe_rx0_eq_lffs_sel                                ( pipe_rx0_eq_lffs_sel    ),
    .pipe_rx0_eq_adapt_done                              ( pipe_rx0_eq_adapt_done  ),
    .pipe_rx0_eqdone                                     ( pipe_rx0_eqdone         ),

    // Pipe Per-Lane Signals - Lane 1
    .pipe_rx1_char_is_k                                  ( pipe_rx1_char_is_k      ),
    .pipe_rx1_data                                       ( pipe_rx1_data           ),
    .pipe_rx1_valid                                      ( pipe_rx1_valid          ),
    .pipe_rx1_chanisaligned                              ( ),
    .pipe_rx1_status                                     ( pipe_rx1_status         ),
    .pipe_rx1_phy_status                                 ( pipe_rx1_phy_status     ),
    .pipe_rx1_elec_idle                                  ( pipe_rx1_elec_idle      ),
    .pipe_rx1_polarity                                   ( pipe_rx1_polarity       ),
    .pipe_tx1_compliance                                 ( pipe_tx1_compliance     ),
    .pipe_tx1_char_is_k                                  ( pipe_tx1_char_is_k      ),
    .pipe_tx1_data                                       ( pipe_tx1_data           ),
    .pipe_tx1_elec_idle                                  ( pipe_tx1_elec_idle      ),
    .pipe_tx1_powerdown                                  ( pipe_tx1_powerdown      ),
    .pipe_tx1_eqcontrol                                  ( pipe_tx1_eqcontrol      ),
    .pipe_tx1_eqpreset                                   ( pipe_tx1_eqpreset       ),
    .pipe_tx1_eqdeemph                                   ( pipe_tx1_eqdeemph       ),
    .pipe_tx1_eqdone                                     ( pipe_tx1_eqdone         ),
    .pipe_tx1_eqcoeff                                    ( pipe_tx1_eqcoeff        ),
    .pipe_rx1_eqcontrol                                  ( pipe_rx1_eqcontrol      ),
    .pipe_rx1_eqpreset                                   ( pipe_rx1_eqpreset       ),
    .pipe_rx1_eq_lffs                                    ( pipe_rx1_eq_lffs        ),
    .pipe_rx1_eq_txpreset                                ( pipe_rx1_eq_txpreset    ),
    .pipe_rx1_eq_new_txcoeff                             ( pipe_rx1_eq_new_txcoeff ),
    .pipe_rx1_eq_lffs_sel                                ( pipe_rx1_eq_lffs_sel    ),
    .pipe_rx1_eq_adapt_done                              ( pipe_rx1_eq_adapt_done  ),
    .pipe_rx1_eqdone                                     ( pipe_rx1_eqdone         ),

    // Pipe Per-Lane Signals - Lane 2
    .pipe_rx2_char_is_k                                  ( pipe_rx2_char_is_k      ),
    .pipe_rx2_data                                       ( pipe_rx2_data           ),
    .pipe_rx2_valid                                      ( pipe_rx2_valid          ),
    .pipe_rx2_chanisaligned                              ( ),
    .pipe_rx2_status                                     ( pipe_rx2_status         ),
    .pipe_rx2_phy_status                                 ( pipe_rx2_phy_status     ),
    .pipe_rx2_elec_idle                                  ( pipe_rx2_elec_idle      ),
    .pipe_rx2_polarity                                   ( pipe_rx2_polarity       ),
    .pipe_tx2_compliance                                 ( pipe_tx2_compliance     ),
    .pipe_tx2_char_is_k                                  ( pipe_tx2_char_is_k      ),
    .pipe_tx2_data                                       ( pipe_tx2_data           ),
    .pipe_tx2_elec_idle                                  ( pipe_tx2_elec_idle      ),
    .pipe_tx2_powerdown                                  ( pipe_tx2_powerdown      ),
    .pipe_tx2_eqcontrol                                  ( pipe_tx2_eqcontrol      ),
    .pipe_tx2_eqpreset                                   ( pipe_tx2_eqpreset       ),
    .pipe_tx2_eqdeemph                                   ( pipe_tx2_eqdeemph       ),
    .pipe_tx2_eqdone                                     ( pipe_tx2_eqdone         ),
    .pipe_tx2_eqcoeff                                    ( pipe_tx2_eqcoeff        ),
    .pipe_rx2_eqcontrol                                  ( pipe_rx2_eqcontrol      ),
    .pipe_rx2_eqpreset                                   ( pipe_rx2_eqpreset       ),
    .pipe_rx2_eq_lffs                                    ( pipe_rx2_eq_lffs        ),
    .pipe_rx2_eq_txpreset                                ( pipe_rx2_eq_txpreset    ),
    .pipe_rx2_eq_new_txcoeff                             ( pipe_rx2_eq_new_txcoeff ),
    .pipe_rx2_eq_lffs_sel                                ( pipe_rx2_eq_lffs_sel    ),
    .pipe_rx2_eq_adapt_done                              ( pipe_rx2_eq_adapt_done  ),
    .pipe_rx2_eqdone                                     ( pipe_rx2_eqdone         ),

    // Pipe Per-Lane Signals - Lane 3
    .pipe_rx3_char_is_k                                  ( pipe_rx3_char_is_k      ),
    .pipe_rx3_data                                       ( pipe_rx3_data           ),
    .pipe_rx3_valid                                      ( pipe_rx3_valid          ),
    .pipe_rx3_chanisaligned                              ( ),
    .pipe_rx3_status                                     ( pipe_rx3_status         ),
    .pipe_rx3_phy_status                                 ( pipe_rx3_phy_status     ),
    .pipe_rx3_elec_idle                                  ( pipe_rx3_elec_idle      ),
    .pipe_rx3_polarity                                   ( pipe_rx3_polarity       ),
    .pipe_tx3_compliance                                 ( pipe_tx3_compliance     ),
    .pipe_tx3_char_is_k                                  ( pipe_tx3_char_is_k      ),
    .pipe_tx3_data                                       ( pipe_tx3_data           ),
    .pipe_tx3_elec_idle                                  ( pipe_tx3_elec_idle      ),
    .pipe_tx3_powerdown                                  ( pipe_tx3_powerdown      ),
    .pipe_tx3_eqcontrol                                  ( pipe_tx3_eqcontrol      ),
    .pipe_tx3_eqpreset                                   ( pipe_tx3_eqpreset       ),
    .pipe_tx3_eqdeemph                                   ( pipe_tx3_eqdeemph       ),
    .pipe_tx3_eqdone                                     ( pipe_tx3_eqdone         ),
    .pipe_tx3_eqcoeff                                    ( pipe_tx3_eqcoeff        ),
    .pipe_rx3_eqcontrol                                  ( pipe_rx3_eqcontrol      ),
    .pipe_rx3_eqpreset                                   ( pipe_rx3_eqpreset       ),
    .pipe_rx3_eq_lffs                                    ( pipe_rx3_eq_lffs        ),
    .pipe_rx3_eq_txpreset                                ( pipe_rx3_eq_txpreset    ),
    .pipe_rx3_eq_new_txcoeff                             ( pipe_rx3_eq_new_txcoeff ),
    .pipe_rx3_eq_lffs_sel                                ( pipe_rx3_eq_lffs_sel    ),
    .pipe_rx3_eq_adapt_done                              ( pipe_rx3_eq_adapt_done  ),
    .pipe_rx3_eqdone                                     ( pipe_rx3_eqdone         ),

    // Pipe Per-Lane Signals - Lane 4
    .pipe_rx4_char_is_k                                  ( pipe_rx4_char_is_k      ),
    .pipe_rx4_data                                       ( pipe_rx4_data           ),
    .pipe_rx4_valid                                      ( pipe_rx4_valid          ),
    .pipe_rx4_chanisaligned                              ( ),
    .pipe_rx4_status                                     ( pipe_rx4_status         ),
    .pipe_rx4_phy_status                                 ( pipe_rx4_phy_status     ),
    .pipe_rx4_elec_idle                                  ( pipe_rx4_elec_idle      ),
    .pipe_rx4_polarity                                   ( pipe_rx4_polarity       ),
    .pipe_tx4_compliance                                 ( pipe_tx4_compliance     ),
    .pipe_tx4_char_is_k                                  ( pipe_tx4_char_is_k      ),
    .pipe_tx4_data                                       ( pipe_tx4_data           ),
    .pipe_tx4_elec_idle                                  ( pipe_tx4_elec_idle      ),
    .pipe_tx4_powerdown                                  ( pipe_tx4_powerdown      ),
    .pipe_tx4_eqcontrol                                  ( pipe_tx4_eqcontrol      ),
    .pipe_tx4_eqpreset                                   ( pipe_tx4_eqpreset       ),
    .pipe_tx4_eqdeemph                                   ( pipe_tx4_eqdeemph       ),
    .pipe_tx4_eqdone                                     ( pipe_tx4_eqdone         ),
    .pipe_tx4_eqcoeff                                    ( pipe_tx4_eqcoeff        ),
    .pipe_rx4_eqcontrol                                  ( pipe_rx4_eqcontrol      ),
    .pipe_rx4_eqpreset                                   ( pipe_rx4_eqpreset       ),
    .pipe_rx4_eq_lffs                                    ( pipe_rx4_eq_lffs        ),
    .pipe_rx4_eq_txpreset                                ( pipe_rx4_eq_txpreset    ),
    .pipe_rx4_eq_new_txcoeff                             ( pipe_rx4_eq_new_txcoeff ),
    .pipe_rx4_eq_lffs_sel                                ( pipe_rx4_eq_lffs_sel    ),
    .pipe_rx4_eq_adapt_done                              ( pipe_rx4_eq_adapt_done  ),
    .pipe_rx4_eqdone                                     ( pipe_rx4_eqdone         ),

    // Pipe Per-Lane Signals - Lane 5
    .pipe_rx5_char_is_k                                  ( pipe_rx5_char_is_k      ),
    .pipe_rx5_data                                       ( pipe_rx5_data           ),
    .pipe_rx5_valid                                      ( pipe_rx5_valid          ),
    .pipe_rx5_chanisaligned                              ( ),
    .pipe_rx5_status                                     ( pipe_rx5_status         ),
    .pipe_rx5_phy_status                                 ( pipe_rx5_phy_status     ),
    .pipe_rx5_elec_idle                                  ( pipe_rx5_elec_idle      ),
    .pipe_rx5_polarity                                   ( pipe_rx5_polarity       ),
    .pipe_tx5_compliance                                 ( pipe_tx5_compliance     ),
    .pipe_tx5_char_is_k                                  ( pipe_tx5_char_is_k      ),
    .pipe_tx5_data                                       ( pipe_tx5_data           ),
    .pipe_tx5_elec_idle                                  ( pipe_tx5_elec_idle      ),
    .pipe_tx5_powerdown                                  ( pipe_tx5_powerdown      ),
    .pipe_tx5_eqcontrol                                  ( pipe_tx5_eqcontrol      ),
    .pipe_tx5_eqpreset                                   ( pipe_tx5_eqpreset       ),
    .pipe_tx5_eqdeemph                                   ( pipe_tx5_eqdeemph       ),
    .pipe_tx5_eqdone                                     ( pipe_tx5_eqdone         ),
    .pipe_tx5_eqcoeff                                    ( pipe_tx5_eqcoeff        ),
    .pipe_rx5_eqcontrol                                  ( pipe_rx5_eqcontrol      ),
    .pipe_rx5_eqpreset                                   ( pipe_rx5_eqpreset       ),
    .pipe_rx5_eq_lffs                                    ( pipe_rx5_eq_lffs        ),
    .pipe_rx5_eq_txpreset                                ( pipe_rx5_eq_txpreset    ),
    .pipe_rx5_eq_new_txcoeff                             ( pipe_rx5_eq_new_txcoeff ),
    .pipe_rx5_eq_lffs_sel                                ( pipe_rx5_eq_lffs_sel    ),
    .pipe_rx5_eq_adapt_done                              ( pipe_rx5_eq_adapt_done  ),
    .pipe_rx5_eqdone                                     ( pipe_rx5_eqdone         ),

    // Pipe Per-Lane Signals - Lane 6
    .pipe_rx6_char_is_k                                  ( pipe_rx6_char_is_k      ),
    .pipe_rx6_data                                       ( pipe_rx6_data           ),
    .pipe_rx6_valid                                      ( pipe_rx6_valid          ),
    .pipe_rx6_chanisaligned                              ( ),
    .pipe_rx6_status                                     ( pipe_rx6_status         ),
    .pipe_rx6_phy_status                                 ( pipe_rx6_phy_status     ),
    .pipe_rx6_elec_idle                                  ( pipe_rx6_elec_idle      ),
    .pipe_rx6_polarity                                   ( pipe_rx6_polarity       ),
    .pipe_tx6_compliance                                 ( pipe_tx6_compliance     ),
    .pipe_tx6_char_is_k                                  ( pipe_tx6_char_is_k      ),
    .pipe_tx6_data                                       ( pipe_tx6_data           ),
    .pipe_tx6_elec_idle                                  ( pipe_tx6_elec_idle      ),
    .pipe_tx6_powerdown                                  ( pipe_tx6_powerdown      ),
    .pipe_tx6_eqcontrol                                  ( pipe_tx6_eqcontrol      ),
    .pipe_tx6_eqpreset                                   ( pipe_tx6_eqpreset       ),
    .pipe_tx6_eqdeemph                                   ( pipe_tx6_eqdeemph       ),
    .pipe_tx6_eqdone                                     ( pipe_tx6_eqdone         ),
    .pipe_tx6_eqcoeff                                    ( pipe_tx6_eqcoeff        ),
    .pipe_rx6_eqcontrol                                  ( pipe_rx6_eqcontrol      ),
    .pipe_rx6_eqpreset                                   ( pipe_rx6_eqpreset       ),
    .pipe_rx6_eq_lffs                                    ( pipe_rx6_eq_lffs        ),
    .pipe_rx6_eq_txpreset                                ( pipe_rx6_eq_txpreset    ),
    .pipe_rx6_eq_new_txcoeff                             ( pipe_rx6_eq_new_txcoeff ),
    .pipe_rx6_eq_lffs_sel                                ( pipe_rx6_eq_lffs_sel    ),
    .pipe_rx6_eq_adapt_done                              ( pipe_rx6_eq_adapt_done  ),
    .pipe_rx6_eqdone                                     ( pipe_rx6_eqdone         ),

    // Pipe Per-Lane Signals - Lane 7
    .pipe_rx7_char_is_k                                  ( pipe_rx7_char_is_k      ),
    .pipe_rx7_data                                       ( pipe_rx7_data           ),
    .pipe_rx7_valid                                      ( pipe_rx7_valid          ),
    .pipe_rx7_chanisaligned                              ( ),
    .pipe_rx7_status                                     ( pipe_rx7_status         ),
    .pipe_rx7_phy_status                                 ( pipe_rx7_phy_status     ),
    .pipe_rx7_elec_idle                                  ( pipe_rx7_elec_idle      ),
    .pipe_rx7_polarity                                   ( pipe_rx7_polarity       ),
    .pipe_tx7_compliance                                 ( pipe_tx7_compliance     ),
    .pipe_tx7_char_is_k                                  ( pipe_tx7_char_is_k      ),
    .pipe_tx7_data                                       ( pipe_tx7_data           ),
    .pipe_tx7_elec_idle                                  ( pipe_tx7_elec_idle      ),
    .pipe_tx7_powerdown                                  ( pipe_tx7_powerdown      ),
    .pipe_tx7_eqcontrol                                  ( pipe_tx7_eqcontrol      ),
    .pipe_tx7_eqpreset                                   ( pipe_tx7_eqpreset       ),
    .pipe_tx7_eqdeemph                                   ( pipe_tx7_eqdeemph       ),
    .pipe_tx7_eqdone                                     ( pipe_tx7_eqdone         ),
    .pipe_tx7_eqcoeff                                    ( pipe_tx7_eqcoeff        ),
    .pipe_rx7_eqcontrol                                  ( pipe_rx7_eqcontrol      ),
    .pipe_rx7_eqpreset                                   ( pipe_rx7_eqpreset       ),
    .pipe_rx7_eq_lffs                                    ( pipe_rx7_eq_lffs        ),
    .pipe_rx7_eq_txpreset                                ( pipe_rx7_eq_txpreset    ),
    .pipe_rx7_eq_new_txcoeff                             ( pipe_rx7_eq_new_txcoeff ),
    .pipe_rx7_eq_lffs_sel                                ( pipe_rx7_eq_lffs_sel    ),
    .pipe_rx7_eq_adapt_done                              ( pipe_rx7_eq_adapt_done  ),
    .pipe_rx7_eqdone                                     ( pipe_rx7_eqdone         ),

     // Manual PCIe Equalization Control
    .pipe_rxeq_user_en                                    ( pipe_rxeq_user_en[PL_LINK_CAP_MAX_LINK_WIDTH-1:0]          ),
    .pipe_rxeq_user_txcoeff                               ( pipe_rxeq_user_txcoeff[18*PL_LINK_CAP_MAX_LINK_WIDTH-1:0]  ),
    .pipe_rxeq_user_mode                                  ( {PL_LINK_CAP_MAX_LINK_WIDTH{1'b0}}                         ),

    .drp_rdy                                              ( drp_rdy_wire ),
    .drp_do                                               ( drp_do_wire ),
    .drp_clk                                              ( dt_654524_drp_clk ),
    .drp_en                                               ( dt_654524_drp_en ),
    .drp_we                                               ( dt_654524_drp_we ),
    .drp_addr                                             ( dt_654524_drp_addr ),
    .drp_di                                               ( dt_654524_drp_di ),

    // PCI Express signals
    .pci_exp_txn                                         ( pci_exp_txn ),
    .pci_exp_txp                                         ( pci_exp_txp ),
    .pci_exp_rxn                                         ( pci_exp_rxn ),
    .pci_exp_rxp                                         ( pci_exp_rxp ),

    //---------- PIPE Clock & Reset Ports ------------------
    .pipe_clk                                           ( sys_clk ),
    .sys_rst_n                                          ( sys_rst_n ),
    .rec_clk                                            ( rec_clk ),
    .pipe_pclk                                          ( pipe_clk ),
    .core_clk                                           ( core_clk ),
    .user_clk                                           ( user_clk ),
    .phy_rdy                                            ( phy_rdy ),
    .mmcm_lock                                          ( mmcm_lock ),
    .pipe_mmcm_rst_n                                    ( pipe_mmcm_rst_n),

    // ---------- Shared Logic Internal------------------
    .INT_PCLK_OUT_SLAVE                                ( int_pclk_out_slave ),
    .INT_RXUSRCLK_OUT                                  ( int_pipe_rxusrclk_out ),
    .INT_RXOUTCLK_OUT                                  ( int_rxoutclk_out ),
    .INT_DCLK_OUT                                      ( int_dclk_out ),
    .INT_USERCLK1_OUT                                  ( int_userclk1_out ),
    .INT_USERCLK2_OUT                                  ( int_userclk2_out),
    .INT_OOBCLK_OUT                                    ( int_oobclk_out),
    .INT_QPLLLOCK_OUT                                  ( int_qplllock_out ),
    .INT_QPLLOUTCLK_OUT                                ( int_qplloutclk_out ),
    .INT_QPLLOUTREFCLK_OUT                             ( int_qplloutrefclk_out ),
    .INT_PCLK_SEL_SLAVE                                ( int_pclk_sel_slave ),

    // ---------- Shared Logic External------------------

    //External GT COMMON Ports

    .qpll_drp_crscode                                     ( qpll_drp_crscode ),
    .qpll_drp_fsm                                         ( qpll_drp_fsm ),
    .qpll_drp_done                                        ( qpll_drp_done ),
    .qpll_drp_reset                                       ( qpll_drp_reset ),
    .qpll_qplllock                                        ( qpll_qplllock ),
    .qpll_qplloutclk                                      ( qpll_qplloutclk ),
    .qpll_qplloutrefclk                                   ( qpll_qplloutrefclk ),
    .qpll_qplld                                           ( qpll_qplld ),
    .qpll_qpllreset                                       ( qpll_qpllreset ),
    .qpll_drp_clk                                         ( qpll_drp_clk ),
    .qpll_drp_rst_n                                       ( qpll_drp_rst_n ),
    .qpll_drp_ovrd                                        ( qpll_drp_ovrd ),
    .qpll_drp_gen3                                        ( qpll_drp_gen3),
    .qpll_drp_start                                       ( qpll_drp_start ),

    //External Clock Ports 
    .PIPE_PCLK_IN                                       ( pipe_pclk_in ),
    .PIPE_RXUSRCLK_IN                                   ( pipe_rxusrclk_in ),
    .PIPE_RXOUTCLK_IN                                   ( pipe_rxoutclk_in ),
    .PIPE_DCLK_IN                                       ( pipe_dclk_in ),
    .PIPE_USERCLK1_IN                                   ( pipe_userclk1_in ),
    .PIPE_USERCLK2_IN                                   ( pipe_userclk2_in ),
    .PIPE_OOBCLK_IN                                     ( pipe_oobclk_in ),
    .PIPE_MMCM_LOCK_IN                                  ( PIPE_MMCM_LOCK_IN_wire ),
    .PIPE_TXOUTCLK_OUT                                  ( pipe_txoutclk_out ),
    .PIPE_RXOUTCLK_OUT                                  ( pipe_rxoutclk_out ),
    .PIPE_PCLK_SEL_OUT                                  ( pipe_pclk_sel_out ),
    .PIPE_GEN3_OUT                                      ( PIPE_GEN3_OUT_wire ),

    //----------TRANSCEIVER DEBUG EOU------------------
    .ext_ch_gt_drpclk                                     (ext_ch_gt_drpclk),
    .ext_ch_gt_drpaddr                                    (ext_ch_gt_drpaddr),
    .ext_ch_gt_drpen                                      (ext_ch_gt_drpen),
    .ext_ch_gt_drpdi                                      (ext_ch_gt_drpdi),
    .ext_ch_gt_drpwe                                      (ext_ch_gt_drpwe),
    .ext_ch_gt_drpdo                                      (ext_ch_gt_drpdo),
    .ext_ch_gt_drprdy                                     (ext_ch_gt_drprdy),
 
    //---------- PRBS/Loopback Ports -----------------------
    .PIPE_TXPRBSSEL                                      ( pipe_txprbssel ),
    .PIPE_RXPRBSSEL                                      ( pipe_rxprbssel ),
    .PIPE_TXPRBSFORCEERR                                 ( pipe_txprbsforceerr ),
    .PIPE_RXPRBSCNTRESET                                 ( pipe_rxprbscntreset ),
    .PIPE_LOOPBACK                                       ( pipe_loopback),

    .PIPE_RXPRBSERR                                      ( pipe_rxprbserr),
    .PIPE_TXINHIBIT                                      ( pipe_txinhibit),

 //---------- Transceiver Debug FSM Ports ---------------------------------
    .PIPE_RST_FSM             (pipe_rst_fsm),
    .PIPE_QRST_FSM            (pipe_qrst_fsm),
    .PIPE_RATE_FSM            (pipe_rate_fsm ),
    .PIPE_SYNC_FSM_TX         (pipe_sync_fsm_tx ),
    .PIPE_SYNC_FSM_RX         (pipe_sync_fsm_rx ),
    .PIPE_DRP_FSM             (pipe_drp_fsm ),

    .PIPE_RST_IDLE            (pipe_rst_idle ),
    .PIPE_QRST_IDLE           (pipe_qrst_idle ),
    .PIPE_RATE_IDLE           (pipe_rate_idle ),
    .PIPE_EYESCANDATAERROR    ( pipe_eyescandataerror ),
    .PIPE_RXSTATUS            ( pipe_rxstatus ),
    .PIPE_DMONITOROUT         ( pipe_dmonitorout ),

    .PIPE_CPLL_LOCK           ( pipe_cpll_lock ),
    .PIPE_QPLL_LOCK           ( pipe_qpll_lock ),
    .PIPE_RXPMARESETDONE      ( pipe_rxpmaresetdone ),       
    .PIPE_RXBUFSTATUS         ( pipe_rxbufstatus ),         
    .PIPE_TXPHALIGNDONE       ( pipe_txphaligndone ),       
    .PIPE_TXPHINITDONE        ( pipe_txphinitdone ),        
    .PIPE_TXDLYSRESETDONE     ( pipe_txdlysresetdone ),    
    .PIPE_RXPHALIGNDONE       ( pipe_rxphaligndone ),      
    .PIPE_RXDLYSRESETDONE     ( pipe_rxdlysresetdone ),     
    .PIPE_RXSYNCDONE          ( pipe_rxsyncdone ),       
    .PIPE_RXDISPERR           ( pipe_rxdisperr ),       
    .PIPE_RXNOTINTABLE        ( pipe_rxnotintable ),      
    .PIPE_RXCOMMADET          ( pipe_rxcommadet ),        
    //---------- JTAG Ports --------------------------------
    .PIPE_JTAG_RDY             (gt_ch_drp_rdy),

    //---------- Debug Ports -------------------------------
    .PIPE_DEBUG_0             (pipe_debug_0 ),
    .PIPE_DEBUG_1             (pipe_debug_1 ),
    .PIPE_DEBUG_2             (pipe_debug_2  ),
    .PIPE_DEBUG_3             (pipe_debug_3 ),
    .PIPE_DEBUG_4             (pipe_debug_4  ),
    .PIPE_DEBUG_5             (pipe_debug_5  ),
    .PIPE_DEBUG_6             (pipe_debug_6  ),
    .PIPE_DEBUG_7             (pipe_debug_7  ),
    .PIPE_DEBUG_8             (pipe_debug_8 ),
    .PIPE_DEBUG_9             (pipe_debug_9  ),
    .PIPE_DEBUG               (pipe_debug),

    .CPLLPD                   (cpllpd),
    .TXPD                     (txpd),
    .RXPD                     (rxpd),
    .TXPDELECIDLEMODE         (txpdelecidlemode),
    .TXDETECTRX               (txdetectrx),
    .TXELECIDLE               (txelecidle),
    .QPLLPD                   (qpllpd),
    .POWERDOWN                (powerdown)
);
    assign pipe_gen3_out       = 1'b0;
    assign common_commands_out = 26'b0;
    assign pipe_tx_0_sigs      = 84'b0;
    assign pipe_tx_1_sigs      = 84'b0;
    assign pipe_tx_2_sigs      = 84'b0;
    assign pipe_tx_3_sigs      = 84'b0;
    assign pipe_tx_4_sigs      = 84'b0;
    assign pipe_tx_5_sigs      = 84'b0;
    assign pipe_tx_6_sigs      = 84'b0;
    assign pipe_tx_7_sigs      = 84'b0;


    // Assign as passthrough if not tandem configuration
    // Input assigned passthroughs
    assign icap_o = 32'h0000_0000;
    assign cfg_mgmt_write_wire = cfg_mgmt_write;
    assign cfg_mgmt_read_wire = cfg_mgmt_read;

    assign cfg_per_func_status_control_wire = cfg_per_func_status_control;
    assign cfg_per_function_output_request_wire = cfg_per_function_output_request;
    assign cfg_dsn_wire = cfg_dsn;
    assign cfg_power_state_change_ack_wire = cfg_power_state_change_ack;
    assign cfg_err_cor_in_wire = cfg_err_cor_in;
    assign cfg_err_uncor_in_wire = cfg_err_uncor_in;
    assign cfg_flr_done_wire = cfg_flr_done;
    assign cfg_vf_flr_done_wire = cfg_vf_flr_done;
    assign cfg_link_training_enable_wire = cfg_link_training_enable;
    assign cfg_ext_read_data_valid_wire = cfg_ext_read_data_valid;
    assign cfg_interrupt_pending_wire = cfg_interrupt_pending;
    assign cfg_interrupt_msi_select_wire = cfg_interrupt_msi_select;
    assign cfg_interrupt_msi_pending_status_wire = cfg_interrupt_msi_pending_status;
    assign cfg_config_space_enable_wire = cfg_config_space_enable;
    assign cfg_req_pm_transition_l23_ready_wire = cfg_req_pm_transition_l23_ready;
    assign cfg_hot_reset_in_wire = cfg_hot_reset_in;
    assign cfg_ds_port_number_wire = cfg_ds_port_number;
    assign cfg_ds_bus_number_wire = cfg_ds_bus_number;
    assign cfg_ds_device_number_wire = cfg_ds_device_number;
    assign cfg_ds_function_number_wire = cfg_ds_function_number;
    assign user_tph_stt_address_wire = user_tph_stt_address;
    assign user_tph_function_num_wire = user_tph_function_num;
    assign user_tph_stt_read_enable_wire = user_tph_stt_read_enable;
    // Output assigned passthroughs
    assign cfg_phy_link_down = cfg_phy_link_down_wire;
    assign cfg_phy_link_status = cfg_phy_link_status_wire;
    assign cfg_ltssm_state = cfg_ltssm_state_wire;
    assign cfg_hot_reset_out = cfg_hot_reset_out_wire;

    assign pcie_drp_rdy = drp_rdy_wire;
    assign pcie_drp_do = drp_do_wire;
    
    // Input assigned passthroughs
    assign drp_clk_wire   = pcie_drp_clk;
    assign drp_en_wire    = pcie_drp_en;
    assign drp_we_wire    = pcie_drp_we;
    assign drp_addr_wire  = pcie_drp_addr;
    assign drp_di_wire    = pcie_drp_di;

    // Passthrough for tandem_cplr outputs
    assign s_axis_cc_tdata_wire = s_axis_cc_tdata;
    assign s_axis_cc_tkeep_wire = s_axis_cc_tkeep;
    assign s_axis_cc_tlast_wire = s_axis_cc_tlast;
    assign s_axis_cc_tvalid_wire = s_axis_cc_tvalid;
    assign s_axis_cc_tuser_wire = s_axis_cc_tuser;
    assign s_axis_cc_tready = s_axis_cc_tready_wire[0];

    assign m_axis_cq_tdata = m_axis_cq_tdata_wire;
    assign m_axis_cq_tlast = m_axis_cq_tlast_wire;
    assign m_axis_cq_tvalid = m_axis_cq_tvalid_wire;
    assign m_axis_cq_tuser = m_axis_cq_tuser_wire;
    assign m_axis_cq_tkeep = m_axis_cq_tkeep_wire;
    assign m_axis_cq_tready_wire = {22{m_axis_cq_tready}};

    assign s_axis_rq_tdata_wire = s_axis_rq_tdata;
    assign s_axis_rq_tkeep_wire = s_axis_rq_tkeep;
    assign s_axis_rq_tlast_wire = s_axis_rq_tlast;
    assign s_axis_rq_tvalid_wire = s_axis_rq_tvalid;
    assign s_axis_rq_tuser_wire = s_axis_rq_tuser;
    assign s_axis_rq_tready = s_axis_rq_tready_wire[0];

    assign m_axis_rc_tdata = m_axis_rc_tdata_wire;
    assign m_axis_rc_tlast = m_axis_rc_tlast_wire;
    assign m_axis_rc_tvalid = m_axis_rc_tvalid_wire;
    assign m_axis_rc_tuser = m_axis_rc_tuser_wire;
    assign m_axis_rc_tkeep = m_axis_rc_tkeep_wire;
    assign m_axis_rc_tready_wire = {22{m_axis_rc_tready}};

    assign cfg_msg_transmit_done = cfg_msg_transmit_done_wire;
    assign cfg_msg_transmit_wire = cfg_msg_transmit;
    assign cfg_msg_transmit_type_wire = cfg_msg_transmit_type;
    assign cfg_msg_transmit_data_wire = cfg_msg_transmit_data;
    assign pcie_rq_tag = pcie_rq_tag_wire;
    assign pcie_rq_tag_vld = pcie_rq_tag_vld_wire;
    assign pcie_tfc_nph_av = pcie_tfc_nph_av_wire;
    assign pcie_tfc_npd_av = pcie_tfc_npd_av_wire;
    assign pcie_rq_seq_num = pcie_rq_seq_num_wire;
    assign pcie_rq_seq_num_vld = pcie_rq_seq_num_vld_wire;
    assign cfg_fc_ph = cfg_fc_ph_wire;
    assign cfg_fc_nph = cfg_fc_nph_wire;
    assign cfg_fc_cplh = cfg_fc_cplh_wire;
    assign cfg_fc_pd = cfg_fc_pd_wire;
    assign cfg_fc_npd = cfg_fc_npd_wire;
    assign cfg_fc_cpld = cfg_fc_cpld_wire;
    assign cfg_fc_sel_wire = cfg_fc_sel;
    assign pcie_cq_np_req_count = pcie_cq_np_req_count_wire;
    assign pcie_cq_np_req_wire = pcie_cq_np_req;
    assign cfg_msg_received = cfg_msg_received_wire;
    assign cfg_msg_received_type = cfg_msg_received_type_wire;
    assign cfg_msg_received_data = cfg_msg_received_data_wire;
    assign cfg_interrupt_int_wire = cfg_interrupt_int;
    assign cfg_interrupt_msi_int_wire = cfg_interrupt_msi_int;
    assign cfg_interrupt_msix_int_wire = cfg_interrupt_msix_int;
    assign user_app_rdy = 1'b1;
    assign startup_cfgclk = 1'b0;
    assign startup_cfgmclk = 1'b0;
    assign startup_eos = 1'b0;
    assign startup_preq = 1'b0;
    // Generate user_lnk_up
    assign user_lnk_up = user_lnk_up_int;
  //----------------------------------------------------------------------------------------------------------------//
endmodule
*/

//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pcie_7vx.v
// Version    : 4.0
//----------------------------------------------------------------------------//
// Project      : Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
// Filename     : rp_pcie_3_0_7vx.v                                              //
// Description  : Instantiates the GEN3 PCI Express Integrated Block. Also    //
//                connects up the GEN3 PCIe Integrated Block to the BRAM      //
//                receieve and replay buffers                                 //
//                                                                            //
//---------- PIPE Wrapper Hierarchy ------------------------------------------//
//  pcie_7vx.v                                                                //
//      PCIE_3_0                                                              //
//      pcie_bram_7vx.v                                                       //
//          pcie_bram_7vx_rep.v                                               //
//              pcie_bram_7vx_rep_8k.v                                        //
//          pcie_bram_7vx_req.v                                               //
//              pcie_bram_7vx_8k.v                                            //
//          pcie_bram_7vx_cpl.v                                               //
//              pcie_bram_7vx_8k.v                                            //
//              pcie_bram_7vx_16k.v                                           //
//----------------------------------------------------------------------------//

`timescale 1ps/1ps

module rp_pcie_7vx #(
  parameter         ARI_CAP_ENABLE = "FALSE",
  parameter         AXISTEN_IF_CC_ALIGNMENT_MODE = "FALSE",
  parameter         AXISTEN_IF_CC_PARITY_CHK = "TRUE",
  parameter         AXISTEN_IF_CQ_ALIGNMENT_MODE = "FALSE",
  parameter         AXISTEN_IF_ENABLE_CLIENT_TAG = "FALSE",
  parameter [17:0]  AXISTEN_IF_ENABLE_MSG_ROUTE = 18'h00000,
  parameter         AXISTEN_IF_ENABLE_RX_MSG_INTFC = "FALSE",
  parameter         AXISTEN_IF_RC_ALIGNMENT_MODE = "FALSE",
  parameter         AXISTEN_IF_RC_STRADDLE = "FALSE",
  parameter         AXISTEN_IF_RQ_ALIGNMENT_MODE = "FALSE",
  parameter         AXISTEN_IF_RQ_PARITY_CHK = "TRUE",
  parameter  [1:0]  AXISTEN_IF_WIDTH = 2'h2,
  parameter         CRM_CORE_CLK_FREQ_500 = "TRUE",
  parameter  [1:0]  CRM_USER_CLK_FREQ = 2'h2,
  parameter  [7:0]  DNSTREAM_LINK_NUM = 8'h00,
  parameter  [1:0]  GEN3_PCS_AUTO_REALIGN = 2'h1,
  parameter         GEN3_PCS_RX_ELECIDLE_INTERNAL = "TRUE",
  parameter  [8:0]  LL_ACK_TIMEOUT = 9'h000,
  parameter         LL_ACK_TIMEOUT_EN = "FALSE",
  parameter integer LL_ACK_TIMEOUT_FUNC = 0,
  parameter [15:0]  LL_CPL_FC_UPDATE_TIMER = 16'h0000,
  parameter         LL_CPL_FC_UPDATE_TIMER_OVERRIDE = "FALSE",
  parameter [15:0]  LL_FC_UPDATE_TIMER = 16'h0000,
  parameter         LL_FC_UPDATE_TIMER_OVERRIDE = "FALSE",
  parameter [15:0]  LL_NP_FC_UPDATE_TIMER = 16'h0000,
  parameter         LL_NP_FC_UPDATE_TIMER_OVERRIDE = "FALSE",
  parameter [15:0]  LL_P_FC_UPDATE_TIMER = 16'h0000,
  parameter         LL_P_FC_UPDATE_TIMER_OVERRIDE = "FALSE",
  parameter  [8:0]  LL_REPLAY_TIMEOUT = 9'h000,
  parameter         LL_REPLAY_TIMEOUT_EN = "FALSE",
  parameter integer LL_REPLAY_TIMEOUT_FUNC = 0,
  parameter  [9:0]  LTR_TX_MESSAGE_MINIMUM_INTERVAL = 10'h0FA,
  parameter         LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE = "FALSE",
  parameter         LTR_TX_MESSAGE_ON_LTR_ENABLE = "FALSE",
  parameter         PF0_AER_CAP_ECRC_CHECK_CAPABLE = "FALSE",
  parameter         PF0_AER_CAP_ECRC_GEN_CAPABLE = "FALSE",
  parameter [11:0]  PF0_AER_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  PF0_ARI_CAP_NEXTPTR = 12'h000,
  parameter  [7:0]  PF0_ARI_CAP_NEXT_FUNC = 8'h00,
  parameter  [3:0]  PF0_ARI_CAP_VER = 4'h1,
  parameter  [4:0]  PF0_BAR0_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR0_CONTROL = 3'h4,
  parameter  [4:0]  PF0_BAR1_APERTURE_SIZE = 5'h00,
  parameter  [2:0]  PF0_BAR1_CONTROL = 3'h0,
  parameter  [4:0]  PF0_BAR2_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR2_CONTROL = 3'h4,
  parameter  [4:0]  PF0_BAR3_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR3_CONTROL = 3'h0,
  parameter  [4:0]  PF0_BAR4_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR4_CONTROL = 3'h4,
  parameter  [4:0]  PF0_BAR5_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR5_CONTROL = 3'h0,
  parameter  [7:0]  PF0_BIST_REGISTER = 8'h00,
  parameter  [7:0]  PF0_CAPABILITY_POINTER = 8'h50,
  parameter [23:0]  PF0_CLASS_CODE = 24'h000000,
  parameter [15:0]  PF0_DEVICE_ID = 16'h0000,
  parameter         PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT = "TRUE",
  parameter         PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT = "TRUE",
  parameter         PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT = "TRUE",
  parameter         PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE = "TRUE",
  parameter         PF0_DEV_CAP2_LTR_SUPPORT = "TRUE",
  parameter  [1:0]  PF0_DEV_CAP2_OBFF_SUPPORT = 2'h0,
  parameter         PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT = "FALSE",
  parameter integer PF0_DEV_CAP_ENDPOINT_L0S_LATENCY = 0,
  parameter integer PF0_DEV_CAP_ENDPOINT_L1_LATENCY = 0,
  parameter         PF0_DEV_CAP_EXT_TAG_SUPPORTED = "TRUE",
  parameter         PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE = "TRUE",
  parameter  [2:0]  PF0_DEV_CAP_MAX_PAYLOAD_SIZE = 3'h3,
  parameter [11:0]  PF0_DPA_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF0_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF1_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF2_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF3_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF4_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF5_ARI_CAP_NEXTPTR = 12'h000,
  parameter VF0_TPHR_CAP_DEV_SPECIFIC_MODE = "TRUE",
  parameter VF0_TPHR_CAP_ENABLE = "FALSE",
  parameter VF0_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0] VF0_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0] VF0_TPHR_CAP_ST_MODE_SEL = 3'h0,
  parameter [1:0] VF0_TPHR_CAP_ST_TABLE_LOC = 2'h0,
  parameter [10:0] VF0_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0] VF0_TPHR_CAP_VER = 4'h1,
  parameter VF1_TPHR_CAP_DEV_SPECIFIC_MODE = "TRUE",
  parameter VF1_TPHR_CAP_ENABLE = "FALSE",
  parameter VF1_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0] VF1_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0] VF1_TPHR_CAP_ST_MODE_SEL = 3'h0,
  parameter [1:0] VF1_TPHR_CAP_ST_TABLE_LOC = 2'h0,
  parameter [10:0] VF1_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0] VF1_TPHR_CAP_VER = 4'h1,
  parameter VF2_TPHR_CAP_DEV_SPECIFIC_MODE = "TRUE",
  parameter VF2_TPHR_CAP_ENABLE = "FALSE",
  parameter VF2_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0] VF2_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0] VF2_TPHR_CAP_ST_MODE_SEL = 3'h0,
  parameter [1:0] VF2_TPHR_CAP_ST_TABLE_LOC = 2'h0,
  parameter [10:0] VF2_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0] VF2_TPHR_CAP_VER = 4'h1,
  parameter VF3_TPHR_CAP_DEV_SPECIFIC_MODE = "TRUE",
  parameter VF3_TPHR_CAP_ENABLE = "FALSE",
  parameter VF3_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0] VF3_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0] VF3_TPHR_CAP_ST_MODE_SEL = 3'h0,
  parameter [1:0] VF3_TPHR_CAP_ST_TABLE_LOC = 2'h0,
  parameter [10:0] VF3_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0] VF3_TPHR_CAP_VER = 4'h1,
  parameter VF4_TPHR_CAP_DEV_SPECIFIC_MODE = "TRUE",
  parameter VF4_TPHR_CAP_ENABLE = "FALSE",
  parameter VF4_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0] VF4_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0] VF4_TPHR_CAP_ST_MODE_SEL = 3'h0,
  parameter [1:0] VF4_TPHR_CAP_ST_TABLE_LOC = 2'h0,
  parameter [10:0] VF4_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0] VF4_TPHR_CAP_VER = 4'h1,
  parameter VF5_TPHR_CAP_DEV_SPECIFIC_MODE = "TRUE",
  parameter VF5_TPHR_CAP_ENABLE = "FALSE",
  parameter VF5_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0] VF5_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0] VF5_TPHR_CAP_ST_MODE_SEL = 3'h0,
  parameter [1:0] VF5_TPHR_CAP_ST_TABLE_LOC = 2'h0,
  parameter [10:0] VF5_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0] VF5_TPHR_CAP_VER = 4'h1,
  parameter  [4:0]  PF0_DPA_CAP_SUB_STATE_CONTROL = 5'h00,
  parameter         PF0_DPA_CAP_SUB_STATE_CONTROL_EN = "TRUE",
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 = 8'h00,
  parameter  [3:0]  PF0_DPA_CAP_VER = 4'h1,
  parameter [11:0]  PF0_DSN_CAP_NEXTPTR = 12'h10C,
  parameter  [4:0]  PF0_EXPANSION_ROM_APERTURE_SIZE = 5'h03,
  parameter         PF0_EXPANSION_ROM_ENABLE = "FALSE",
  parameter  [7:0]  PF0_INTERRUPT_LINE = 8'h00,
  parameter  [2:0]  PF0_INTERRUPT_PIN = 3'h1,
  parameter integer PF0_LINK_CAP_ASPM_SUPPORT = 0,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3 = 7,
  parameter         PF0_LINK_STATUS_SLOT_CLOCK_CONFIG = "TRUE",
  parameter  [9:0]  PF0_LTR_CAP_MAX_NOSNOOP_LAT = 10'h000,
  parameter  [9:0]  PF0_LTR_CAP_MAX_SNOOP_LAT = 10'h000,
  parameter [11:0]  PF0_LTR_CAP_NEXTPTR = 12'h000,
  parameter  [3:0]  PF0_LTR_CAP_VER = 4'h1,
  parameter  [7:0]  PF0_MSIX_CAP_NEXTPTR = 8'h00,
  parameter integer PF0_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  PF0_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer PF0_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  PF0_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  PF0_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer PF0_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  PF0_MSI_CAP_NEXTPTR = 8'h00,
  parameter [11:0]  PF0_PB_CAP_NEXTPTR = 12'h000,
  parameter         PF0_PB_CAP_SYSTEM_ALLOCATED = "FALSE",
  parameter  [3:0]  PF0_PB_CAP_VER = 4'h1,
  parameter  [7:0]  PF0_PM_CAP_ID = 8'h01,
  parameter  [7:0]  PF0_PM_CAP_NEXTPTR = 8'h00,
  parameter         PF0_PM_CAP_PMESUPPORT_D0 = "TRUE",
  parameter         PF0_PM_CAP_PMESUPPORT_D1 = "TRUE",
  parameter         PF0_PM_CAP_PMESUPPORT_D3HOT = "TRUE",
  parameter         PF0_PM_CAP_SUPP_D1_STATE = "TRUE",
  parameter  [2:0]  PF0_PM_CAP_VER_ID = 3'h3,
  parameter         PF0_PM_CSR_NOSOFTRESET = "TRUE",
  parameter         PF0_RBAR_CAP_ENABLE = "FALSE",
  parameter  [2:0]  PF0_RBAR_CAP_INDEX0 = 3'h0,
  parameter  [2:0]  PF0_RBAR_CAP_INDEX1 = 3'h0,
  parameter  [2:0]  PF0_RBAR_CAP_INDEX2 = 3'h0,
  parameter [11:0]  PF0_RBAR_CAP_NEXTPTR = 12'h000,
  parameter [19:0]  PF0_RBAR_CAP_SIZE0 = 20'h00000,
  parameter [19:0]  PF0_RBAR_CAP_SIZE1 = 20'h00000,
  parameter [19:0]  PF0_RBAR_CAP_SIZE2 = 20'h00000,
  parameter  [3:0]  PF0_RBAR_CAP_VER = 4'h1,
  parameter  [2:0]  PF0_RBAR_NUM = 3'h1,
  parameter  [7:0]  PF0_REVISION_ID = 8'h00,
  parameter  [4:0]  PF0_SRIOV_BAR0_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR0_CONTROL = 3'h4,
  parameter  [4:0]  PF0_SRIOV_BAR1_APERTURE_SIZE = 5'h00,
  parameter  [2:0]  PF0_SRIOV_BAR1_CONTROL = 3'h0,
  parameter  [4:0]  PF0_SRIOV_BAR2_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR2_CONTROL = 3'h4,
  parameter  [4:0]  PF0_SRIOV_BAR3_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR3_CONTROL = 3'h0,
  parameter  [4:0]  PF0_SRIOV_BAR4_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR4_CONTROL = 3'h4,
  parameter  [4:0]  PF0_SRIOV_BAR5_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR5_CONTROL = 3'h0,
  parameter [15:0]  PF0_SRIOV_CAP_INITIAL_VF = 16'h0000,
  parameter [11:0]  PF0_SRIOV_CAP_NEXTPTR = 12'h000,
  parameter [15:0]  PF0_SRIOV_CAP_TOTAL_VF = 16'h0000,
  parameter  [3:0]  PF0_SRIOV_CAP_VER = 4'h1,
  parameter [15:0]  PF0_SRIOV_FIRST_VF_OFFSET = 16'h0000,
  parameter [15:0]  PF0_SRIOV_FUNC_DEP_LINK = 16'h0000,
  parameter [31:0]  PF0_SRIOV_SUPPORTED_PAGE_SIZE = 32'h00000000,
  parameter [15:0]  PF0_SRIOV_VF_DEVICE_ID = 16'h0000,
  parameter [15:0]  PF0_SUBSYSTEM_ID = 16'h0000,
  parameter         PF0_TPHR_CAP_DEV_SPECIFIC_MODE = "TRUE",
  parameter         PF0_TPHR_CAP_ENABLE = "FALSE",
  parameter         PF0_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  PF0_TPHR_CAP_NEXTPTR = 12'h000,
  parameter  [2:0]  PF0_TPHR_CAP_ST_MODE_SEL = 3'h0,
  parameter  [1:0]  PF0_TPHR_CAP_ST_TABLE_LOC = 2'h0,
  parameter [10:0]  PF0_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter  [3:0]  PF0_TPHR_CAP_VER = 4'h1,
  parameter [11:0]  PF0_VC_CAP_NEXTPTR = 12'h000,
  parameter  [3:0]  PF0_VC_CAP_VER = 4'h1,
  parameter         PF1_AER_CAP_ECRC_CHECK_CAPABLE = "FALSE",
  parameter         PF1_AER_CAP_ECRC_GEN_CAPABLE = "FALSE",
  parameter [11:0]  PF1_AER_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  PF1_ARI_CAP_NEXTPTR = 12'h000,
  parameter  [7:0]  PF1_ARI_CAP_NEXT_FUNC = 8'h00,
  parameter  [4:0]  PF1_BAR0_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR0_CONTROL = 3'h4,
  parameter  [4:0]  PF1_BAR1_APERTURE_SIZE = 5'h00,
  parameter  [2:0]  PF1_BAR1_CONTROL = 3'h0,
  parameter  [4:0]  PF1_BAR2_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR2_CONTROL = 3'h4,
  parameter  [4:0]  PF1_BAR3_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR3_CONTROL = 3'h0,
  parameter  [4:0]  PF1_BAR4_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR4_CONTROL = 3'h4,
  parameter  [4:0]  PF1_BAR5_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR5_CONTROL = 3'h0,
  parameter  [7:0]  PF1_BIST_REGISTER = 8'h00,
  parameter  [7:0]  PF1_CAPABILITY_POINTER = 8'h50,
  parameter [23:0]  PF1_CLASS_CODE = 24'h000000,
  parameter [15:0]  PF1_DEVICE_ID = 16'h0000,
  parameter  [2:0]  PF1_DEV_CAP_MAX_PAYLOAD_SIZE = 3'h3,
  parameter [11:0]  PF1_DPA_CAP_NEXTPTR = 12'h000,
  parameter  [4:0]  PF1_DPA_CAP_SUB_STATE_CONTROL = 5'h00,
  parameter         PF1_DPA_CAP_SUB_STATE_CONTROL_EN = "TRUE",
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 = 8'h00,
  parameter  [3:0]  PF1_DPA_CAP_VER = 4'h1,
  parameter [11:0]  PF1_DSN_CAP_NEXTPTR = 12'h10C,
  parameter  [4:0]  PF1_EXPANSION_ROM_APERTURE_SIZE = 5'h03,
  parameter         PF1_EXPANSION_ROM_ENABLE = "FALSE",
  parameter  [7:0]  PF1_INTERRUPT_LINE = 8'h00,
  parameter  [2:0]  PF1_INTERRUPT_PIN = 3'h1,
  parameter  [7:0]  PF1_MSIX_CAP_NEXTPTR = 8'h00,
  parameter integer PF1_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  PF1_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer PF1_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  PF1_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  PF1_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer PF1_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  PF1_MSI_CAP_NEXTPTR = 8'h00,
  parameter [11:0]  PF1_PB_CAP_NEXTPTR = 12'h000,
  parameter         PF1_PB_CAP_SYSTEM_ALLOCATED = "FALSE",
  parameter  [3:0]  PF1_PB_CAP_VER = 4'h1,
  parameter  [7:0]  PF1_PM_CAP_ID = 8'h01,
  parameter  [7:0]  PF1_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  PF1_PM_CAP_VER_ID = 3'h3,
  parameter         PF1_RBAR_CAP_ENABLE = "FALSE",
  parameter  [2:0]  PF1_RBAR_CAP_INDEX0 = 3'h0,
  parameter  [2:0]  PF1_RBAR_CAP_INDEX1 = 3'h0,
  parameter  [2:0]  PF1_RBAR_CAP_INDEX2 = 3'h0,
  parameter [11:0]  PF1_RBAR_CAP_NEXTPTR = 12'h000,
  parameter [19:0]  PF1_RBAR_CAP_SIZE0 = 20'h00000,
  parameter [19:0]  PF1_RBAR_CAP_SIZE1 = 20'h00000,
  parameter [19:0]  PF1_RBAR_CAP_SIZE2 = 20'h00000,
  parameter  [3:0]  PF1_RBAR_CAP_VER = 4'h1,
  parameter  [2:0]  PF1_RBAR_NUM = 3'h1,
  parameter  [7:0]  PF1_REVISION_ID = 8'h00,
  parameter  [4:0]  PF1_SRIOV_BAR0_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR0_CONTROL = 3'h4,
  parameter  [4:0]  PF1_SRIOV_BAR1_APERTURE_SIZE = 5'h00,
  parameter  [2:0]  PF1_SRIOV_BAR1_CONTROL = 3'h0,
  parameter  [4:0]  PF1_SRIOV_BAR2_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR2_CONTROL = 3'h4,
  parameter  [4:0]  PF1_SRIOV_BAR3_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR3_CONTROL = 3'h0,
  parameter  [4:0]  PF1_SRIOV_BAR4_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR4_CONTROL = 3'h4,
  parameter  [4:0]  PF1_SRIOV_BAR5_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR5_CONTROL = 3'h0,
  parameter [15:0]  PF1_SRIOV_CAP_INITIAL_VF = 16'h0000,
  parameter [11:0]  PF1_SRIOV_CAP_NEXTPTR = 12'h000,
  parameter [15:0]  PF1_SRIOV_CAP_TOTAL_VF = 16'h0000,
  parameter  [3:0]  PF1_SRIOV_CAP_VER = 4'h1,
  parameter [15:0]  PF1_SRIOV_FIRST_VF_OFFSET = 16'h0000,
  parameter [15:0]  PF1_SRIOV_FUNC_DEP_LINK = 16'h0000,
  parameter [31:0]  PF1_SRIOV_SUPPORTED_PAGE_SIZE = 32'h00000000,
  parameter [15:0]  PF1_SRIOV_VF_DEVICE_ID = 16'h0000,
  parameter [15:0]  PF1_SUBSYSTEM_ID = 16'h0000,
  parameter         PF1_TPHR_CAP_DEV_SPECIFIC_MODE = "TRUE",
  parameter         PF1_TPHR_CAP_ENABLE = "FALSE",
  parameter         PF1_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  PF1_TPHR_CAP_NEXTPTR = 12'h000,
  parameter  [2:0]  PF1_TPHR_CAP_ST_MODE_SEL = 3'h0,
  parameter  [1:0]  PF1_TPHR_CAP_ST_TABLE_LOC = 2'h0,
  parameter [10:0]  PF1_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter  [3:0]  PF1_TPHR_CAP_VER = 4'h1,
  parameter         PL_DISABLE_EI_INFER_IN_L0 = "FALSE",
  parameter         PL_DISABLE_GEN3_DC_BALANCE = "FALSE",
  parameter         PL_DISABLE_SCRAMBLING = "FALSE",
  parameter         PL_DISABLE_UPCONFIG_CAPABLE = "FALSE",
  parameter         PL_EQ_ADAPT_DISABLE_COEFF_CHECK = "FALSE",
  parameter         PL_EQ_ADAPT_DISABLE_PRESET_CHECK = "FALSE",
  parameter  [4:0]  PL_EQ_ADAPT_ITER_COUNT = 5'h02,
  parameter  [1:0]  PL_EQ_ADAPT_REJECT_RETRY_COUNT = 2'h1,
  parameter         PL_EQ_BYPASS_PHASE23 = "FALSE",
  parameter         PL_EQ_SHORT_ADAPT_PHASE = "FALSE",
  parameter [15:0]  PL_LANE0_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE1_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE2_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE3_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE4_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE5_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE6_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE7_EQ_CONTROL = 16'h3F00,
  parameter  [2:0]  PL_LINK_CAP_MAX_LINK_SPEED = 3'h4,
  parameter  [3:0]  PL_LINK_CAP_MAX_LINK_WIDTH = 4'h8,
  parameter integer PL_N_FTS_COMCLK_GEN1 = 255,
  parameter integer PL_N_FTS_COMCLK_GEN2 = 255,
  parameter integer PL_N_FTS_COMCLK_GEN3 = 255,
  parameter integer PL_N_FTS_GEN1 = 255,
  parameter integer PL_N_FTS_GEN2 = 255,
  parameter integer PL_N_FTS_GEN3 = 255,
  parameter         PL_SIM_FAST_LINK_TRAINING = "FALSE",
  parameter         PL_UPSTREAM_FACING = "TRUE",
  parameter [15:0]  PM_ASPML0S_TIMEOUT = 16'h05DC,
  parameter [19:0]  PM_ASPML1_ENTRY_DELAY = 20'h00000,
  parameter         PM_ENABLE_SLOT_POWER_CAPTURE = "TRUE",
  parameter [31:0]  PM_L1_REENTRY_DELAY = 32'h00000000,
  parameter [19:0]  PM_PME_SERVICE_TIMEOUT_DELAY = 20'h186A0,
  parameter [15:0]  PM_PME_TURNOFF_ACK_DELAY = 16'h0064,
  parameter         SIM_VERSION = "1.0",
  parameter integer SPARE_BIT0 = 0,
  parameter integer SPARE_BIT1 = 0,
  parameter integer SPARE_BIT2 = 0,
  parameter integer SPARE_BIT3 = 0,
  parameter integer SPARE_BIT4 = 0,
  parameter integer SPARE_BIT5 = 0,
  parameter integer SPARE_BIT6 = 0,
  parameter integer SPARE_BIT7 = 0,
  parameter integer SPARE_BIT8 = 0,
  parameter  [7:0]  SPARE_BYTE0 = 8'h00,
  parameter  [7:0]  SPARE_BYTE1 = 8'h00,
  parameter  [7:0]  SPARE_BYTE2 = 8'h00,
  parameter  [7:0]  SPARE_BYTE3 = 8'h00,
  parameter [31:0]  SPARE_WORD0 = 32'h00000000,
  parameter [31:0]  SPARE_WORD1 = 32'h00000000,
  parameter [31:0]  SPARE_WORD2 = 32'h00000000,
  parameter [31:0]  SPARE_WORD3 = 32'h00000000,
  parameter         SRIOV_CAP_ENABLE = "FALSE",
  parameter [23:0]  TL_COMPL_TIMEOUT_REG0 = 24'hBEBC20,
  parameter [27:0]  TL_COMPL_TIMEOUT_REG1 = 28'h0000000,
  parameter [11:0]  TL_CREDITS_CD = 12'h3E0,
  parameter  [7:0]  TL_CREDITS_CH = 8'h20,
  parameter [11:0]  TL_CREDITS_NPD = 12'h028,
  parameter  [7:0]  TL_CREDITS_NPH = 8'h20,
  parameter [11:0]  TL_CREDITS_PD = 12'h198,
  parameter  [7:0]  TL_CREDITS_PH = 8'h20,
  parameter         TL_ENABLE_MESSAGE_RID_CHECK_ENABLE = "TRUE",
  parameter         TL_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE = "FALSE",
  parameter         TL_LEGACY_CFG_EXTEND_INTERFACE_ENABLE = "FALSE",
  parameter         TL_LEGACY_MODE_ENABLE = "FALSE",
  parameter         TL_PF_ENABLE_REG = "FALSE",
  parameter         TL_TAG_MGMT_ENABLE = "TRUE",
  parameter  [7:0]  VF0_CAPABILITY_POINTER = 8'h50,
  parameter integer VF0_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF0_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF0_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF0_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF0_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF0_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF0_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF0_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF0_PM_CAP_VER_ID = 3'h3,
  parameter integer VF1_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF1_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF1_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF1_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF1_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF1_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF1_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF1_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF1_PM_CAP_VER_ID = 3'h3,
  parameter integer VF2_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF2_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF2_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF2_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF2_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF2_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF2_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF2_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF2_PM_CAP_VER_ID = 3'h3,
  parameter integer VF3_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF3_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF3_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF3_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF3_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF3_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF3_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF3_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF3_PM_CAP_VER_ID = 3'h3,
  parameter integer VF4_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF4_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF4_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF4_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF4_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF4_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF4_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF4_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF4_PM_CAP_VER_ID = 3'h3,
  parameter integer VF5_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF5_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF5_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF5_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF5_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF5_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF5_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF5_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF5_PM_CAP_VER_ID = 3'h3,
  parameter         IMPL_TARGET = "HARD",
  parameter         NO_DECODE_LOGIC = "TRUE",
  parameter         INTERFACE_SPEED = "500 MHZ",
  parameter         COMPLETION_SPACE = "16KB"
) (
  output         CFGERRCOROUT,
  output         CFGERRFATALOUT,
  output         CFGERRNONFATALOUT,
  output         CFGEXTREADRECEIVED,
  output         CFGEXTWRITERECEIVED,
  output         CFGHOTRESETOUT,
  output         CFGINPUTUPDATEDONE,
  output         CFGINTERRUPTAOUTPUT,
  output         CFGINTERRUPTBOUTPUT,
  output         CFGINTERRUPTCOUTPUT,
  output         CFGINTERRUPTDOUTPUT,
  output         CFGINTERRUPTMSIFAIL,
  output         CFGINTERRUPTMSIMASKUPDATE,
  output         CFGINTERRUPTMSISENT,
  output         CFGINTERRUPTMSIXFAIL,
  output         CFGINTERRUPTMSIXSENT,
  output         CFGINTERRUPTSENT,
  output         CFGLOCALERROR,
  output         CFGLTRENABLE,
  output         CFGMCUPDATEDONE,
  output         CFGMGMTREADWRITEDONE,
  output         CFGMSGRECEIVED,
  output         CFGMSGTRANSMITDONE,
  output         CFGPERFUNCTIONUPDATEDONE,
  output         CFGPHYLINKDOWN,
  output         CFGPLSTATUSCHANGE,
  output         CFGPOWERSTATECHANGEINTERRUPT,
  output         CFGTPHSTTREADENABLE,
  output         CFGTPHSTTWRITEENABLE,
  output         DRPRDY,
  output         MAXISCQTLAST,
  output         MAXISCQTVALID,
  output         MAXISRCTLAST,
  output         MAXISRCTVALID,
  output         PCIERQSEQNUMVLD,
  output         PCIERQTAGVLD,
  output         PIPERX0POLARITY,
  output         PIPERX1POLARITY,
  output         PIPERX2POLARITY,
  output         PIPERX3POLARITY,
  output         PIPERX4POLARITY,
  output         PIPERX5POLARITY,
  output         PIPERX6POLARITY,
  output         PIPERX7POLARITY,
  output         PIPETX0COMPLIANCE,
  output         PIPETX0DATAVALID,
  output         PIPETX0ELECIDLE,
  output         PIPETX0STARTBLOCK,
  output         PIPETX1COMPLIANCE,
  output         PIPETX1DATAVALID,
  output         PIPETX1ELECIDLE,
  output         PIPETX1STARTBLOCK,
  output         PIPETX2COMPLIANCE,
  output         PIPETX2DATAVALID,
  output         PIPETX2ELECIDLE,
  output         PIPETX2STARTBLOCK,
  output         PIPETX3COMPLIANCE,
  output         PIPETX3DATAVALID,
  output         PIPETX3ELECIDLE,
  output         PIPETX3STARTBLOCK,
  output         PIPETX4COMPLIANCE,
  output         PIPETX4DATAVALID,
  output         PIPETX4ELECIDLE,
  output         PIPETX4STARTBLOCK,
  output         PIPETX5COMPLIANCE,
  output         PIPETX5DATAVALID,
  output         PIPETX5ELECIDLE,
  output         PIPETX5STARTBLOCK,
  output         PIPETX6COMPLIANCE,
  output         PIPETX6DATAVALID,
  output         PIPETX6ELECIDLE,
  output         PIPETX6STARTBLOCK,
  output         PIPETX7COMPLIANCE,
  output         PIPETX7DATAVALID,
  output         PIPETX7ELECIDLE,
  output         PIPETX7STARTBLOCK,
  output         PIPETXDEEMPH,
  output         PIPETXRCVRDET,
  output         PIPETXRESET,
  output         PIPETXSWING,
  output         PLEQINPROGRESS,
  output  [11:0] CFGFCCPLD,
  output  [11:0] CFGFCNPD,
  output  [11:0] CFGFCPD,
  output  [11:0] CFGVFSTATUS,
  output  [15:0] CFGPERFUNCSTATUSDATA,
  output  [15:0] DBGDATAOUT,
  output  [15:0] DRPDO,
  output  [17:0] CFGVFPOWERSTATE,
  output  [17:0] CFGVFTPHSTMODE,
  output   [1:0] CFGDPASUBSTATECHANGE,
  output   [1:0] CFGFLRINPROCESS,
  output   [1:0] CFGINTERRUPTMSIENABLE,
  output   [1:0] CFGINTERRUPTMSIXENABLE,
  output   [1:0] CFGINTERRUPTMSIXMASK,
  output   [1:0] CFGLINKPOWERSTATE,
  output   [1:0] CFGOBFFENABLE,
  output   [1:0] CFGPHYLINKSTATUS,
  output   [1:0] CFGRCBSTATUS,
  output   [1:0] CFGTPHREQUESTERENABLE,
  output   [1:0] PCIETFCNPDAV,
  output   [1:0] PCIETFCNPHAV,
  output   [1:0] PIPERX0EQCONTROL,
  output   [1:0] PIPERX1EQCONTROL,
  output   [1:0] PIPERX2EQCONTROL,
  output   [1:0] PIPERX3EQCONTROL,
  output   [1:0] PIPERX4EQCONTROL,
  output   [1:0] PIPERX5EQCONTROL,
  output   [1:0] PIPERX6EQCONTROL,
  output   [1:0] PIPERX7EQCONTROL,
  output   [1:0] PIPETX0CHARISK,
  output   [1:0] PIPETX0EQCONTROL,
  output   [1:0] PIPETX0POWERDOWN,
  output   [1:0] PIPETX0SYNCHEADER,
  output   [1:0] PIPETX1CHARISK,
  output   [1:0] PIPETX1EQCONTROL,
  output   [1:0] PIPETX1POWERDOWN,
  output   [1:0] PIPETX1SYNCHEADER,
  output   [1:0] PIPETX2CHARISK,
  output   [1:0] PIPETX2EQCONTROL,
  output   [1:0] PIPETX2POWERDOWN,
  output   [1:0] PIPETX2SYNCHEADER,
  output   [1:0] PIPETX3CHARISK,
  output   [1:0] PIPETX3EQCONTROL,
  output   [1:0] PIPETX3POWERDOWN,
  output   [1:0] PIPETX3SYNCHEADER,
  output   [1:0] PIPETX4CHARISK,
  output   [1:0] PIPETX4EQCONTROL,
  output   [1:0] PIPETX4POWERDOWN,
  output   [1:0] PIPETX4SYNCHEADER,
  output   [1:0] PIPETX5CHARISK,
  output   [1:0] PIPETX5EQCONTROL,
  output   [1:0] PIPETX5POWERDOWN,
  output   [1:0] PIPETX5SYNCHEADER,
  output   [1:0] PIPETX6CHARISK,
  output   [1:0] PIPETX6EQCONTROL,
  output   [1:0] PIPETX6POWERDOWN,
  output   [1:0] PIPETX6SYNCHEADER,
  output   [1:0] PIPETX7CHARISK,
  output   [1:0] PIPETX7EQCONTROL,
  output   [1:0] PIPETX7POWERDOWN,
  output   [1:0] PIPETX7SYNCHEADER,
  output   [1:0] PIPETXRATE,
  output   [1:0] PLEQPHASE,
  output [255:0] MAXISCQTDATA,
  output [255:0] MAXISRCTDATA,
  output   [2:0] CFGCURRENTSPEED,
  output   [2:0] CFGMAXPAYLOAD,
  output   [2:0] CFGMAXREADREQ,
  output   [2:0] CFGTPHFUNCTIONNUM,
  output   [2:0] PIPERX0EQPRESET,
  output   [2:0] PIPERX1EQPRESET,
  output   [2:0] PIPERX2EQPRESET,
  output   [2:0] PIPERX3EQPRESET,
  output   [2:0] PIPERX4EQPRESET,
  output   [2:0] PIPERX5EQPRESET,
  output   [2:0] PIPERX6EQPRESET,
  output   [2:0] PIPERX7EQPRESET,
  output   [2:0] PIPETXMARGIN,
  output  [31:0] CFGEXTWRITEDATA,
  output  [31:0] CFGINTERRUPTMSIDATA,
  output  [31:0] CFGMGMTREADDATA,
  output  [31:0] CFGTPHSTTWRITEDATA,
  output  [31:0] PIPETX0DATA,
  output  [31:0] PIPETX1DATA,
  output  [31:0] PIPETX2DATA,
  output  [31:0] PIPETX3DATA,
  output  [31:0] PIPETX4DATA,
  output  [31:0] PIPETX5DATA,
  output  [31:0] PIPETX6DATA,
  output  [31:0] PIPETX7DATA,
  output   [3:0] CFGEXTWRITEBYTEENABLE,
  output   [3:0] CFGNEGOTIATEDWIDTH,
  output   [3:0] CFGTPHSTTWRITEBYTEVALID,
  output   [3:0] PCIERQSEQNUM,
  output   [3:0] PIPERX0EQLPTXPRESET,
  output   [3:0] PIPERX1EQLPTXPRESET,
  output   [3:0] PIPERX2EQLPTXPRESET,
  output   [3:0] PIPERX3EQLPTXPRESET,
  output   [3:0] PIPERX4EQLPTXPRESET,
  output   [3:0] PIPERX5EQLPTXPRESET,
  output   [3:0] PIPERX6EQLPTXPRESET,
  output   [3:0] PIPERX7EQLPTXPRESET,
  output   [3:0] PIPETX0EQPRESET,
  output   [3:0] PIPETX1EQPRESET,
  output   [3:0] PIPETX2EQPRESET,
  output   [3:0] PIPETX3EQPRESET,
  output   [3:0] PIPETX4EQPRESET,
  output   [3:0] PIPETX5EQPRESET,
  output   [3:0] PIPETX6EQPRESET,
  output   [3:0] PIPETX7EQPRESET,
  output   [3:0] SAXISCCTREADY,
  output   [3:0] SAXISRQTREADY,
  output   [4:0] CFGMSGRECEIVEDTYPE,
  output   [4:0] CFGTPHSTTADDRESS,
  output   [5:0] CFGFUNCTIONPOWERSTATE,
  output   [5:0] CFGINTERRUPTMSIMMENABLE,
  output   [5:0] CFGINTERRUPTMSIVFENABLE,
  output   [5:0] CFGINTERRUPTMSIXVFENABLE,
  output   [5:0] CFGINTERRUPTMSIXVFMASK,
  output   [5:0] CFGLTSSMSTATE,
  output   [5:0] CFGTPHSTMODE,
  output   [5:0] CFGVFFLRINPROCESS,
  output   [5:0] CFGVFTPHREQUESTERENABLE,
  output   [5:0] PCIECQNPREQCOUNT,
  output   [5:0] PCIERQTAG,
  output   [5:0] PIPERX0EQLPLFFS,
  output   [5:0] PIPERX1EQLPLFFS,
  output   [5:0] PIPERX2EQLPLFFS,
  output   [5:0] PIPERX3EQLPLFFS,
  output   [5:0] PIPERX4EQLPLFFS,
  output   [5:0] PIPERX5EQLPLFFS,
  output   [5:0] PIPERX6EQLPLFFS,
  output   [5:0] PIPERX7EQLPLFFS,
  output   [5:0] PIPETX0EQDEEMPH,
  output   [5:0] PIPETX1EQDEEMPH,
  output   [5:0] PIPETX2EQDEEMPH,
  output   [5:0] PIPETX3EQDEEMPH,
  output   [5:0] PIPETX4EQDEEMPH,
  output   [5:0] PIPETX5EQDEEMPH,
  output   [5:0] PIPETX6EQDEEMPH,
  output   [5:0] PIPETX7EQDEEMPH,
  output  [74:0] MAXISRCTUSER,
  output   [7:0] CFGEXTFUNCTIONNUMBER,
  output   [7:0] CFGFCCPLH,
  output   [7:0] CFGFCNPH,
  output   [7:0] CFGFCPH,
  output   [7:0] CFGFUNCTIONSTATUS,
  output   [7:0] CFGMSGRECEIVEDDATA,
  output   [7:0] MAXISCQTKEEP,
  output   [7:0] MAXISRCTKEEP,
  output   [7:0] PLGEN3PCSRXSLIDE,
  output  [84:0] MAXISCQTUSER,
  output   [9:0] CFGEXTREGISTERNUMBER,
  input          CFGCONFIGSPACEENABLE,
  input          CFGERRCORIN,
  input          CFGERRUNCORIN,
  input          CFGEXTREADDATAVALID,
  input          CFGHOTRESETIN,
  input          CFGINPUTUPDATEREQUEST,
  input          CFGINTERRUPTMSITPHPRESENT,
  input          CFGINTERRUPTMSIXINT,
  input          CFGLINKTRAININGENABLE,
  input          CFGMCUPDATEREQUEST,
  input          CFGMGMTREAD,
  input          CFGMGMTTYPE1CFGREGACCESS,
  input          CFGMGMTWRITE,
  input          CFGMSGTRANSMIT,
  input          CFGPERFUNCTIONOUTPUTREQUEST,
  input          CFGPOWERSTATECHANGEACK,
  input          CFGREQPMTRANSITIONL23READY,
  input          CFGTPHSTTREADDATAVALID,
  input          CORECLK,
  input          CORECLKMICOMPLETIONRAML,
  input          CORECLKMICOMPLETIONRAMU,
  input          CORECLKMIREPLAYRAM,
  input          CORECLKMIREQUESTRAM,
  input          DRPCLK,
  input          DRPEN,
  input          DRPWE,
  input          MGMTRESETN,
  input          MGMTSTICKYRESETN,
  input          PCIECQNPREQ,
  input          PIPECLK,
  input          PIPERESETN,
  input          PIPERX0DATAVALID,
  input          PIPERX0ELECIDLE,
  input          PIPERX0EQDONE,
  input          PIPERX0EQLPADAPTDONE,
  input          PIPERX0EQLPLFFSSEL,
  input          PIPERX0PHYSTATUS,
  input          PIPERX0STARTBLOCK,
  input          PIPERX0VALID,
  input          PIPERX1DATAVALID,
  input          PIPERX1ELECIDLE,
  input          PIPERX1EQDONE,
  input          PIPERX1EQLPADAPTDONE,
  input          PIPERX1EQLPLFFSSEL,
  input          PIPERX1PHYSTATUS,
  input          PIPERX1STARTBLOCK,
  input          PIPERX1VALID,
  input          PIPERX2DATAVALID,
  input          PIPERX2ELECIDLE,
  input          PIPERX2EQDONE,
  input          PIPERX2EQLPADAPTDONE,
  input          PIPERX2EQLPLFFSSEL,
  input          PIPERX2PHYSTATUS,
  input          PIPERX2STARTBLOCK,
  input          PIPERX2VALID,
  input          PIPERX3DATAVALID,
  input          PIPERX3ELECIDLE,
  input          PIPERX3EQDONE,
  input          PIPERX3EQLPADAPTDONE,
  input          PIPERX3EQLPLFFSSEL,
  input          PIPERX3PHYSTATUS,
  input          PIPERX3STARTBLOCK,
  input          PIPERX3VALID,
  input          PIPERX4DATAVALID,
  input          PIPERX4ELECIDLE,
  input          PIPERX4EQDONE,
  input          PIPERX4EQLPADAPTDONE,
  input          PIPERX4EQLPLFFSSEL,
  input          PIPERX4PHYSTATUS,
  input          PIPERX4STARTBLOCK,
  input          PIPERX4VALID,
  input          PIPERX5DATAVALID,
  input          PIPERX5ELECIDLE,
  input          PIPERX5EQDONE,
  input          PIPERX5EQLPADAPTDONE,
  input          PIPERX5EQLPLFFSSEL,
  input          PIPERX5PHYSTATUS,
  input          PIPERX5STARTBLOCK,
  input          PIPERX5VALID,
  input          PIPERX6DATAVALID,
  input          PIPERX6ELECIDLE,
  input          PIPERX6EQDONE,
  input          PIPERX6EQLPADAPTDONE,
  input          PIPERX6EQLPLFFSSEL,
  input          PIPERX6PHYSTATUS,
  input          PIPERX6STARTBLOCK,
  input          PIPERX6VALID,
  input          PIPERX7DATAVALID,
  input          PIPERX7ELECIDLE,
  input          PIPERX7EQDONE,
  input          PIPERX7EQLPADAPTDONE,
  input          PIPERX7EQLPLFFSSEL,
  input          PIPERX7PHYSTATUS,
  input          PIPERX7STARTBLOCK,
  input          PIPERX7VALID,
  input          PIPETX0EQDONE,
  input          PIPETX1EQDONE,
  input          PIPETX2EQDONE,
  input          PIPETX3EQDONE,
  input          PIPETX4EQDONE,
  input          PIPETX5EQDONE,
  input          PIPETX6EQDONE,
  input          PIPETX7EQDONE,
  input          PLDISABLESCRAMBLER,
  input          PLEQRESETEIEOSCOUNT,
  input          PLGEN3PCSDISABLE,
  input          RECCLK,
  input          RESETN,
  input          SAXISCCTLAST,
  input          SAXISCCTVALID,
  input          SAXISRQTLAST,
  input          SAXISRQTVALID,
  input          USERCLK,
  input   [10:0] DRPADDR,
  input   [15:0] CFGDEVID,
  input   [15:0] CFGSUBSYSID,
  input   [15:0] CFGSUBSYSVENDID,
  input   [15:0] CFGVENDID,
  input   [15:0] DRPDI,
  input   [17:0] PIPERX0EQLPNEWTXCOEFFORPRESET,
  input   [17:0] PIPERX1EQLPNEWTXCOEFFORPRESET,
  input   [17:0] PIPERX2EQLPNEWTXCOEFFORPRESET,
  input   [17:0] PIPERX3EQLPNEWTXCOEFFORPRESET,
  input   [17:0] PIPERX4EQLPNEWTXCOEFFORPRESET,
  input   [17:0] PIPERX5EQLPNEWTXCOEFFORPRESET,
  input   [17:0] PIPERX6EQLPNEWTXCOEFFORPRESET,
  input   [17:0] PIPERX7EQLPNEWTXCOEFFORPRESET,
  input   [17:0] PIPETX0EQCOEFF,
  input   [17:0] PIPETX1EQCOEFF,
  input   [17:0] PIPETX2EQCOEFF,
  input   [17:0] PIPETX3EQCOEFF,
  input   [17:0] PIPETX4EQCOEFF,
  input   [17:0] PIPETX5EQCOEFF,
  input   [17:0] PIPETX6EQCOEFF,
  input   [17:0] PIPETX7EQCOEFF,
  input   [18:0] CFGMGMTADDR,
  input    [1:0] CFGFLRDONE,
  input    [1:0] CFGINTERRUPTMSITPHTYPE,
  input    [1:0] CFGINTERRUPTPENDING,
  input    [1:0] PIPERX0CHARISK,
  input    [1:0] PIPERX0SYNCHEADER,
  input    [1:0] PIPERX1CHARISK,
  input    [1:0] PIPERX1SYNCHEADER,
  input    [1:0] PIPERX2CHARISK,
  input    [1:0] PIPERX2SYNCHEADER,
  input    [1:0] PIPERX3CHARISK,
  input    [1:0] PIPERX3SYNCHEADER,
  input    [1:0] PIPERX4CHARISK,
  input    [1:0] PIPERX4SYNCHEADER,
  input    [1:0] PIPERX5CHARISK,
  input    [1:0] PIPERX5SYNCHEADER,
  input    [1:0] PIPERX6CHARISK,
  input    [1:0] PIPERX6SYNCHEADER,
  input    [1:0] PIPERX7CHARISK,
  input    [1:0] PIPERX7SYNCHEADER,
  input   [21:0] MAXISCQTREADY,
  input   [21:0] MAXISRCTREADY,
  input  [255:0] SAXISCCTDATA,
  input  [255:0] SAXISRQTDATA,
  input    [2:0] CFGDSFUNCTIONNUMBER,
  input    [2:0] CFGFCSEL,
  input    [2:0] CFGINTERRUPTMSIATTR,
  input    [2:0] CFGINTERRUPTMSIFUNCTIONNUMBER,
  input    [2:0] CFGMSGTRANSMITTYPE,
  input    [2:0] CFGPERFUNCSTATUSCONTROL,
  input    [2:0] CFGPERFUNCTIONNUMBER,
  input    [2:0] PIPERX0STATUS,
  input    [2:0] PIPERX1STATUS,
  input    [2:0] PIPERX2STATUS,
  input    [2:0] PIPERX3STATUS,
  input    [2:0] PIPERX4STATUS,
  input    [2:0] PIPERX5STATUS,
  input    [2:0] PIPERX6STATUS,
  input    [2:0] PIPERX7STATUS,
  input   [31:0] CFGEXTREADDATA,
  input   [31:0] CFGINTERRUPTMSIINT,
  input   [31:0] CFGINTERRUPTMSIXDATA,
  input   [31:0] CFGMGMTWRITEDATA,
  input   [31:0] CFGMSGTRANSMITDATA,
  input   [31:0] CFGTPHSTTREADDATA,
  input   [31:0] PIPERX0DATA,
  input   [31:0] PIPERX1DATA,
  input   [31:0] PIPERX2DATA,
  input   [31:0] PIPERX3DATA,
  input   [31:0] PIPERX4DATA,
  input   [31:0] PIPERX5DATA,
  input   [31:0] PIPERX6DATA,
  input   [31:0] PIPERX7DATA,
  input   [32:0] SAXISCCTUSER,
  input    [3:0] CFGINTERRUPTINT,
  input    [3:0] CFGINTERRUPTMSISELECT,
  input    [3:0] CFGMGMTBYTEENABLE,
  input    [4:0] CFGDSDEVICENUMBER,
  input   [59:0] SAXISRQTUSER,
  input    [5:0] CFGVFFLRDONE,
  input    [5:0] PIPEEQFS,
  input    [5:0] PIPEEQLF,
  input   [63:0] CFGDSN,
  input   [63:0] CFGINTERRUPTMSIPENDINGSTATUS,
  input   [63:0] CFGINTERRUPTMSIXADDRESS,
  input    [7:0] CFGDSBUSNUMBER,
  input    [7:0] CFGDSPORTNUMBER,
  input    [7:0] CFGREVID,
  input    [7:0] PLGEN3PCSRXSYNCDONE,
  input    [7:0] SAXISCCTKEEP,
  input    [7:0] SAXISRQTKEEP,
  input    [8:0] CFGINTERRUPTMSITPHSTTAG
);

  //wire [1:0]   MIREPLAYRAMREADENABLE;
  wire [1:0]   MIREPLAYRAMWRITEENABLE;
  wire [3:0]   MICOMPLETIONRAMREADENABLEL;
  wire [3:0]   MICOMPLETIONRAMREADENABLEU;
  wire [3:0]   MICOMPLETIONRAMWRITEENABLEL;
  wire [3:0]   MICOMPLETIONRAMWRITEENABLEU;
  wire [3:0]   MIREQUESTRAMREADENABLE;
  wire [3:0]   MIREQUESTRAMWRITEENABLE;
  wire [71:0]  MICOMPLETIONRAMWRITEDATAL;
  wire [71:0]  MICOMPLETIONRAMWRITEDATAU;
  wire [8:0]   MIREPLAYRAMADDRESS;
  wire [8:0]   MIREQUESTRAMREADADDRESSA;
  wire [8:0]   MIREQUESTRAMREADADDRESSB;
  wire [8:0]   MIREQUESTRAMWRITEADDRESSA;
  wire [8:0]   MIREQUESTRAMWRITEADDRESSB;
  wire [9:0]   MICOMPLETIONRAMREADADDRESSAL;
  wire [9:0]   MICOMPLETIONRAMREADADDRESSAU;
  wire [9:0]   MICOMPLETIONRAMREADADDRESSBL;
  wire [9:0]   MICOMPLETIONRAMREADADDRESSBU;
  wire [9:0]   MICOMPLETIONRAMWRITEADDRESSAL;
  wire [9:0]   MICOMPLETIONRAMWRITEADDRESSAU;
  wire [9:0]   MICOMPLETIONRAMWRITEADDRESSBL;
  wire [9:0]   MICOMPLETIONRAMWRITEADDRESSBU;

//-------wires (for connections required for timing closure)-------

(* S="TRUE" *)   wire [143:0] MICOMPLETIONRAMWRITEDATA;
(* S="TRUE" *)   wire [143:0] MIREPLAYRAMWRITEDATA;
(* S="TRUE" *)   wire [143:0] MIREQUESTRAMWRITEDATA;

(* S="TRUE" *)   wire [143:0] MICOMPLETIONRAMREADDATA;
(* S="TRUE" *)   wire [143:0] MIREPLAYRAMREADDATA;
(* S="TRUE" *)   wire [143:0] MIREQUESTRAMREADDATA;

  wire [15:0] mim_cpl_wdip;
  wire [15:0] mim_rep_wdip;
  wire [15:0] mim_req_wdip;
  wire [15:0] mim_cpl_rdop;
  wire [15:0] mim_rep_rdop;
  wire [15:0] mim_req_rdop;

  wire [127:0] mim_cpl_wdata;
  wire [127:0] mim_rep_wdata;
  wire [127:0] mim_req_wdata;

  wire [127:0] mim_cpl_rdata;
  wire [127:0] mim_rep_rdata;
  wire [127:0] mim_req_rdata;


//----------------Connections required for timing closure----------------

//----------------rep-------------------------------------

assign  MIREPLAYRAMREADDATA =  {mim_rep_rdop[15], mim_rep_rdata[127:120],
                                mim_rep_rdop[14], mim_rep_rdata[119:112],
                                mim_rep_rdop[13], mim_rep_rdata[111:104],
                                mim_rep_rdop[12], mim_rep_rdata[103:96],
                                mim_rep_rdop[11], mim_rep_rdata[95:88],
                                mim_rep_rdop[10], mim_rep_rdata[87:80],
                                mim_rep_rdop[9], mim_rep_rdata[79:72],
                                mim_rep_rdop[8], mim_rep_rdata[71:64],
                                mim_rep_rdop[7], mim_rep_rdata[63:56],
                                mim_rep_rdop[6], mim_rep_rdata[55:48],
                                mim_rep_rdop[5], mim_rep_rdata[47:40],
                                mim_rep_rdop[4], mim_rep_rdata[39:32],
                                mim_rep_rdop[3], mim_rep_rdata[31:24],
                                mim_rep_rdop[2], mim_rep_rdata[23:16],
                                mim_rep_rdop[1], mim_rep_rdata[15:8],
                                mim_rep_rdop[0], mim_rep_rdata[7:0]};


assign mim_rep_wdip =    {MIREPLAYRAMWRITEDATA[143],
                          MIREPLAYRAMWRITEDATA[134],
                          MIREPLAYRAMWRITEDATA[125],
                          MIREPLAYRAMWRITEDATA[116],
                          MIREPLAYRAMWRITEDATA[107],
                          MIREPLAYRAMWRITEDATA[98],
                          MIREPLAYRAMWRITEDATA[89],
                          MIREPLAYRAMWRITEDATA[80],
                          MIREPLAYRAMWRITEDATA[71],
                          MIREPLAYRAMWRITEDATA[62],
                          MIREPLAYRAMWRITEDATA[53],
                          MIREPLAYRAMWRITEDATA[44],
                          MIREPLAYRAMWRITEDATA[35],
                          MIREPLAYRAMWRITEDATA[26],
                          MIREPLAYRAMWRITEDATA[17],
                          MIREPLAYRAMWRITEDATA[8]};


assign mim_rep_wdata =   {MIREPLAYRAMWRITEDATA[142:135],
                          MIREPLAYRAMWRITEDATA[133:126],
                          MIREPLAYRAMWRITEDATA[124:117],
                          MIREPLAYRAMWRITEDATA[115:108],
                          MIREPLAYRAMWRITEDATA[106:99],
                          MIREPLAYRAMWRITEDATA[97:90],
                          MIREPLAYRAMWRITEDATA[88:81],
                          MIREPLAYRAMWRITEDATA[79:72],
                          MIREPLAYRAMWRITEDATA[70:63],
                          MIREPLAYRAMWRITEDATA[61:54],
                          MIREPLAYRAMWRITEDATA[52:45],
                          MIREPLAYRAMWRITEDATA[43:36],
                          MIREPLAYRAMWRITEDATA[34:27],
                          MIREPLAYRAMWRITEDATA[25:18],
                          MIREPLAYRAMWRITEDATA[16:9],
                          MIREPLAYRAMWRITEDATA[7:0]};


//----------------req-------------------------------------

assign  MIREQUESTRAMREADDATA =  {mim_req_rdop[15], mim_req_rdata[127:120],
                                 mim_req_rdop[14], mim_req_rdata[119:112],
                                 mim_req_rdop[13], mim_req_rdata[111:104],
                                 mim_req_rdop[12], mim_req_rdata[103:96],
                                 mim_req_rdop[11], mim_req_rdata[95:88],
                                 mim_req_rdop[10], mim_req_rdata[87:80],
                                 mim_req_rdop[9], mim_req_rdata[79:72],
                                 mim_req_rdop[8], mim_req_rdata[71:64],
                                 mim_req_rdop[7], mim_req_rdata[63:56],
                                 mim_req_rdop[6], mim_req_rdata[55:48],
                                 mim_req_rdop[5], mim_req_rdata[47:40],
                                 mim_req_rdop[4], mim_req_rdata[39:32],
                                 mim_req_rdop[3], mim_req_rdata[31:24],
                                 mim_req_rdop[2], mim_req_rdata[23:16],
                                 mim_req_rdop[1], mim_req_rdata[15:8],
                                 mim_req_rdop[0], mim_req_rdata[7:0]};

assign mim_req_wdip =   {MIREQUESTRAMWRITEDATA[143],
                         MIREQUESTRAMWRITEDATA[134],
                         MIREQUESTRAMWRITEDATA[125],
                         MIREQUESTRAMWRITEDATA[116],
                         MIREQUESTRAMWRITEDATA[107],
                         MIREQUESTRAMWRITEDATA[98],
                         MIREQUESTRAMWRITEDATA[89],
                         MIREQUESTRAMWRITEDATA[80],
                         MIREQUESTRAMWRITEDATA[71],
                         MIREQUESTRAMWRITEDATA[62],
                         MIREQUESTRAMWRITEDATA[53],
                         MIREQUESTRAMWRITEDATA[44],
                         MIREQUESTRAMWRITEDATA[35],
                         MIREQUESTRAMWRITEDATA[26],
                         MIREQUESTRAMWRITEDATA[17],
                         MIREQUESTRAMWRITEDATA[8]};

assign mim_req_wdata =  {MIREQUESTRAMWRITEDATA[142:135],
                         MIREQUESTRAMWRITEDATA[133:126],
                         MIREQUESTRAMWRITEDATA[124:117],
                         MIREQUESTRAMWRITEDATA[115:108],
                         MIREQUESTRAMWRITEDATA[106:99],
                         MIREQUESTRAMWRITEDATA[97:90],
                         MIREQUESTRAMWRITEDATA[88:81],
                         MIREQUESTRAMWRITEDATA[79:72],
                         MIREQUESTRAMWRITEDATA[70:63],
                         MIREQUESTRAMWRITEDATA[61:54],
                         MIREQUESTRAMWRITEDATA[52:45],
                         MIREQUESTRAMWRITEDATA[43:36],
                         MIREQUESTRAMWRITEDATA[34:27],
                         MIREQUESTRAMWRITEDATA[25:18],
                         MIREQUESTRAMWRITEDATA[16:9],
                         MIREQUESTRAMWRITEDATA[7:0]};


//----------------cpl-------------------------------------

assign  MICOMPLETIONRAMREADDATA =  {mim_cpl_rdop[15], mim_cpl_rdata[127:120],
                                    mim_cpl_rdop[14], mim_cpl_rdata[119:112],
                                    mim_cpl_rdop[13], mim_cpl_rdata[111:104],
                                    mim_cpl_rdop[12], mim_cpl_rdata[103:96],
                                    mim_cpl_rdop[11], mim_cpl_rdata[95:88],
                                    mim_cpl_rdop[10], mim_cpl_rdata[87:80],
                                    mim_cpl_rdop[9], mim_cpl_rdata[79:72],
                                    mim_cpl_rdop[8], mim_cpl_rdata[71:64],
                                    mim_cpl_rdop[7], mim_cpl_rdata[63:56],
                                    mim_cpl_rdop[6], mim_cpl_rdata[55:48],
                                    mim_cpl_rdop[5], mim_cpl_rdata[47:40],
                                    mim_cpl_rdop[4], mim_cpl_rdata[39:32],
                                    mim_cpl_rdop[3], mim_cpl_rdata[31:24],
                                    mim_cpl_rdop[2], mim_cpl_rdata[23:16],
                                    mim_cpl_rdop[1], mim_cpl_rdata[15:8],
                                    mim_cpl_rdop[0], mim_cpl_rdata[7:0]};


assign MICOMPLETIONRAMWRITEDATA =    {MICOMPLETIONRAMWRITEDATAU[71:0], MICOMPLETIONRAMWRITEDATAL[71:0]};

assign mim_cpl_wdip =   {MICOMPLETIONRAMWRITEDATA[143],
                         MICOMPLETIONRAMWRITEDATA[134],
                         MICOMPLETIONRAMWRITEDATA[125],
                         MICOMPLETIONRAMWRITEDATA[116],
                         MICOMPLETIONRAMWRITEDATA[107],
                         MICOMPLETIONRAMWRITEDATA[98],
                         MICOMPLETIONRAMWRITEDATA[89],
                         MICOMPLETIONRAMWRITEDATA[80],
                         MICOMPLETIONRAMWRITEDATA[71],
                         MICOMPLETIONRAMWRITEDATA[62],
                         MICOMPLETIONRAMWRITEDATA[53],
                         MICOMPLETIONRAMWRITEDATA[44],
                         MICOMPLETIONRAMWRITEDATA[35],
                         MICOMPLETIONRAMWRITEDATA[26],
                         MICOMPLETIONRAMWRITEDATA[17],
                         MICOMPLETIONRAMWRITEDATA[8]};


assign mim_cpl_wdata =  {MICOMPLETIONRAMWRITEDATA[142:135],
                         MICOMPLETIONRAMWRITEDATA[133:126],
                         MICOMPLETIONRAMWRITEDATA[124:117],
                         MICOMPLETIONRAMWRITEDATA[115:108],
                         MICOMPLETIONRAMWRITEDATA[106:99],
                         MICOMPLETIONRAMWRITEDATA[97:90],
                         MICOMPLETIONRAMWRITEDATA[88:81],
                         MICOMPLETIONRAMWRITEDATA[79:72],
                         MICOMPLETIONRAMWRITEDATA[70:63],
                         MICOMPLETIONRAMWRITEDATA[61:54],
                         MICOMPLETIONRAMWRITEDATA[52:45],
                         MICOMPLETIONRAMWRITEDATA[43:36],
                         MICOMPLETIONRAMWRITEDATA[34:27],
                         MICOMPLETIONRAMWRITEDATA[25:18],
                         MICOMPLETIONRAMWRITEDATA[16:9],
                         MICOMPLETIONRAMWRITEDATA[7:0]};

reg reset_sync0;
reg reset_sync1;

always @(posedge CORECLK or negedge RESETN )   // Synchronize RESETN to CORECLK
begin
   if (!RESETN) begin
      reset_sync0 <= 1'b1;
      reset_sync1 <= 1'b1;
   end else begin
      reset_sync0 <= 1'b0;
      reset_sync1 <= reset_sync0;
   end
end



  // {{{ PCIE_3_0 i
  //--------------------------------------------
  PCIE_3_0
    #(.ARI_CAP_ENABLE                                     (ARI_CAP_ENABLE),
      .AXISTEN_IF_CC_ALIGNMENT_MODE                       (AXISTEN_IF_CC_ALIGNMENT_MODE),
      .AXISTEN_IF_CC_PARITY_CHK                           (AXISTEN_IF_CC_PARITY_CHK),
      .AXISTEN_IF_CQ_ALIGNMENT_MODE                       (AXISTEN_IF_CQ_ALIGNMENT_MODE),
      .AXISTEN_IF_ENABLE_CLIENT_TAG                       (AXISTEN_IF_ENABLE_CLIENT_TAG),
      .AXISTEN_IF_ENABLE_MSG_ROUTE                        (AXISTEN_IF_ENABLE_MSG_ROUTE),
      .AXISTEN_IF_ENABLE_RX_MSG_INTFC                     (AXISTEN_IF_ENABLE_RX_MSG_INTFC),
      .AXISTEN_IF_RC_ALIGNMENT_MODE                       (AXISTEN_IF_RC_ALIGNMENT_MODE),
      .AXISTEN_IF_RC_STRADDLE                             (AXISTEN_IF_RC_STRADDLE),
      .AXISTEN_IF_RQ_ALIGNMENT_MODE                       (AXISTEN_IF_RQ_ALIGNMENT_MODE),
      .AXISTEN_IF_RQ_PARITY_CHK                           (AXISTEN_IF_RQ_PARITY_CHK),
      .AXISTEN_IF_WIDTH                                   (AXISTEN_IF_WIDTH),
      .CRM_CORE_CLK_FREQ_500                              (CRM_CORE_CLK_FREQ_500),
      .CRM_USER_CLK_FREQ                                  (CRM_USER_CLK_FREQ),
      .DNSTREAM_LINK_NUM                                  (DNSTREAM_LINK_NUM),
      .LL_ACK_TIMEOUT                                     (LL_ACK_TIMEOUT),
      .LL_ACK_TIMEOUT_EN                                  (LL_ACK_TIMEOUT_EN),
      .LL_ACK_TIMEOUT_FUNC                                (LL_ACK_TIMEOUT_FUNC),
      .LL_CPL_FC_UPDATE_TIMER                             (LL_CPL_FC_UPDATE_TIMER),
      .LL_CPL_FC_UPDATE_TIMER_OVERRIDE                    (LL_CPL_FC_UPDATE_TIMER_OVERRIDE),
      .LL_FC_UPDATE_TIMER                                 (LL_FC_UPDATE_TIMER),
      .LL_FC_UPDATE_TIMER_OVERRIDE                        (LL_FC_UPDATE_TIMER_OVERRIDE),
      .LL_NP_FC_UPDATE_TIMER                              (LL_NP_FC_UPDATE_TIMER),
      .LL_NP_FC_UPDATE_TIMER_OVERRIDE                     (LL_NP_FC_UPDATE_TIMER_OVERRIDE),
      .LL_P_FC_UPDATE_TIMER                               (LL_P_FC_UPDATE_TIMER),
      .LL_P_FC_UPDATE_TIMER_OVERRIDE                      (LL_P_FC_UPDATE_TIMER_OVERRIDE),
      .LL_REPLAY_TIMEOUT                                  (LL_REPLAY_TIMEOUT),
      .LL_REPLAY_TIMEOUT_EN                               (LL_REPLAY_TIMEOUT_EN),
      .LL_REPLAY_TIMEOUT_FUNC                             (LL_REPLAY_TIMEOUT_FUNC),
      .LTR_TX_MESSAGE_MINIMUM_INTERVAL                    (LTR_TX_MESSAGE_MINIMUM_INTERVAL),
      .LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE          (LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE),
      .LTR_TX_MESSAGE_ON_LTR_ENABLE                       (LTR_TX_MESSAGE_ON_LTR_ENABLE),
      .PF0_AER_CAP_ECRC_CHECK_CAPABLE                     (PF0_AER_CAP_ECRC_CHECK_CAPABLE),
      .PF0_AER_CAP_ECRC_GEN_CAPABLE                       (PF0_AER_CAP_ECRC_GEN_CAPABLE),
      .PF0_AER_CAP_NEXTPTR                                (PF0_AER_CAP_NEXTPTR),
      .PF0_ARI_CAP_NEXTPTR                                (PF0_ARI_CAP_NEXTPTR),
      .PF0_ARI_CAP_NEXT_FUNC                              (PF0_ARI_CAP_NEXT_FUNC),
      .PF0_ARI_CAP_VER                                    (PF0_ARI_CAP_VER),
      .PF0_BAR0_APERTURE_SIZE                             (PF0_BAR0_APERTURE_SIZE),
      .PF0_BAR0_CONTROL                                   (PF0_BAR0_CONTROL),
      .PF0_BAR1_APERTURE_SIZE                             (PF0_BAR1_APERTURE_SIZE),
      .PF0_BAR1_CONTROL                                   (PF0_BAR1_CONTROL),
      .PF0_BAR2_APERTURE_SIZE                             (PF0_BAR2_APERTURE_SIZE),
      .PF0_BAR2_CONTROL                                   (PF0_BAR2_CONTROL),
      .PF0_BAR3_APERTURE_SIZE                             (PF0_BAR3_APERTURE_SIZE),
      .PF0_BAR3_CONTROL                                   (PF0_BAR3_CONTROL),
      .PF0_BAR4_APERTURE_SIZE                             (PF0_BAR4_APERTURE_SIZE),
      .PF0_BAR4_CONTROL                                   (PF0_BAR4_CONTROL),
      .PF0_BAR5_APERTURE_SIZE                             (PF0_BAR5_APERTURE_SIZE),
      .PF0_BAR5_CONTROL                                   (PF0_BAR5_CONTROL),
      .PF0_BIST_REGISTER                                  (PF0_BIST_REGISTER),
      .PF0_CAPABILITY_POINTER                             (PF0_CAPABILITY_POINTER),
      .PF0_CLASS_CODE                                     (PF0_CLASS_CODE),
      .PF0_DEVICE_ID                                      (PF0_DEVICE_ID),
      .PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT     (PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT),
      .PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT          (PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT),
      .PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT          (PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT),
      .PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE                   (PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE),
      .PF0_DEV_CAP2_LTR_SUPPORT                           (PF0_DEV_CAP2_LTR_SUPPORT),
      .PF0_DEV_CAP2_OBFF_SUPPORT                          (PF0_DEV_CAP2_OBFF_SUPPORT),
      .PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT                 (PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT),
      .PF0_DEV_CAP_ENDPOINT_L0S_LATENCY                   (PF0_DEV_CAP_ENDPOINT_L0S_LATENCY),
      .PF0_DEV_CAP_ENDPOINT_L1_LATENCY                    (PF0_DEV_CAP_ENDPOINT_L1_LATENCY),
      .PF0_DEV_CAP_EXT_TAG_SUPPORTED                      (PF0_DEV_CAP_EXT_TAG_SUPPORTED),
      .PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE           (PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE),
      .PF0_DEV_CAP_MAX_PAYLOAD_SIZE                       (PF0_DEV_CAP_MAX_PAYLOAD_SIZE),
      .PF0_DPA_CAP_NEXTPTR                                (PF0_DPA_CAP_NEXTPTR),
      .VF0_ARI_CAP_NEXTPTR (VF0_ARI_CAP_NEXTPTR ),
      .VF1_ARI_CAP_NEXTPTR (VF1_ARI_CAP_NEXTPTR ),
      .VF2_ARI_CAP_NEXTPTR (VF2_ARI_CAP_NEXTPTR ),
      .VF3_ARI_CAP_NEXTPTR (VF3_ARI_CAP_NEXTPTR ),
      .VF4_ARI_CAP_NEXTPTR (VF4_ARI_CAP_NEXTPTR ),
      .VF5_ARI_CAP_NEXTPTR (VF5_ARI_CAP_NEXTPTR ),
      .VF0_TPHR_CAP_DEV_SPECIFIC_MODE (VF0_TPHR_CAP_DEV_SPECIFIC_MODE),
      .VF0_TPHR_CAP_ENABLE (VF0_TPHR_CAP_ENABLE),
      .VF0_TPHR_CAP_INT_VEC_MODE (VF0_TPHR_CAP_INT_VEC_MODE),
      .VF0_TPHR_CAP_NEXTPTR (VF0_TPHR_CAP_NEXTPTR),
      .VF0_TPHR_CAP_ST_MODE_SEL (VF0_TPHR_CAP_ST_MODE_SEL),
      .VF0_TPHR_CAP_ST_TABLE_LOC (VF0_TPHR_CAP_ST_TABLE_LOC),
      .VF0_TPHR_CAP_ST_TABLE_SIZE (VF0_TPHR_CAP_ST_TABLE_SIZE),
      .VF0_TPHR_CAP_VER (VF0_TPHR_CAP_VER),
      .VF1_TPHR_CAP_DEV_SPECIFIC_MODE (VF1_TPHR_CAP_DEV_SPECIFIC_MODE),
      .VF1_TPHR_CAP_ENABLE (VF1_TPHR_CAP_ENABLE),
      .VF1_TPHR_CAP_INT_VEC_MODE (VF1_TPHR_CAP_INT_VEC_MODE),
      .VF1_TPHR_CAP_NEXTPTR (VF1_TPHR_CAP_NEXTPTR),
      .VF1_TPHR_CAP_ST_MODE_SEL (VF1_TPHR_CAP_ST_MODE_SEL),
      .VF1_TPHR_CAP_ST_TABLE_LOC (VF1_TPHR_CAP_ST_TABLE_LOC),
      .VF1_TPHR_CAP_ST_TABLE_SIZE (VF1_TPHR_CAP_ST_TABLE_SIZE),
      .VF1_TPHR_CAP_VER (VF1_TPHR_CAP_VER),
      .VF2_TPHR_CAP_DEV_SPECIFIC_MODE (VF2_TPHR_CAP_DEV_SPECIFIC_MODE),
      .VF2_TPHR_CAP_ENABLE (VF2_TPHR_CAP_ENABLE),
      .VF2_TPHR_CAP_INT_VEC_MODE (VF2_TPHR_CAP_INT_VEC_MODE),
      .VF2_TPHR_CAP_NEXTPTR (VF2_TPHR_CAP_NEXTPTR),
      .VF2_TPHR_CAP_ST_MODE_SEL (VF2_TPHR_CAP_ST_MODE_SEL),
      .VF2_TPHR_CAP_ST_TABLE_LOC (VF2_TPHR_CAP_ST_TABLE_LOC),
      .VF2_TPHR_CAP_ST_TABLE_SIZE (VF2_TPHR_CAP_ST_TABLE_SIZE),
      .VF2_TPHR_CAP_VER (VF2_TPHR_CAP_VER),
      .VF3_TPHR_CAP_DEV_SPECIFIC_MODE (VF3_TPHR_CAP_DEV_SPECIFIC_MODE),
      .VF3_TPHR_CAP_ENABLE (VF3_TPHR_CAP_ENABLE),
      .VF3_TPHR_CAP_INT_VEC_MODE (VF3_TPHR_CAP_INT_VEC_MODE),
      .VF3_TPHR_CAP_NEXTPTR (VF3_TPHR_CAP_NEXTPTR),
      .VF3_TPHR_CAP_ST_MODE_SEL (VF3_TPHR_CAP_ST_MODE_SEL),
      .VF3_TPHR_CAP_ST_TABLE_LOC (VF3_TPHR_CAP_ST_TABLE_LOC),
      .VF3_TPHR_CAP_ST_TABLE_SIZE (VF3_TPHR_CAP_ST_TABLE_SIZE),
      .VF3_TPHR_CAP_VER (VF3_TPHR_CAP_VER),
      .VF4_TPHR_CAP_DEV_SPECIFIC_MODE (VF4_TPHR_CAP_DEV_SPECIFIC_MODE),
      .VF4_TPHR_CAP_ENABLE (VF4_TPHR_CAP_ENABLE),
      .VF4_TPHR_CAP_INT_VEC_MODE (VF4_TPHR_CAP_INT_VEC_MODE),
      .VF4_TPHR_CAP_NEXTPTR (VF4_TPHR_CAP_NEXTPTR),
      .VF4_TPHR_CAP_ST_MODE_SEL (VF4_TPHR_CAP_ST_MODE_SEL),
      .VF4_TPHR_CAP_ST_TABLE_LOC (VF4_TPHR_CAP_ST_TABLE_LOC),
      .VF4_TPHR_CAP_ST_TABLE_SIZE (VF4_TPHR_CAP_ST_TABLE_SIZE),
      .VF4_TPHR_CAP_VER (VF4_TPHR_CAP_VER),
      .VF5_TPHR_CAP_DEV_SPECIFIC_MODE (VF5_TPHR_CAP_DEV_SPECIFIC_MODE),
      .VF5_TPHR_CAP_ENABLE (VF5_TPHR_CAP_ENABLE),
      .VF5_TPHR_CAP_INT_VEC_MODE (VF5_TPHR_CAP_INT_VEC_MODE),
      .VF5_TPHR_CAP_NEXTPTR (VF5_TPHR_CAP_NEXTPTR),
      .VF5_TPHR_CAP_ST_MODE_SEL (VF5_TPHR_CAP_ST_MODE_SEL),
      .VF5_TPHR_CAP_ST_TABLE_LOC (VF5_TPHR_CAP_ST_TABLE_LOC),
      .VF5_TPHR_CAP_ST_TABLE_SIZE (VF5_TPHR_CAP_ST_TABLE_SIZE),
      .VF5_TPHR_CAP_VER (VF5_TPHR_CAP_VER),
      .PF0_DPA_CAP_SUB_STATE_CONTROL                      (PF0_DPA_CAP_SUB_STATE_CONTROL),
      .PF0_DPA_CAP_SUB_STATE_CONTROL_EN                   (PF0_DPA_CAP_SUB_STATE_CONTROL_EN),
      .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION0            (PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION0),
      .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION1            (PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION1),
      .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION2            (PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION2),
      .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION3            (PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION3),
      .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION4            (PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION4),
      .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION5            (PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION5),
      .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION6            (PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION6),
      .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION7            (PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION7),
      .PF0_DPA_CAP_VER                                    (PF0_DPA_CAP_VER),
      .PF0_DSN_CAP_NEXTPTR                                (PF0_DSN_CAP_NEXTPTR),
      .PF0_EXPANSION_ROM_APERTURE_SIZE                    (PF0_EXPANSION_ROM_APERTURE_SIZE),
      .PF0_EXPANSION_ROM_ENABLE                           (PF0_EXPANSION_ROM_ENABLE),
      .PF0_INTERRUPT_LINE                                 (PF0_INTERRUPT_LINE),
      .PF0_INTERRUPT_PIN                                  (PF0_INTERRUPT_PIN),
      .PF0_LINK_CAP_ASPM_SUPPORT                          (PF0_LINK_CAP_ASPM_SUPPORT),
      .PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1          (PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1),
      .PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2          (PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2),
      .PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3          (PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3),
      .PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1                 (PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1),
      .PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2                 (PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2),
      .PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3                 (PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3),
      .PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1           (PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1),
      .PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2           (PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2),
      .PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3           (PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3),
      .PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1                  (PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1),
      .PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2                  (PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2),
      .PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3                  (PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3),
      .PF0_LINK_STATUS_SLOT_CLOCK_CONFIG                  (PF0_LINK_STATUS_SLOT_CLOCK_CONFIG),
      .PF0_LTR_CAP_MAX_NOSNOOP_LAT                        (PF0_LTR_CAP_MAX_NOSNOOP_LAT),
      .PF0_LTR_CAP_MAX_SNOOP_LAT                          (PF0_LTR_CAP_MAX_SNOOP_LAT),
      .PF0_LTR_CAP_NEXTPTR                                (PF0_LTR_CAP_NEXTPTR),
      .PF0_LTR_CAP_VER                                    (PF0_LTR_CAP_VER),
      .PF0_MSIX_CAP_NEXTPTR                               (PF0_MSIX_CAP_NEXTPTR),
      .PF0_MSIX_CAP_PBA_BIR                               (PF0_MSIX_CAP_PBA_BIR),
      .PF0_MSIX_CAP_PBA_OFFSET                            (PF0_MSIX_CAP_PBA_OFFSET),
      .PF0_MSIX_CAP_TABLE_BIR                             (PF0_MSIX_CAP_TABLE_BIR),
      .PF0_MSIX_CAP_TABLE_OFFSET                          (PF0_MSIX_CAP_TABLE_OFFSET),
      .PF0_MSIX_CAP_TABLE_SIZE                            (PF0_MSIX_CAP_TABLE_SIZE),
      .PF0_MSI_CAP_MULTIMSGCAP                            (PF0_MSI_CAP_MULTIMSGCAP),
      .PF0_MSI_CAP_NEXTPTR                                (PF0_MSI_CAP_NEXTPTR),
      .PF0_PB_CAP_NEXTPTR                                 (PF0_PB_CAP_NEXTPTR),
      .PF0_PB_CAP_SYSTEM_ALLOCATED                        (PF0_PB_CAP_SYSTEM_ALLOCATED),
      .PF0_PB_CAP_VER                                     (PF0_PB_CAP_VER),
      .PF0_PM_CAP_ID                                      (PF0_PM_CAP_ID),
      .PF0_PM_CAP_NEXTPTR                                 (PF0_PM_CAP_NEXTPTR),
      .PF0_PM_CAP_PMESUPPORT_D0                           (PF0_PM_CAP_PMESUPPORT_D0),
      .PF0_PM_CAP_PMESUPPORT_D1                           (PF0_PM_CAP_PMESUPPORT_D1),
      .PF0_PM_CAP_PMESUPPORT_D3HOT                        (PF0_PM_CAP_PMESUPPORT_D3HOT),
      .PF0_PM_CAP_SUPP_D1_STATE                           (PF0_PM_CAP_SUPP_D1_STATE),
      .PF0_PM_CAP_VER_ID                                  (PF0_PM_CAP_VER_ID),
      .PF0_PM_CSR_NOSOFTRESET                             (PF0_PM_CSR_NOSOFTRESET),
      .PF0_RBAR_CAP_ENABLE                                (PF0_RBAR_CAP_ENABLE),
      .PF0_RBAR_CAP_INDEX0                                (PF0_RBAR_CAP_INDEX0),
      .PF0_RBAR_CAP_INDEX1                                (PF0_RBAR_CAP_INDEX1),
      .PF0_RBAR_CAP_INDEX2                                (PF0_RBAR_CAP_INDEX2),
      .PF0_RBAR_CAP_NEXTPTR                               (PF0_RBAR_CAP_NEXTPTR),
      .PF0_RBAR_CAP_SIZE0                                 (PF0_RBAR_CAP_SIZE0),
      .PF0_RBAR_CAP_SIZE1                                 (PF0_RBAR_CAP_SIZE1),
      .PF0_RBAR_CAP_SIZE2                                 (PF0_RBAR_CAP_SIZE2),
      .PF0_RBAR_CAP_VER                                   (PF0_RBAR_CAP_VER),
      .PF0_RBAR_NUM                                       (PF0_RBAR_NUM),
      .PF0_REVISION_ID                                    (PF0_REVISION_ID),
      .PF0_SRIOV_BAR0_APERTURE_SIZE                       (PF0_SRIOV_BAR0_APERTURE_SIZE),
      .PF0_SRIOV_BAR0_CONTROL                             (PF0_SRIOV_BAR0_CONTROL),
      .PF0_SRIOV_BAR1_APERTURE_SIZE                       (PF0_SRIOV_BAR1_APERTURE_SIZE),
      .PF0_SRIOV_BAR1_CONTROL                             (PF0_SRIOV_BAR1_CONTROL),
      .PF0_SRIOV_BAR2_APERTURE_SIZE                       (PF0_SRIOV_BAR2_APERTURE_SIZE),
      .PF0_SRIOV_BAR2_CONTROL                             (PF0_SRIOV_BAR2_CONTROL),
      .PF0_SRIOV_BAR3_APERTURE_SIZE                       (PF0_SRIOV_BAR3_APERTURE_SIZE),
      .PF0_SRIOV_BAR3_CONTROL                             (PF0_SRIOV_BAR3_CONTROL),
      .PF0_SRIOV_BAR4_APERTURE_SIZE                       (PF0_SRIOV_BAR4_APERTURE_SIZE),
      .PF0_SRIOV_BAR4_CONTROL                             (PF0_SRIOV_BAR4_CONTROL),
      .PF0_SRIOV_BAR5_APERTURE_SIZE                       (PF0_SRIOV_BAR5_APERTURE_SIZE),
      .PF0_SRIOV_BAR5_CONTROL                             (PF0_SRIOV_BAR5_CONTROL),
      .PF0_SRIOV_CAP_INITIAL_VF                           (PF0_SRIOV_CAP_INITIAL_VF),
      .PF0_SRIOV_CAP_NEXTPTR                              (PF0_SRIOV_CAP_NEXTPTR),
      .PF0_SRIOV_CAP_TOTAL_VF                             (PF0_SRIOV_CAP_TOTAL_VF),
      .PF0_SRIOV_CAP_VER                                  (PF0_SRIOV_CAP_VER),
      .PF0_SRIOV_FIRST_VF_OFFSET                          (PF0_SRIOV_FIRST_VF_OFFSET),
      .PF0_SRIOV_FUNC_DEP_LINK                            (PF0_SRIOV_FUNC_DEP_LINK),
      .PF0_SRIOV_SUPPORTED_PAGE_SIZE                      (PF0_SRIOV_SUPPORTED_PAGE_SIZE),
      .PF0_SRIOV_VF_DEVICE_ID                             (PF0_SRIOV_VF_DEVICE_ID),
      .PF0_SUBSYSTEM_ID                                   (PF0_SUBSYSTEM_ID),
      .PF0_TPHR_CAP_DEV_SPECIFIC_MODE                     (PF0_TPHR_CAP_DEV_SPECIFIC_MODE),
      .PF0_TPHR_CAP_ENABLE                                (PF0_TPHR_CAP_ENABLE),
      .PF0_TPHR_CAP_INT_VEC_MODE                          (PF0_TPHR_CAP_INT_VEC_MODE),
      .PF0_TPHR_CAP_NEXTPTR                               (PF0_TPHR_CAP_NEXTPTR),
      .PF0_TPHR_CAP_ST_MODE_SEL                           (PF0_TPHR_CAP_ST_MODE_SEL),
      .PF0_TPHR_CAP_ST_TABLE_LOC                          (PF0_TPHR_CAP_ST_TABLE_LOC),
      .PF0_TPHR_CAP_ST_TABLE_SIZE                         (PF0_TPHR_CAP_ST_TABLE_SIZE),
      .PF0_TPHR_CAP_VER                                   (PF0_TPHR_CAP_VER),
      .PF0_VC_CAP_NEXTPTR                                 (PF0_VC_CAP_NEXTPTR),
      .PF0_VC_CAP_VER                                     (PF0_VC_CAP_VER),
      .PF1_AER_CAP_ECRC_CHECK_CAPABLE                     (PF1_AER_CAP_ECRC_CHECK_CAPABLE),
      .PF1_AER_CAP_ECRC_GEN_CAPABLE                       (PF1_AER_CAP_ECRC_GEN_CAPABLE),
      .PF1_AER_CAP_NEXTPTR                                (PF1_AER_CAP_NEXTPTR),
      .PF1_ARI_CAP_NEXTPTR                                (PF1_ARI_CAP_NEXTPTR),
      .PF1_ARI_CAP_NEXT_FUNC                              (PF1_ARI_CAP_NEXT_FUNC),
      .PF1_BAR0_APERTURE_SIZE                             (PF1_BAR0_APERTURE_SIZE),
      .PF1_BAR0_CONTROL                                   (PF1_BAR0_CONTROL),
      .PF1_BAR1_APERTURE_SIZE                             (PF1_BAR1_APERTURE_SIZE),
      .PF1_BAR1_CONTROL                                   (PF1_BAR1_CONTROL),
      .PF1_BAR2_APERTURE_SIZE                             (PF1_BAR2_APERTURE_SIZE),
      .PF1_BAR2_CONTROL                                   (PF1_BAR2_CONTROL),
      .PF1_BAR3_APERTURE_SIZE                             (PF1_BAR3_APERTURE_SIZE),
      .PF1_BAR3_CONTROL                                   (PF1_BAR3_CONTROL),
      .PF1_BAR4_APERTURE_SIZE                             (PF1_BAR4_APERTURE_SIZE),
      .PF1_BAR4_CONTROL                                   (PF1_BAR4_CONTROL),
      .PF1_BAR5_APERTURE_SIZE                             (PF1_BAR5_APERTURE_SIZE),
      .PF1_BAR5_CONTROL                                   (PF1_BAR5_CONTROL),
      .PF1_BIST_REGISTER                                  (PF1_BIST_REGISTER),
      .PF1_CAPABILITY_POINTER                             (PF1_CAPABILITY_POINTER),
      .PF1_CLASS_CODE                                     (PF1_CLASS_CODE),
      .PF1_DEVICE_ID                                      (PF1_DEVICE_ID),
      .PF1_DEV_CAP_MAX_PAYLOAD_SIZE                       (PF1_DEV_CAP_MAX_PAYLOAD_SIZE),
      .PF1_DPA_CAP_NEXTPTR                                (PF1_DPA_CAP_NEXTPTR),
      .PF1_DPA_CAP_SUB_STATE_CONTROL                      (PF1_DPA_CAP_SUB_STATE_CONTROL),
      .PF1_DPA_CAP_SUB_STATE_CONTROL_EN                   (PF1_DPA_CAP_SUB_STATE_CONTROL_EN),
      .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION0            (PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION0),
      .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION1            (PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION1),
      .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION2            (PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION2),
      .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION3            (PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION3),
      .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION4            (PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION4),
      .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION5            (PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION5),
      .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION6            (PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION6),
      .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION7            (PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION7),
      .PF1_DPA_CAP_VER                                    (PF1_DPA_CAP_VER),
      .PF1_DSN_CAP_NEXTPTR                                (PF1_DSN_CAP_NEXTPTR),
      .PF1_EXPANSION_ROM_APERTURE_SIZE                    (PF1_EXPANSION_ROM_APERTURE_SIZE),
      .PF1_EXPANSION_ROM_ENABLE                           (PF1_EXPANSION_ROM_ENABLE),
      .PF1_INTERRUPT_LINE                                 (PF1_INTERRUPT_LINE),
      .PF1_INTERRUPT_PIN                                  (PF1_INTERRUPT_PIN),
      .PF1_MSIX_CAP_NEXTPTR                               (PF1_MSIX_CAP_NEXTPTR),
      .PF1_MSIX_CAP_PBA_BIR                               (PF1_MSIX_CAP_PBA_BIR),
      .PF1_MSIX_CAP_PBA_OFFSET                            (PF1_MSIX_CAP_PBA_OFFSET),
      .PF1_MSIX_CAP_TABLE_BIR                             (PF1_MSIX_CAP_TABLE_BIR),
      .PF1_MSIX_CAP_TABLE_OFFSET                          (PF1_MSIX_CAP_TABLE_OFFSET),
      .PF1_MSIX_CAP_TABLE_SIZE                            (PF1_MSIX_CAP_TABLE_SIZE),
      .PF1_MSI_CAP_MULTIMSGCAP                            (PF1_MSI_CAP_MULTIMSGCAP),
      .PF1_MSI_CAP_NEXTPTR                                (PF1_MSI_CAP_NEXTPTR),
      .PF1_PB_CAP_NEXTPTR                                 (PF1_PB_CAP_NEXTPTR),
      .PF1_PB_CAP_SYSTEM_ALLOCATED                        (PF1_PB_CAP_SYSTEM_ALLOCATED),
      .PF1_PB_CAP_VER                                     (PF1_PB_CAP_VER),
      .PF1_PM_CAP_ID                                      (PF1_PM_CAP_ID),
      .PF1_PM_CAP_NEXTPTR                                 (PF1_PM_CAP_NEXTPTR),
      .PF1_PM_CAP_VER_ID                                  (PF1_PM_CAP_VER_ID),
      .PF1_RBAR_CAP_ENABLE                                (PF1_RBAR_CAP_ENABLE),
      .PF1_RBAR_CAP_INDEX0                                (PF1_RBAR_CAP_INDEX0),
      .PF1_RBAR_CAP_INDEX1                                (PF1_RBAR_CAP_INDEX1),
      .PF1_RBAR_CAP_INDEX2                                (PF1_RBAR_CAP_INDEX2),
      .PF1_RBAR_CAP_NEXTPTR                               (PF1_RBAR_CAP_NEXTPTR),
      .PF1_RBAR_CAP_SIZE0                                 (PF1_RBAR_CAP_SIZE0),
      .PF1_RBAR_CAP_SIZE1                                 (PF1_RBAR_CAP_SIZE1),
      .PF1_RBAR_CAP_SIZE2                                 (PF1_RBAR_CAP_SIZE2),
      .PF1_RBAR_CAP_VER                                   (PF1_RBAR_CAP_VER),
      .PF1_RBAR_NUM                                       (PF1_RBAR_NUM),
      .PF1_REVISION_ID                                    (PF1_REVISION_ID),
      .PF1_SRIOV_BAR0_APERTURE_SIZE                       (PF1_SRIOV_BAR0_APERTURE_SIZE),
      .PF1_SRIOV_BAR0_CONTROL                             (PF1_SRIOV_BAR0_CONTROL),
      .PF1_SRIOV_BAR1_APERTURE_SIZE                       (PF1_SRIOV_BAR1_APERTURE_SIZE),
      .PF1_SRIOV_BAR1_CONTROL                             (PF1_SRIOV_BAR1_CONTROL),
      .PF1_SRIOV_BAR2_APERTURE_SIZE                       (PF1_SRIOV_BAR2_APERTURE_SIZE),
      .PF1_SRIOV_BAR2_CONTROL                             (PF1_SRIOV_BAR2_CONTROL),
      .PF1_SRIOV_BAR3_APERTURE_SIZE                       (PF1_SRIOV_BAR3_APERTURE_SIZE),
      .PF1_SRIOV_BAR3_CONTROL                             (PF1_SRIOV_BAR3_CONTROL),
      .PF1_SRIOV_BAR4_APERTURE_SIZE                       (PF1_SRIOV_BAR4_APERTURE_SIZE),
      .PF1_SRIOV_BAR4_CONTROL                             (PF1_SRIOV_BAR4_CONTROL),
      .PF1_SRIOV_BAR5_APERTURE_SIZE                       (PF1_SRIOV_BAR5_APERTURE_SIZE),
      .PF1_SRIOV_BAR5_CONTROL                             (PF1_SRIOV_BAR5_CONTROL),
      .PF1_SRIOV_CAP_INITIAL_VF                           (PF1_SRIOV_CAP_INITIAL_VF),
      .PF1_SRIOV_CAP_NEXTPTR                              (PF1_SRIOV_CAP_NEXTPTR),
      .PF1_SRIOV_CAP_TOTAL_VF                             (PF1_SRIOV_CAP_TOTAL_VF),
      .PF1_SRIOV_CAP_VER                                  (PF1_SRIOV_CAP_VER),
      .PF1_SRIOV_FIRST_VF_OFFSET                          (PF1_SRIOV_FIRST_VF_OFFSET),
      .PF1_SRIOV_FUNC_DEP_LINK                            (PF1_SRIOV_FUNC_DEP_LINK),
      .PF1_SRIOV_SUPPORTED_PAGE_SIZE                      (PF1_SRIOV_SUPPORTED_PAGE_SIZE),
      .PF1_SRIOV_VF_DEVICE_ID                             (PF1_SRIOV_VF_DEVICE_ID),
      .PF1_SUBSYSTEM_ID                                   (PF1_SUBSYSTEM_ID),
      .PF1_TPHR_CAP_DEV_SPECIFIC_MODE                     (PF1_TPHR_CAP_DEV_SPECIFIC_MODE),
      .PF1_TPHR_CAP_ENABLE                                (PF1_TPHR_CAP_ENABLE),
      .PF1_TPHR_CAP_INT_VEC_MODE                          (PF1_TPHR_CAP_INT_VEC_MODE),
      .PF1_TPHR_CAP_NEXTPTR                               (PF1_TPHR_CAP_NEXTPTR),
      .PF1_TPHR_CAP_ST_MODE_SEL                           (PF1_TPHR_CAP_ST_MODE_SEL),
      .PF1_TPHR_CAP_ST_TABLE_LOC                          (PF1_TPHR_CAP_ST_TABLE_LOC),
      .PF1_TPHR_CAP_ST_TABLE_SIZE                         (PF1_TPHR_CAP_ST_TABLE_SIZE),
      .PF1_TPHR_CAP_VER                                   (PF1_TPHR_CAP_VER),
      .PL_DISABLE_EI_INFER_IN_L0                          (PL_DISABLE_EI_INFER_IN_L0),
      .PL_DISABLE_GEN3_DC_BALANCE                         (PL_DISABLE_GEN3_DC_BALANCE),
      .PL_DISABLE_SCRAMBLING                              (PL_DISABLE_SCRAMBLING),
      .PL_DISABLE_UPCONFIG_CAPABLE                        (PL_DISABLE_UPCONFIG_CAPABLE),
      .PL_EQ_ADAPT_DISABLE_COEFF_CHECK                    (PL_EQ_ADAPT_DISABLE_COEFF_CHECK),
      .PL_EQ_ADAPT_DISABLE_PRESET_CHECK                   (PL_EQ_ADAPT_DISABLE_PRESET_CHECK),
      .PL_EQ_ADAPT_ITER_COUNT                             (PL_EQ_ADAPT_ITER_COUNT),
      .PL_EQ_ADAPT_REJECT_RETRY_COUNT                     (PL_EQ_ADAPT_REJECT_RETRY_COUNT),
      .PL_EQ_BYPASS_PHASE23                               (PL_EQ_BYPASS_PHASE23),
      .PL_EQ_SHORT_ADAPT_PHASE                            (PL_EQ_SHORT_ADAPT_PHASE),
      .PL_LANE0_EQ_CONTROL                                (PL_LANE0_EQ_CONTROL),
      .PL_LANE1_EQ_CONTROL                                (PL_LANE1_EQ_CONTROL),
      .PL_LANE2_EQ_CONTROL                                (PL_LANE2_EQ_CONTROL),
      .PL_LANE3_EQ_CONTROL                                (PL_LANE3_EQ_CONTROL),
      .PL_LANE4_EQ_CONTROL                                (PL_LANE4_EQ_CONTROL),
      .PL_LANE5_EQ_CONTROL                                (PL_LANE5_EQ_CONTROL),
      .PL_LANE6_EQ_CONTROL                                (PL_LANE6_EQ_CONTROL),
      .PL_LANE7_EQ_CONTROL                                (PL_LANE7_EQ_CONTROL),
      .PL_LINK_CAP_MAX_LINK_SPEED                         (PL_LINK_CAP_MAX_LINK_SPEED),
      .PL_LINK_CAP_MAX_LINK_WIDTH                         (PL_LINK_CAP_MAX_LINK_WIDTH),
      .PL_N_FTS_COMCLK_GEN1                               (PL_N_FTS_COMCLK_GEN1),
      .PL_N_FTS_COMCLK_GEN2                               (PL_N_FTS_COMCLK_GEN2),
      .PL_N_FTS_COMCLK_GEN3                               (PL_N_FTS_COMCLK_GEN3),
      .PL_N_FTS_GEN1                                      (PL_N_FTS_GEN1),
      .PL_N_FTS_GEN2                                      (PL_N_FTS_GEN2),
      .PL_N_FTS_GEN3                                      (PL_N_FTS_GEN3),
      .PL_SIM_FAST_LINK_TRAINING                          (PL_SIM_FAST_LINK_TRAINING),
      .PL_UPSTREAM_FACING                                 (PL_UPSTREAM_FACING),
      .PM_ASPML0S_TIMEOUT                                 (PM_ASPML0S_TIMEOUT),
      .PM_ASPML1_ENTRY_DELAY                              (PM_ASPML1_ENTRY_DELAY),
      .PM_ENABLE_SLOT_POWER_CAPTURE                       (PM_ENABLE_SLOT_POWER_CAPTURE),
      .PM_L1_REENTRY_DELAY                                (PM_L1_REENTRY_DELAY),
      .PM_PME_SERVICE_TIMEOUT_DELAY                       (PM_PME_SERVICE_TIMEOUT_DELAY),
      .PM_PME_TURNOFF_ACK_DELAY                           (PM_PME_TURNOFF_ACK_DELAY),
      .SIM_VERSION                                        (SIM_VERSION),
      .SPARE_BIT0                                         (SPARE_BIT0),
      .SPARE_BIT1                                         (SPARE_BIT1),
      .SPARE_BIT2                                         (SPARE_BIT2),
      .SPARE_BIT3                                         (SPARE_BIT3),
      .SPARE_BIT4                                         (SPARE_BIT4),
      .SPARE_BIT5                                         (SPARE_BIT5),
      .SPARE_BIT6                                         (SPARE_BIT6),
      .SPARE_BIT7                                         (SPARE_BIT7),
      .SPARE_BIT8                                         (SPARE_BIT8),
      .SPARE_BYTE0                                        (SPARE_BYTE0),
      .SPARE_BYTE1                                        (SPARE_BYTE1),
      .SPARE_BYTE2                                        (SPARE_BYTE2),
      .SPARE_BYTE3                                        (SPARE_BYTE3),
      .SPARE_WORD0                                        (SPARE_WORD0),
      .SPARE_WORD1                                        (SPARE_WORD1),
      .SPARE_WORD2                                        (SPARE_WORD2),
      .SPARE_WORD3                                        (SPARE_WORD3),
      .SRIOV_CAP_ENABLE                                   (SRIOV_CAP_ENABLE),
      .TL_COMPL_TIMEOUT_REG0                              (TL_COMPL_TIMEOUT_REG0),
      .TL_COMPL_TIMEOUT_REG1                              (TL_COMPL_TIMEOUT_REG1),
      .TL_CREDITS_CD                                      (TL_CREDITS_CD),
      .TL_CREDITS_CH                                      (TL_CREDITS_CH),
      .TL_CREDITS_NPD                                     (TL_CREDITS_NPD),
      .TL_CREDITS_NPH                                     (TL_CREDITS_NPH),
      .TL_CREDITS_PD                                      (TL_CREDITS_PD),
      .TL_CREDITS_PH                                      (TL_CREDITS_PH),
      .TL_ENABLE_MESSAGE_RID_CHECK_ENABLE                 (TL_ENABLE_MESSAGE_RID_CHECK_ENABLE),
      .TL_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE            (TL_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE),
      .TL_LEGACY_CFG_EXTEND_INTERFACE_ENABLE              (TL_LEGACY_CFG_EXTEND_INTERFACE_ENABLE),
      .TL_LEGACY_MODE_ENABLE                              (TL_LEGACY_MODE_ENABLE),
      .TL_PF_ENABLE_REG                                   (TL_PF_ENABLE_REG),
      .TL_TAG_MGMT_ENABLE                                 (TL_TAG_MGMT_ENABLE),
      .VF0_CAPABILITY_POINTER                             (VF0_CAPABILITY_POINTER),
      .VF0_MSIX_CAP_PBA_BIR                               (VF0_MSIX_CAP_PBA_BIR),
      .VF0_MSIX_CAP_PBA_OFFSET                            (VF0_MSIX_CAP_PBA_OFFSET),
      .VF0_MSIX_CAP_TABLE_BIR                             (VF0_MSIX_CAP_TABLE_BIR),
      .VF0_MSIX_CAP_TABLE_OFFSET                          (VF0_MSIX_CAP_TABLE_OFFSET),
      .VF0_MSIX_CAP_TABLE_SIZE                            (VF0_MSIX_CAP_TABLE_SIZE),
      .VF0_MSI_CAP_MULTIMSGCAP                            (VF0_MSI_CAP_MULTIMSGCAP),
      .VF0_PM_CAP_ID                                      (VF0_PM_CAP_ID),
      .VF0_PM_CAP_NEXTPTR                                 (VF0_PM_CAP_NEXTPTR),
      .VF0_PM_CAP_VER_ID                                  (VF0_PM_CAP_VER_ID),
      .VF1_MSIX_CAP_PBA_BIR                               (VF1_MSIX_CAP_PBA_BIR),
      .VF1_MSIX_CAP_PBA_OFFSET                            (VF1_MSIX_CAP_PBA_OFFSET),
      .VF1_MSIX_CAP_TABLE_BIR                             (VF1_MSIX_CAP_TABLE_BIR),
      .VF1_MSIX_CAP_TABLE_OFFSET                          (VF1_MSIX_CAP_TABLE_OFFSET),
      .VF1_MSIX_CAP_TABLE_SIZE                            (VF1_MSIX_CAP_TABLE_SIZE),
      .VF1_MSI_CAP_MULTIMSGCAP                            (VF1_MSI_CAP_MULTIMSGCAP),
      .VF1_PM_CAP_ID                                      (VF1_PM_CAP_ID),
      .VF1_PM_CAP_NEXTPTR                                 (VF1_PM_CAP_NEXTPTR),
      .VF1_PM_CAP_VER_ID                                  (VF1_PM_CAP_VER_ID),
      .VF2_MSIX_CAP_PBA_BIR                               (VF2_MSIX_CAP_PBA_BIR),
      .VF2_MSIX_CAP_PBA_OFFSET                            (VF2_MSIX_CAP_PBA_OFFSET),
      .VF2_MSIX_CAP_TABLE_BIR                             (VF2_MSIX_CAP_TABLE_BIR),
      .VF2_MSIX_CAP_TABLE_OFFSET                          (VF2_MSIX_CAP_TABLE_OFFSET),
      .VF2_MSIX_CAP_TABLE_SIZE                            (VF2_MSIX_CAP_TABLE_SIZE),
      .VF2_MSI_CAP_MULTIMSGCAP                            (VF2_MSI_CAP_MULTIMSGCAP),
      .VF2_PM_CAP_ID                                      (VF2_PM_CAP_ID),
      .VF2_PM_CAP_NEXTPTR                                 (VF2_PM_CAP_NEXTPTR),
      .VF2_PM_CAP_VER_ID                                  (VF2_PM_CAP_VER_ID),
      .VF3_MSIX_CAP_PBA_BIR                               (VF3_MSIX_CAP_PBA_BIR),
      .VF3_MSIX_CAP_PBA_OFFSET                            (VF3_MSIX_CAP_PBA_OFFSET),
      .VF3_MSIX_CAP_TABLE_BIR                             (VF3_MSIX_CAP_TABLE_BIR),
      .VF3_MSIX_CAP_TABLE_OFFSET                          (VF3_MSIX_CAP_TABLE_OFFSET),
      .VF3_MSIX_CAP_TABLE_SIZE                            (VF3_MSIX_CAP_TABLE_SIZE),
      .VF3_MSI_CAP_MULTIMSGCAP                            (VF3_MSI_CAP_MULTIMSGCAP),
      .VF3_PM_CAP_ID                                      (VF3_PM_CAP_ID),
      .VF3_PM_CAP_NEXTPTR                                 (VF3_PM_CAP_NEXTPTR),
      .VF3_PM_CAP_VER_ID                                  (VF3_PM_CAP_VER_ID),
      .VF4_MSIX_CAP_PBA_BIR                               (VF4_MSIX_CAP_PBA_BIR),
      .VF4_MSIX_CAP_PBA_OFFSET                            (VF4_MSIX_CAP_PBA_OFFSET),
      .VF4_MSIX_CAP_TABLE_BIR                             (VF4_MSIX_CAP_TABLE_BIR),
      .VF4_MSIX_CAP_TABLE_OFFSET                          (VF4_MSIX_CAP_TABLE_OFFSET),
      .VF4_MSIX_CAP_TABLE_SIZE                            (VF4_MSIX_CAP_TABLE_SIZE),
      .VF4_MSI_CAP_MULTIMSGCAP                            (VF4_MSI_CAP_MULTIMSGCAP),
      .VF4_PM_CAP_ID                                      (VF4_PM_CAP_ID),
      .VF4_PM_CAP_NEXTPTR                                 (VF4_PM_CAP_NEXTPTR),
      .VF4_PM_CAP_VER_ID                                  (VF4_PM_CAP_VER_ID),
      .VF5_MSIX_CAP_PBA_BIR                               (VF5_MSIX_CAP_PBA_BIR),
      .VF5_MSIX_CAP_PBA_OFFSET                            (VF5_MSIX_CAP_PBA_OFFSET),
      .VF5_MSIX_CAP_TABLE_BIR                             (VF5_MSIX_CAP_TABLE_BIR),
      .VF5_MSIX_CAP_TABLE_OFFSET                          (VF5_MSIX_CAP_TABLE_OFFSET),
      .VF5_MSIX_CAP_TABLE_SIZE                            (VF5_MSIX_CAP_TABLE_SIZE),
      .VF5_MSI_CAP_MULTIMSGCAP                            (VF5_MSI_CAP_MULTIMSGCAP),
      .VF5_PM_CAP_ID                                      (VF5_PM_CAP_ID),
      .VF5_PM_CAP_NEXTPTR                                 (VF5_PM_CAP_NEXTPTR),
      .VF5_PM_CAP_VER_ID                                  (VF5_PM_CAP_VER_ID))
    PCIE_3_0_i
     (.CFGERRCOROUT                                       (CFGERRCOROUT),
      .CFGERRFATALOUT                                     (CFGERRFATALOUT),
      .CFGERRNONFATALOUT                                  (CFGERRNONFATALOUT),
      .CFGEXTREADRECEIVED                                 (CFGEXTREADRECEIVED),
      .CFGEXTWRITERECEIVED                                (CFGEXTWRITERECEIVED),
      .CFGHOTRESETOUT                                     (CFGHOTRESETOUT),
      .CFGINPUTUPDATEDONE                                 (CFGINPUTUPDATEDONE),
      .CFGINTERRUPTAOUTPUT                                (CFGINTERRUPTAOUTPUT),
      .CFGINTERRUPTBOUTPUT                                (CFGINTERRUPTBOUTPUT),
      .CFGINTERRUPTCOUTPUT                                (CFGINTERRUPTCOUTPUT),
      .CFGINTERRUPTDOUTPUT                                (CFGINTERRUPTDOUTPUT),
      .CFGINTERRUPTMSIFAIL                                (CFGINTERRUPTMSIFAIL),
      .CFGINTERRUPTMSIMASKUPDATE                          (CFGINTERRUPTMSIMASKUPDATE),
      .CFGINTERRUPTMSISENT                                (CFGINTERRUPTMSISENT),
      .CFGINTERRUPTMSIXFAIL                               (CFGINTERRUPTMSIXFAIL),
      .CFGINTERRUPTMSIXSENT                               (CFGINTERRUPTMSIXSENT),
      .CFGINTERRUPTSENT                                   (CFGINTERRUPTSENT),
      .CFGLOCALERROR                                      (CFGLOCALERROR),
      .CFGLTRENABLE                                       (CFGLTRENABLE),
      .CFGMCUPDATEDONE                                    (CFGMCUPDATEDONE),
      .CFGMGMTREADWRITEDONE                               (CFGMGMTREADWRITEDONE),
      .CFGMSGRECEIVED                                     (CFGMSGRECEIVED),
      .CFGMSGTRANSMITDONE                                 (CFGMSGTRANSMITDONE),
      .CFGPERFUNCTIONUPDATEDONE                           (CFGPERFUNCTIONUPDATEDONE),
      .CFGPHYLINKDOWN                                     (CFGPHYLINKDOWN),
      .CFGPLSTATUSCHANGE                                  (CFGPLSTATUSCHANGE),
      .CFGPOWERSTATECHANGEINTERRUPT                       (CFGPOWERSTATECHANGEINTERRUPT),
      .CFGTPHSTTREADENABLE                                (CFGTPHSTTREADENABLE),
      .CFGTPHSTTWRITEENABLE                               (CFGTPHSTTWRITEENABLE),
      .DRPRDY                                             (DRPRDY),
      .MAXISCQTLAST                                       (MAXISCQTLAST),
      .MAXISCQTVALID                                      (MAXISCQTVALID),
      .MAXISRCTLAST                                       (MAXISRCTLAST),
      .MAXISRCTVALID                                      (MAXISRCTVALID),
      .PCIERQSEQNUMVLD                                    (PCIERQSEQNUMVLD),
      .PCIERQTAGVLD                                       (PCIERQTAGVLD),
      .PIPERX0POLARITY                                    (PIPERX0POLARITY),
      .PIPERX1POLARITY                                    (PIPERX1POLARITY),
      .PIPERX2POLARITY                                    (PIPERX2POLARITY),
      .PIPERX3POLARITY                                    (PIPERX3POLARITY),
      .PIPERX4POLARITY                                    (PIPERX4POLARITY),
      .PIPERX5POLARITY                                    (PIPERX5POLARITY),
      .PIPERX6POLARITY                                    (PIPERX6POLARITY),
      .PIPERX7POLARITY                                    (PIPERX7POLARITY),
      .PIPETX0COMPLIANCE                                  (PIPETX0COMPLIANCE),
      .PIPETX0DATAVALID                                   (PIPETX0DATAVALID),
      .PIPETX0ELECIDLE                                    (PIPETX0ELECIDLE),
      .PIPETX0STARTBLOCK                                  (PIPETX0STARTBLOCK),
      .PIPETX1COMPLIANCE                                  (PIPETX1COMPLIANCE),
      .PIPETX1DATAVALID                                   (PIPETX1DATAVALID),
      .PIPETX1ELECIDLE                                    (PIPETX1ELECIDLE),
      .PIPETX1STARTBLOCK                                  (PIPETX1STARTBLOCK),
      .PIPETX2COMPLIANCE                                  (PIPETX2COMPLIANCE),
      .PIPETX2DATAVALID                                   (PIPETX2DATAVALID),
      .PIPETX2ELECIDLE                                    (PIPETX2ELECIDLE),
      .PIPETX2STARTBLOCK                                  (PIPETX2STARTBLOCK),
      .PIPETX3COMPLIANCE                                  (PIPETX3COMPLIANCE),
      .PIPETX3DATAVALID                                   (PIPETX3DATAVALID),
      .PIPETX3ELECIDLE                                    (PIPETX3ELECIDLE),
      .PIPETX3STARTBLOCK                                  (PIPETX3STARTBLOCK),
      .PIPETX4COMPLIANCE                                  (PIPETX4COMPLIANCE),
      .PIPETX4DATAVALID                                   (PIPETX4DATAVALID),
      .PIPETX4ELECIDLE                                    (PIPETX4ELECIDLE),
      .PIPETX4STARTBLOCK                                  (PIPETX4STARTBLOCK),
      .PIPETX5COMPLIANCE                                  (PIPETX5COMPLIANCE),
      .PIPETX5DATAVALID                                   (PIPETX5DATAVALID),
      .PIPETX5ELECIDLE                                    (PIPETX5ELECIDLE),
      .PIPETX5STARTBLOCK                                  (PIPETX5STARTBLOCK),
      .PIPETX6COMPLIANCE                                  (PIPETX6COMPLIANCE),
      .PIPETX6DATAVALID                                   (PIPETX6DATAVALID),
      .PIPETX6ELECIDLE                                    (PIPETX6ELECIDLE),
      .PIPETX6STARTBLOCK                                  (PIPETX6STARTBLOCK),
      .PIPETX7COMPLIANCE                                  (PIPETX7COMPLIANCE),
      .PIPETX7DATAVALID                                   (PIPETX7DATAVALID),
      .PIPETX7ELECIDLE                                    (PIPETX7ELECIDLE),
      .PIPETX7STARTBLOCK                                  (PIPETX7STARTBLOCK),
      .PIPETXDEEMPH                                       (PIPETXDEEMPH),
      .PIPETXRCVRDET                                      (PIPETXRCVRDET),
      .PIPETXRESET                                        (PIPETXRESET),
      .PIPETXSWING                                        (PIPETXSWING),
      .PLEQINPROGRESS                                     (PLEQINPROGRESS),
      .CFGFCCPLD                                          (CFGFCCPLD),
      .CFGFCNPD                                           (CFGFCNPD),
      .CFGFCPD                                            (CFGFCPD),
      .CFGVFSTATUS                                        (CFGVFSTATUS),
      .MIREPLAYRAMWRITEDATA                               (MIREPLAYRAMWRITEDATA),
      .MIREQUESTRAMWRITEDATA                              (MIREQUESTRAMWRITEDATA),
      .CFGPERFUNCSTATUSDATA                               (CFGPERFUNCSTATUSDATA),
      .DBGDATAOUT                                         (DBGDATAOUT),
      .DRPDO                                              (DRPDO),
      .CFGVFPOWERSTATE                                    (CFGVFPOWERSTATE),
      .CFGVFTPHSTMODE                                     (CFGVFTPHSTMODE),
      .CFGDPASUBSTATECHANGE                               (CFGDPASUBSTATECHANGE),
      .CFGFLRINPROCESS                                    (CFGFLRINPROCESS),
      .CFGINTERRUPTMSIENABLE                              (CFGINTERRUPTMSIENABLE),
      .CFGINTERRUPTMSIXENABLE                             (CFGINTERRUPTMSIXENABLE),
      .CFGINTERRUPTMSIXMASK                               (CFGINTERRUPTMSIXMASK),
      .CFGLINKPOWERSTATE                                  (CFGLINKPOWERSTATE),
      .CFGOBFFENABLE                                      (CFGOBFFENABLE),
      .CFGPHYLINKSTATUS                                   (CFGPHYLINKSTATUS),
      .CFGRCBSTATUS                                       (CFGRCBSTATUS),
      .CFGTPHREQUESTERENABLE                              (CFGTPHREQUESTERENABLE),
      .MIREPLAYRAMREADENABLE                              (),
      .MIREPLAYRAMWRITEENABLE                             (MIREPLAYRAMWRITEENABLE),
      .PCIERQTAGAV                                        ( ),  // Deprecated
      .PCIETFCNPDAV                                       (PCIETFCNPDAV),
      .PCIETFCNPHAV                                       (PCIETFCNPHAV),
      .PIPERX0EQCONTROL                                   (PIPERX0EQCONTROL),
      .PIPERX1EQCONTROL                                   (PIPERX1EQCONTROL),
      .PIPERX2EQCONTROL                                   (PIPERX2EQCONTROL),
      .PIPERX3EQCONTROL                                   (PIPERX3EQCONTROL),
      .PIPERX4EQCONTROL                                   (PIPERX4EQCONTROL),
      .PIPERX5EQCONTROL                                   (PIPERX5EQCONTROL),
      .PIPERX6EQCONTROL                                   (PIPERX6EQCONTROL),
      .PIPERX7EQCONTROL                                   (PIPERX7EQCONTROL),
      .PIPETX0CHARISK                                     (PIPETX0CHARISK),
      .PIPETX0EQCONTROL                                   (PIPETX0EQCONTROL),
      .PIPETX0POWERDOWN                                   (PIPETX0POWERDOWN),
      .PIPETX0SYNCHEADER                                  (PIPETX0SYNCHEADER),
      .PIPETX1CHARISK                                     (PIPETX1CHARISK),
      .PIPETX1EQCONTROL                                   (PIPETX1EQCONTROL),
      .PIPETX1POWERDOWN                                   (PIPETX1POWERDOWN),
      .PIPETX1SYNCHEADER                                  (PIPETX1SYNCHEADER),
      .PIPETX2CHARISK                                     (PIPETX2CHARISK),
      .PIPETX2EQCONTROL                                   (PIPETX2EQCONTROL),
      .PIPETX2POWERDOWN                                   (PIPETX2POWERDOWN),
      .PIPETX2SYNCHEADER                                  (PIPETX2SYNCHEADER),
      .PIPETX3CHARISK                                     (PIPETX3CHARISK),
      .PIPETX3EQCONTROL                                   (PIPETX3EQCONTROL),
      .PIPETX3POWERDOWN                                   (PIPETX3POWERDOWN),
      .PIPETX3SYNCHEADER                                  (PIPETX3SYNCHEADER),
      .PIPETX4CHARISK                                     (PIPETX4CHARISK),
      .PIPETX4EQCONTROL                                   (PIPETX4EQCONTROL),
      .PIPETX4POWERDOWN                                   (PIPETX4POWERDOWN),
      .PIPETX4SYNCHEADER                                  (PIPETX4SYNCHEADER),
      .PIPETX5CHARISK                                     (PIPETX5CHARISK),
      .PIPETX5EQCONTROL                                   (PIPETX5EQCONTROL),
      .PIPETX5POWERDOWN                                   (PIPETX5POWERDOWN),
      .PIPETX5SYNCHEADER                                  (PIPETX5SYNCHEADER),
      .PIPETX6CHARISK                                     (PIPETX6CHARISK),
      .PIPETX6EQCONTROL                                   (PIPETX6EQCONTROL),
      .PIPETX6POWERDOWN                                   (PIPETX6POWERDOWN),
      .PIPETX6SYNCHEADER                                  (PIPETX6SYNCHEADER),
      .PIPETX7CHARISK                                     (PIPETX7CHARISK),
      .PIPETX7EQCONTROL                                   (PIPETX7EQCONTROL),
      .PIPETX7POWERDOWN                                   (PIPETX7POWERDOWN),
      .PIPETX7SYNCHEADER                                  (PIPETX7SYNCHEADER),
      .PIPETXRATE                                         (PIPETXRATE),
      .PLEQPHASE                                          (PLEQPHASE),
      .MAXISCQTDATA                                       (MAXISCQTDATA),
      .MAXISRCTDATA                                       (MAXISRCTDATA),
      .CFGCURRENTSPEED                                    (CFGCURRENTSPEED),
      .CFGMAXPAYLOAD                                      (CFGMAXPAYLOAD),
      .CFGMAXREADREQ                                      (CFGMAXREADREQ),
      .CFGTPHFUNCTIONNUM                                  (CFGTPHFUNCTIONNUM),
      .PIPERX0EQPRESET                                    (PIPERX0EQPRESET),
      .PIPERX1EQPRESET                                    (PIPERX1EQPRESET),
      .PIPERX2EQPRESET                                    (PIPERX2EQPRESET),
      .PIPERX3EQPRESET                                    (PIPERX3EQPRESET),
      .PIPERX4EQPRESET                                    (PIPERX4EQPRESET),
      .PIPERX5EQPRESET                                    (PIPERX5EQPRESET),
      .PIPERX6EQPRESET                                    (PIPERX6EQPRESET),
      .PIPERX7EQPRESET                                    (PIPERX7EQPRESET),
      .PIPETXMARGIN                                       (PIPETXMARGIN),
      .CFGEXTWRITEDATA                                    (CFGEXTWRITEDATA),
      .CFGINTERRUPTMSIDATA                                (CFGINTERRUPTMSIDATA),
      .CFGMGMTREADDATA                                    (CFGMGMTREADDATA),
      .CFGTPHSTTWRITEDATA                                 (CFGTPHSTTWRITEDATA),
      .PIPETX0DATA                                        (PIPETX0DATA),
      .PIPETX1DATA                                        (PIPETX1DATA),
      .PIPETX2DATA                                        (PIPETX2DATA),
      .PIPETX3DATA                                        (PIPETX3DATA),
      .PIPETX4DATA                                        (PIPETX4DATA),
      .PIPETX5DATA                                        (PIPETX5DATA),
      .PIPETX6DATA                                        (PIPETX6DATA),
      .PIPETX7DATA                                        (PIPETX7DATA),
      .CFGEXTWRITEBYTEENABLE                              (CFGEXTWRITEBYTEENABLE),
      .CFGNEGOTIATEDWIDTH                                 (CFGNEGOTIATEDWIDTH),
      .CFGTPHSTTWRITEBYTEVALID                            (CFGTPHSTTWRITEBYTEVALID),
      .MICOMPLETIONRAMREADENABLEL                         (MICOMPLETIONRAMREADENABLEL),
      .MICOMPLETIONRAMREADENABLEU                         (MICOMPLETIONRAMREADENABLEU),
      .MICOMPLETIONRAMWRITEENABLEL                        (MICOMPLETIONRAMWRITEENABLEL),
      .MICOMPLETIONRAMWRITEENABLEU                        (MICOMPLETIONRAMWRITEENABLEU),
      .MIREQUESTRAMREADENABLE                             (MIREQUESTRAMREADENABLE),
      .MIREQUESTRAMWRITEENABLE                            (MIREQUESTRAMWRITEENABLE),
      .PCIERQSEQNUM                                       (PCIERQSEQNUM),
      .PIPERX0EQLPTXPRESET                                (PIPERX0EQLPTXPRESET),
      .PIPERX1EQLPTXPRESET                                (PIPERX1EQLPTXPRESET),
      .PIPERX2EQLPTXPRESET                                (PIPERX2EQLPTXPRESET),
      .PIPERX3EQLPTXPRESET                                (PIPERX3EQLPTXPRESET),
      .PIPERX4EQLPTXPRESET                                (PIPERX4EQLPTXPRESET),
      .PIPERX5EQLPTXPRESET                                (PIPERX5EQLPTXPRESET),
      .PIPERX6EQLPTXPRESET                                (PIPERX6EQLPTXPRESET),
      .PIPERX7EQLPTXPRESET                                (PIPERX7EQLPTXPRESET),
      .PIPETX0EQPRESET                                    (PIPETX0EQPRESET),
      .PIPETX1EQPRESET                                    (PIPETX1EQPRESET),
      .PIPETX2EQPRESET                                    (PIPETX2EQPRESET),
      .PIPETX3EQPRESET                                    (PIPETX3EQPRESET),
      .PIPETX4EQPRESET                                    (PIPETX4EQPRESET),
      .PIPETX5EQPRESET                                    (PIPETX5EQPRESET),
      .PIPETX6EQPRESET                                    (PIPETX6EQPRESET),
      .PIPETX7EQPRESET                                    (PIPETX7EQPRESET),
      .SAXISCCTREADY                                      (SAXISCCTREADY),
      .SAXISRQTREADY                                      (SAXISRQTREADY),
      .CFGMSGRECEIVEDTYPE                                 (CFGMSGRECEIVEDTYPE),
      .CFGTPHSTTADDRESS                                   (CFGTPHSTTADDRESS),
      .CFGFUNCTIONPOWERSTATE                              (CFGFUNCTIONPOWERSTATE),
      .CFGINTERRUPTMSIMMENABLE                            (CFGINTERRUPTMSIMMENABLE),
      .CFGINTERRUPTMSIVFENABLE                            (CFGINTERRUPTMSIVFENABLE),
      .CFGINTERRUPTMSIXVFENABLE                           (CFGINTERRUPTMSIXVFENABLE),
      .CFGINTERRUPTMSIXVFMASK                             (CFGINTERRUPTMSIXVFMASK),
      .CFGLTSSMSTATE                                      (CFGLTSSMSTATE),
      .CFGTPHSTMODE                                       (CFGTPHSTMODE),
      .CFGVFFLRINPROCESS                                  (CFGVFFLRINPROCESS),
      .CFGVFTPHREQUESTERENABLE                            (CFGVFTPHREQUESTERENABLE),
      .PCIECQNPREQCOUNT                                   (PCIECQNPREQCOUNT),
      .PCIERQTAG                                          (PCIERQTAG),
      .PIPERX0EQLPLFFS                                    (PIPERX0EQLPLFFS),
      .PIPERX1EQLPLFFS                                    (PIPERX1EQLPLFFS),
      .PIPERX2EQLPLFFS                                    (PIPERX2EQLPLFFS),
      .PIPERX3EQLPLFFS                                    (PIPERX3EQLPLFFS),
      .PIPERX4EQLPLFFS                                    (PIPERX4EQLPLFFS),
      .PIPERX5EQLPLFFS                                    (PIPERX5EQLPLFFS),
      .PIPERX6EQLPLFFS                                    (PIPERX6EQLPLFFS),
      .PIPERX7EQLPLFFS                                    (PIPERX7EQLPLFFS),
      .PIPETX0EQDEEMPH                                    (PIPETX0EQDEEMPH),
      .PIPETX1EQDEEMPH                                    (PIPETX1EQDEEMPH),
      .PIPETX2EQDEEMPH                                    (PIPETX2EQDEEMPH),
      .PIPETX3EQDEEMPH                                    (PIPETX3EQDEEMPH),
      .PIPETX4EQDEEMPH                                    (PIPETX4EQDEEMPH),
      .PIPETX5EQDEEMPH                                    (PIPETX5EQDEEMPH),
      .PIPETX6EQDEEMPH                                    (PIPETX6EQDEEMPH),
      .PIPETX7EQDEEMPH                                    (PIPETX7EQDEEMPH),
      .MICOMPLETIONRAMWRITEDATAL                          (MICOMPLETIONRAMWRITEDATAL),
      .MICOMPLETIONRAMWRITEDATAU                          (MICOMPLETIONRAMWRITEDATAU),
      .MAXISRCTUSER                                       (MAXISRCTUSER),
      .CFGEXTFUNCTIONNUMBER                               (CFGEXTFUNCTIONNUMBER),
      .CFGFCCPLH                                          (CFGFCCPLH),
      .CFGFCNPH                                           (CFGFCNPH),
      .CFGFCPH                                            (CFGFCPH),
      .CFGFUNCTIONSTATUS                                  (CFGFUNCTIONSTATUS),
      .CFGMSGRECEIVEDDATA                                 (CFGMSGRECEIVEDDATA),
      .MAXISCQTKEEP                                       (MAXISCQTKEEP),
      .MAXISRCTKEEP                                       (MAXISRCTKEEP),
      .PLGEN3PCSRXSLIDE                                   (PLGEN3PCSRXSLIDE),
      .MAXISCQTUSER                                       (MAXISCQTUSER),
      .MIREPLAYRAMADDRESS                                 (MIREPLAYRAMADDRESS),
      .MIREQUESTRAMREADADDRESSA                           (MIREQUESTRAMREADADDRESSA),
      .MIREQUESTRAMREADADDRESSB                           (MIREQUESTRAMREADADDRESSB),
      .MIREQUESTRAMWRITEADDRESSA                          (MIREQUESTRAMWRITEADDRESSA),
      .MIREQUESTRAMWRITEADDRESSB                          (MIREQUESTRAMWRITEADDRESSB),
      .CFGEXTREGISTERNUMBER                               (CFGEXTREGISTERNUMBER),
      .MICOMPLETIONRAMREADADDRESSAL                       (MICOMPLETIONRAMREADADDRESSAL),
      .MICOMPLETIONRAMREADADDRESSAU                       (MICOMPLETIONRAMREADADDRESSAU),
      .MICOMPLETIONRAMREADADDRESSBL                       (MICOMPLETIONRAMREADADDRESSBL),
      .MICOMPLETIONRAMREADADDRESSBU                       (MICOMPLETIONRAMREADADDRESSBU),
      .MICOMPLETIONRAMWRITEADDRESSAL                      (MICOMPLETIONRAMWRITEADDRESSAL),
      .MICOMPLETIONRAMWRITEADDRESSAU                      (MICOMPLETIONRAMWRITEADDRESSAU),
      .MICOMPLETIONRAMWRITEADDRESSBL                      (MICOMPLETIONRAMWRITEADDRESSBL),
      .MICOMPLETIONRAMWRITEADDRESSBU                      (MICOMPLETIONRAMWRITEADDRESSBU),
      .CFGCONFIGSPACEENABLE                               (CFGCONFIGSPACEENABLE),
      .CFGERRCORIN                                        (CFGERRCORIN),
      .CFGERRUNCORIN                                      (CFGERRUNCORIN),
      .CFGEXTREADDATAVALID                                (CFGEXTREADDATAVALID),
      .CFGHOTRESETIN                                      (CFGHOTRESETIN),
      .CFGINPUTUPDATEREQUEST                              (CFGINPUTUPDATEREQUEST),
      .CFGINTERRUPTMSITPHPRESENT                          (CFGINTERRUPTMSITPHPRESENT),
      .CFGINTERRUPTMSIXINT                                (CFGINTERRUPTMSIXINT),
      .CFGLINKTRAININGENABLE                              (CFGLINKTRAININGENABLE),
      .CFGMCUPDATEREQUEST                                 (CFGMCUPDATEREQUEST),
      .CFGMGMTREAD                                        (CFGMGMTREAD),
      .CFGMGMTTYPE1CFGREGACCESS                           (CFGMGMTTYPE1CFGREGACCESS),
      .CFGMGMTWRITE                                       (CFGMGMTWRITE),
      .CFGMSGTRANSMIT                                     (CFGMSGTRANSMIT),
      .CFGPERFUNCTIONOUTPUTREQUEST                        (CFGPERFUNCTIONOUTPUTREQUEST),
      .CFGPOWERSTATECHANGEACK                             (CFGPOWERSTATECHANGEACK),
      .CFGREQPMTRANSITIONL23READY                         (CFGREQPMTRANSITIONL23READY),
      .CFGTPHSTTREADDATAVALID                             (CFGTPHSTTREADDATAVALID),
      .CORECLK                                            (CORECLK),
      .CORECLKMICOMPLETIONRAML                            (CORECLKMICOMPLETIONRAML),
      .CORECLKMICOMPLETIONRAMU                            (CORECLKMICOMPLETIONRAMU),
      .CORECLKMIREPLAYRAM                                 (CORECLKMIREPLAYRAM),
      .CORECLKMIREQUESTRAM                                (CORECLKMIREQUESTRAM),
      .DRPCLK                                             (DRPCLK),
      .DRPEN                                              (DRPEN),
      .DRPWE                                              (DRPWE),
      .MGMTRESETN                                         (MGMTRESETN),
      .MGMTSTICKYRESETN                                   (MGMTSTICKYRESETN),
      .PCIECQNPREQ                                        (PCIECQNPREQ),
      .PIPECLK                                            (PIPECLK),
      .PIPERESETN                                         (PIPERESETN),
      .PIPERX0DATAVALID                                   (PIPERX0DATAVALID),
      .PIPERX0ELECIDLE                                    (PIPERX0ELECIDLE),
      .PIPERX0EQDONE                                      (PIPERX0EQDONE),
      .PIPERX0EQLPADAPTDONE                               (PIPERX0EQLPADAPTDONE),
      .PIPERX0EQLPLFFSSEL                                 (PIPERX0EQLPLFFSSEL),
      .PIPERX0PHYSTATUS                                   (PIPERX0PHYSTATUS),
      .PIPERX0STARTBLOCK                                  (PIPERX0STARTBLOCK),
      .PIPERX0VALID                                       (PIPERX0VALID),
      .PIPERX1DATAVALID                                   (PIPERX1DATAVALID),
      .PIPERX1ELECIDLE                                    (PIPERX1ELECIDLE),
      .PIPERX1EQDONE                                      (PIPERX1EQDONE),
      .PIPERX1EQLPADAPTDONE                               (PIPERX1EQLPADAPTDONE),
      .PIPERX1EQLPLFFSSEL                                 (PIPERX1EQLPLFFSSEL),
      .PIPERX1PHYSTATUS                                   (PIPERX1PHYSTATUS),
      .PIPERX1STARTBLOCK                                  (PIPERX1STARTBLOCK),
      .PIPERX1VALID                                       (PIPERX1VALID),
      .PIPERX2DATAVALID                                   (PIPERX2DATAVALID),
      .PIPERX2ELECIDLE                                    (PIPERX2ELECIDLE),
      .PIPERX2EQDONE                                      (PIPERX2EQDONE),
      .PIPERX2EQLPADAPTDONE                               (PIPERX2EQLPADAPTDONE),
      .PIPERX2EQLPLFFSSEL                                 (PIPERX2EQLPLFFSSEL),
      .PIPERX2PHYSTATUS                                   (PIPERX2PHYSTATUS),
      .PIPERX2STARTBLOCK                                  (PIPERX2STARTBLOCK),
      .PIPERX2VALID                                       (PIPERX2VALID),
      .PIPERX3DATAVALID                                   (PIPERX3DATAVALID),
      .PIPERX3ELECIDLE                                    (PIPERX3ELECIDLE),
      .PIPERX3EQDONE                                      (PIPERX3EQDONE),
      .PIPERX3EQLPADAPTDONE                               (PIPERX3EQLPADAPTDONE),
      .PIPERX3EQLPLFFSSEL                                 (PIPERX3EQLPLFFSSEL),
      .PIPERX3PHYSTATUS                                   (PIPERX3PHYSTATUS),
      .PIPERX3STARTBLOCK                                  (PIPERX3STARTBLOCK),
      .PIPERX3VALID                                       (PIPERX3VALID),
      .PIPERX4DATAVALID                                   (PIPERX4DATAVALID),
      .PIPERX4ELECIDLE                                    (PIPERX4ELECIDLE),
      .PIPERX4EQDONE                                      (PIPERX4EQDONE),
      .PIPERX4EQLPADAPTDONE                               (PIPERX4EQLPADAPTDONE),
      .PIPERX4EQLPLFFSSEL                                 (PIPERX4EQLPLFFSSEL),
      .PIPERX4PHYSTATUS                                   (PIPERX4PHYSTATUS),
      .PIPERX4STARTBLOCK                                  (PIPERX4STARTBLOCK),
      .PIPERX4VALID                                       (PIPERX4VALID),
      .PIPERX5DATAVALID                                   (PIPERX5DATAVALID),
      .PIPERX5ELECIDLE                                    (PIPERX5ELECIDLE),
      .PIPERX5EQDONE                                      (PIPERX5EQDONE),
      .PIPERX5EQLPADAPTDONE                               (PIPERX5EQLPADAPTDONE),
      .PIPERX5EQLPLFFSSEL                                 (PIPERX5EQLPLFFSSEL),
      .PIPERX5PHYSTATUS                                   (PIPERX5PHYSTATUS),
      .PIPERX5STARTBLOCK                                  (PIPERX5STARTBLOCK),
      .PIPERX5VALID                                       (PIPERX5VALID),
      .PIPERX6DATAVALID                                   (PIPERX6DATAVALID),
      .PIPERX6ELECIDLE                                    (PIPERX6ELECIDLE),
      .PIPERX6EQDONE                                      (PIPERX6EQDONE),
      .PIPERX6EQLPADAPTDONE                               (PIPERX6EQLPADAPTDONE),
      .PIPERX6EQLPLFFSSEL                                 (PIPERX6EQLPLFFSSEL),
      .PIPERX6PHYSTATUS                                   (PIPERX6PHYSTATUS),
      .PIPERX6STARTBLOCK                                  (PIPERX6STARTBLOCK),
      .PIPERX6VALID                                       (PIPERX6VALID),
      .PIPERX7DATAVALID                                   (PIPERX7DATAVALID),
      .PIPERX7ELECIDLE                                    (PIPERX7ELECIDLE),
      .PIPERX7EQDONE                                      (PIPERX7EQDONE),
      .PIPERX7EQLPADAPTDONE                               (PIPERX7EQLPADAPTDONE),
      .PIPERX7EQLPLFFSSEL                                 (PIPERX7EQLPLFFSSEL),
      .PIPERX7PHYSTATUS                                   (PIPERX7PHYSTATUS),
      .PIPERX7STARTBLOCK                                  (PIPERX7STARTBLOCK),
      .PIPERX7VALID                                       (PIPERX7VALID),
      .PIPETX0EQDONE                                      (PIPETX0EQDONE),
      .PIPETX1EQDONE                                      (PIPETX1EQDONE),
      .PIPETX2EQDONE                                      (PIPETX2EQDONE),
      .PIPETX3EQDONE                                      (PIPETX3EQDONE),
      .PIPETX4EQDONE                                      (PIPETX4EQDONE),
      .PIPETX5EQDONE                                      (PIPETX5EQDONE),
      .PIPETX6EQDONE                                      (PIPETX6EQDONE),
      .PIPETX7EQDONE                                      (PIPETX7EQDONE),
      .PLDISABLESCRAMBLER                                 (PLDISABLESCRAMBLER),
      .PLEQRESETEIEOSCOUNT                                (PLEQRESETEIEOSCOUNT),
      .PLGEN3PCSDISABLE                                   (PLGEN3PCSDISABLE),
      .RECCLK                                             (RECCLK),
      .RESETN                                             (RESETN),
      .SAXISCCTLAST                                       (SAXISCCTLAST),
      .SAXISCCTVALID                                      (SAXISCCTVALID),
      .SAXISRQTLAST                                       (SAXISRQTLAST),
      .SAXISRQTVALID                                      (SAXISRQTVALID),
      .USERCLK                                            (USERCLK),
      .DRPADDR                                            (DRPADDR),
      .MICOMPLETIONRAMREADDATA                            (MICOMPLETIONRAMREADDATA),
      .MIREPLAYRAMREADDATA                                (MIREPLAYRAMREADDATA),
      .MIREQUESTRAMREADDATA                               (MIREQUESTRAMREADDATA),
      .CFGDEVID                                           (CFGDEVID),
      .CFGSUBSYSID                                        (CFGSUBSYSID),
      .CFGSUBSYSVENDID                                    (CFGSUBSYSVENDID),
      .CFGVENDID                                          (CFGVENDID),
      .DRPDI                                              (DRPDI),
      .PIPERX0EQLPNEWTXCOEFFORPRESET                      (PIPERX0EQLPNEWTXCOEFFORPRESET),
      .PIPERX1EQLPNEWTXCOEFFORPRESET                      (PIPERX1EQLPNEWTXCOEFFORPRESET),
      .PIPERX2EQLPNEWTXCOEFFORPRESET                      (PIPERX2EQLPNEWTXCOEFFORPRESET),
      .PIPERX3EQLPNEWTXCOEFFORPRESET                      (PIPERX3EQLPNEWTXCOEFFORPRESET),
      .PIPERX4EQLPNEWTXCOEFFORPRESET                      (PIPERX4EQLPNEWTXCOEFFORPRESET),
      .PIPERX5EQLPNEWTXCOEFFORPRESET                      (PIPERX5EQLPNEWTXCOEFFORPRESET),
      .PIPERX6EQLPNEWTXCOEFFORPRESET                      (PIPERX6EQLPNEWTXCOEFFORPRESET),
      .PIPERX7EQLPNEWTXCOEFFORPRESET                      (PIPERX7EQLPNEWTXCOEFFORPRESET),
      .PIPETX0EQCOEFF                                     (PIPETX0EQCOEFF),
      .PIPETX1EQCOEFF                                     (PIPETX1EQCOEFF),
      .PIPETX2EQCOEFF                                     (PIPETX2EQCOEFF),
      .PIPETX3EQCOEFF                                     (PIPETX3EQCOEFF),
      .PIPETX4EQCOEFF                                     (PIPETX4EQCOEFF),
      .PIPETX5EQCOEFF                                     (PIPETX5EQCOEFF),
      .PIPETX6EQCOEFF                                     (PIPETX6EQCOEFF),
      .PIPETX7EQCOEFF                                     (PIPETX7EQCOEFF),
      .CFGMGMTADDR                                        (CFGMGMTADDR),
      .CFGFLRDONE                                         (CFGFLRDONE),
      .CFGINTERRUPTMSITPHTYPE                             (CFGINTERRUPTMSITPHTYPE),
      .CFGINTERRUPTPENDING                                (CFGINTERRUPTPENDING),
      .PIPERX0CHARISK                                     (PIPERX0CHARISK),
      .PIPERX0SYNCHEADER                                  (PIPERX0SYNCHEADER),
      .PIPERX1CHARISK                                     (PIPERX1CHARISK),
      .PIPERX1SYNCHEADER                                  (PIPERX1SYNCHEADER),
      .PIPERX2CHARISK                                     (PIPERX2CHARISK),
      .PIPERX2SYNCHEADER                                  (PIPERX2SYNCHEADER),
      .PIPERX3CHARISK                                     (PIPERX3CHARISK),
      .PIPERX3SYNCHEADER                                  (PIPERX3SYNCHEADER),
      .PIPERX4CHARISK                                     (PIPERX4CHARISK),
      .PIPERX4SYNCHEADER                                  (PIPERX4SYNCHEADER),
      .PIPERX5CHARISK                                     (PIPERX5CHARISK),
      .PIPERX5SYNCHEADER                                  (PIPERX5SYNCHEADER),
      .PIPERX6CHARISK                                     (PIPERX6CHARISK),
      .PIPERX6SYNCHEADER                                  (PIPERX6SYNCHEADER),
      .PIPERX7CHARISK                                     (PIPERX7CHARISK),
      .PIPERX7SYNCHEADER                                  (PIPERX7SYNCHEADER),
      .MAXISCQTREADY                                      (MAXISCQTREADY),
      .MAXISRCTREADY                                      (MAXISRCTREADY),
      .SAXISCCTDATA                                       (SAXISCCTDATA),
      .SAXISRQTDATA                                       (SAXISRQTDATA),
      .CFGDSFUNCTIONNUMBER                                (CFGDSFUNCTIONNUMBER),
      .CFGFCSEL                                           (CFGFCSEL),
      .CFGINTERRUPTMSIATTR                                (CFGINTERRUPTMSIATTR),
      .CFGINTERRUPTMSIFUNCTIONNUMBER                      (CFGINTERRUPTMSIFUNCTIONNUMBER),
      .CFGMSGTRANSMITTYPE                                 (CFGMSGTRANSMITTYPE),
      .CFGPERFUNCSTATUSCONTROL                            (CFGPERFUNCSTATUSCONTROL),
      .CFGPERFUNCTIONNUMBER                               (CFGPERFUNCTIONNUMBER),
      .PIPERX0STATUS                                      (PIPERX0STATUS),
      .PIPERX1STATUS                                      (PIPERX1STATUS),
      .PIPERX2STATUS                                      (PIPERX2STATUS),
      .PIPERX3STATUS                                      (PIPERX3STATUS),
      .PIPERX4STATUS                                      (PIPERX4STATUS),
      .PIPERX5STATUS                                      (PIPERX5STATUS),
      .PIPERX6STATUS                                      (PIPERX6STATUS),
      .PIPERX7STATUS                                      (PIPERX7STATUS),
      .CFGEXTREADDATA                                     (CFGEXTREADDATA),
      .CFGINTERRUPTMSIINT                                 (CFGINTERRUPTMSIINT),
      .CFGINTERRUPTMSIXDATA                               (CFGINTERRUPTMSIXDATA),
      .CFGMGMTWRITEDATA                                   (CFGMGMTWRITEDATA),
      .CFGMSGTRANSMITDATA                                 (CFGMSGTRANSMITDATA),
      .CFGTPHSTTREADDATA                                  (CFGTPHSTTREADDATA),
      .PIPERX0DATA                                        (PIPERX0DATA),
      .PIPERX1DATA                                        (PIPERX1DATA),
      .PIPERX2DATA                                        (PIPERX2DATA),
      .PIPERX3DATA                                        (PIPERX3DATA),
      .PIPERX4DATA                                        (PIPERX4DATA),
      .PIPERX5DATA                                        (PIPERX5DATA),
      .PIPERX6DATA                                        (PIPERX6DATA),
      .PIPERX7DATA                                        (PIPERX7DATA),
      .SAXISCCTUSER                                       (SAXISCCTUSER),
      .CFGINTERRUPTINT                                    (CFGINTERRUPTINT),
      .CFGINTERRUPTMSISELECT                              (CFGINTERRUPTMSISELECT),
      .CFGMGMTBYTEENABLE                                  (CFGMGMTBYTEENABLE),
      .CFGDSDEVICENUMBER                                  (CFGDSDEVICENUMBER),
      .SAXISRQTUSER                                       (SAXISRQTUSER),
      .CFGVFFLRDONE                                       (CFGVFFLRDONE),
      .PIPEEQFS                                           (PIPEEQFS),
      .PIPEEQLF                                           (PIPEEQLF),
      .CFGDSN                                             (CFGDSN),
      .CFGINTERRUPTMSIPENDINGSTATUS                       (CFGINTERRUPTMSIPENDINGSTATUS),
      .CFGINTERRUPTMSIXADDRESS                            (CFGINTERRUPTMSIXADDRESS),
      .CFGDSBUSNUMBER                                     (CFGDSBUSNUMBER),
      .CFGDSPORTNUMBER                                    (CFGDSPORTNUMBER),
      .CFGREVID                                           (CFGREVID),
      .PLGEN3PCSRXSYNCDONE                                (PLGEN3PCSRXSYNCDONE),
      .SAXISCCTKEEP                                       (SAXISCCTKEEP),
      .SAXISRQTKEEP                                       (SAXISRQTKEEP),
      .CFGINTERRUPTMSITPHSTTAG                            (CFGINTERRUPTMSITPHSTTAG));
   // }}} end PCIE_3_0 i



  // {{{ pcie_bram_7vx i
  //--------------------------------------------
  rp_pcie_bram_7vx
    #(.IMPL_TARGET               (IMPL_TARGET),
      .NO_DECODE_LOGIC           (NO_DECODE_LOGIC),
      .INTERFACE_SPEED           (INTERFACE_SPEED),
      .COMPLETION_SPACE          (COMPLETION_SPACE))
    pcie_bram_7vx_i
     (.clk_i                     (CORECLK),
      .reset_i                   (reset_sync1),
      .mi_rep_addr_i             (MIREPLAYRAMADDRESS),
      .mi_rep_wdata_i            (mim_rep_wdata[127:0]),
      .mi_rep_wdip_i             (mim_rep_wdip[15:0]),
      .mi_rep_wen0_i             (MIREPLAYRAMWRITEENABLE[0]),
      .mi_rep_wen1_i             (MIREPLAYRAMWRITEENABLE[1]),
      .mi_rep_rdata_o            (mim_rep_rdata[127:0]),
      .mi_rep_rdop_o             (mim_rep_rdop[15:0]),
      .mi_req_waddr0_i           (MIREQUESTRAMWRITEADDRESSA),
      .mi_req_waddr1_i           (MIREQUESTRAMWRITEADDRESSB),
      .mi_req_wdata_i            (mim_req_wdata[127:0]),
      .mi_req_wdip_i             (mim_req_wdip[15:0]),
      .mi_req_wen0_i             (MIREQUESTRAMWRITEENABLE[0]),
      .mi_req_wen1_i             (MIREQUESTRAMWRITEENABLE[1]),
      .mi_req_wen2_i             (MIREQUESTRAMWRITEENABLE[2]),
      .mi_req_wen3_i             (MIREQUESTRAMWRITEENABLE[3]),
      .mi_req_raddr0_i           (MIREQUESTRAMREADADDRESSA),
      .mi_req_raddr1_i           (MIREQUESTRAMREADADDRESSB),
      .mi_req_rdata_o            (mim_req_rdata[127:0]),
      .mi_req_rdop_o             (mim_req_rdop[15:0]),
      .mi_req_ren0_i             (MIREQUESTRAMREADENABLE[0]),
      .mi_req_ren1_i             (MIREQUESTRAMREADENABLE[1]),
      .mi_req_ren2_i             (MIREQUESTRAMREADENABLE[2]),
      .mi_req_ren3_i             (MIREQUESTRAMREADENABLE[3]),
      .mi_cpl_waddr0_i           (MICOMPLETIONRAMWRITEADDRESSAL),
      .mi_cpl_waddr1_i           (MICOMPLETIONRAMWRITEADDRESSBL),
      .mi_cpl_waddr2_i           (MICOMPLETIONRAMWRITEADDRESSAU),
      .mi_cpl_waddr3_i           (MICOMPLETIONRAMWRITEADDRESSBU),
      .mi_cpl_wdata_i            (mim_cpl_wdata[127:0]),
      .mi_cpl_wdip_i             (mim_cpl_wdip[15:0]),
      .mi_cpl_wen0_i             (MICOMPLETIONRAMWRITEENABLEL[0]),
      .mi_cpl_wen1_i             (MICOMPLETIONRAMWRITEENABLEL[1]),
      .mi_cpl_wen2_i             (MICOMPLETIONRAMWRITEENABLEL[2]),
      .mi_cpl_wen3_i             (MICOMPLETIONRAMWRITEENABLEL[3]),
      .mi_cpl_wen4_i             (MICOMPLETIONRAMWRITEENABLEU[0]),
      .mi_cpl_wen5_i             (MICOMPLETIONRAMWRITEENABLEU[1]),
      .mi_cpl_wen6_i             (MICOMPLETIONRAMWRITEENABLEU[2]),
      .mi_cpl_wen7_i             (MICOMPLETIONRAMWRITEENABLEU[3]),
      .mi_cpl_raddr0_i           (MICOMPLETIONRAMREADADDRESSAL),
      .mi_cpl_raddr1_i           (MICOMPLETIONRAMREADADDRESSBL),
      .mi_cpl_raddr2_i           (MICOMPLETIONRAMREADADDRESSAU),
      .mi_cpl_raddr3_i           (MICOMPLETIONRAMREADADDRESSBU),
      .mi_cpl_rdata_o            (mim_cpl_rdata[127:0]),
      .mi_cpl_rdop_o             (mim_cpl_rdop[15:0]),
      .mi_cpl_ren0_i             (MICOMPLETIONRAMREADENABLEL[0]),
      .mi_cpl_ren1_i             (MICOMPLETIONRAMREADENABLEL[1]),
      .mi_cpl_ren2_i             (MICOMPLETIONRAMREADENABLEL[2]),
      .mi_cpl_ren3_i             (MICOMPLETIONRAMREADENABLEL[3]),
      .mi_cpl_ren4_i             (MICOMPLETIONRAMREADENABLEU[0]),
      .mi_cpl_ren5_i             (MICOMPLETIONRAMREADENABLEU[1]),
      .mi_cpl_ren6_i             (MICOMPLETIONRAMREADENABLEU[2]),
      .mi_cpl_ren7_i             (MICOMPLETIONRAMREADENABLEU[3]));
   // }}} end pcie_bram_7vx i



endmodule
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pcie_bram_7vx_16k.v
// Version    : 4.0
//----------------------------------------------------------------------------//
// Project      : Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
// Filename     : rp_pcie_bram_7vx_16k.v                                         //
// Description  :  Implements 16 KB Dual Ported Memory                        //
//                   - Output Regs are always enabled                         //
//                   - if NO_DECODE_LOGIC = TRUE    -> 8xRAMB18E1 in TDP mode //
//                   - if INTERFACE_SPEED = 500 MHz -> 8xRAMB18E1 in TDP mode //
//                   - if INTERFACE_SPEED = 250 MHz -> 4xRAMB36E1 in SDP mode //
//                                                                            //
//---------- PIPE Wrapper Hierarchy ------------------------------------------//
//  pcie_bram_7vx_16k.v                                                       //
//----------------------------------------------------------------------------//

`timescale 1ps/1ps

module rp_pcie_bram_7vx_16k #(

  parameter IMPL_TARGET = "HARD",         // the implementation target, HARD or SOFT
  parameter NO_DECODE_LOGIC = "TRUE",     // No decode logic, TRUE or FALSE
  parameter INTERFACE_SPEED = "500 MHZ",  // the memory interface speed, 500 MHz or 250 MHz.
  parameter COMPLETION_SPACE = "16 KB"    // the completion FIFO spec, 8KB or 16KB

)
(
  input               clk_i,    // user clock
  input               reset_i,  // bram reset

  input    [9:0]      waddr0_i, // write address
  input    [9:0]      waddr1_i, // write address
  input    [9:0]      waddr2_i, // write address
  input    [9:0]      waddr3_i, // write address
  input  [127:0]      wdata_i,  // write data
  input   [15:0]      wdip_i,   // write parity
  input    [7:0]      wen_i,    // write enable

  input    [9:0]      raddr0_i, // write address
  input    [9:0]      raddr1_i, // write address
  input    [9:0]      raddr2_i, // write address
  input    [9:0]      raddr3_i, // write address
  output [127:0]      rdata_o,  // read data
  output  [15:0]      rdop_o,   // read parity
  input    [7:0]      ren_i     // read enable

);

 // Local Params

  localparam           TCQ                         =  1;

  genvar              i;
  wire     [79:0]     waddr;
  wire     [79:0]     raddr;
  wire      [7:0]     wen;
  wire      [7:0]     ren;
  wire    [255:0]     rdata_w;
  wire     [31:0]     rdop_w;
  wire    [255:0]     wdata_w;
  wire     [31:0]     wdip_w;

  reg                 raddr0_q = 1'b0;
  reg                 raddr0_qq = 1'b0;

  assign wen = {wen_i[7], wen_i[6], wen_i[5], wen_i[4], wen_i[3], wen_i[2], wen_i[1], wen_i[0]};
  assign ren = {ren_i[7], ren_i[6], ren_i[5], ren_i[4], ren_i[3], ren_i[2], ren_i[1], ren_i[0]};

  generate 
  
    if ((INTERFACE_SPEED == "500 MHZ") || (NO_DECODE_LOGIC == "TRUE")) begin :  SPEED_500MHz_OR_NO_DECODE_LOGIC

      assign waddr = {waddr3_i, waddr3_i, waddr2_i, waddr2_i, waddr1_i, waddr1_i, waddr0_i, waddr0_i};
      assign raddr = {raddr3_i, raddr3_i, raddr2_i, raddr2_i, raddr1_i, raddr1_i, raddr0_i, raddr0_i};

      for (i = 0; i < 8; i = i + 1) begin : RAMB18E1
   
        RAMB18E1 #(

          .SIM_DEVICE ("7SERIES"),
          .DOA_REG ( 1 ),
          .DOB_REG ( 1 ),
          .SRVAL_A ( 18'h00000 ),
          .INIT_FILE ( "NONE" ),
          .RAM_MODE ( "TDP" ),
          .READ_WIDTH_A ( 18 ),
          .READ_WIDTH_B ( 18 ),
          .RSTREG_PRIORITY_A ( "REGCE" ),
          .RSTREG_PRIORITY_B ( "REGCE" ),
          .SIM_COLLISION_CHECK ( "ALL" ),
          .INIT_A ( 18'h00000 ),
          .INIT_B ( 18'h00000 ),
          .WRITE_MODE_A ( "WRITE_FIRST" ),
          .WRITE_MODE_B ( "WRITE_FIRST" ),
          .WRITE_WIDTH_A ( 18 ),
          .WRITE_WIDTH_B ( 18 ),
          .SRVAL_B ( 18'h00000 ))
  
        u_fifo (
  
          .CLKARDCLK(clk_i),
          .CLKBWRCLK(clk_i),
          .ENARDEN(1'b1),
          .ENBWREN(ren[i]),
          .REGCEAREGCE(1'b0),
          .REGCEB(1'b1 ),
          .RSTRAMARSTRAM(1'b0),
          .RSTRAMB(1'b0),
          .RSTREGARSTREG(1'b0),
          .RSTREGB(1'b0),
          .ADDRARDADDR({waddr[(10*i)+9:(10*i)+0], 4'b0}),
          .ADDRBWRADDR({raddr[(10*i)+9:(10*i)+0], 4'b0}),
          .DIADI(wdata_i[(16*i)+15:(16*i)+0]),
          .DIPADIP(wdip_i[(2*i)+1:(2*i)+0]),
          .DIBDI({16'b0}),
          .DIPBDIP(2'b0),
          .DOADO(),
          .DOBDO(rdata_o[(16*i)+15:(16*i)+0]),            
          .DOPADOP(),
          .DOPBDOP(rdop_o[(2*i)+1:(2*i)+0]),               
          .WEA({wen[i], wen[i]}),
          .WEBWE({1'b0, 1'b0, 1'b0, 1'b0})
    
        );

      end

    end else begin : SPEED_250MHz


      always @(posedge clk_i) begin

        if (reset_i) begin

          raddr0_q <= #(TCQ) 1'b0;
          raddr0_qq <= #(TCQ) 1'b0;

        end else begin

          raddr0_q <= #(TCQ) raddr0_i[9];
          raddr0_qq <= #(TCQ) raddr0_q;

        end

      end

      assign rdata_o = raddr0_qq ? rdata_w[255:128] : rdata_w[127:0]; 
      assign rdop_o = raddr0_qq ?  rdop_w[31:16] : rdop_w[15:0];
      assign wdata_w = {wdata_i, wdata_i};
      assign wdip_w = {wdip_i, wdip_i};
      assign waddr = {44'b0, waddr0_i[8:0], waddr1_i[8:0], waddr2_i[8:0], waddr3_i[8:0]};
      assign raddr = {44'b0, raddr0_i[8:0], raddr1_i[8:0], raddr2_i[8:0], raddr3_i[8:0]};

      for (i = 0; i < 4; i = i + 1) begin : RAMB36E1

        RAMB36E1 #(

          .SIM_DEVICE ("7SERIES"),
          .DOA_REG ( 1 ),
          .DOB_REG ( 1 ),
          .EN_ECC_READ ( "FALSE" ),
          .EN_ECC_WRITE ( "FALSE" ),
          .INIT_A ( 36'h000000000 ),
          .INIT_B ( 36'h000000000 ),
          .INIT_FILE ( "NONE" ),
          .RAM_EXTENSION_A ( "NONE" ),
          .RAM_EXTENSION_B ( "NONE" ),
          .RAM_MODE ( "SDP" ),
          .RDADDR_COLLISION_HWCONFIG ( "DELAYED_WRITE" ),
          .READ_WIDTH_A ( 72 ),
          .READ_WIDTH_B ( 0 ),
          .RSTREG_PRIORITY_A ( "REGCE" ),
          .RSTREG_PRIORITY_B ( "REGCE" ),
          .SIM_COLLISION_CHECK ( "ALL" ),
          .SRVAL_A ( 36'h000000000 ),
          .SRVAL_B ( 36'h000000000 ),
          .WRITE_MODE_A ( "WRITE_FIRST" ),
          .WRITE_MODE_B ( "WRITE_FIRST" ),
          .WRITE_WIDTH_A ( 0 ),
          .WRITE_WIDTH_B ( 72 )

        )
        u_fifo (

          .CASCADEINA(1'b0),
          .CASCADEINB(1'b0),
          .CASCADEOUTA( ),
          .CASCADEOUTB( ),
          .CLKARDCLK(clk_i),
          .CLKBWRCLK(clk_i),
          .DBITERR( ),
          .ENARDEN(((i > 1) ? (raddr0_i[9] & ren[2*i]) : (~raddr0_i[9] & ren[2*i]))),
          .ENBWREN(1'b1 ),
          .INJECTDBITERR(1'b0),
          .INJECTSBITERR(1'b0),
          .REGCEAREGCE(1'b1 ),
          .REGCEB(1'b0),
          .RSTRAMARSTRAM(1'b0),
          .RSTRAMB(1'b0),
          .RSTREGARSTREG(1'b0),
          .RSTREGB(1'b0),
          .SBITERR( ),
          .ADDRARDADDR({1'b1 , raddr[(9*i)+8:(9*i)+0], 6'b0}),
          .ADDRBWRADDR({1'b1 , waddr[(9*i)+8:(9*i)+0], 6'b0}),
          .DIADI(wdata_w[(2*32*i)+31:(2*32*i)+0]),
          .DIBDI(wdata_w[(2*32*i)+63:(2*32*i)+32]),
          .DIPADIP(wdip_w[(2*4*i)+3:(2*4*i)+0]),
          .DIPBDIP(wdip_w[(2*4*i)+7:(2*4*i)+4]),
          .DOADO(rdata_w[(2*32*i)+31:(2*32*i)+0]),
          .DOBDO(rdata_w[(2*32*i)+63:(2*32*i)+32]),
          .DOPADOP(rdop_w[(2*4*i)+3:(2*4*i)+0]),
          .DOPBDOP(rdop_w[(2*4*i)+7:(2*4*i)+4]),
          .ECCPARITY(),
          .RDADDRECC(),
          .WEA(4'b0),
          .WEBWE({8{((i > 1) ? (waddr0_i[9] & wen[2*i]) : (~waddr0_i[9] & wen[2*i]))}})

        );

      end

    end

  endgenerate

endmodule // pcie_bram_7vx_16k 

//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pcie_bram_7vx_8k.v
// Version    : 4.0
//----------------------------------------------------------------------------//
// Project      : Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
// Filename     : rp_pcie_bram_7vx_8k.v                                          //
// Description  : Implements 8 KB Dual Ported Memory                          //
//                   - Output Regs are always enabled                         //
//                   - if INTERFACE_SPEED = 500 MHz -> 4xRAMB36E1 in TDP mode //
//                   - if INTERFACE_SPEED = 250 MHz -> 2xRAMB36E1 in SDP mode //
//                                                                            //
//---------- PIPE Wrapper Hierarchy ------------------------------------------//
//          pcie_bram_7vx_8k.v                                                //
//----------------------------------------------------------------------------//

`timescale 1ps/1ps

module rp_pcie_bram_7vx_8k #(

  parameter IMPL_TARGET = "HARD",         // the implementation target, HARD or SOFT
  parameter NO_DECODE_LOGIC = "TRUE",     // No decode logic, TRUE or FALSE
  parameter INTERFACE_SPEED = "500 MHZ",  // the memory interface speed, 500 MHz or 250 MHz.
  parameter COMPLETION_SPACE = "16 KB"    // the completion FIFO spec, 8KB or 16KB


) (
  input               clk_i,     // user clock
  input               reset_i,   // bram reset

  input    [8:0]      waddr0_i,  // write address
  input    [8:0]      waddr1_i,  // write address
  input  [127:0]      wdata_i,   // write data
  input   [15:0]      wdip_i,    // write parity
  input    [3:0]      wen_i,     // write enable

  input    [8:0]      raddr0_i,  // write address
  input    [8:0]      raddr1_i,  // write address
  output [127:0]      rdata_o,   // read data
  output  [15:0]      rdop_o,    // read parity
  input    [3:0]      ren_i      // read enable

);


  genvar              i;
  wire      [3:0]     wen = {wen_i[3], wen_i[2], wen_i[1], wen_i[0]};
  wire      [3:0]     ren = {ren_i[3], ren_i[2], ren_i[1], ren_i[0]};
  wire      [35:0]    waddr = {waddr1_i, waddr1_i, waddr0_i, waddr0_i};
  wire      [35:0]    raddr = {raddr1_i, raddr1_i, raddr0_i, raddr0_i};

  generate

    for (i = 0; i < 4; i = i + 1) begin : RAMB18E1

        RAMB18E1 #(

          .SIM_DEVICE ("7SERIES"),
          .DOA_REG ( 1 ),
          .DOB_REG ( 1 ),
          .SRVAL_A ( 36'h00000 ),
          .INIT_FILE ( "NONE" ),
          .RAM_MODE ( "SDP" ),
          .READ_WIDTH_A ( 36 ),
          .READ_WIDTH_B ( 0 ),
          .RSTREG_PRIORITY_A ( "REGCE" ),
          .RSTREG_PRIORITY_B ( "REGCE" ),
          .SIM_COLLISION_CHECK ( "ALL" ),
          .INIT_A ( 36'h00000 ),
          .INIT_B ( 36'h00000 ),
          .WRITE_MODE_A ( "WRITE_FIRST" ),
          .WRITE_MODE_B ( "WRITE_FIRST" ),
          .WRITE_WIDTH_A ( 0 ),
          .WRITE_WIDTH_B ( 36 ),
          .SRVAL_B ( 36'h00000 ))

        u_fifo (

          .CLKARDCLK(clk_i),
          .CLKBWRCLK(clk_i),
          .ENARDEN(ren[i]),
          .ENBWREN(1'b1),
          .REGCEAREGCE(1'b1),
          .REGCEB(1'b0 ),
          .RSTRAMARSTRAM(1'b0),
          .RSTRAMB(1'b0),
          .RSTREGARSTREG(1'b0),
          .RSTREGB(1'b0),
          .ADDRARDADDR({raddr[(9*i)+8:(9*i)+0], 5'b0}),
          .ADDRBWRADDR({waddr[(9*i)+8:(9*i)+0], 5'b0}),
          .DIADI(wdata_i[(2*16*i)+15:(2*16*i)+0]),
          .DIBDI(wdata_i[(2*16*i)+31:(2*16*i)+16]),
          .DIPADIP(wdip_i[(2*2*i)+1:(2*2*i)+0]),
          .DIPBDIP(wdip_i[(2*2*i)+3:(2*2*i)+2]),
          .DOADO(rdata_o[(2*16*i)+15:(2*16*i)+0]),
          .DOBDO(rdata_o[(2*16*i)+31:(2*16*i)+16]),
          .DOPADOP(rdop_o[(2*2*i)+1:(2*2*i)+0]),
          .DOPBDOP(rdop_o[(2*2*i)+3:(2*2*i)+2]),
          .WEA({2'b00}),
          .WEBWE({4{wen[i]}})

        );

      end

  endgenerate

endmodule // pcie_bram_7vx_8k
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pcie_bram_7vx_cpl.v
// Version    : 4.0
//----------------------------------------------------------------------------//
// Project      : Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
// Filename     : rp_pcie_bram_7vx_cpl.v                                         //
// Description  : Instantiates the completion buffer primitives.  8 KB or     //
//                16 KB Dual Port Completion FIFO                             //
//                                                                            //
//---------- PIPE Wrapper Hierarchy ------------------------------------------//
//  pcie_bram_7vx_cpl.v                                                       //
//      pcie_bram_7vx_8k.v                                                    //
//      pcie_bram_7vx_16k.v                                                   //
//----------------------------------------------------------------------------//

`timescale 1ps/1ps

module rp_pcie_bram_7vx_cpl #(

  parameter IMPL_TARGET = "HARD",         // the implementation target, HARD or SOFT
  parameter NO_DECODE_LOGIC = "TRUE",     // No decode logic, TRUE or FALSE
  parameter INTERFACE_SPEED = "500 MHZ",  // the memory interface speed, 500 MHz or 250 MHz.
  parameter COMPLETION_SPACE = "16 KB"    // the completion FIFO spec, 8KB or 16KB

) (
  input               clk_i,     // user clock
  input               reset_i,   // bram reset

  input    [9:0]      waddr0_i,  // write address
  input    [9:0]      waddr1_i,  // write address
  input    [9:0]      waddr2_i,  // write address
  input    [9:0]      waddr3_i,  // write address
  input  [127:0]      wdata_i,   // write data
  input   [15:0]      wdip_i,    // write parity
  input               wen0_i,    // write enable Bank0
  input               wen1_i,    // write enable Bank1
  input               wen2_i,    // write enable Bank2
  input               wen3_i,    // write enable Bank3
  input               wen4_i,    // write enable Bank4
  input               wen5_i,    // write enable Bank5
  input               wen6_i,    // write enable Bank6
  input               wen7_i,    // write enable Bank7

  input    [9:0]      raddr0_i,  // write address
  input    [9:0]      raddr1_i,  // write address
  input    [9:0]      raddr2_i,  // write address
  input    [9:0]      raddr3_i,  // write address
  output [127:0]      rdata_o,   // read data
  output  [15:0]      rdop_o,    // read parity
  input               ren0_i,    // read enable Bank0
  input               ren1_i,    // read enable Bank1
  input               ren2_i,    // read enable Bank2
  input               ren3_i,    // read enable Bank3
  input               ren4_i,    // read enable Bank4
  input               ren5_i,    // read enable Bank5
  input               ren6_i,    // read enable Bank6
  input               ren7_i     // read enable Bank7

);


  generate begin

  if (COMPLETION_SPACE == "16KB") begin : CPL_FIFO_16KB

    rp_pcie_bram_7vx_16k # (

      .IMPL_TARGET(IMPL_TARGET),
      .NO_DECODE_LOGIC(NO_DECODE_LOGIC),
      .INTERFACE_SPEED(INTERFACE_SPEED),
      .COMPLETION_SPACE(COMPLETION_SPACE)

    )
    U0
    (
      .clk_i              (clk_i),
      .reset_i            (reset_i),

      .waddr0_i           (waddr0_i[9:0]),
      .waddr1_i           (waddr1_i[9:0]),
      .waddr2_i           (waddr2_i[9:0]),
      .waddr3_i           (waddr3_i[9:0]),
      .wdata_i            (wdata_i[127:0]),
      .wdip_i             (wdip_i[15:0]),
      .wen_i              ({wen7_i, wen6_i, wen5_i, wen4_i, wen3_i, wen2_i, wen1_i, wen0_i}),

      .raddr0_i           (raddr0_i[9:0]),
      .raddr1_i           (raddr1_i[9:0]),
      .raddr2_i           (raddr2_i[9:0]),
      .raddr3_i           (raddr3_i[9:0]),
      .rdata_o            (rdata_o[127:0]),
      .rdop_o             (rdop_o[15:0]),
      .ren_i              ({ren7_i, ren6_i, ren5_i, ren4_i, ren3_i, ren2_i, ren1_i, ren0_i})

    );

  end else begin : CPL_FIFO_8KB

    rp_pcie_bram_7vx_8k # (

      .IMPL_TARGET(IMPL_TARGET),
      .INTERFACE_SPEED(INTERFACE_SPEED),
      .COMPLETION_SPACE(COMPLETION_SPACE)


    )
    U0
    (
      .clk_i              (clk_i),
      .reset_i            (reset_i),

      .waddr0_i           (waddr0_i[8:0]),
      .waddr1_i           (waddr1_i[8:0]),
      .wdata_i            (wdata_i[127:0]),
      .wdip_i             (wdip_i[15:0]),
      .wen_i              ({wen3_i, wen2_i, wen1_i, wen0_i}),

      .raddr0_i           (raddr0_i[8:0]),
      .raddr1_i           (raddr1_i[8:0]),
      .rdata_o            (rdata_o[127:0]),
      .rdop_o             (rdop_o[15:0]),
      .ren_i              ({ren3_i, ren2_i, ren1_i, ren0_i})

    );


    end

    end
  endgenerate

endmodule // pcie_bram_7vx_cpl
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pcie_bram_7vx_rep_8k.v
// Version    : 4.0
//----------------------------------------------------------------------------//
// Project      : Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
// Filename     : rp_pcie_bram_7vx_rep_8k.v                                      //
// Description  : Implements 8 KB Single Ported Memory                        //
//                   - Output Regs are always enabled                         //
//                   - 2xRAMB36E1 Single Port Mode                            //
//                                                                            //
//---------- PIPE Wrapper Hierarchy ------------------------------------------//
//  pcie_bram_7vx_rep_8k.v                                                    //
//----------------------------------------------------------------------------//

`timescale 1ps/1ps

module rp_pcie_bram_7vx_rep_8k #(

  parameter IMPL_TARGET = "HARD",         // the implementation target, HARD or SOFT
  parameter NO_DECODE_LOGIC = "TRUE",     // No decode logic, TRUE or FALSE
  parameter INTERFACE_SPEED = "500 MHZ",  // the memory interface speed, 500 MHz or 250 MHz.
  parameter COMPLETION_SPACE = "16 KB"    // the completion FIFO spec, 8KB or 16KB


) (
  input               clk_i,     // user clock
  input               reset_i,   // bram reset

  input    [8:0]      addr_i,    // address
  input  [127:0]      wdata_i,   // write data
  input   [15:0]      wdip_i,    // write parity
  input    [1:0]      wen_i,     // write enable

  output [127:0]      rdata_o,   // read data
  output  [15:0]      rdop_o     // read parity

);


  genvar              i;
  wire      [1:0]     wen = {wen_i[1], wen_i[0]};

  generate

    for (i = 0; i < 2; i = i + 1) begin : RAMB36E1


      RAMB36E1 #(

        .SIM_DEVICE                      ("7SERIES"),
        .RDADDR_COLLISION_HWCONFIG       ( "DELAYED_WRITE" ),
        .DOA_REG                         ( 1 ),
        .DOB_REG                         ( 1 ),
        .EN_ECC_READ                     ( "FALSE" ),
        .EN_ECC_WRITE                    ( "FALSE" ),
        .RAM_EXTENSION_A                 ( "NONE" ),
        .RAM_EXTENSION_B                 ( "NONE" ),
        .RAM_MODE                        ( "TDP" ),
        .READ_WIDTH_A                    ( 36 ),
        .READ_WIDTH_B                    ( 36 ),
        .RSTREG_PRIORITY_A               ( "REGCE" ),
        .RSTREG_PRIORITY_B               ( "REGCE" ),
        .SIM_COLLISION_CHECK             ( "ALL" ),
        .SRVAL_A                         ( 36'h000000000 ),
        .SRVAL_B                         ( 36'h000000000 ),
        .WRITE_MODE_A                    ( "WRITE_FIRST" ),
        .WRITE_MODE_B                    ( "WRITE_FIRST" ),
        .WRITE_WIDTH_A                   ( 36 ),
        .WRITE_WIDTH_B                   ( 36 )
      )
      u_buffer (

        .CASCADEINA                      (),
        .CASCADEINB                      (),
        .CASCADEOUTA                     (),
        .CASCADEOUTB                     (),
        .CLKARDCLK                       (clk_i),
        .CLKBWRCLK                       (clk_i),
        .DBITERR                         (),
        .ENARDEN                         (1'b1),
        .ENBWREN                         (1'b1),
        .INJECTDBITERR                   (1'b0),
        .INJECTSBITERR                   (1'b0),
        .REGCEAREGCE                     (1'b1 ),
        .REGCEB                          (1'b1 ),
        .RSTRAMARSTRAM                   (1'b0),
        .RSTRAMB                         (1'b0),
        .RSTREGARSTREG                   (1'b0),
        .RSTREGB                         (1'b0),
        .SBITERR                         (),
        .ADDRARDADDR                     ({1'b1, addr_i[8:0], 6'b0}),
        .ADDRBWRADDR                     ({1'b1, addr_i[8:0], 1'b1, 5'b0}),
        .DIADI                           (wdata_i[(2*32*i)+31:(2*32*i)+0]),
        .DIBDI                           (wdata_i[(2*32*i)+63:(2*32*i)+32]),
        .DIPADIP                         (wdip_i[(2*4*i)+3:(2*4*i)+0]),
        .DIPBDIP                         (wdip_i[(2*4*i)+7:(2*4*i)+4]),
        .DOADO                           (rdata_o[(2*32*i)+31:(2*32*i)+0]),
        .DOBDO                           (rdata_o[(2*32*i)+63:(2*32*i)+32]),
        .DOPADOP                         (rdop_o[(2*4*i)+3:(2*4*i)+0]),
        .DOPBDOP                         (rdop_o[(2*4*i)+7:(2*4*i)+4]),
        .ECCPARITY                       (),
        .RDADDRECC                       (),
        .WEA                             ({4{wen[i]}}),
        .WEBWE                           ({4'b0, {4{wen[i]}}})

      );

  end
  endgenerate

endmodule // pcie_bram_7vx_rep_8k
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pcie_bram_7vx_rep.v
// Version    : 4.0
//----------------------------------------------------------------------------//
// Project      : Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
// Filename     : rp_pcie_bram_7vx_rep.v                                         //
// Description  : Instantiates replay buffer primitives;  Single Port Replay  //
//                Buffer                                                      //
//                                                                            //
//---------- PIPE Wrapper Hierarchy ------------------------------------------//
//  pcie_bram_7vx_rep.v                                                       //
//      pcie_bram_7vx_rep_8k.v                                                //
//----------------------------------------------------------------------------//

`timescale 1ps/1ps

module rp_pcie_bram_7vx_rep #(

  parameter IMPL_TARGET = "HARD",         // the implementation target, HARD or SOFT
  parameter NO_DECODE_LOGIC = "TRUE",     // No decode logic, TRUE or FALSE
  parameter INTERFACE_SPEED = "500 MHZ",  // the memory interface speed, 500 MHz or 250 MHz.
  parameter COMPLETION_SPACE = "16 KB"    // the completion FIFO spec, 8KB or 16KB

) (
  input               clk_i,     // user clock
  input               reset_i,   // bram reset

  input    [8:0]      addr_i,    // write address
  input  [127:0]      wdata_i,   // write data
  input   [15:0]      wdip_i,    // write parity
  input               wen0_i,    // write enable
  input               wen1_i,    // write enable

  output [127:0]      rdata_o,   // read data
  output  [15:0]      rdop_o     // read parity

);


  rp_pcie_bram_7vx_rep_8k # (

    .IMPL_TARGET(IMPL_TARGET),
    .NO_DECODE_LOGIC(NO_DECODE_LOGIC),
    .INTERFACE_SPEED(INTERFACE_SPEED),
    .COMPLETION_SPACE(COMPLETION_SPACE)


  )
  U0
  (
    .clk_i              (clk_i),
    .reset_i            (reset_i),

    .addr_i             (addr_i[8:0]),
    .wdata_i            (wdata_i[127:0]),
    .wdip_i             (wdip_i[15:0]),
    .wen_i              ({wen1_i, wen0_i}),

    .rdata_o            (rdata_o[127:0]),
    .rdop_o             (rdop_o[15:0])

  );

endmodule // pcie_bram_7x_rep
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pcie_bram_7vx_req.v
// Version    : 4.0
//----------------------------------------------------------------------------//
// Project      : Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
// Filename     : rp_pcie_bram_7vx_req.v                                         //
// Description  : Instantiates the request buffer primitives; 8KB Dual Port   //
//                Request FIFO                                                //
//                                                                            //
//---------- PIPE Wrapper Hierarchy ------------------------------------------//
// pcie_bram_7vx_req.v                                                        //
//     pcie_bram_7vx_8k.v                                                     //
//----------------------------------------------------------------------------//

`timescale 1ps/1ps

module rp_pcie_bram_7vx_req #(

  parameter IMPL_TARGET = "HARD",         // the implementation target, HARD or SOFT
  parameter NO_DECODE_LOGIC = "TRUE",     // No decode logic, TRUE or FALSE
  parameter INTERFACE_SPEED = "500 MHZ",  // the memory interface speed, 500 MHz or 250 MHz.
  parameter COMPLETION_SPACE = "16 KB"    // the completion FIFO spec, 8KB or 16KB

) (
  input               clk_i,     // user clock
  input               reset_i,   // bram reset

  input    [8:0]      waddr0_i,   // write address
  input    [8:0]      waddr1_i,   // write address
  input  [127:0]      wdata_i,   // write data
  input   [15:0]      wdip_i,    // write parity
  input               wen0_i,    // write enable
  input               wen1_i,    // write enable
  input               wen2_i,    // write enable
  input               wen3_i,    // write enable

  input    [8:0]      raddr0_i,   // write address
  input    [8:0]      raddr1_i,   // write address
  output [127:0]      rdata_o,   // read data
  output  [15:0]      rdop_o,    // read parity
  input               ren0_i,    // read enable
  input               ren1_i,    // read enable
  input               ren2_i,    // read enable
  input               ren3_i    // read enable

);


  rp_pcie_bram_7vx_8k # (

    .IMPL_TARGET(IMPL_TARGET),
    .NO_DECODE_LOGIC(NO_DECODE_LOGIC),
    .INTERFACE_SPEED(INTERFACE_SPEED),
    .COMPLETION_SPACE(COMPLETION_SPACE)


  )
  U0
  (
    .clk_i              (clk_i),
    .reset_i            (reset_i),

    .waddr0_i           (waddr0_i[8:0]),
    .waddr1_i           (waddr1_i[8:0]),
    .wdata_i            (wdata_i[127:0]),
    .wdip_i             (wdip_i[15:0]),
    .wen_i              ({wen3_i, wen2_i, wen1_i, wen0_i}),

    .raddr0_i           (raddr0_i[8:0]),
    .raddr1_i           (raddr1_i[8:0]),
    .rdata_o            (rdata_o[127:0]),
    .rdop_o             (rdop_o[15:0]),
    .ren_i              ({ren3_i, ren2_i, ren1_i, ren0_i})

  );

endmodule // pcie_bram_7vx_req
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pcie_bram_7vx.v
// Version    : 4.0
//----------------------------------------------------------------------------//
// Project      : Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
// Filename     : rp_pcie_3_0_7vx.v                                              //
// Description  : Instantiates the 3 buffers used by the Gen3 Integrated      //
//                block for PCI Express (TX replay, RX Request, RX Completion //
//                                                                            //
//---------- PIPE Wrapper Hierarchy ------------------------------------------//
//  pcie_bram_7vx.v                                                           //
//      pcie_bram_7vx_rep.v                                                   //
//          pcie_bram_7vx_rep_8k.v                                            //
//      pcie_bram_7vx_req.v                                                   //
//          pcie_bram_7vx_8k.v                                                //
//      pcie_bram_7vx_cpl.v                                                   //
//          pcie_bram_7vx_8k.v                                                //
//          pcie_bram_7vx_16k.v                                               //
//----------------------------------------------------------------------------//

`timescale 1ps/1ps

module rp_pcie_bram_7vx #(

  parameter IMPL_TARGET      = "HARD",     // the implementation target, HARD or SOFT
  parameter NO_DECODE_LOGIC  = "TRUE",     // No decode logic, TRUE or FALSE
  parameter INTERFACE_SPEED  = "500 MHZ",  // the memory interface speed, 500 MHz or 250 MHz.
  parameter COMPLETION_SPACE = "16KB"     // the completion FIFO spec, 8KB or 16KB

) (
  input               clk_i,     // user clock
  input               reset_i,   // bram reset

  input    [8:0]      mi_rep_addr_i,    // address

  input  [127:0]      mi_rep_wdata_i,   // write data
  input   [15:0]      mi_rep_wdip_i,    // write parity
  input               mi_rep_wen0_i,    // write enable0
  input               mi_rep_wen1_i,    // write enable1

  output [127:0]      mi_rep_rdata_o,   // read data
  output  [15:0]      mi_rep_rdop_o,    // read parity

  input    [8:0]      mi_req_waddr0_i,   // write address0
  input    [8:0]      mi_req_waddr1_i,   // write address0
  input  [127:0]      mi_req_wdata_i,   // write data
  input   [15:0]      mi_req_wdip_i,    // write parity
  input               mi_req_wen0_i,    // write enable0
  input               mi_req_wen1_i,    // write enable1
  input               mi_req_wen2_i,    // write enable1
  input               mi_req_wen3_i,    // write enable1

  input    [8:0]      mi_req_raddr0_i,   // write address0
  input    [8:0]      mi_req_raddr1_i,   // write address0
  output [127:0]      mi_req_rdata_o,   // read data
  output  [15:0]      mi_req_rdop_o,    // read parity
  input               mi_req_ren0_i,    // read enable0
  input               mi_req_ren1_i,    // read enable1
  input               mi_req_ren2_i,    // read enable1
  input               mi_req_ren3_i,    // read enable1

  input    [9:0]      mi_cpl_waddr0_i,  // write address0
  input    [9:0]      mi_cpl_waddr1_i,  // write address1
  input    [9:0]      mi_cpl_waddr2_i,  // write address2
  input    [9:0]      mi_cpl_waddr3_i,  // write address3
  input  [127:0]      mi_cpl_wdata_i,   // write data
  input   [15:0]      mi_cpl_wdip_i,    // write parity
  input               mi_cpl_wen0_i,    // write enable0
  input               mi_cpl_wen1_i,    // write enable1
  input               mi_cpl_wen2_i,    // write enable2
  input               mi_cpl_wen3_i,    // write enable3
  input               mi_cpl_wen4_i,    // write enable4
  input               mi_cpl_wen5_i,    // write enable5
  input               mi_cpl_wen6_i,    // write enable6
  input               mi_cpl_wen7_i,    // write enable7

  input    [9:0]      mi_cpl_raddr0_i,  // write address0
  input    [9:0]      mi_cpl_raddr1_i,  // write address1
  input    [9:0]      mi_cpl_raddr2_i,  // write address2
  input    [9:0]      mi_cpl_raddr3_i,  // write address3
  output [127:0]      mi_cpl_rdata_o,   // read data
  output  [15:0]      mi_cpl_rdop_o,    // read parity
  input               mi_cpl_ren0_i,    // read enable0
  input               mi_cpl_ren1_i,    // read enable1
  input               mi_cpl_ren2_i,    // read enable2
  input               mi_cpl_ren3_i,    // read enable3
  input               mi_cpl_ren4_i,    // read enable4
  input               mi_cpl_ren5_i,    // read enable5
  input               mi_cpl_ren6_i,    // read enable6
  input               mi_cpl_ren7_i     // read enable7

);


  //
  // Single Ported 8KB Replay Buffer
  //

  rp_pcie_bram_7vx_rep # (

    .IMPL_TARGET(IMPL_TARGET),
    .NO_DECODE_LOGIC(NO_DECODE_LOGIC),
    .INTERFACE_SPEED(INTERFACE_SPEED),
    .COMPLETION_SPACE(COMPLETION_SPACE)

  )
  replay_buffer
  (
    .clk_i              (clk_i),
    .reset_i            (reset_i),

    .addr_i             (mi_rep_addr_i[8:0]),
    .wdata_i            (mi_rep_wdata_i[127:0]),
    .wdip_i             (mi_rep_wdip_i[15:0]),
    .wen0_i             (mi_rep_wen0_i),
    .wen1_i             (mi_rep_wen1_i),

    .rdata_o            (mi_rep_rdata_o[127:0]),
    .rdop_o             (mi_rep_rdop_o[15:0])

  );

  //
  // 8KB Receive Request FIFO
  //

  rp_pcie_bram_7vx_req # (

    .IMPL_TARGET(IMPL_TARGET),
    .NO_DECODE_LOGIC(NO_DECODE_LOGIC),
    .INTERFACE_SPEED(INTERFACE_SPEED),
    .COMPLETION_SPACE(COMPLETION_SPACE)

  )
  req_fifo
  (
    .clk_i              (clk_i),
    .reset_i            (reset_i),

    .waddr0_i           (mi_req_waddr0_i[8:0]),
    .waddr1_i           (mi_req_waddr1_i[8:0]),
    .wdata_i            (mi_req_wdata_i[127:0]),
    .wdip_i             (mi_req_wdip_i[15:0]),
    .wen0_i             (mi_req_wen0_i),
    .wen1_i             (mi_req_wen1_i),
    .wen2_i             (mi_req_wen2_i),
    .wen3_i             (mi_req_wen3_i),

    .raddr0_i           (mi_req_raddr0_i[8:0]),
    .raddr1_i           (mi_req_raddr1_i[8:0]),
    .rdata_o            (mi_req_rdata_o[127:0]),
    .rdop_o             (mi_req_rdop_o[15:0]),
    .ren0_i             (mi_req_ren0_i),
    .ren1_i             (mi_req_ren1_i),
    .ren2_i             (mi_req_ren2_i),
    .ren3_i             (mi_req_ren3_i)

  );

  //
  // 8KB or 16KB Receive Completion FIFO
  //

  rp_pcie_bram_7vx_cpl # (

    .IMPL_TARGET(IMPL_TARGET),
    .NO_DECODE_LOGIC(NO_DECODE_LOGIC),
    .INTERFACE_SPEED(INTERFACE_SPEED),
    .COMPLETION_SPACE(COMPLETION_SPACE)

  )
  cpl_fifo
  (
    .clk_i              (clk_i),
    .reset_i            (reset_i),

    .waddr0_i           (mi_cpl_waddr0_i[9:0]),
    .waddr1_i           (mi_cpl_waddr1_i[9:0]),
    .waddr2_i           (mi_cpl_waddr2_i[9:0]),
    .waddr3_i           (mi_cpl_waddr3_i[9:0]),
    .wdata_i            (mi_cpl_wdata_i[127:0]),
    .wdip_i             (mi_cpl_wdip_i[15:0]),
    .wen0_i             (mi_cpl_wen0_i),
    .wen1_i             (mi_cpl_wen1_i),
    .wen2_i             (mi_cpl_wen2_i),
    .wen3_i             (mi_cpl_wen3_i),
    .wen4_i             (mi_cpl_wen4_i),
    .wen5_i             (mi_cpl_wen5_i),
    .wen6_i             (mi_cpl_wen6_i),
    .wen7_i             (mi_cpl_wen7_i),

    .raddr0_i           (mi_cpl_raddr0_i[9:0]),
    .raddr1_i           (mi_cpl_raddr1_i[9:0]),
    .raddr2_i           (mi_cpl_raddr2_i[9:0]),
    .raddr3_i           (mi_cpl_raddr3_i[9:0]),
    .rdata_o            (mi_cpl_rdata_o[127:0]),
    .rdop_o             (mi_cpl_rdop_o[15:0]),
    .ren0_i             (mi_cpl_ren0_i),
    .ren1_i             (mi_cpl_ren1_i),
    .ren2_i             (mi_cpl_ren2_i),
    .ren3_i             (mi_cpl_ren3_i),
    .ren4_i             (mi_cpl_ren4_i),
    .ren5_i             (mi_cpl_ren5_i),
    .ren6_i             (mi_cpl_ren6_i),
    .ren7_i             (mi_cpl_ren7_i)

  );

endmodule // pcie_bram_7vx
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pcie_force_adapt.v
// Version    : 4.0
//----------------------------------------------------------------------------//
// Project      : Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
// Filename     : rp_pcie_top.v                                                  //
// Description  : Instantiates GEN3 PCIe Integrated Block Wrapper and         //
//                connects the IP to the PIPE Interface Pipeline module, the  //
//                PCIe Initialization Controller, and the TPH Table           //
//                implemented in a RAMB36                                     //
//---------- PIPE Wrapper Hierarchy ------------------------------------------//
//      pcie_top.v                                                            //  
//          pcie_force_adapt.v                                                                    //
//          pcie_init_ctrl.v                                                  //
//          pcie_tlp_tph_tbl_7vx.v                                            //
//          pcie_7vx.v                                                        //
//              PCIE_3_0                                                      //
//              pcie_bram_7vx.v                                               //
//                  pcie_bram_7vx_rep.v                                       //
//                      pcie_bram_7vx_rep_8k.v                                //
//                  pcie_bram_7vx_req.v                                       //
//                      pcie_bram_7vx_8k.v                                    //
//                  pcie_bram_7vx_cpl.v                                       //
//                      pcie_bram_7vx_8k.v                                    //
//                      pcie_bram_7vx_16k.v                                   //
//          pcie_pipe_pipeline.v                                              //
//              pcie_pipe_lane.v                                              //
//              pcie_pipe_misc.v                                              //
//----------------------------------------------------------------------------//

`timescale 1ps/1ps

module rp_pcie_force_adapt (
             
  input                     pipe_clk,
  input                     user_clk,
  input       [5:0]         cfg_ltssm_state,  
  input       [2:0]         cfg_current_speed,
  
  input       [1:0]         pipe_tx0_rate,
  input                     pipe_rx0_elec_idle,
  input                     pipe_rx0_eqlp_adaptdone,
  input       [1:0]         pipe_tx0_eqcontrol, 

  input      [31:0]         pipe_rx0_data_in,
  input      [31:0]         pipe_rx1_data_in,
  input      [31:0]         pipe_rx2_data_in,
  input      [31:0]         pipe_rx3_data_in,
  input      [31:0]         pipe_rx4_data_in,
  input      [31:0]         pipe_rx5_data_in,
  input      [31:0]         pipe_rx6_data_in,
  input      [31:0]         pipe_rx7_data_in,
  
  input        [1:0]        pipe_rx0_eqcontrol_in,
  input        [1:0]        pipe_rx1_eqcontrol_in,
  input        [1:0]        pipe_rx2_eqcontrol_in,
  input        [1:0]        pipe_rx3_eqcontrol_in,
  input        [1:0]        pipe_rx4_eqcontrol_in,
  input        [1:0]        pipe_rx5_eqcontrol_in,
  input        [1:0]        pipe_rx6_eqcontrol_in,
  input        [1:0]        pipe_rx7_eqcontrol_in,

  output      [31:0]        pipe_rx0_data_out,
  output      [31:0]        pipe_rx1_data_out,
  output      [31:0]        pipe_rx2_data_out,
  output      [31:0]        pipe_rx3_data_out,
  output      [31:0]        pipe_rx4_data_out,
  output      [31:0]        pipe_rx5_data_out,
  output      [31:0]        pipe_rx6_data_out,
  output      [31:0]        pipe_rx7_data_out,  
 
  output       [1:0]        pipe_rx0_eqcontrol_out,
  output       [1:0]        pipe_rx1_eqcontrol_out,
  output       [1:0]        pipe_rx2_eqcontrol_out,
  output       [1:0]        pipe_rx3_eqcontrol_out,
  output       [1:0]        pipe_rx4_eqcontrol_out,
  output       [1:0]        pipe_rx5_eqcontrol_out,
  output       [1:0]        pipe_rx6_eqcontrol_out,
  output       [1:0]        pipe_rx7_eqcontrol_out

);
localparam      RXJITTER_TEK              = "TRUE";
//////////////////////////////////////Gen3 Extra Adaptation //////////////////////////////

//////////////////////////////////logic in user_clock domain///////////////////////////

(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)      reg  [5:0]   cfg_ltssm_state_reg = 6'b0;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)      reg  [5:0]   cfg_ltssm_state_reg0 = 6'b0;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)      reg  [5:0]   cfg_ltssm_state_reg1 = 6'b0;
 reg          speed_change = 1'b0;
 reg          gen3_flag = 1'b1;
 reg          cfg_loopback = 1'b0; 

 always @ (posedge user_clk )
  begin
    cfg_ltssm_state_reg      <= cfg_ltssm_state;
    cfg_ltssm_state_reg0     <= cfg_ltssm_state_reg;
    cfg_ltssm_state_reg1     <= cfg_ltssm_state_reg0;
  end
  
  // Flag to indicate the first transition to Gen3 
 always @ (posedge user_clk )
  begin
    if (cfg_ltssm_state_reg1 == 6'h10 && cfg_current_speed[2] )
      gen3_flag <= 1'b1;
    else if ((cfg_ltssm_state_reg1 == 6'hc || cfg_ltssm_state_reg1 == 6'hD ) && pipe_tx0_eqcontrol[0])  
      gen3_flag <= 1'b0;
    else 
      gen3_flag <= gen3_flag;
  end 
    
 // Flag to indicate Speed Change
 always @ (posedge user_clk )
  begin
    if ((cfg_ltssm_state_reg1 == 6'hc || cfg_ltssm_state_reg1 == 6'h18 ) && cfg_ltssm_state == 6'hb)   
    begin
      speed_change <= gen3_flag;
    end 
    else if (cfg_ltssm_state != 6'hb) begin
      speed_change <= 1'b0;
    end 
    else begin
      speed_change <= speed_change;
    end
  end

 // Flag to indicate cfg -> loopback slave
 generate
 if (RXJITTER_TEK == "TRUE") 
 begin: loopback
 always @ (posedge user_clk )
  begin
    if (cfg_ltssm_state_reg1 == 6'h25 || cfg_ltssm_state_reg1 == 6'h24 )    
    begin
      cfg_loopback <= 1'b1;
    end 
    else 
      cfg_loopback <= 1'b0;
  end   
 end      
 endgenerate
  
//////////////////////////////////logic in pipe_clock domain///////////////////////////
    wire         elec_idle_deasserted;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)         reg          speed_change_reg0  =1'b0;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)         reg          speed_change_reg1  =1'b0;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)         reg          speed_change_reg2  =1'b0;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)         reg          cfg_loopback_reg0  =1'b0;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)         reg          cfg_loopback_reg1  =1'b0;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)         reg          cfg_loopback_reg2  =1'b0;
    reg  [3:0]   eq_state           =4'b0001;

    localparam  EQ_IDLE     = 4'b0001;
    localparam  EQ_ADAPT    = 4'b0010;
    localparam  EQ_RX_TEK   = 4'b0100;
    localparam  EQ_WAIT     = 4'b1000;
    
    
    // Device should be in R.RL with elec idle deasserted for force adapttation to start
    
    assign elec_idle_deasserted = ~ pipe_rx0_elec_idle;
    
    
   // CDC speed_change from user clock to pipe clock domain 
  always @ (posedge pipe_clk )
   begin
    speed_change_reg0            <= speed_change;
    speed_change_reg1            <= speed_change_reg0;
    speed_change_reg2            <= speed_change_reg1;
   end
   
// CDC cfg_loopback from user clock to pipe clock domain 
  always @ (posedge pipe_clk )
   begin
    cfg_loopback_reg0            <= cfg_loopback;
    cfg_loopback_reg1            <= cfg_loopback_reg0;
    cfg_loopback_reg2            <= cfg_loopback_reg1;
   end

  // State Machine to Control Forced Adaptation
  always @ (posedge pipe_clk )
   begin
   case(eq_state)
    EQ_IDLE : begin 
      if (speed_change_reg2 && elec_idle_deasserted && pipe_tx0_rate[1]) 
        eq_state                <= EQ_ADAPT;
      else if (cfg_loopback_reg2 && pipe_tx0_rate[1]) 
         eq_state               <= EQ_RX_TEK;
      else 
        eq_state                <= EQ_IDLE;
      end
    EQ_ADAPT : begin 
      if (pipe_rx0_eqlp_adaptdone) 
        eq_state                <= EQ_WAIT;
      else 
        eq_state                <= EQ_ADAPT;
      end  
    EQ_RX_TEK : begin 
      if (pipe_rx0_eqlp_adaptdone) 
        eq_state                <= EQ_IDLE;
      else 
        eq_state                <= EQ_RX_TEK;
      end  
    EQ_WAIT : begin 
      if (!speed_change_reg2) 
        eq_state                <= EQ_IDLE;
      else 
        eq_state                <= EQ_WAIT;
      end      
   endcase
   end
 

  assign pipe_rx0_data_out = (eq_state == EQ_ADAPT) ? {32{1'b1}}: pipe_rx0_data_in;
  assign pipe_rx1_data_out = (eq_state == EQ_ADAPT) ? {32{1'b1}}: pipe_rx1_data_in;
  assign pipe_rx2_data_out = (eq_state == EQ_ADAPT) ? {32{1'b1}}: pipe_rx2_data_in;
  assign pipe_rx3_data_out = (eq_state == EQ_ADAPT) ? {32{1'b1}}: pipe_rx3_data_in;
  assign pipe_rx4_data_out = (eq_state == EQ_ADAPT) ? {32{1'b1}}: pipe_rx4_data_in;
  assign pipe_rx5_data_out = (eq_state == EQ_ADAPT) ? {32{1'b1}}: pipe_rx5_data_in;
  assign pipe_rx6_data_out = (eq_state == EQ_ADAPT) ? {32{1'b1}}: pipe_rx6_data_in;
  assign pipe_rx7_data_out = (eq_state == EQ_ADAPT) ? {32{1'b1}}: pipe_rx7_data_in;
  
  assign pipe_rx0_eqcontrol_out =  ((eq_state == EQ_ADAPT) || (eq_state == EQ_RX_TEK)) ? 2'b11 : pipe_rx0_eqcontrol_in;
  assign pipe_rx1_eqcontrol_out =  ((eq_state == EQ_ADAPT) || (eq_state == EQ_RX_TEK)) ? 2'b11 : pipe_rx1_eqcontrol_in;
  assign pipe_rx2_eqcontrol_out =  ((eq_state == EQ_ADAPT) || (eq_state == EQ_RX_TEK)) ? 2'b11 : pipe_rx2_eqcontrol_in;
  assign pipe_rx3_eqcontrol_out =  ((eq_state == EQ_ADAPT) || (eq_state == EQ_RX_TEK)) ? 2'b11 : pipe_rx3_eqcontrol_in;
  assign pipe_rx4_eqcontrol_out =  ((eq_state == EQ_ADAPT) || (eq_state == EQ_RX_TEK)) ? 2'b11 : pipe_rx4_eqcontrol_in;
  assign pipe_rx5_eqcontrol_out =  ((eq_state == EQ_ADAPT) || (eq_state == EQ_RX_TEK)) ? 2'b11 : pipe_rx5_eqcontrol_in;
  assign pipe_rx6_eqcontrol_out =  ((eq_state == EQ_ADAPT) || (eq_state == EQ_RX_TEK)) ? 2'b11 : pipe_rx6_eqcontrol_in;
  assign pipe_rx7_eqcontrol_out =  ((eq_state == EQ_ADAPT) || (eq_state == EQ_RX_TEK)) ? 2'b11 : pipe_rx7_eqcontrol_in;

endmodule
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pcie_init_ctrl_7vx.v
// Version    : 4.0
//----------------------------------------------------------------------------//
// Project      : Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
// Filename     : rp_pcie_init_ctrl_7vx.v                                        //
// Description  : Initialization Controller for Gen3 Integrated Block for PCI //
//                Express                                                     //
//                                                                            //
//---------- PIPE Wrapper Hierarchy ------------------------------------------//
//  pcie_init_ctrl.v                                                          //
//----------------------------------------------------------------------------//

`timescale 1ps/1ps

module rp_pcie_init_ctrl_7vx # (
  parameter         TCQ = 100,
  parameter         PL_UPSTREAM_FACING = "TRUE"
) (
  input               clk_i,                   // User Clock

  output              reset_n_o,               // Fundamental reset, active low
  output              pipe_reset_n_o,          // Resets the PIPE clock domain logic, active low
  output              mgmt_reset_n_o,          // Resets management and configuration registers, active low
  output              mgmt_sticky_reset_n_o,   // Resets sticky management and configuration register bits, active low

  input               mmcm_lock_i,             // MMCM Locked : 1b = MMCM Locked
  input               phy_rdy_i,               // GT is ready : 1b = GT Ready

  input               cfg_input_update_done_i,    // Configuration Input update Complete
  output              cfg_input_update_request_o, // Configuration Input Update Request
  input               cfg_mc_update_done_i,       // Configuration Memory Cell Update Complete
  output              cfg_mc_update_request_o,    // Configuration Memory Cell Update Request

  input               user_cfg_input_update_i,    // User driven Configuration Input Update Request

  output  [2:0]       state_o                     // Debug state

);

  // Local Params

  localparam           STATE_RESET                 =  3'b000;
  localparam           STATE_MGMT_RESET_DEASSERT   =  3'b001;
  localparam           STATE_MC_TRANSFER_REQ       =  3'b010;
  localparam           STATE_INPUT_UPDATE_REQ      =  3'b011;
  localparam           STATE_PHY_RDY               =  3'b100;
  localparam           STATE_RESET_DEASSERT        =  3'b101;
  localparam           STATE_INPUT_UPDATE_REQ_REDO =  3'b110;
  localparam           STATE_MGMT_RESET_ASSERT     =  3'b111;

  // Local Registers

  reg  [2:0]          reg_state /* synthesis syn_state_machine=1 */;
  reg  [2:0]          reg_next_state;

  reg  [1:0]          reg_clock_locked;
  reg  [1:0]          reg_phy_rdy;
  reg                 reg_cold_reset = 1'b1 ;

  reg                 reg_reset_n_o;
  reg                 reg_pipe_reset_n_o;
  reg                 reg_mgmt_reset_n_o;
  reg                 reg_mgmt_sticky_reset_n_o;

  reg                 reg_cfg_input_update_request_o;
  reg                 reg_cfg_mc_update_request_o;
  reg  [1:0]          reg_reset_timer;
  
  reg  [4:0]          reg_mgmt_reset_timer;
  
  reg                 regff_mgmt_reset_n_o = 1'b0;
  reg                 regff_mgmt_sticky_reset_n_o = 1'b0;
  reg                 regff_reset_n_o = 1'b0;
  reg                 regff_pipe_reset_n_o = 1'b0;
  

  // Local Wires

  wire [2:0]          state_w;
  wire [2:0]          next_state_w;
  wire                clock_locked;
  wire                phy_rdy;
  wire                cold_reset;
  wire [1:0]          reset_timer_w;


  // Synchronize MMCM lock output
  always @ (posedge clk_i or negedge mmcm_lock_i) begin

    if (!mmcm_lock_i) begin
      reg_clock_locked[1:0] <= #TCQ 2'b11;
    end else begin
      reg_clock_locked[1:0] <= #TCQ {reg_clock_locked[0], 1'b0};
    end
  end

  assign  clock_locked = !reg_clock_locked[1];

  // Synchronize PHY Ready
  always @ (posedge clk_i or negedge phy_rdy_i) begin

    if (!phy_rdy_i) begin
      reg_phy_rdy[1:0] <= #TCQ 2'b11;
    end else begin
      reg_phy_rdy[1:0] <= #TCQ {reg_phy_rdy[0], 1'b0};
    end
  end
  assign  phy_rdy = !reg_phy_rdy[1];

  // Controller FSM

  always @ (posedge clk_i or negedge clock_locked) begin

    if (!clock_locked) begin

       reg_state <= #(TCQ) STATE_RESET;
       reg_reset_timer <= #(TCQ) 2'b00;

    end else begin

      reg_state <= #(TCQ) reg_next_state;

      if ((state_w == STATE_MGMT_RESET_DEASSERT) && (reset_timer_w != 2'b11))
        reg_reset_timer <= #(TCQ) reset_timer_w + 1'b1;

    end

  end

  always @ (posedge clk_i) begin

    // reset the cold reset flag

    if ((state_w == STATE_PHY_RDY) && (next_state_w == STATE_RESET_DEASSERT) && (cold_reset == 1'b1))
      reg_cold_reset <= #(TCQ) 1'b0;

  end

 always @ (posedge clk_i) begin // mgmt reset timer

    if (state_w == STATE_MGMT_RESET_ASSERT)
      reg_mgmt_reset_timer <= #(TCQ) reg_mgmt_reset_timer + 1'b1;
    else if (state_w == STATE_MGMT_RESET_DEASSERT)
      reg_mgmt_reset_timer <= #(TCQ) 5'h00;
    else
      reg_mgmt_reset_timer <= #(TCQ) reg_mgmt_reset_timer;
  end

generate // Resets for EP and Downstream Port 
 begin: generate_resets
  if( PL_UPSTREAM_FACING == "TRUE") // DUT is a EP
  begin 
   always @ (*) begin

    reg_next_state = STATE_RESET;

    reg_mgmt_reset_n_o = 1'b1;
    reg_mgmt_sticky_reset_n_o = 1'b1;
    reg_cfg_input_update_request_o = 1'b0;
    reg_cfg_mc_update_request_o = 1'b0;
    reg_reset_n_o = 1'b0;
    reg_pipe_reset_n_o = 1'b0;

    case(state_w)

      STATE_RESET : begin

        reg_mgmt_reset_n_o = 1'b0;
        reg_mgmt_sticky_reset_n_o = 1'b0;

        if (clock_locked) begin
          reg_next_state = STATE_MGMT_RESET_DEASSERT;
        end else begin
          reg_next_state = STATE_RESET;
        end
      end

      STATE_MGMT_RESET_DEASSERT : begin

        if (reset_timer_w == 2'b11) begin
          reg_next_state = STATE_MC_TRANSFER_REQ;
        end else begin
          reg_next_state = STATE_MGMT_RESET_DEASSERT;
        end
      end

      STATE_MC_TRANSFER_REQ : begin

        reg_cfg_mc_update_request_o = 1'b1;
        if (cfg_mc_update_done_i) begin
          reg_next_state = STATE_INPUT_UPDATE_REQ;
        end else begin
          reg_next_state = STATE_MC_TRANSFER_REQ;
        end
      end

      STATE_INPUT_UPDATE_REQ : begin

        reg_cfg_input_update_request_o = 1'b1;
        if (cfg_input_update_done_i) begin
          reg_next_state = STATE_PHY_RDY;
        end else begin
          reg_next_state = STATE_INPUT_UPDATE_REQ;
        end
      end

      STATE_PHY_RDY : begin

        // Check warm reset flag
        if (!cold_reset) begin
          reg_pipe_reset_n_o = 1'b1;
        end

        if (phy_rdy) begin
          reg_next_state = STATE_RESET_DEASSERT;
        end else begin
          reg_next_state = STATE_PHY_RDY;
        end
      end

      STATE_RESET_DEASSERT : begin

        reg_reset_n_o = 1'b1;
        reg_pipe_reset_n_o = 1'b1;

        if (!phy_rdy) begin
          reg_next_state = STATE_MGMT_RESET_ASSERT;
        end else if (user_cfg_input_update_i) begin
          reg_next_state = STATE_INPUT_UPDATE_REQ_REDO;
        end else begin
          reg_next_state = STATE_RESET_DEASSERT;
        end
      end

      STATE_INPUT_UPDATE_REQ_REDO : begin

        reg_reset_n_o = 1'b1;
        reg_pipe_reset_n_o = 1'b1;
        reg_cfg_input_update_request_o = 1'b1;

        if (cfg_input_update_done_i) begin
          reg_next_state = STATE_RESET_DEASSERT;
        end else begin
          reg_next_state = STATE_INPUT_UPDATE_REQ_REDO;
        end
      end

     STATE_MGMT_RESET_ASSERT : begin

        if (reg_mgmt_reset_timer == 5'h1f) begin
          reg_next_state = STATE_MGMT_RESET_DEASSERT;
          reg_mgmt_reset_n_o = 1'b1;
        end else begin
          reg_next_state = STATE_MGMT_RESET_ASSERT;
          reg_mgmt_reset_n_o = 1'b0;
        end
      end

    endcase

  end //always

  end else  begin // DUT is a Downstream port

   always @ (*) begin

    reg_next_state = STATE_RESET;

    reg_mgmt_reset_n_o = 1'b1;
    reg_mgmt_sticky_reset_n_o = 1'b1;
    reg_cfg_input_update_request_o = 1'b0;
    reg_cfg_mc_update_request_o = 1'b0;
    reg_reset_n_o = 1'b0;
    reg_pipe_reset_n_o = 1'b0;

    case(state_w)

      STATE_RESET : begin

        reg_mgmt_reset_n_o = 1'b0;
        reg_mgmt_sticky_reset_n_o = 1'b0;

        if (clock_locked) begin
          reg_next_state = STATE_MGMT_RESET_DEASSERT;
        end else begin
          reg_next_state = STATE_RESET;
        end
      end

      STATE_MGMT_RESET_DEASSERT : begin

        if (reset_timer_w == 2'b11) begin
          reg_next_state = STATE_MC_TRANSFER_REQ;
        end else begin
          reg_next_state = STATE_MGMT_RESET_DEASSERT;
        end
      end

      STATE_MC_TRANSFER_REQ : begin

        reg_cfg_mc_update_request_o = 1'b1;
        if (cfg_mc_update_done_i) begin
          reg_next_state = STATE_INPUT_UPDATE_REQ;
        end else begin
          reg_next_state = STATE_MC_TRANSFER_REQ;
        end
      end

      STATE_INPUT_UPDATE_REQ : begin

        reg_cfg_input_update_request_o = 1'b1;
        if (cfg_input_update_done_i) begin
          reg_next_state = STATE_PHY_RDY;
        end else begin
          reg_next_state = STATE_INPUT_UPDATE_REQ;
        end
      end

      STATE_PHY_RDY : begin

        // Check warm reset flag
        if (!cold_reset) begin
          reg_pipe_reset_n_o = 1'b1;
        end

        if (phy_rdy) begin
          reg_next_state = STATE_RESET_DEASSERT;
        end else begin
          reg_next_state = STATE_PHY_RDY;
        end
      end

      STATE_RESET_DEASSERT : begin

        reg_reset_n_o = 1'b1;
        reg_pipe_reset_n_o = 1'b1;

        if (!phy_rdy) begin
          reg_next_state = STATE_PHY_RDY;
        end else if (user_cfg_input_update_i) begin
          reg_next_state = STATE_INPUT_UPDATE_REQ_REDO;
        end else begin
          reg_next_state = STATE_RESET_DEASSERT;
        end
      end

      STATE_INPUT_UPDATE_REQ_REDO : begin

        reg_reset_n_o = 1'b1;
        reg_pipe_reset_n_o = 1'b1;
        reg_cfg_input_update_request_o = 1'b1;

        if (cfg_input_update_done_i) begin
          reg_next_state = STATE_RESET_DEASSERT;
        end else begin
          reg_next_state = STATE_INPUT_UPDATE_REQ_REDO;
        end
      end

    endcase

  end //always

  end // else // DUT is a Downstream port
 end // generate resets
 endgenerate

  // Register signals
  always @(posedge clk_i) begin
    regff_mgmt_reset_n_o        <= reg_mgmt_reset_n_o;
    regff_mgmt_sticky_reset_n_o <= reg_mgmt_sticky_reset_n_o;
    regff_pipe_reset_n_o        <= reg_pipe_reset_n_o;
    regff_reset_n_o             <= reg_reset_n_o;
    
  
  end
  // Assigns

  assign state_w                    = reg_state;
  assign next_state_w               = reg_next_state;
  //assign reset_n_o                  = reg_reset_n_o;
  //assign pipe_reset_n_o             = reg_pipe_reset_n_o;
  //assign mgmt_reset_n_o             = reg_mgmt_reset_n_o;
  //assign mgmt_sticky_reset_n_o      = reg_mgmt_sticky_reset_n_o;
  assign reset_n_o                  = regff_reset_n_o;
  assign pipe_reset_n_o             = regff_pipe_reset_n_o;
  assign mgmt_reset_n_o             = regff_mgmt_reset_n_o;
  assign mgmt_sticky_reset_n_o      = regff_mgmt_sticky_reset_n_o;
  assign cfg_input_update_request_o = reg_cfg_input_update_request_o;
  assign cfg_mc_update_request_o    = reg_cfg_mc_update_request_o;
  assign cold_reset                 = reg_cold_reset;
  assign state_o                    = reg_state;
  assign reset_timer_w              = reg_reset_timer;

endmodule // pcie_init_ctrl_7vx
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pcie_pipe_lane.v
// Version    : 4.0
//----------------------------------------------------------------------------//
// Project      : Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
// Filename     : rp_pcie_pipe_lane.v                                            //
// Description  : Implements the PIPE interface PIPELINE for all per lane     //
//                interface signals                                           //
//---------- PIPE Wrapper Hierarchy ------------------------------------------//
//  pcie_pipe_lane.v                                                          //
//----------------------------------------------------------------------------//

`timescale 1ps/1ps

module rp_pcie_pipe_lane #
(
  parameter        TCQ = 100,
  parameter        PIPE_PIPELINE_STAGES = 0    // 0 - 0 stages, 1 - 1 stage, 2 - 2 stages
) (
  output  wire [ 1:0] pipe_rx_char_is_k_o             ,// Pipelined PIPE Rx Char Is K
  output  wire [31:0] pipe_rx_data_o                  ,// Pipelined PIPE Rx Data
  output  wire        pipe_rx_valid_o                 ,// Pipelined PIPE Rx Valid
  output  wire        pipe_rx_data_valid_o            ,// Pipelined PIPE Rx Data Valid
  output  wire [ 2:0] pipe_rx_status_o                ,// Pipelined PIPE Rx Status
  output  wire        pipe_rx_phy_status_o            ,// Pipelined PIPE Rx Phy Status
  output  wire        pipe_rx_elec_idle_o             ,// Pipelined PIPE Rx Electrical Idle
  output  wire        pipe_rx_eqdone_o                ,// Pipelined PIPE Rx Eq
  output  wire        pipe_rx_eqlpadaptdone_o         ,// Pipelined PIPE Rx Eq
  output  wire        pipe_rx_eqlplffssel_o           ,// Pipelined PIPE Rx Eq
  output  wire [17:0] pipe_rx_eqlpnewtxcoefforpreset_o,// Pipelined PIPE Rx Eq
  output  wire        pipe_rx_startblock_o            ,// Pipelined PIPE Rx Start Block
  output  wire [ 1:0] pipe_rx_syncheader_o            ,// Pipelined PIPE Rx Sync Header
  output  wire        pipe_rx_slide_o                 ,// Pipelined PIPE Rx Slide
  output  wire        pipe_rx_syncdone_o              ,// Pipelined PIPE Rx Sync done

  input   wire        pipe_rx_polarity_i              ,// PIPE Rx Polarity
  input   wire [ 1:0] pipe_rx_eqcontrol_i             ,// PIPE Rx Eq control
  input   wire [ 5:0] pipe_rx_eqlplffs_i              ,// PIPE Rx Eq
  input   wire [ 3:0] pipe_rx_eqlptxpreset_i          ,// PIPE Rx Eq
  input   wire [ 2:0] pipe_rx_eqpreset_i              ,// PIPE Rx Eq

  output  wire [17:0] pipe_tx_eqcoeff_o               ,// Pipelined Tx Eq Coefficient
  output  wire        pipe_tx_eqdone_o                ,// Pipelined Tx Eq Done

  input   wire        pipe_tx_compliance_i            ,// PIPE Tx Compliance
  input   wire [ 1:0] pipe_tx_char_is_k_i             ,// PIPE Tx Char Is K
  input   wire [31:0] pipe_tx_data_i                  ,// PIPE Tx Data
  input   wire        pipe_tx_elec_idle_i             ,// PIPE Tx Electrical Idle
  input   wire [ 1:0] pipe_tx_powerdown_i             ,// PIPE Tx Powerdown
  input   wire        pipe_tx_datavalid_i             ,// PIPE Tx Data Valid
  input   wire        pipe_tx_startblock_i            ,// PIPE Tx Start Block
  input   wire [ 1:0] pipe_tx_syncheader_i            ,// PIPE Tx Sync Header
  input   wire [ 1:0] pipe_tx_eqcontrol_i             ,// PIPE Tx Eq Control
  input   wire [ 5:0] pipe_tx_eqdeemph_i              ,// PIPE Tx Eq Deemphesis
  input   wire [ 3:0] pipe_tx_eqpreset_i              ,// PIPE Tx Preset

  input   wire [ 1:0] pipe_rx_char_is_k_i             ,// PIPE Rx Char Is K
  input   wire [31:0] pipe_rx_data_i                  ,// PIPE Rx Data
  input   wire        pipe_rx_valid_i                 ,// PIPE Rx Valid
  input   wire        pipe_rx_data_valid_i            ,// PIPE Rx Data Valid
  input   wire [ 2:0] pipe_rx_status_i                ,// PIPE Rx Status
  input   wire        pipe_rx_phy_status_i            ,// PIPE Rx Phy Status
  input   wire        pipe_rx_elec_idle_i             ,// PIPE Rx Electrical Idle
  input   wire        pipe_rx_eqdone_i                ,// PIPE Rx Eq
  input   wire        pipe_rx_eqlpadaptdone_i         ,// PIPE Rx Eq
  input   wire        pipe_rx_eqlplffssel_i           ,// PIPE Rx Eq
  input   wire [17:0] pipe_rx_eqlpnewtxcoefforpreset_i,// PIPE Rx Eq
  input   wire        pipe_rx_startblock_i            ,// PIPE Rx Start Block
  input   wire [ 1:0] pipe_rx_syncheader_i            ,// PIPE Rx Sync Header
  input   wire        pipe_rx_slide_i                 ,// PIPE Rx Slide
  input   wire        pipe_rx_syncdone_i              ,// PIPE Rx Sync done

  output  wire        pipe_rx_polarity_o              ,// Pipelined PIPE Rx Polarity
  output  wire [ 1:0] pipe_rx_eqcontrol_o             ,// Pipelined PIPE Rx Eq control
  output  wire [ 5:0] pipe_rx_eqlplffs_o              ,// Pipelined PIPE Rx Eq
  output  wire [ 3:0] pipe_rx_eqlptxpreset_o          ,// Pipelined PIPE Rx Eq
  output  wire [ 2:0] pipe_rx_eqpreset_o              ,// Pipelined PIPE Rx Eq

  input   wire [17:0] pipe_tx_eqcoeff_i               ,// PIPE Tx Eq Coefficient
  input   wire        pipe_tx_eqdone_i                ,// PIPE Tx Eq Done

  output  wire        pipe_tx_compliance_o            ,// Pipelined PIPE Tx Compliance
  output  wire [ 1:0] pipe_tx_char_is_k_o             ,// Pipelined PIPE Tx Char Is K
  output  wire [31:0] pipe_tx_data_o                  ,// Pipelined PIPE Tx Data
  output  wire        pipe_tx_elec_idle_o             ,// Pipelined PIPE Tx Electrical Idle
  output  wire [ 1:0] pipe_tx_powerdown_o             ,// Pipelined PIPE Tx Powerdown
  output  wire        pipe_tx_datavalid_o             ,// Pipelined PIPE Tx Data Valid
  output  wire        pipe_tx_startblock_o            ,// Pipelined PIPE Tx Start Block
  output  wire [ 1:0] pipe_tx_syncheader_o            ,// Pipelined PIPE Tx Sync Header
  output  wire [ 1:0] pipe_tx_eqcontrol_o             ,// Pipelined PIPE Tx Eq Control
  output  wire [ 5:0] pipe_tx_eqdeemph_o              ,// Pipelined PIPE Tx Eq Deemphesis
  output  wire [ 3:0] pipe_tx_eqpreset_o              ,// Pipelined PIPE Tx Preset

  input   wire        pipe_clk                        ,// PIPE Clock
  input   wire        rst_n                            // Reset
);

  //******************************************************************//
  // Reality check.                                                   //
  //******************************************************************//

  reg [ 1:0] pipe_rx_char_is_k_q               ;
  reg [31:0] pipe_rx_data_q                    ;
  reg        pipe_rx_valid_q                   ;
  reg        pipe_rx_data_valid_q              ;
  reg [ 2:0] pipe_rx_status_q                  ;
  reg        pipe_rx_phy_status_q              ;
  reg        pipe_rx_elec_idle_q               ;
  reg        pipe_rx_eqdone_q                  ;
  reg        pipe_rx_eqlpadaptdone_q           ;
  reg        pipe_rx_eqlplffssel_q             ;
  reg [17:0] pipe_rx_eqlpnewtxcoefforpreset_q  ;
  reg        pipe_rx_startblock_q              ;
  reg [ 1:0] pipe_rx_syncheader_q              ;
  reg        pipe_rx_slide_q                   ;
  reg        pipe_rx_syncdone_q                ;
  reg        pipe_rx_polarity_q                ;
  reg [ 1:0] pipe_rx_eqcontrol_q               ;
  reg [ 5:0] pipe_rx_eqlplffs_q                ;
  reg [ 3:0] pipe_rx_eqlptxpreset_q            ;
  reg [ 2:0] pipe_rx_eqpreset_q                ;
  reg [17:0] pipe_tx_eqcoeff_q                 ;
  reg        pipe_tx_eqdone_q                  ;
  reg        pipe_tx_compliance_q              ;
  reg [ 1:0] pipe_tx_char_is_k_q               ;
  reg [31:0] pipe_tx_data_q                    ;
  reg        pipe_tx_elec_idle_q               ;
  reg [ 1:0] pipe_tx_powerdown_q               ;
  reg        pipe_tx_datavalid_q               ;
  reg        pipe_tx_startblock_q              ;
  reg [ 1:0] pipe_tx_syncheader_q              ;
  reg [ 1:0] pipe_tx_eqcontrol_q               ;
  reg [ 5:0] pipe_tx_eqdeemph_q                ;
  reg [ 3:0] pipe_tx_eqpreset_q                ;


  reg [ 1:0] pipe_rx_char_is_k_qq              ;
  reg [31:0] pipe_rx_data_qq                   ;
  reg        pipe_rx_valid_qq                  ;
  reg        pipe_rx_data_valid_qq             ;
  reg [ 2:0] pipe_rx_status_qq                 ;
  reg        pipe_rx_phy_status_qq             ;
  reg        pipe_rx_elec_idle_qq              ;
  reg        pipe_rx_eqdone_qq                 ;
  reg        pipe_rx_eqlpadaptdone_qq          ;
  reg        pipe_rx_eqlplffssel_qq            ;
  reg [17:0] pipe_rx_eqlpnewtxcoefforpreset_qq ;
  reg        pipe_rx_startblock_qq             ;
  reg [ 1:0] pipe_rx_syncheader_qq             ;
  reg        pipe_rx_slide_qq                  ;
  reg        pipe_rx_syncdone_qq               ;
  reg        pipe_rx_polarity_qq               ;
  reg [ 1:0] pipe_rx_eqcontrol_qq              ;
  reg [ 5:0] pipe_rx_eqlplffs_qq               ;
  reg [ 3:0] pipe_rx_eqlptxpreset_qq           ;
  reg [ 2:0] pipe_rx_eqpreset_qq               ;
  reg [17:0] pipe_tx_eqcoeff_qq                ;
  reg        pipe_tx_eqdone_qq                 ;
  reg        pipe_tx_compliance_qq             ;
  reg [ 1:0] pipe_tx_char_is_k_qq              ;
  reg [31:0] pipe_tx_data_qq                   ;
  reg        pipe_tx_elec_idle_qq              ;
  reg [ 1:0] pipe_tx_powerdown_qq              ;
  reg        pipe_tx_datavalid_qq              ;
  reg        pipe_tx_startblock_qq             ;
  reg [ 1:0] pipe_tx_syncheader_qq             ;
  reg [ 1:0] pipe_tx_eqcontrol_qq              ;
  reg [ 5:0] pipe_tx_eqdeemph_qq               ;
  reg [ 3:0] pipe_tx_eqpreset_qq               ;

  generate

    if (PIPE_PIPELINE_STAGES == 0) begin : pipe_stages_0

      assign pipe_rx_char_is_k_o              = pipe_rx_char_is_k_i              ;
      assign pipe_rx_data_o                   = pipe_rx_data_i                   ;
      assign pipe_rx_valid_o                  = pipe_rx_valid_i                  ;
      assign pipe_rx_data_valid_o             = pipe_rx_data_valid_i             ;
      assign pipe_rx_status_o                 = pipe_rx_status_i                 ;
      assign pipe_rx_phy_status_o             = pipe_rx_phy_status_i             ;
      assign pipe_rx_elec_idle_o              = pipe_rx_elec_idle_i              ;
      assign pipe_rx_eqdone_o                 = pipe_rx_eqdone_i                 ;
      assign pipe_rx_eqlpadaptdone_o          = pipe_rx_eqlpadaptdone_i          ;
      assign pipe_rx_eqlplffssel_o            = pipe_rx_eqlplffssel_i            ;
      assign pipe_rx_eqlpnewtxcoefforpreset_o = pipe_rx_eqlpnewtxcoefforpreset_i ;
      assign pipe_rx_startblock_o             = pipe_rx_startblock_i             ;
      assign pipe_rx_syncheader_o             = pipe_rx_syncheader_i             ;
      assign pipe_rx_slide_o                  = pipe_rx_slide_i                  ;
      assign pipe_rx_syncdone_o               = pipe_rx_syncdone_i               ;

      assign pipe_rx_polarity_o               = pipe_rx_polarity_i               ;
      assign pipe_rx_eqcontrol_o              = pipe_rx_eqcontrol_i              ;
      assign pipe_rx_eqlplffs_o               = pipe_rx_eqlplffs_i               ;
      assign pipe_rx_eqlptxpreset_o           = pipe_rx_eqlptxpreset_i           ;
      assign pipe_rx_eqpreset_o               = pipe_rx_eqpreset_i               ;

      assign pipe_tx_eqcoeff_o                = pipe_tx_eqcoeff_i                ;
      assign pipe_tx_eqdone_o                 = pipe_tx_eqdone_i                 ;

      assign pipe_tx_compliance_o             = pipe_tx_compliance_i             ;
      assign pipe_tx_char_is_k_o              = pipe_tx_char_is_k_i              ;
      assign pipe_tx_data_o                   = pipe_tx_data_i                   ;
      assign pipe_tx_elec_idle_o              = pipe_tx_elec_idle_i              ;
      assign pipe_tx_powerdown_o              = pipe_tx_powerdown_i              ;
      assign pipe_tx_datavalid_o              = pipe_tx_datavalid_i              ;
      assign pipe_tx_startblock_o             = pipe_tx_startblock_i             ;
      assign pipe_tx_syncheader_o             = pipe_tx_syncheader_i             ;
      assign pipe_tx_eqcontrol_o              = pipe_tx_eqcontrol_i              ;
      assign pipe_tx_eqdeemph_o               = pipe_tx_eqdeemph_i               ;
      assign pipe_tx_eqpreset_o               = pipe_tx_eqpreset_i               ;

    end // if (PIPE_PIPELINE_STAGES == 0)
    else if (PIPE_PIPELINE_STAGES == 1) begin : pipe_stages_1

      always @(posedge pipe_clk) begin

        if (!rst_n)
        begin

          pipe_rx_char_is_k_q              <= #TCQ  2'b00;
          pipe_rx_data_q                   <= #TCQ 32'h00000000;
          pipe_rx_valid_q                  <= #TCQ  1'b0;
          pipe_rx_data_valid_q             <= #TCQ  1'b0;
          pipe_rx_status_q                 <= #TCQ  2'b00;
          pipe_rx_phy_status_q             <= #TCQ  1'b0;
          pipe_rx_elec_idle_q              <= #TCQ  1'b1;
          pipe_rx_eqdone_q                 <= #TCQ  1'b0;
          pipe_rx_eqlpadaptdone_q          <= #TCQ  1'b0;
          pipe_rx_eqlplffssel_q            <= #TCQ  1'b0;
          pipe_rx_eqlpnewtxcoefforpreset_q <= #TCQ 17'b00000000000000000;
          pipe_rx_startblock_q             <= #TCQ  1'b0;
          pipe_rx_syncheader_q             <= #TCQ  2'b00;
          pipe_rx_slide_q                  <= #TCQ  1'b0;
          pipe_rx_syncdone_q               <= #TCQ  1'b0;

          pipe_rx_polarity_q               <= #TCQ 17'b00000000000000000;
          pipe_rx_eqcontrol_q              <= #TCQ  1'b0;
          pipe_rx_eqlplffs_q               <= #TCQ  1'b0;
          pipe_rx_eqlptxpreset_q           <= #TCQ  2'b00;
          pipe_rx_eqpreset_q               <= #TCQ  6'b000000;

          pipe_tx_eqcoeff_q                <= #TCQ  4'h0;
          pipe_tx_eqdone_q                 <= #TCQ  3'b000;

          pipe_tx_compliance_q             <= #TCQ  1'b0;
          pipe_tx_char_is_k_q              <= #TCQ  2'b00;
          pipe_tx_data_q                   <= #TCQ 32'h00000000;
          pipe_tx_elec_idle_q              <= #TCQ  1'b1;
          pipe_tx_powerdown_q              <= #TCQ  2'b00;
          pipe_tx_datavalid_q              <= #TCQ  1'b0;
          pipe_tx_startblock_q             <= #TCQ  1'b0;
          pipe_tx_syncheader_q             <= #TCQ  2'b00;
          pipe_tx_eqcontrol_q              <= #TCQ  2'b00;
          pipe_tx_eqdeemph_q               <= #TCQ  6'b000000;
          pipe_tx_eqpreset_q               <= #TCQ  4'h0;

        end
        else
        begin

          pipe_rx_char_is_k_q              <= #TCQ pipe_rx_char_is_k_i              ;
          pipe_rx_data_q                   <= #TCQ pipe_rx_data_i                   ;
          pipe_rx_valid_q                  <= #TCQ pipe_rx_valid_i                  ;
          pipe_rx_data_valid_q             <= #TCQ pipe_rx_data_valid_i             ;
          pipe_rx_status_q                 <= #TCQ pipe_rx_status_i                 ;
          pipe_rx_phy_status_q             <= #TCQ pipe_rx_phy_status_i             ;
          pipe_rx_elec_idle_q              <= #TCQ pipe_rx_elec_idle_i              ;
          pipe_rx_eqdone_q                 <= #TCQ pipe_rx_eqdone_i                 ;
          pipe_rx_eqlpadaptdone_q          <= #TCQ pipe_rx_eqlpadaptdone_i          ;
          pipe_rx_eqlplffssel_q            <= #TCQ pipe_rx_eqlplffssel_i            ;
          pipe_rx_eqlpnewtxcoefforpreset_q <= #TCQ pipe_rx_eqlpnewtxcoefforpreset_i ;
          pipe_rx_startblock_q             <= #TCQ pipe_rx_startblock_i             ;
          pipe_rx_syncheader_q             <= #TCQ pipe_rx_syncheader_i             ;
          pipe_rx_slide_q                  <= #TCQ  pipe_rx_slide_i                 ;
          pipe_rx_syncdone_q               <= #TCQ  pipe_rx_syncdone_i              ;

          pipe_rx_polarity_q               <= #TCQ pipe_rx_polarity_i               ;
          pipe_rx_eqcontrol_q              <= #TCQ pipe_rx_eqcontrol_i              ;
          pipe_rx_eqlplffs_q               <= #TCQ pipe_rx_eqlplffs_i               ;
          pipe_rx_eqlptxpreset_q           <= #TCQ pipe_rx_eqlptxpreset_i           ;
          pipe_rx_eqpreset_q               <= #TCQ pipe_rx_eqpreset_i               ;

          pipe_tx_eqcoeff_q                <= #TCQ pipe_tx_eqcoeff_i                ;
          pipe_tx_eqdone_q                 <= #TCQ pipe_tx_eqdone_i                 ;

          pipe_tx_compliance_q             <= #TCQ pipe_tx_compliance_i             ;
          pipe_tx_char_is_k_q              <= #TCQ pipe_tx_char_is_k_i              ;
          pipe_tx_data_q                   <= #TCQ pipe_tx_data_i                   ;
          pipe_tx_elec_idle_q              <= #TCQ pipe_tx_elec_idle_i              ;
          pipe_tx_powerdown_q              <= #TCQ pipe_tx_powerdown_i              ;
          pipe_tx_datavalid_q              <= #TCQ pipe_tx_datavalid_i              ;
          pipe_tx_startblock_q             <= #TCQ pipe_tx_startblock_i             ;
          pipe_tx_syncheader_q             <= #TCQ pipe_tx_syncheader_i             ;
          pipe_tx_eqcontrol_q              <= #TCQ pipe_tx_eqcontrol_i              ;
          pipe_tx_eqdeemph_q               <= #TCQ pipe_tx_eqdeemph_i               ;
          pipe_tx_eqpreset_q               <= #TCQ pipe_tx_eqpreset_i               ;

        end

      end

      assign pipe_rx_char_is_k_o              = pipe_rx_char_is_k_q                 ;
      assign pipe_rx_data_o                   = pipe_rx_data_q                      ;
      assign pipe_rx_valid_o                  = pipe_rx_valid_q                     ;
      assign pipe_rx_data_valid_o             = pipe_rx_data_valid_q                ;
      assign pipe_rx_status_o                 = pipe_rx_status_q                    ;
      assign pipe_rx_phy_status_o             = pipe_rx_phy_status_q                ;
      assign pipe_rx_elec_idle_o              = pipe_rx_elec_idle_q                 ;
      assign pipe_rx_eqdone_o                 = pipe_rx_eqdone_q                    ;
      assign pipe_rx_eqlpadaptdone_o          = pipe_rx_eqlpadaptdone_q             ;
      assign pipe_rx_eqlplffssel_o            = pipe_rx_eqlplffssel_q               ;
      assign pipe_rx_eqlpnewtxcoefforpreset_o = pipe_rx_eqlpnewtxcoefforpreset_q    ;
      assign pipe_rx_startblock_o             = pipe_rx_startblock_q                ;
      assign pipe_rx_syncheader_o             = pipe_rx_syncheader_q                ;
      assign pipe_rx_slide_o                  = pipe_rx_slide_q                     ;
      assign pipe_rx_syncdone_o               = pipe_rx_syncdone_q                  ;

      assign pipe_rx_polarity_o               = pipe_rx_polarity_q                  ;
      assign pipe_rx_eqcontrol_o              = pipe_rx_eqcontrol_q                 ;
      assign pipe_rx_eqlplffs_o               = pipe_rx_eqlplffs_q                  ;
      assign pipe_rx_eqlptxpreset_o           = pipe_rx_eqlptxpreset_q              ;
      assign pipe_rx_eqpreset_o               = pipe_rx_eqpreset_q                  ;

      assign pipe_tx_eqcoeff_o                = pipe_tx_eqcoeff_q                   ;
      assign pipe_tx_eqdone_o                 = pipe_tx_eqdone_q                    ;

      assign pipe_tx_compliance_o             = pipe_tx_compliance_q                ;
      assign pipe_tx_char_is_k_o              = pipe_tx_char_is_k_q                 ;
      assign pipe_tx_data_o                   = pipe_tx_data_q                      ;
      assign pipe_tx_elec_idle_o              = pipe_tx_elec_idle_q                 ;
      assign pipe_tx_powerdown_o              = pipe_tx_powerdown_q                 ;
      assign pipe_tx_datavalid_o              = pipe_tx_datavalid_q                 ;
      assign pipe_tx_startblock_o             = pipe_tx_startblock_q                ;
      assign pipe_tx_syncheader_o             = pipe_tx_syncheader_q                ;
      assign pipe_tx_eqcontrol_o              = pipe_tx_eqcontrol_q                 ;
      assign pipe_tx_eqdeemph_o               = pipe_tx_eqdeemph_q                  ;
      assign pipe_tx_eqpreset_o               = pipe_tx_eqpreset_q                  ;

    end // if (PIPE_PIPELINE_STAGES == 1)
    else if (PIPE_PIPELINE_STAGES == 2) begin : pipe_stages_2

      always @(posedge pipe_clk) begin

        if (!rst_n)
        begin

          pipe_rx_char_is_k_q              <= #TCQ  2'b00;
          pipe_rx_data_q                   <= #TCQ 32'h00000000;
          pipe_rx_valid_q                  <= #TCQ  1'b0;
          pipe_rx_data_valid_q             <= #TCQ  1'b0;
          pipe_rx_status_q                 <= #TCQ  2'b00;
          pipe_rx_phy_status_q             <= #TCQ  1'b0;
          pipe_rx_elec_idle_q              <= #TCQ  1'b1;
          pipe_rx_eqdone_q                 <= #TCQ  1'b0;
          pipe_rx_eqlpadaptdone_q          <= #TCQ  1'b0;
          pipe_rx_eqlplffssel_q            <= #TCQ  1'b0;
          pipe_rx_eqlpnewtxcoefforpreset_q <= #TCQ 17'b00000000000000000;
          pipe_rx_startblock_q             <= #TCQ  1'b0;
          pipe_rx_syncheader_q             <= #TCQ  2'b00;
          pipe_rx_slide_q                  <= #TCQ  1'b0;
          pipe_rx_syncdone_q               <= #TCQ  1'b0;

          pipe_rx_polarity_q               <= #TCQ 17'b00000000000000000;
          pipe_rx_eqcontrol_q              <= #TCQ  1'b0;
          pipe_rx_eqlplffs_q               <= #TCQ  1'b0;
          pipe_rx_eqlptxpreset_q           <= #TCQ  2'b00;
          pipe_rx_eqpreset_q               <= #TCQ  6'b000000;

          pipe_tx_eqcoeff_q                <= #TCQ  4'h0;
          pipe_tx_eqdone_q                 <= #TCQ  3'b000;

          pipe_tx_compliance_q             <= #TCQ  1'b0;
          pipe_tx_char_is_k_q              <= #TCQ  2'b00;
          pipe_tx_data_q                   <= #TCQ 32'h00000000;
          pipe_tx_elec_idle_q              <= #TCQ  1'b1;
          pipe_tx_powerdown_q              <= #TCQ  2'b00;
          pipe_tx_datavalid_q              <= #TCQ  1'b0;
          pipe_tx_startblock_q             <= #TCQ  1'b0;
          pipe_tx_syncheader_q             <= #TCQ  2'b00;
          pipe_tx_eqcontrol_q              <= #TCQ  2'b00;
          pipe_tx_eqdeemph_q               <= #TCQ  6'b000000;
          pipe_tx_eqpreset_q               <= #TCQ  4'h0;


          pipe_rx_char_is_k_qq             <= #TCQ  2'b00;
          pipe_rx_data_qq                  <= #TCQ 32'h00000000;
          pipe_rx_valid_qq                 <= #TCQ  1'b0;
          pipe_rx_data_valid_qq            <= #TCQ  1'b0;
          pipe_rx_status_qq                <= #TCQ  2'b00;
          pipe_rx_phy_status_qq            <= #TCQ  1'b0;
          pipe_rx_elec_idle_qq             <= #TCQ  1'b1;
          pipe_rx_eqdone_qq                <= #TCQ  1'b0;
          pipe_rx_eqlpadaptdone_qq         <= #TCQ  1'b0;
          pipe_rx_eqlplffssel_qq           <= #TCQ  1'b0;
          pipe_rx_eqlpnewtxcoefforpreset_qq<= #TCQ 17'b00000000000000000;
          pipe_rx_startblock_qq            <= #TCQ  1'b0;
          pipe_rx_syncheader_qq            <= #TCQ  2'b00;
          pipe_rx_slide_qq                 <= #TCQ  1'b0;
          pipe_rx_syncdone_qq              <= #TCQ  1'b0;

          pipe_rx_polarity_qq              <= #TCQ 17'b00000000000000000;
          pipe_rx_eqcontrol_qq             <= #TCQ  1'b0;
          pipe_rx_eqlplffs_qq              <= #TCQ  1'b0;
          pipe_rx_eqlptxpreset_qq          <= #TCQ  2'b00;
          pipe_rx_eqpreset_qq              <= #TCQ  6'b000000;

          pipe_tx_eqcoeff_qq               <= #TCQ  4'h0;
          pipe_tx_eqdone_qq                <= #TCQ  3'b000;

          pipe_tx_compliance_qq            <= #TCQ  1'b0;
          pipe_tx_char_is_k_qq             <= #TCQ  2'b00;
          pipe_tx_data_qq                  <= #TCQ 32'h00000000;
          pipe_tx_elec_idle_qq             <= #TCQ  1'b1;
          pipe_tx_powerdown_qq             <= #TCQ  2'b00;
          pipe_tx_datavalid_qq             <= #TCQ  1'b0;
          pipe_tx_startblock_qq            <= #TCQ  1'b0;
          pipe_tx_syncheader_qq            <= #TCQ  2'b00;
          pipe_tx_eqcontrol_qq             <= #TCQ  2'b00;
          pipe_tx_eqdeemph_qq              <= #TCQ  6'b000000;
          pipe_tx_eqpreset_qq              <= #TCQ  4'h0;

        end
        else
        begin

          pipe_rx_char_is_k_q              <= #TCQ pipe_rx_char_is_k_i              ;
          pipe_rx_data_q                   <= #TCQ pipe_rx_data_i                   ;
          pipe_rx_valid_q                  <= #TCQ pipe_rx_valid_i                  ;
          pipe_rx_data_valid_q             <= #TCQ pipe_rx_data_valid_i             ;
          pipe_rx_status_q                 <= #TCQ pipe_rx_status_i                 ;
          pipe_rx_phy_status_q             <= #TCQ pipe_rx_phy_status_i             ;
          pipe_rx_elec_idle_q              <= #TCQ pipe_rx_elec_idle_i              ;
          pipe_rx_eqdone_q                 <= #TCQ pipe_rx_eqdone_i                 ;
          pipe_rx_eqlpadaptdone_q          <= #TCQ pipe_rx_eqlpadaptdone_i          ;
          pipe_rx_eqlplffssel_q            <= #TCQ pipe_rx_eqlplffssel_i            ;
          pipe_rx_eqlpnewtxcoefforpreset_q <= #TCQ pipe_rx_eqlpnewtxcoefforpreset_i ;
          pipe_rx_startblock_q             <= #TCQ pipe_rx_startblock_i             ;
          pipe_rx_syncheader_q             <= #TCQ pipe_rx_syncheader_i             ;
          pipe_rx_slide_q                  <= #TCQ  pipe_rx_slide_i                 ;
          pipe_rx_syncdone_q               <= #TCQ  pipe_rx_syncdone_i              ;

          pipe_rx_polarity_q               <= #TCQ pipe_rx_polarity_i               ;
          pipe_rx_eqcontrol_q              <= #TCQ pipe_rx_eqcontrol_i              ;
          pipe_rx_eqlplffs_q               <= #TCQ pipe_rx_eqlplffs_i               ;
          pipe_rx_eqlptxpreset_q           <= #TCQ pipe_rx_eqlptxpreset_i           ;
          pipe_rx_eqpreset_q               <= #TCQ pipe_rx_eqpreset_i               ;

          pipe_tx_eqcoeff_q                <= #TCQ pipe_tx_eqcoeff_i                ;
          pipe_tx_eqdone_q                 <= #TCQ pipe_tx_eqdone_i                 ;

          pipe_tx_compliance_q             <= #TCQ pipe_tx_compliance_i             ;
          pipe_tx_char_is_k_q              <= #TCQ pipe_tx_char_is_k_i              ;
          pipe_tx_data_q                   <= #TCQ pipe_tx_data_i                   ;
          pipe_tx_elec_idle_q              <= #TCQ pipe_tx_elec_idle_i              ;
          pipe_tx_powerdown_q              <= #TCQ pipe_tx_powerdown_i              ;
          pipe_tx_datavalid_q              <= #TCQ pipe_tx_datavalid_i              ;
          pipe_tx_startblock_q             <= #TCQ pipe_tx_startblock_i             ;
          pipe_tx_syncheader_q             <= #TCQ pipe_tx_syncheader_i             ;
          pipe_tx_eqcontrol_q              <= #TCQ pipe_tx_eqcontrol_i              ;
          pipe_tx_eqdeemph_q               <= #TCQ pipe_tx_eqdeemph_i               ;
          pipe_tx_eqpreset_q               <= #TCQ pipe_tx_eqpreset_i               ;

          pipe_rx_char_is_k_qq             <= #TCQ pipe_rx_char_is_k_q              ;
          pipe_rx_data_qq                  <= #TCQ pipe_rx_data_q                   ;
          pipe_rx_valid_qq                 <= #TCQ pipe_rx_valid_q                  ;
          pipe_rx_data_valid_qq            <= #TCQ pipe_rx_data_valid_q             ;
          pipe_rx_status_qq                <= #TCQ pipe_rx_status_q                 ;
          pipe_rx_phy_status_qq            <= #TCQ pipe_rx_phy_status_q             ;
          pipe_rx_elec_idle_qq             <= #TCQ pipe_rx_elec_idle_q              ;
          pipe_rx_eqdone_qq                <= #TCQ pipe_rx_eqdone_q                 ;
          pipe_rx_eqlpadaptdone_qq         <= #TCQ pipe_rx_eqlpadaptdone_q          ;
          pipe_rx_eqlplffssel_qq           <= #TCQ pipe_rx_eqlplffssel_q            ;
          pipe_rx_eqlpnewtxcoefforpreset_qq<= #TCQ pipe_rx_eqlpnewtxcoefforpreset_q ;
          pipe_rx_startblock_qq            <= #TCQ pipe_rx_startblock_q             ;
          pipe_rx_syncheader_qq            <= #TCQ pipe_rx_syncheader_q             ;
          pipe_rx_slide_qq                  <= #TCQ  pipe_rx_slide_q                ;
          pipe_rx_syncdone_qq               <= #TCQ  pipe_rx_syncdone_q             ;

          pipe_rx_polarity_qq              <= #TCQ pipe_rx_polarity_q               ;
          pipe_rx_eqcontrol_qq             <= #TCQ pipe_rx_eqcontrol_q              ;
          pipe_rx_eqlplffs_qq              <= #TCQ pipe_rx_eqlplffs_q               ;
          pipe_rx_eqlptxpreset_qq          <= #TCQ pipe_rx_eqlptxpreset_q           ;
          pipe_rx_eqpreset_qq              <= #TCQ pipe_rx_eqpreset_q               ;

          pipe_tx_eqcoeff_qq               <= #TCQ pipe_tx_eqcoeff_q                ;
          pipe_tx_eqdone_qq                <= #TCQ pipe_tx_eqdone_q                 ;

          pipe_tx_compliance_qq            <= #TCQ pipe_tx_compliance_q             ;
          pipe_tx_char_is_k_qq             <= #TCQ pipe_tx_char_is_k_q              ;
          pipe_tx_data_qq                  <= #TCQ pipe_tx_data_q                   ;
          pipe_tx_elec_idle_qq             <= #TCQ pipe_tx_elec_idle_q              ;
          pipe_tx_powerdown_qq             <= #TCQ pipe_tx_powerdown_q              ;
          pipe_tx_datavalid_qq             <= #TCQ pipe_tx_datavalid_q              ;
          pipe_tx_startblock_qq            <= #TCQ pipe_tx_startblock_q             ;
          pipe_tx_syncheader_qq            <= #TCQ pipe_tx_syncheader_q             ;
          pipe_tx_eqcontrol_qq             <= #TCQ pipe_tx_eqcontrol_q              ;
          pipe_tx_eqdeemph_qq              <= #TCQ pipe_tx_eqdeemph_q               ;
          pipe_tx_eqpreset_qq              <= #TCQ pipe_tx_eqpreset_q               ;

        end

      end

      assign pipe_rx_char_is_k_o              = pipe_rx_char_is_k_qq              ;
      assign pipe_rx_data_o                   = pipe_rx_data_qq                   ;
      assign pipe_rx_valid_o                  = pipe_rx_valid_qq                  ;
      assign pipe_rx_data_valid_o             = pipe_rx_data_valid_qq             ;
      assign pipe_rx_status_o                 = pipe_rx_status_qq                 ;
      assign pipe_rx_phy_status_o             = pipe_rx_phy_status_qq             ;
      assign pipe_rx_elec_idle_o              = pipe_rx_elec_idle_qq              ;
      assign pipe_rx_eqdone_o                 = pipe_rx_eqdone_qq                 ;
      assign pipe_rx_eqlpadaptdone_o          = pipe_rx_eqlpadaptdone_qq          ;
      assign pipe_rx_eqlplffssel_o            = pipe_rx_eqlplffssel_qq            ;
      assign pipe_rx_eqlpnewtxcoefforpreset_o = pipe_rx_eqlpnewtxcoefforpreset_qq ;
      assign pipe_rx_startblock_o             = pipe_rx_startblock_qq             ;
      assign pipe_rx_syncheader_o             = pipe_rx_syncheader_qq             ;
      assign pipe_rx_slide_o                  = pipe_rx_slide_qq                  ;
      assign pipe_rx_syncdone_o               = pipe_rx_syncdone_qq               ;

      assign pipe_rx_polarity_o               = pipe_rx_polarity_qq               ;
      assign pipe_rx_eqcontrol_o              = pipe_rx_eqcontrol_qq              ;
      assign pipe_rx_eqlplffs_o               = pipe_rx_eqlplffs_qq               ;
      assign pipe_rx_eqlptxpreset_o           = pipe_rx_eqlptxpreset_qq           ;
      assign pipe_rx_eqpreset_o               = pipe_rx_eqpreset_qq               ;

      assign pipe_tx_eqcoeff_o                = pipe_tx_eqcoeff_qq                ;
      assign pipe_tx_eqdone_o                 = pipe_tx_eqdone_qq                 ;

      assign pipe_tx_compliance_o             = pipe_tx_compliance_qq             ;
      assign pipe_tx_char_is_k_o              = pipe_tx_char_is_k_qq              ;
      assign pipe_tx_data_o                   = pipe_tx_data_qq                   ;
      assign pipe_tx_elec_idle_o              = pipe_tx_elec_idle_qq              ;
      assign pipe_tx_powerdown_o              = pipe_tx_powerdown_qq              ;
      assign pipe_tx_datavalid_o              = pipe_tx_datavalid_qq              ;
      assign pipe_tx_startblock_o             = pipe_tx_startblock_qq             ;
      assign pipe_tx_syncheader_o             = pipe_tx_syncheader_qq             ;
      assign pipe_tx_eqcontrol_o              = pipe_tx_eqcontrol_qq              ;
      assign pipe_tx_eqdeemph_o               = pipe_tx_eqdeemph_qq               ;
      assign pipe_tx_eqpreset_o               = pipe_tx_eqpreset_qq               ;

    end // if (PIPE_PIPELINE_STAGES == 2)

    // Default to zero pipeline stages if PIPE_PIPELINE_STAGES != 0,1,2
    else begin
      assign pipe_rx_char_is_k_o              = pipe_rx_char_is_k_i              ;
      assign pipe_rx_data_o                   = pipe_rx_data_i                   ;
      assign pipe_rx_valid_o                  = pipe_rx_valid_i                  ;
      assign pipe_rx_data_valid_o             = pipe_rx_data_valid_i             ;
      assign pipe_rx_status_o                 = pipe_rx_status_i                 ;
      assign pipe_rx_phy_status_o             = pipe_rx_phy_status_i             ;
      assign pipe_rx_elec_idle_o              = pipe_rx_elec_idle_i              ;
      assign pipe_rx_eqdone_o                 = pipe_rx_eqdone_i                 ;
      assign pipe_rx_eqlpadaptdone_o          = pipe_rx_eqlpadaptdone_i          ;
      assign pipe_rx_eqlplffssel_o            = pipe_rx_eqlplffssel_i            ;
      assign pipe_rx_eqlpnewtxcoefforpreset_o = pipe_rx_eqlpnewtxcoefforpreset_i ;
      assign pipe_rx_startblock_o             = pipe_rx_startblock_i             ;
      assign pipe_rx_syncheader_o             = pipe_rx_syncheader_i             ;
      assign pipe_rx_slide_o                  = pipe_rx_slide_i                  ;
      assign pipe_rx_syncdone_o               = pipe_rx_syncdone_i               ;

      assign pipe_rx_polarity_o               = pipe_rx_polarity_i               ;
      assign pipe_rx_eqcontrol_o              = pipe_rx_eqcontrol_i              ;
      assign pipe_rx_eqlplffs_o               = pipe_rx_eqlplffs_i               ;
      assign pipe_rx_eqlptxpreset_o           = pipe_rx_eqlptxpreset_i           ;
      assign pipe_rx_eqpreset_o               = pipe_rx_eqpreset_i               ;

      assign pipe_tx_eqcoeff_o                = pipe_tx_eqcoeff_i                ;
      assign pipe_tx_eqdone_o                 = pipe_tx_eqdone_i                 ;

      assign pipe_tx_compliance_o             = pipe_tx_compliance_i             ;
      assign pipe_tx_char_is_k_o              = pipe_tx_char_is_k_i              ;
      assign pipe_tx_data_o                   = pipe_tx_data_i                   ;
      assign pipe_tx_elec_idle_o              = pipe_tx_elec_idle_i              ;
      assign pipe_tx_powerdown_o              = pipe_tx_powerdown_i              ;
      assign pipe_tx_datavalid_o              = pipe_tx_datavalid_i              ;
      assign pipe_tx_startblock_o             = pipe_tx_startblock_i             ;
      assign pipe_tx_syncheader_o             = pipe_tx_syncheader_i             ;
      assign pipe_tx_eqcontrol_o              = pipe_tx_eqcontrol_i              ;
      assign pipe_tx_eqdeemph_o               = pipe_tx_eqdeemph_i               ;
      assign pipe_tx_eqpreset_o               = pipe_tx_eqpreset_i               ;
    end
  endgenerate

endmodule

//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pcie_pipe_misc.v
// Version    : 4.0
//----------------------------------------------------------------------------//
// Project      : Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
// Filename     : rp_pcie_pipe_misc.v                                            //
// Description  : Implements the PIPE interface PIPELINE for all per link     //
//                interface signals                                           //
//---------- PIPE Wrapper Hierarchy ------------------------------------------//
//  pcie_pipe_mics.v                                                          //
//----------------------------------------------------------------------------//

`timescale 1ps/1ps

module rp_pcie_pipe_misc #
(
  parameter        TCQ = 100,
  parameter        PIPE_PIPELINE_STAGES = 0    // 0 - 0 stages, 1 - 1 stage, 2 - 2 stages
) (

  input   wire        pipe_tx_rcvr_det_i      ,     // PIPE Tx Receiver Detect
  input   wire        pipe_tx_reset_i         ,     // PIPE Tx Reset
  input   wire [1:0]  pipe_tx_rate_i          ,     // PIPE Tx Rate
  input   wire        pipe_tx_deemph_i        ,     // PIPE Tx Deemphasis
  input   wire [2:0]  pipe_tx_margin_i        ,     // PIPE Tx Margin
  input   wire        pipe_tx_swing_i         ,     // PIPE Tx Swing
  input   wire [5:0]  pipe_tx_eqfs_i          ,     // PIPE Tx
  input   wire [5:0]  pipe_tx_eqlf_i          ,     // PIPE Tx
  output  wire        pipe_tx_rcvr_det_o      ,     // Pipelined PIPE Tx Receiver Detect
  output  wire        pipe_tx_reset_o         ,     // Pipelined PIPE Tx Reset
  output  wire [1:0]  pipe_tx_rate_o          ,     // Pipelined PIPE Tx Rate
  output  wire        pipe_tx_deemph_o        ,     // Pipelined PIPE Tx Deemphasis
  output  wire [2:0]  pipe_tx_margin_o        ,     // Pipelined PIPE Tx Margin
  output  wire        pipe_tx_swing_o         ,     // Pipelined PIPE Tx Swing
  output wire [5:0]  pipe_tx_eqfs_o           ,     // PIPE Tx
  output wire [5:0]  pipe_tx_eqlf_o           ,     // PIPE Tx

  input   wire        pipe_clk                ,     // PIPE Clock
  input   wire        rst_n                         // Reset
);

  //******************************************************************//
  // Reality check.                                                   //
  //******************************************************************//

  reg                pipe_tx_rcvr_det_q       ;
  reg                pipe_tx_reset_q          ;
  reg [1:0]          pipe_tx_rate_q           ;
  reg                pipe_tx_deemph_q         ;
  reg [2:0]          pipe_tx_margin_q         ;
  reg                pipe_tx_swing_q          ;
  reg                pipe_tx_eqfs_q          ;
  reg                pipe_tx_eqlf_q          ;

  reg                pipe_tx_rcvr_det_qq      ;
  reg                pipe_tx_reset_qq         ;
  reg [1:0]          pipe_tx_rate_qq          ;
  reg                pipe_tx_deemph_qq        ;
  reg [2:0]          pipe_tx_margin_qq        ;
  reg                pipe_tx_swing_qq         ;
  reg                pipe_tx_eqfs_qq          ;
  reg                pipe_tx_eqlf_qq          ;


  generate

  if (PIPE_PIPELINE_STAGES == 0) begin : pipe_stages_0

      assign pipe_tx_rcvr_det_o = pipe_tx_rcvr_det_i;
      assign pipe_tx_reset_o    = pipe_tx_reset_i;
      assign pipe_tx_rate_o     = pipe_tx_rate_i;
      assign pipe_tx_deemph_o   = pipe_tx_deemph_i;
      assign pipe_tx_margin_o   = pipe_tx_margin_i;
      assign pipe_tx_swing_o    = pipe_tx_swing_i;
      assign pipe_tx_eqfs_o     = pipe_tx_eqfs_i;
      assign pipe_tx_eqlf_o     = pipe_tx_eqlf_i;

  end // if (PIPE_PIPELINE_STAGES == 0)
  else if (PIPE_PIPELINE_STAGES == 1) begin : pipe_stages_1

    always @(posedge pipe_clk) begin

      if (!rst_n)
      begin

        pipe_tx_rcvr_det_q <= #TCQ 1'b0;
        pipe_tx_reset_q    <= #TCQ 1'b1;
        pipe_tx_rate_q     <= #TCQ 2'b0;
        pipe_tx_deemph_q   <= #TCQ 1'b1;
        pipe_tx_margin_q   <= #TCQ 3'b0;
        pipe_tx_swing_q    <= #TCQ 1'b0;
        pipe_tx_eqfs_q     <= #TCQ 5'b0;
        pipe_tx_eqlf_q     <= #TCQ 5'b0;

      end
      else
      begin

        pipe_tx_rcvr_det_q <= #TCQ pipe_tx_rcvr_det_i;
        pipe_tx_reset_q    <= #TCQ pipe_tx_reset_i;
        pipe_tx_rate_q     <= #TCQ pipe_tx_rate_i;
        pipe_tx_deemph_q   <= #TCQ pipe_tx_deemph_i;
        pipe_tx_margin_q   <= #TCQ pipe_tx_margin_i;
        pipe_tx_swing_q    <= #TCQ pipe_tx_swing_i;
        pipe_tx_eqfs_q     <= #TCQ pipe_tx_eqfs_i;
        pipe_tx_eqlf_q     <= #TCQ pipe_tx_eqlf_i;

      end

    end

    assign pipe_tx_rcvr_det_o = pipe_tx_rcvr_det_q;
    assign pipe_tx_reset_o    = pipe_tx_reset_q;
    assign pipe_tx_rate_o     = pipe_tx_rate_q;
    assign pipe_tx_deemph_o   = pipe_tx_deemph_q;
    assign pipe_tx_margin_o   = pipe_tx_margin_q;
    assign pipe_tx_swing_o    = pipe_tx_swing_q;
    assign pipe_tx_eqfs_o     = pipe_tx_eqfs_q;
    assign pipe_tx_eqlf_o     = pipe_tx_eqlf_q;

  end // if (PIPE_PIPELINE_STAGES == 1)
  else if (PIPE_PIPELINE_STAGES == 2) begin : pipe_stages_2

    always @(posedge pipe_clk) begin

      if (!rst_n)
      begin

        pipe_tx_rcvr_det_q  <= #TCQ 1'b0;
        pipe_tx_reset_q     <= #TCQ 1'b1;
        pipe_tx_rate_q      <= #TCQ 2'b0;
        pipe_tx_deemph_q    <= #TCQ 1'b1;
        pipe_tx_margin_q    <= #TCQ 1'b0;
        pipe_tx_swing_q     <= #TCQ 1'b0;
        pipe_tx_eqfs_q      <= #TCQ 5'b0;
        pipe_tx_eqlf_q      <= #TCQ 5'b0;

        pipe_tx_rcvr_det_qq <= #TCQ 1'b0;
        pipe_tx_reset_qq    <= #TCQ 1'b1;
        pipe_tx_rate_qq     <= #TCQ 2'b0;
        pipe_tx_deemph_qq   <= #TCQ 1'b1;
        pipe_tx_margin_qq   <= #TCQ 1'b0;
        pipe_tx_swing_qq    <= #TCQ 1'b0;
        pipe_tx_eqfs_qq     <= #TCQ 5'b0;
        pipe_tx_eqlf_qq     <= #TCQ 5'b0;

      end
      else
      begin

        pipe_tx_rcvr_det_q  <= #TCQ pipe_tx_rcvr_det_i;
        pipe_tx_reset_q     <= #TCQ pipe_tx_reset_i;
        pipe_tx_rate_q      <= #TCQ pipe_tx_rate_i;
        pipe_tx_deemph_q    <= #TCQ pipe_tx_deemph_i;
        pipe_tx_margin_q    <= #TCQ pipe_tx_margin_i;
        pipe_tx_swing_q     <= #TCQ pipe_tx_swing_i;
        pipe_tx_eqfs_q      <= #TCQ pipe_tx_eqfs_i;
        pipe_tx_eqlf_q      <= #TCQ pipe_tx_eqlf_i;

        pipe_tx_rcvr_det_qq <= #TCQ pipe_tx_rcvr_det_q;
        pipe_tx_reset_qq    <= #TCQ pipe_tx_reset_q;
        pipe_tx_rate_qq     <= #TCQ pipe_tx_rate_q;
        pipe_tx_deemph_qq   <= #TCQ pipe_tx_deemph_q;
        pipe_tx_margin_qq   <= #TCQ pipe_tx_margin_q;
        pipe_tx_swing_qq    <= #TCQ pipe_tx_swing_q;
        pipe_tx_eqfs_qq     <= #TCQ pipe_tx_eqfs_q;
        pipe_tx_eqlf_qq     <= #TCQ pipe_tx_eqlf_q;

      end

    end

    assign pipe_tx_rcvr_det_o = pipe_tx_rcvr_det_qq;
    assign pipe_tx_reset_o    = pipe_tx_reset_qq;
    assign pipe_tx_rate_o     = pipe_tx_rate_qq;
    assign pipe_tx_deemph_o   = pipe_tx_deemph_qq;
    assign pipe_tx_margin_o   = pipe_tx_margin_qq;
    assign pipe_tx_swing_o    = pipe_tx_swing_qq;
    assign pipe_tx_eqfs_o     = pipe_tx_eqfs_qq;
    assign pipe_tx_eqlf_o     = pipe_tx_eqlf_qq;

  end // if (PIPE_PIPELINE_STAGES == 2)

  // Default to zero pipeline stages if PIPE_PIPELINE_STAGES != 0,1,2
  else begin
    assign pipe_tx_rcvr_det_o = pipe_tx_rcvr_det_i;
    assign pipe_tx_reset_o    = pipe_tx_reset_i;
    assign pipe_tx_rate_o     = pipe_tx_rate_i;
    assign pipe_tx_deemph_o   = pipe_tx_deemph_i;
    assign pipe_tx_margin_o   = pipe_tx_margin_i;
    assign pipe_tx_swing_o    = pipe_tx_swing_i;
    assign pipe_tx_eqfs_o     = pipe_tx_eqfs_i;
    assign pipe_tx_eqlf_o     = pipe_tx_eqlf_i;
  end
  endgenerate

endmodule

//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pcie_pipe_pipeline.v
// Version    : 4.0
//----------------------------------------------------------------------------//
// Project      : Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
// Filename     : rp_pcie_pipe_pipeline.v                                        //
// Description  : When enabled, implements a 1 or 2 stage pipeline between    //
//                GT and the Gen3 Integrated Block for PCI Express            //
//---------- PIPE Wrapper Hierarchy ------------------------------------------//
//  pcie_pipe_pipeline.v                                                      //
//      pcie_pipe_lane.v                                                      //
//      pcie_pipe_misc.v                                                      //
//----------------------------------------------------------------------------//

`timescale 1ps/1ps

module rp_pcie_pipe_pipeline #
(
  parameter        TCQ = 100,
  parameter        LINK_CAP_MAX_LINK_WIDTH = 1,
  parameter        PIPE_PIPELINE_STAGES = 0    // 0 - 0 stages, 1 - 1 stage, 2 - 2 stages
) (
  // Pipe Per-Link Signals
  input   wire        pipe_tx_rcvr_det_i               ,  // PIPE Tx Receiver Detect
  input   wire        pipe_tx_reset_i                  ,  // PIPE Tx Reset
  input   wire  [1:0] pipe_tx_rate_i                   ,  // PIPE Tx Rate
  input   wire        pipe_tx_deemph_i                 ,  // PIPE Tx Deemphasis
  input   wire  [2:0] pipe_tx_margin_i                 ,  // PIPE Tx Margin
  input   wire        pipe_tx_swing_i                  ,  // PIPE Tx Swing
  input   wire  [5:0] pipe_tx_eqfs_i                   ,  // PIPE Tx
  input   wire  [5:0] pipe_tx_eqlf_i                   ,  // PIPE Tx
  input   wire  [7:0] pipe_rxslide_i                   ,  // PIPE Rx
  input   wire  [7:0] pipe_rxsyncdone_i                ,  // PIPE Rx

  output  wire        pipe_tx_rcvr_det_o               ,  // Pipelined PIPE Tx Receiver Detect
  output  wire        pipe_tx_reset_o                  ,  // Pipelined PIPE Tx Reset
  output  wire  [1:0] pipe_tx_rate_o                   ,  // Pipelined PIPE Tx Rate
  output  wire        pipe_tx_deemph_o                 ,  // Pipelined PIPE Tx Deemphasis
  output  wire  [2:0] pipe_tx_margin_o                 ,  // Pipelined PIPE Tx Margin
  output  wire        pipe_tx_swing_o                  ,  // Pipelined PIPE Tx Swing
  output  wire  [5:0] pipe_tx_eqfs_o                   ,  // Pipelined PIPE Tx
  output  wire  [5:0] pipe_tx_eqlf_o                   ,  // Pipelined PIPE Tx
  output  wire  [7:0] pipe_rxslide_o                   ,  // Pipelined PIPE Rx
  output  wire  [7:0] pipe_rxsyncdone_o                ,  // Pipelined PIPE Rx

  // Pipe Per-Lane Signals - Lane 0
  output  wire  [1:0] pipe_rx0_char_is_k_o             ,  // Pipelined PIPE Rx Char Is K
  output  wire [31:0] pipe_rx0_data_o                  ,  // Pipelined PIPE Rx Data
  output  wire        pipe_rx0_valid_o                 ,  // Pipelined PIPE Rx Valid
  output  wire        pipe_rx0_data_valid_o            ,  // Pipelined PIPE Rx Data Valid
  output  wire  [2:0] pipe_rx0_status_o                ,  // Pipelined PIPE Rx Status
  output  wire        pipe_rx0_phy_status_o            ,  // Pipelined PIPE Rx Phy Status
  output  wire        pipe_rx0_elec_idle_o             ,  // Pipelined PIPE Rx Electrical Idle
  output  wire        pipe_rx0_eqdone_o                ,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx0_eqlpadaptdone_o         ,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx0_eqlplffssel_o           ,  // Pipelined PIPE Rx Eq
  output  wire [17:0] pipe_rx0_eqlpnewtxcoefforpreset_o,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx0_startblock_o            ,  // Pipelined PIPE Rx Start Block
  output  wire  [1:0] pipe_rx0_syncheader_o            ,  // Pipelined PIPE Rx Sync Header
  input   wire        pipe_rx0_polarity_i              ,  // PIPE Rx Polarity
  input   wire  [1:0] pipe_rx0_eqcontrol_i             ,  // PIPE Rx Eq control
  input   wire  [5:0] pipe_rx0_eqlplffs_i              ,  // PIPE Rx Eq
  input   wire  [3:0] pipe_rx0_eqlptxpreset_i          ,  // PIPE Rx Eq
  input   wire  [2:0] pipe_rx0_eqpreset_i              ,  // PIPE Rx Eq
  output  wire [17:0] pipe_tx0_eqcoeff_o               ,  // Pipelined Tx Eq Coefficient
  output  wire        pipe_tx0_eqdone_o                ,  // Pipelined Tx Eq Done
  input   wire        pipe_tx0_compliance_i            ,  // PIPE Tx Compliance
  input   wire  [1:0] pipe_tx0_char_is_k_i             ,  // PIPE Tx Char Is K
  input   wire [31:0] pipe_tx0_data_i                  ,  // PIPE Tx Data
  input   wire        pipe_tx0_elec_idle_i             ,  // PIPE Tx Electrical Idle
  input   wire  [1:0] pipe_tx0_powerdown_i             ,  // PIPE Tx Powerdown
  input   wire        pipe_tx0_datavalid_i             ,  // PIPE Tx Data Valid
  input   wire        pipe_tx0_startblock_i            ,  // PIPE Tx Start Block
  input   wire  [1:0] pipe_tx0_syncheader_i            ,  // PIPE Tx Sync Header
  input   wire  [1:0] pipe_tx0_eqcontrol_i             ,  // PIPE Tx Eq Control
  input   wire  [5:0] pipe_tx0_eqdeemph_i              ,  // PIPE Tx Eq Deemphesis
  input   wire  [3:0] pipe_tx0_eqpreset_i              ,  // PIPE Tx Preset

  input   wire  [1:0] pipe_rx0_char_is_k_i             ,  // PIPE Rx Char Is K
  input   wire [31:0] pipe_rx0_data_i                  ,  // PIPE Rx Data
  input   wire        pipe_rx0_valid_i                 ,  // PIPE Rx Valid
  input   wire        pipe_rx0_data_valid_i            ,  // PIPE Rx Data Valid
  input   wire  [2:0] pipe_rx0_status_i                ,  // PIPE Rx Status
  input   wire        pipe_rx0_phy_status_i            ,  // PIPE Rx Phy Status
  input   wire        pipe_rx0_elec_idle_i             ,  // PIPE Rx Electrical Idle
  input   wire        pipe_rx0_eqdone_i                ,  // PIPE Rx Eq
  input   wire        pipe_rx0_eqlpadaptdone_i         ,  // PIPE Rx Eq
  input   wire        pipe_rx0_eqlplffssel_i           ,  // PIPE Rx Eq
  input   wire [17:0] pipe_rx0_eqlpnewtxcoefforpreset_i,  // PIPE Rx Eq
  input   wire        pipe_rx0_startblock_i            ,  // PIPE Rx Start Block
  input   wire  [1:0] pipe_rx0_syncheader_i            ,  // PIPE Rx Sync Header
  output  wire        pipe_rx0_polarity_o              ,  // Pipelined PIPE Rx Polarity
  output  wire  [1:0] pipe_rx0_eqcontrol_o             ,  // Pipelined PIPE Rx Eq control
  output  wire  [5:0] pipe_rx0_eqlplffs_o              ,  // Pipelined PIPE Rx Eq
  output  wire  [3:0] pipe_rx0_eqlptxpreset_o          ,  // Pipelined PIPE Rx Eq
  output  wire  [2:0] pipe_rx0_eqpreset_o              ,  // Pipelined PIPE Rx Eq
  input   wire [17:0] pipe_tx0_eqcoeff_i               ,  // PIPE Tx Eq Coefficient
  input   wire        pipe_tx0_eqdone_i                ,  // PIPE Tx Eq Done
  output  wire        pipe_tx0_compliance_o            ,  // Pipelined PIPE Tx Compliance
  output  wire  [1:0] pipe_tx0_char_is_k_o             ,  // Pipelined PIPE Tx Char Is K
  output  wire [31:0] pipe_tx0_data_o                  ,  // Pipelined PIPE Tx Data
  output  wire        pipe_tx0_elec_idle_o             ,  // Pipelined PIPE Tx Electrical Idle
  output  wire  [1:0] pipe_tx0_powerdown_o             ,  // Pipelined PIPE Tx Powerdown
  output  wire        pipe_tx0_datavalid_o             ,  // Pipelined PIPE Tx Data Valid
  output  wire        pipe_tx0_startblock_o            ,  // Pipelined PIPE Tx Start Block
  output  wire  [1:0] pipe_tx0_syncheader_o            ,  // Pipelined PIPE Tx Sync Header
  output  wire  [1:0] pipe_tx0_eqcontrol_o             ,  // Pipelined PIPE Tx Eq Control
  output  wire  [5:0] pipe_tx0_eqdeemph_o              ,  // Pipelined PIPE Tx Eq Deemphesis
  output  wire  [3:0] pipe_tx0_eqpreset_o              ,  // Pipelined PIPE Tx Preset

  // Pipe Per-Lane Signals - Lane 1
  output  wire  [1:0] pipe_rx1_char_is_k_o             ,  // Pipelined PIPE Rx Char Is K
  output  wire [31:0] pipe_rx1_data_o                  ,  // Pipelined PIPE Rx Data
  output  wire        pipe_rx1_valid_o                 ,  // Pipelined PIPE Rx Valid
  output  wire        pipe_rx1_data_valid_o            ,  // Pipelined PIPE Rx Data Valid
  output  wire  [2:0] pipe_rx1_status_o                ,  // Pipelined PIPE Rx Status
  output  wire        pipe_rx1_phy_status_o            ,  // Pipelined PIPE Rx Phy Status
  output  wire        pipe_rx1_elec_idle_o             ,  // Pipelined PIPE Rx Electrical Idle
  output  wire        pipe_rx1_eqdone_o                ,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx1_eqlpadaptdone_o         ,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx1_eqlplffssel_o           ,  // Pipelined PIPE Rx Eq
  output  wire [17:0] pipe_rx1_eqlpnewtxcoefforpreset_o,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx1_startblock_o            ,  // Pipelined PIPE Rx Start Block
  output  wire  [1:0] pipe_rx1_syncheader_o            ,  // Pipelined PIPE Rx Sync Header
  input   wire        pipe_rx1_polarity_i              ,  // PIPE Rx Polarity
  input   wire  [1:0] pipe_rx1_eqcontrol_i             ,  // PIPE Rx Eq control
  input   wire  [5:0] pipe_rx1_eqlplffs_i              ,  // PIPE Rx Eq
  input   wire  [3:0] pipe_rx1_eqlptxpreset_i          ,  // PIPE Rx Eq
  input   wire  [2:0] pipe_rx1_eqpreset_i              ,  // PIPE Rx Eq
  output  wire [17:0] pipe_tx1_eqcoeff_o               ,  // Pipelined Tx Eq Coefficient
  output  wire        pipe_tx1_eqdone_o                ,  // Pipelined Tx Eq Done
  input   wire        pipe_tx1_compliance_i            ,  // PIPE Tx Compliance
  input   wire  [1:0] pipe_tx1_char_is_k_i             ,  // PIPE Tx Char Is K
  input   wire [31:0] pipe_tx1_data_i                  ,  // PIPE Tx Data
  input   wire        pipe_tx1_elec_idle_i             ,  // PIPE Tx Electrical Idle
  input   wire  [1:0] pipe_tx1_powerdown_i             ,  // PIPE Tx Powerdown
  input   wire        pipe_tx1_datavalid_i             ,  // PIPE Tx Data Valid
  input   wire        pipe_tx1_startblock_i            ,  // PIPE Tx Start Block
  input   wire  [1:0] pipe_tx1_syncheader_i            ,  // PIPE Tx Sync Header
  input   wire  [1:0] pipe_tx1_eqcontrol_i             ,  // PIPE Tx Eq Control
  input   wire  [5:0] pipe_tx1_eqdeemph_i              ,  // PIPE Tx Eq Deemphesis
  input   wire  [3:0] pipe_tx1_eqpreset_i              ,  // PIPE Tx Preset

  input   wire  [1:0] pipe_rx1_char_is_k_i             ,  // PIPE Rx Char Is K
  input   wire [31:0] pipe_rx1_data_i                  ,  // PIPE Rx Data
  input   wire        pipe_rx1_valid_i                 ,  // PIPE Rx Valid
  input   wire        pipe_rx1_data_valid_i            ,  // PIPE Rx Data Valid
  input   wire  [2:0] pipe_rx1_status_i                ,  // PIPE Rx Status
  input   wire        pipe_rx1_phy_status_i            ,  // PIPE Rx Phy Status
  input   wire        pipe_rx1_elec_idle_i             ,  // PIPE Rx Electrical Idle
  input   wire        pipe_rx1_eqdone_i                ,  // PIPE Rx Eq
  input   wire        pipe_rx1_eqlpadaptdone_i         ,  // PIPE Rx Eq
  input   wire        pipe_rx1_eqlplffssel_i           ,  // PIPE Rx Eq
  input   wire [17:0] pipe_rx1_eqlpnewtxcoefforpreset_i,  // PIPE Rx Eq
  input   wire        pipe_rx1_startblock_i            ,  // PIPE Rx Start Block
  input   wire  [1:0] pipe_rx1_syncheader_i            ,  // PIPE Rx Sync Header
  output  wire        pipe_rx1_polarity_o              ,  // Pipelined PIPE Rx Polarity
  output  wire  [1:0] pipe_rx1_eqcontrol_o             ,  // Pipelined PIPE Rx Eq control
  output  wire  [5:0] pipe_rx1_eqlplffs_o              ,  // Pipelined PIPE Rx Eq
  output  wire  [3:0] pipe_rx1_eqlptxpreset_o          ,  // Pipelined PIPE Rx Eq
  output  wire  [2:0] pipe_rx1_eqpreset_o              ,  // Pipelined PIPE Rx Eq
  input   wire [17:0] pipe_tx1_eqcoeff_i               ,  // PIPE Tx Eq Coefficient
  input   wire        pipe_tx1_eqdone_i                ,  // PIPE Tx Eq Done
  output  wire        pipe_tx1_compliance_o            ,  // Pipelined PIPE Tx Compliance
  output  wire  [1:0] pipe_tx1_char_is_k_o             ,  // Pipelined PIPE Tx Char Is K
  output  wire [31:0] pipe_tx1_data_o                  ,  // Pipelined PIPE Tx Data
  output  wire        pipe_tx1_elec_idle_o             ,  // Pipelined PIPE Tx Electrical Idle
  output  wire  [1:0] pipe_tx1_powerdown_o             ,  // Pipelined PIPE Tx Powerdown
  output  wire        pipe_tx1_datavalid_o             ,  // Pipelined PIPE Tx Data Valid
  output  wire        pipe_tx1_startblock_o            ,  // Pipelined PIPE Tx Start Block
  output  wire  [1:0] pipe_tx1_syncheader_o            ,  // Pipelined PIPE Tx Sync Header
  output  wire  [1:0] pipe_tx1_eqcontrol_o             ,  // Pipelined PIPE Tx Eq Control
  output  wire  [5:0] pipe_tx1_eqdeemph_o              ,  // Pipelined PIPE Tx Eq Deemphesis
  output  wire  [3:0] pipe_tx1_eqpreset_o              ,  // Pipelined PIPE Tx Preset

  // Pipe Per-Lane Signals - Lane 2
  output  wire  [1:0] pipe_rx2_char_is_k_o             ,  // Pipelined PIPE Rx Char Is K
  output  wire [31:0] pipe_rx2_data_o                  ,  // Pipelined PIPE Rx Data
  output  wire        pipe_rx2_valid_o                 ,  // Pipelined PIPE Rx Valid
  output  wire        pipe_rx2_data_valid_o            ,  // Pipelined PIPE Rx Data Valid
  output  wire  [2:0] pipe_rx2_status_o                ,  // Pipelined PIPE Rx Status
  output  wire        pipe_rx2_phy_status_o            ,  // Pipelined PIPE Rx Phy Status
  output  wire        pipe_rx2_elec_idle_o             ,  // Pipelined PIPE Rx Electrical Idle
  output  wire        pipe_rx2_eqdone_o                ,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx2_eqlpadaptdone_o         ,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx2_eqlplffssel_o           ,  // Pipelined PIPE Rx Eq
  output  wire [17:0] pipe_rx2_eqlpnewtxcoefforpreset_o,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx2_startblock_o            ,  // Pipelined PIPE Rx Start Block
  output  wire  [1:0] pipe_rx2_syncheader_o            ,  // Pipelined PIPE Rx Sync Header
  input   wire        pipe_rx2_polarity_i              ,  // PIPE Rx Polarity
  input   wire  [1:0] pipe_rx2_eqcontrol_i             ,  // PIPE Rx Eq control
  input   wire  [5:0] pipe_rx2_eqlplffs_i              ,  // PIPE Rx Eq
  input   wire  [3:0] pipe_rx2_eqlptxpreset_i          ,  // PIPE Rx Eq
  input   wire  [2:0] pipe_rx2_eqpreset_i              ,  // PIPE Rx Eq
  output  wire [17:0] pipe_tx2_eqcoeff_o               ,  // Pipelined Tx Eq Coefficient
  output  wire        pipe_tx2_eqdone_o                ,  // Pipelined Tx Eq Done
  input   wire        pipe_tx2_compliance_i            ,  // PIPE Tx Compliance
  input   wire  [1:0] pipe_tx2_char_is_k_i             ,  // PIPE Tx Char Is K
  input   wire [31:0] pipe_tx2_data_i                  ,  // PIPE Tx Data
  input   wire        pipe_tx2_elec_idle_i             ,  // PIPE Tx Electrical Idle
  input   wire  [1:0] pipe_tx2_powerdown_i             ,  // PIPE Tx Powerdown
  input   wire        pipe_tx2_datavalid_i             ,  // PIPE Tx Data Valid
  input   wire        pipe_tx2_startblock_i            ,  // PIPE Tx Start Block
  input   wire  [1:0] pipe_tx2_syncheader_i            ,  // PIPE Tx Sync Header
  input   wire  [1:0] pipe_tx2_eqcontrol_i             ,  // PIPE Tx Eq Control
  input   wire  [5:0] pipe_tx2_eqdeemph_i              ,  // PIPE Tx Eq Deemphesis
  input   wire  [3:0] pipe_tx2_eqpreset_i              ,  // PIPE Tx Preset

  input   wire  [1:0] pipe_rx2_char_is_k_i             ,  // PIPE Rx Char Is K
  input   wire [31:0] pipe_rx2_data_i                  ,  // PIPE Rx Data
  input   wire        pipe_rx2_valid_i                 ,  // PIPE Rx Valid
  input   wire        pipe_rx2_data_valid_i            ,  // PIPE Rx Data Valid
  input   wire  [2:0] pipe_rx2_status_i                ,  // PIPE Rx Status
  input   wire        pipe_rx2_phy_status_i            ,  // PIPE Rx Phy Status
  input   wire        pipe_rx2_elec_idle_i             ,  // PIPE Rx Electrical Idle
  input   wire        pipe_rx2_eqdone_i                ,  // PIPE Rx Eq
  input   wire        pipe_rx2_eqlpadaptdone_i         ,  // PIPE Rx Eq
  input   wire        pipe_rx2_eqlplffssel_i           ,  // PIPE Rx Eq
  input   wire [17:0] pipe_rx2_eqlpnewtxcoefforpreset_i,  // PIPE Rx Eq
  input   wire        pipe_rx2_startblock_i            ,  // PIPE Rx Start Block
  input   wire  [1:0] pipe_rx2_syncheader_i            ,  // PIPE Rx Sync Header
  output  wire        pipe_rx2_polarity_o              ,  // Pipelined PIPE Rx Polarity
  output  wire  [1:0] pipe_rx2_eqcontrol_o             ,  // Pipelined PIPE Rx Eq control
  output  wire  [5:0] pipe_rx2_eqlplffs_o              ,  // Pipelined PIPE Rx Eq
  output  wire  [3:0] pipe_rx2_eqlptxpreset_o          ,  // Pipelined PIPE Rx Eq
  output  wire  [2:0] pipe_rx2_eqpreset_o              ,  // Pipelined PIPE Rx Eq
  input   wire [17:0] pipe_tx2_eqcoeff_i               ,  // PIPE Tx Eq Coefficient
  input   wire        pipe_tx2_eqdone_i                ,  // PIPE Tx Eq Done
  output  wire        pipe_tx2_compliance_o            ,  // Pipelined PIPE Tx Compliance
  output  wire  [1:0] pipe_tx2_char_is_k_o             ,  // Pipelined PIPE Tx Char Is K
  output  wire [31:0] pipe_tx2_data_o                  ,  // Pipelined PIPE Tx Data
  output  wire        pipe_tx2_elec_idle_o             ,  // Pipelined PIPE Tx Electrical Idle
  output  wire  [1:0] pipe_tx2_powerdown_o             ,  // Pipelined PIPE Tx Powerdown
  output  wire        pipe_tx2_datavalid_o             ,  // Pipelined PIPE Tx Data Valid
  output  wire        pipe_tx2_startblock_o            ,  // Pipelined PIPE Tx Start Block
  output  wire  [1:0] pipe_tx2_syncheader_o            ,  // Pipelined PIPE Tx Sync Header
  output  wire  [1:0] pipe_tx2_eqcontrol_o             ,  // Pipelined PIPE Tx Eq Control
  output  wire  [5:0] pipe_tx2_eqdeemph_o              ,  // Pipelined PIPE Tx Eq Deemphesis
  output  wire  [3:0] pipe_tx2_eqpreset_o              ,  // Pipelined PIPE Tx Preset

  // Pipe Per-Lane Signals - Lane 3
  output  wire  [1:0] pipe_rx3_char_is_k_o             ,  // Pipelined PIPE Rx Char Is K
  output  wire [31:0] pipe_rx3_data_o                  ,  // Pipelined PIPE Rx Data
  output  wire        pipe_rx3_valid_o                 ,  // Pipelined PIPE Rx Valid
  output  wire        pipe_rx3_data_valid_o            ,  // Pipelined PIPE Rx Data Valid
  output  wire  [2:0] pipe_rx3_status_o                ,  // Pipelined PIPE Rx Status
  output  wire        pipe_rx3_phy_status_o            ,  // Pipelined PIPE Rx Phy Status
  output  wire        pipe_rx3_elec_idle_o             ,  // Pipelined PIPE Rx Electrical Idle
  output  wire        pipe_rx3_eqdone_o                ,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx3_eqlpadaptdone_o         ,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx3_eqlplffssel_o           ,  // Pipelined PIPE Rx Eq
  output  wire [17:0] pipe_rx3_eqlpnewtxcoefforpreset_o,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx3_startblock_o            ,  // Pipelined PIPE Rx Start Block
  output  wire  [1:0] pipe_rx3_syncheader_o            ,  // Pipelined PIPE Rx Sync Header
  input   wire        pipe_rx3_polarity_i              ,  // PIPE Rx Polarity
  input   wire  [1:0] pipe_rx3_eqcontrol_i             ,  // PIPE Rx Eq control
  input   wire  [5:0] pipe_rx3_eqlplffs_i              ,  // PIPE Rx Eq
  input   wire  [3:0] pipe_rx3_eqlptxpreset_i          ,  // PIPE Rx Eq
  input   wire  [2:0] pipe_rx3_eqpreset_i              ,  // PIPE Rx Eq
  output  wire [17:0] pipe_tx3_eqcoeff_o               ,  // Pipelined Tx Eq Coefficient
  output  wire        pipe_tx3_eqdone_o                ,  // Pipelined Tx Eq Done
  input   wire        pipe_tx3_compliance_i            ,  // PIPE Tx Compliance
  input   wire  [1:0] pipe_tx3_char_is_k_i             ,  // PIPE Tx Char Is K
  input   wire [31:0] pipe_tx3_data_i                  ,  // PIPE Tx Data
  input   wire        pipe_tx3_elec_idle_i             ,  // PIPE Tx Electrical Idle
  input   wire  [1:0] pipe_tx3_powerdown_i             ,  // PIPE Tx Powerdown
  input   wire        pipe_tx3_datavalid_i             ,  // PIPE Tx Data Valid
  input   wire        pipe_tx3_startblock_i            ,  // PIPE Tx Start Block
  input   wire  [1:0] pipe_tx3_syncheader_i            ,  // PIPE Tx Sync Header
  input   wire  [1:0] pipe_tx3_eqcontrol_i             ,  // PIPE Tx Eq Control
  input   wire  [5:0] pipe_tx3_eqdeemph_i              ,  // PIPE Tx Eq Deemphesis
  input   wire  [3:0] pipe_tx3_eqpreset_i              ,  // PIPE Tx Preset

  input   wire  [1:0] pipe_rx3_char_is_k_i             ,  // PIPE Rx Char Is K
  input   wire [31:0] pipe_rx3_data_i                  ,  // PIPE Rx Data
  input   wire        pipe_rx3_valid_i                 ,  // PIPE Rx Valid
  input   wire        pipe_rx3_data_valid_i            ,  // PIPE Rx Data Valid
  input   wire  [2:0] pipe_rx3_status_i                ,  // PIPE Rx Status
  input   wire        pipe_rx3_phy_status_i            ,  // PIPE Rx Phy Status
  input   wire        pipe_rx3_elec_idle_i             ,  // PIPE Rx Electrical Idle
  input   wire        pipe_rx3_eqdone_i                ,  // PIPE Rx Eq
  input   wire        pipe_rx3_eqlpadaptdone_i         ,  // PIPE Rx Eq
  input   wire        pipe_rx3_eqlplffssel_i           ,  // PIPE Rx Eq
  input   wire [17:0] pipe_rx3_eqlpnewtxcoefforpreset_i,  // PIPE Rx Eq
  input   wire        pipe_rx3_startblock_i            ,  // PIPE Rx Start Block
  input   wire  [1:0] pipe_rx3_syncheader_i            ,  // PIPE Rx Sync Header
  output  wire        pipe_rx3_polarity_o              ,  // Pipelined PIPE Rx Polarity
  output  wire  [1:0] pipe_rx3_eqcontrol_o             ,  // Pipelined PIPE Rx Eq control
  output  wire  [5:0] pipe_rx3_eqlplffs_o              ,  // Pipelined PIPE Rx Eq
  output  wire  [3:0] pipe_rx3_eqlptxpreset_o          ,  // Pipelined PIPE Rx Eq
  output  wire  [2:0] pipe_rx3_eqpreset_o              ,  // Pipelined PIPE Rx Eq
  input   wire [17:0] pipe_tx3_eqcoeff_i               ,  // PIPE Tx Eq Coefficient
  input   wire        pipe_tx3_eqdone_i                ,  // PIPE Tx Eq Done
  output  wire        pipe_tx3_compliance_o            ,  // Pipelined PIPE Tx Compliance
  output  wire  [1:0] pipe_tx3_char_is_k_o             ,  // Pipelined PIPE Tx Char Is K
  output  wire [31:0] pipe_tx3_data_o                  ,  // Pipelined PIPE Tx Data
  output  wire        pipe_tx3_elec_idle_o             ,  // Pipelined PIPE Tx Electrical Idle
  output  wire  [1:0] pipe_tx3_powerdown_o             ,  // Pipelined PIPE Tx Powerdown
  output  wire        pipe_tx3_datavalid_o             ,  // Pipelined PIPE Tx Data Valid
  output  wire        pipe_tx3_startblock_o            ,  // Pipelined PIPE Tx Start Block
  output  wire  [1:0] pipe_tx3_syncheader_o            ,  // Pipelined PIPE Tx Sync Header
  output  wire  [1:0] pipe_tx3_eqcontrol_o             ,  // Pipelined PIPE Tx Eq Control
  output  wire  [5:0] pipe_tx3_eqdeemph_o              ,  // Pipelined PIPE Tx Eq Deemphesis
  output  wire  [3:0] pipe_tx3_eqpreset_o              ,  // Pipelined PIPE Tx Preset

  // Pipe Per-Lane Signals - Lane 4
  output  wire  [1:0] pipe_rx4_char_is_k_o             ,  // Pipelined PIPE Rx Char Is K
  output  wire [31:0] pipe_rx4_data_o                  ,  // Pipelined PIPE Rx Data
  output  wire        pipe_rx4_valid_o                 ,  // Pipelined PIPE Rx Valid
  output  wire        pipe_rx4_data_valid_o            ,  // Pipelined PIPE Rx Data Valid
  output  wire  [2:0] pipe_rx4_status_o                ,  // Pipelined PIPE Rx Status
  output  wire        pipe_rx4_phy_status_o            ,  // Pipelined PIPE Rx Phy Status
  output  wire        pipe_rx4_elec_idle_o             ,  // Pipelined PIPE Rx Electrical Idle
  output  wire        pipe_rx4_eqdone_o                ,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx4_eqlpadaptdone_o         ,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx4_eqlplffssel_o           ,  // Pipelined PIPE Rx Eq
  output  wire [17:0] pipe_rx4_eqlpnewtxcoefforpreset_o,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx4_startblock_o            ,  // Pipelined PIPE Rx Start Block
  output  wire  [1:0] pipe_rx4_syncheader_o            ,  // Pipelined PIPE Rx Sync Header
  input   wire        pipe_rx4_polarity_i              ,  // PIPE Rx Polarity
  input   wire  [1:0] pipe_rx4_eqcontrol_i             ,  // PIPE Rx Eq control
  input   wire  [5:0] pipe_rx4_eqlplffs_i              ,  // PIPE Rx Eq
  input   wire  [3:0] pipe_rx4_eqlptxpreset_i          ,  // PIPE Rx Eq
  input   wire  [2:0] pipe_rx4_eqpreset_i              ,  // PIPE Rx Eq
  output  wire [17:0] pipe_tx4_eqcoeff_o               ,  // Pipelined Tx Eq Coefficient
  output  wire        pipe_tx4_eqdone_o                ,  // Pipelined Tx Eq Done
  input   wire        pipe_tx4_compliance_i            ,  // PIPE Tx Compliance
  input   wire  [1:0] pipe_tx4_char_is_k_i             ,  // PIPE Tx Char Is K
  input   wire [31:0] pipe_tx4_data_i                  ,  // PIPE Tx Data
  input   wire        pipe_tx4_elec_idle_i             ,  // PIPE Tx Electrical Idle
  input   wire  [1:0] pipe_tx4_powerdown_i             ,  // PIPE Tx Powerdown
  input   wire        pipe_tx4_datavalid_i             ,  // PIPE Tx Data Valid
  input   wire        pipe_tx4_startblock_i            ,  // PIPE Tx Start Block
  input   wire  [1:0] pipe_tx4_syncheader_i            ,  // PIPE Tx Sync Header
  input   wire  [1:0] pipe_tx4_eqcontrol_i             ,  // PIPE Tx Eq Control
  input   wire  [5:0] pipe_tx4_eqdeemph_i              ,  // PIPE Tx Eq Deemphesis
  input   wire  [3:0] pipe_tx4_eqpreset_i              ,  // PIPE Tx Preset

  input   wire  [1:0] pipe_rx4_char_is_k_i             ,  // PIPE Rx Char Is K
  input   wire [31:0] pipe_rx4_data_i                  ,  // PIPE Rx Data
  input   wire        pipe_rx4_valid_i                 ,  // PIPE Rx Valid
  input   wire        pipe_rx4_data_valid_i            ,  // PIPE Rx Data Valid
  input   wire  [2:0] pipe_rx4_status_i                ,  // PIPE Rx Status
  input   wire        pipe_rx4_phy_status_i            ,  // PIPE Rx Phy Status
  input   wire        pipe_rx4_elec_idle_i             ,  // PIPE Rx Electrical Idle
  input   wire        pipe_rx4_eqdone_i                ,  // PIPE Rx Eq
  input   wire        pipe_rx4_eqlpadaptdone_i         ,  // PIPE Rx Eq
  input   wire        pipe_rx4_eqlplffssel_i           ,  // PIPE Rx Eq
  input   wire [17:0] pipe_rx4_eqlpnewtxcoefforpreset_i,  // PIPE Rx Eq
  input   wire        pipe_rx4_startblock_i            ,  // PIPE Rx Start Block
  input   wire  [1:0] pipe_rx4_syncheader_i            ,  // PIPE Rx Sync Header
  output  wire        pipe_rx4_polarity_o              ,  // Pipelined PIPE Rx Polarity
  output  wire  [1:0] pipe_rx4_eqcontrol_o             ,  // Pipelined PIPE Rx Eq control
  output  wire  [5:0] pipe_rx4_eqlplffs_o              ,  // Pipelined PIPE Rx Eq
  output  wire  [3:0] pipe_rx4_eqlptxpreset_o          ,  // Pipelined PIPE Rx Eq
  output  wire  [2:0] pipe_rx4_eqpreset_o              ,  // Pipelined PIPE Rx Eq
  input   wire [17:0] pipe_tx4_eqcoeff_i               ,  // PIPE Tx Eq Coefficient
  input   wire        pipe_tx4_eqdone_i                ,  // PIPE Tx Eq Done
  output  wire        pipe_tx4_compliance_o            ,  // Pipelined PIPE Tx Compliance
  output  wire  [1:0] pipe_tx4_char_is_k_o             ,  // Pipelined PIPE Tx Char Is K
  output  wire [31:0] pipe_tx4_data_o                  ,  // Pipelined PIPE Tx Data
  output  wire        pipe_tx4_elec_idle_o             ,  // Pipelined PIPE Tx Electrical Idle
  output  wire  [1:0] pipe_tx4_powerdown_o             ,  // Pipelined PIPE Tx Powerdown
  output  wire        pipe_tx4_datavalid_o             ,  // Pipelined PIPE Tx Data Valid
  output  wire        pipe_tx4_startblock_o            ,  // Pipelined PIPE Tx Start Block
  output  wire  [1:0] pipe_tx4_syncheader_o            ,  // Pipelined PIPE Tx Sync Header
  output  wire  [1:0] pipe_tx4_eqcontrol_o             ,  // Pipelined PIPE Tx Eq Control
  output  wire  [5:0] pipe_tx4_eqdeemph_o              ,  // Pipelined PIPE Tx Eq Deemphesis
  output  wire  [3:0] pipe_tx4_eqpreset_o              ,  // Pipelined PIPE Tx Preset

  // Pipe Per-Lane Signals - Lane 5
  output  wire  [1:0] pipe_rx5_char_is_k_o             ,  // Pipelined PIPE Rx Char Is K
  output  wire [31:0] pipe_rx5_data_o                  ,  // Pipelined PIPE Rx Data
  output  wire        pipe_rx5_valid_o                 ,  // Pipelined PIPE Rx Valid
  output  wire        pipe_rx5_data_valid_o            ,  // Pipelined PIPE Rx Data Valid
  output  wire  [2:0] pipe_rx5_status_o                ,  // Pipelined PIPE Rx Status
  output  wire        pipe_rx5_phy_status_o            ,  // Pipelined PIPE Rx Phy Status
  output  wire        pipe_rx5_elec_idle_o             ,  // Pipelined PIPE Rx Electrical Idle
  output  wire        pipe_rx5_eqdone_o                ,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx5_eqlpadaptdone_o         ,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx5_eqlplffssel_o           ,  // Pipelined PIPE Rx Eq
  output  wire [17:0] pipe_rx5_eqlpnewtxcoefforpreset_o,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx5_startblock_o            ,  // Pipelined PIPE Rx Start Block
  output  wire  [1:0] pipe_rx5_syncheader_o            ,  // Pipelined PIPE Rx Sync Header
  input   wire        pipe_rx5_polarity_i              ,  // PIPE Rx Polarity
  input   wire  [1:0] pipe_rx5_eqcontrol_i             ,  // PIPE Rx Eq control
  input   wire  [5:0] pipe_rx5_eqlplffs_i              ,  // PIPE Rx Eq
  input   wire  [3:0] pipe_rx5_eqlptxpreset_i          ,  // PIPE Rx Eq
  input   wire  [2:0] pipe_rx5_eqpreset_i              ,  // PIPE Rx Eq
  output  wire [17:0] pipe_tx5_eqcoeff_o               ,  // Pipelined Tx Eq Coefficient
  output  wire        pipe_tx5_eqdone_o                ,  // Pipelined Tx Eq Done
  input   wire        pipe_tx5_compliance_i            ,  // PIPE Tx Compliance
  input   wire  [1:0] pipe_tx5_char_is_k_i             ,  // PIPE Tx Char Is K
  input   wire [31:0] pipe_tx5_data_i                  ,  // PIPE Tx Data
  input   wire        pipe_tx5_elec_idle_i             ,  // PIPE Tx Electrical Idle
  input   wire  [1:0] pipe_tx5_powerdown_i             ,  // PIPE Tx Powerdown
  input   wire        pipe_tx5_datavalid_i             ,  // PIPE Tx Data Valid
  input   wire        pipe_tx5_startblock_i            ,  // PIPE Tx Start Block
  input   wire  [1:0] pipe_tx5_syncheader_i            ,  // PIPE Tx Sync Header
  input   wire  [1:0] pipe_tx5_eqcontrol_i             ,  // PIPE Tx Eq Control
  input   wire  [5:0] pipe_tx5_eqdeemph_i              ,  // PIPE Tx Eq Deemphesis
  input   wire  [3:0] pipe_tx5_eqpreset_i              ,  // PIPE Tx Preset

  input   wire  [1:0] pipe_rx5_char_is_k_i             ,  // PIPE Rx Char Is K
  input   wire [31:0] pipe_rx5_data_i                  ,  // PIPE Rx Data
  input   wire        pipe_rx5_valid_i                 ,  // PIPE Rx Valid
  input   wire        pipe_rx5_data_valid_i            ,  // PIPE Rx Data Valid
  input   wire  [2:0] pipe_rx5_status_i                ,  // PIPE Rx Status
  input   wire        pipe_rx5_phy_status_i            ,  // PIPE Rx Phy Status
  input   wire        pipe_rx5_elec_idle_i             ,  // PIPE Rx Electrical Idle
  input   wire        pipe_rx5_eqdone_i                ,  // PIPE Rx Eq
  input   wire        pipe_rx5_eqlpadaptdone_i         ,  // PIPE Rx Eq
  input   wire        pipe_rx5_eqlplffssel_i           ,  // PIPE Rx Eq
  input   wire [17:0] pipe_rx5_eqlpnewtxcoefforpreset_i,  // PIPE Rx Eq
  input   wire        pipe_rx5_startblock_i            ,  // PIPE Rx Start Block
  input   wire  [1:0] pipe_rx5_syncheader_i            ,  // PIPE Rx Sync Header
  output  wire        pipe_rx5_polarity_o              ,  // Pipelined PIPE Rx Polarity
  output  wire  [1:0] pipe_rx5_eqcontrol_o             ,  // Pipelined PIPE Rx Eq control
  output  wire  [5:0] pipe_rx5_eqlplffs_o              ,  // Pipelined PIPE Rx Eq
  output  wire  [3:0] pipe_rx5_eqlptxpreset_o          ,  // Pipelined PIPE Rx Eq
  output  wire  [2:0] pipe_rx5_eqpreset_o              ,  // Pipelined PIPE Rx Eq
  input   wire [17:0] pipe_tx5_eqcoeff_i               ,  // PIPE Tx Eq Coefficient
  input   wire        pipe_tx5_eqdone_i                ,  // PIPE Tx Eq Done
  output  wire        pipe_tx5_compliance_o            ,  // Pipelined PIPE Tx Compliance
  output  wire  [1:0] pipe_tx5_char_is_k_o             ,  // Pipelined PIPE Tx Char Is K
  output  wire [31:0] pipe_tx5_data_o                  ,  // Pipelined PIPE Tx Data
  output  wire        pipe_tx5_elec_idle_o             ,  // Pipelined PIPE Tx Electrical Idle
  output  wire  [1:0] pipe_tx5_powerdown_o             ,  // Pipelined PIPE Tx Powerdown
  output  wire        pipe_tx5_datavalid_o             ,  // Pipelined PIPE Tx Data Valid
  output  wire        pipe_tx5_startblock_o            ,  // Pipelined PIPE Tx Start Block
  output  wire  [1:0] pipe_tx5_syncheader_o            ,  // Pipelined PIPE Tx Sync Header
  output  wire  [1:0] pipe_tx5_eqcontrol_o             ,  // Pipelined PIPE Tx Eq Control
  output  wire  [5:0] pipe_tx5_eqdeemph_o              ,  // Pipelined PIPE Tx Eq Deemphesis
  output  wire  [3:0] pipe_tx5_eqpreset_o              ,  // Pipelined PIPE Tx Preset

  // Pipe Per-Lane Signals - Lane 6
  output  wire  [1:0] pipe_rx6_char_is_k_o             ,  // Pipelined PIPE Rx Char Is K
  output  wire [31:0] pipe_rx6_data_o                  ,  // Pipelined PIPE Rx Data
  output  wire        pipe_rx6_valid_o                 ,  // Pipelined PIPE Rx Valid
  output  wire        pipe_rx6_data_valid_o            ,  // Pipelined PIPE Rx Data Valid
  output  wire  [2:0] pipe_rx6_status_o                ,  // Pipelined PIPE Rx Status
  output  wire        pipe_rx6_phy_status_o            ,  // Pipelined PIPE Rx Phy Status
  output  wire        pipe_rx6_elec_idle_o             ,  // Pipelined PIPE Rx Electrical Idle
  output  wire        pipe_rx6_eqdone_o                ,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx6_eqlpadaptdone_o         ,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx6_eqlplffssel_o           ,  // Pipelined PIPE Rx Eq
  output  wire [17:0] pipe_rx6_eqlpnewtxcoefforpreset_o,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx6_startblock_o            ,  // Pipelined PIPE Rx Start Block
  output  wire  [1:0] pipe_rx6_syncheader_o            ,  // Pipelined PIPE Rx Sync Header
  input   wire        pipe_rx6_polarity_i              ,  // PIPE Rx Polarity
  input   wire  [1:0] pipe_rx6_eqcontrol_i             ,  // PIPE Rx Eq control
  input   wire  [5:0] pipe_rx6_eqlplffs_i              ,  // PIPE Rx Eq
  input   wire  [3:0] pipe_rx6_eqlptxpreset_i          ,  // PIPE Rx Eq
  input   wire  [2:0] pipe_rx6_eqpreset_i              ,  // PIPE Rx Eq
  output  wire [17:0] pipe_tx6_eqcoeff_o               ,  // Pipelined Tx Eq Coefficient
  output  wire        pipe_tx6_eqdone_o                ,  // Pipelined Tx Eq Done
  input   wire        pipe_tx6_compliance_i            ,  // PIPE Tx Compliance
  input   wire  [1:0] pipe_tx6_char_is_k_i             ,  // PIPE Tx Char Is K
  input   wire [31:0] pipe_tx6_data_i                  ,  // PIPE Tx Data
  input   wire        pipe_tx6_elec_idle_i             ,  // PIPE Tx Electrical Idle
  input   wire  [1:0] pipe_tx6_powerdown_i             ,  // PIPE Tx Powerdown
  input   wire        pipe_tx6_datavalid_i             ,  // PIPE Tx Data Valid
  input   wire        pipe_tx6_startblock_i            ,  // PIPE Tx Start Block
  input   wire  [1:0] pipe_tx6_syncheader_i            ,  // PIPE Tx Sync Header
  input   wire  [1:0] pipe_tx6_eqcontrol_i             ,  // PIPE Tx Eq Control
  input   wire  [5:0] pipe_tx6_eqdeemph_i              ,  // PIPE Tx Eq Deemphesis
  input   wire  [3:0] pipe_tx6_eqpreset_i              ,  // PIPE Tx Preset

  input   wire  [1:0] pipe_rx6_char_is_k_i             ,  // PIPE Rx Char Is K
  input   wire [31:0] pipe_rx6_data_i                  ,  // PIPE Rx Data
  input   wire        pipe_rx6_valid_i                 ,  // PIPE Rx Valid
  input   wire        pipe_rx6_data_valid_i            ,  // PIPE Rx Data Valid
  input   wire  [2:0] pipe_rx6_status_i                ,  // PIPE Rx Status
  input   wire        pipe_rx6_phy_status_i            ,  // PIPE Rx Phy Status
  input   wire        pipe_rx6_elec_idle_i             ,  // PIPE Rx Electrical Idle
  input   wire        pipe_rx6_eqdone_i                ,  // PIPE Rx Eq
  input   wire        pipe_rx6_eqlpadaptdone_i         ,  // PIPE Rx Eq
  input   wire        pipe_rx6_eqlplffssel_i           ,  // PIPE Rx Eq
  input   wire [17:0] pipe_rx6_eqlpnewtxcoefforpreset_i,  // PIPE Rx Eq
  input   wire        pipe_rx6_startblock_i            ,  // PIPE Rx Start Block
  input   wire  [1:0] pipe_rx6_syncheader_i            ,  // PIPE Rx Sync Header
  output  wire        pipe_rx6_polarity_o              ,  // Pipelined PIPE Rx Polarity
  output  wire  [1:0] pipe_rx6_eqcontrol_o             ,  // Pipelined PIPE Rx Eq control
  output  wire  [5:0] pipe_rx6_eqlplffs_o              ,  // Pipelined PIPE Rx Eq
  output  wire  [3:0] pipe_rx6_eqlptxpreset_o          ,  // Pipelined PIPE Rx Eq
  output  wire  [2:0] pipe_rx6_eqpreset_o              ,  // Pipelined PIPE Rx Eq
  input   wire [17:0] pipe_tx6_eqcoeff_i               ,  // PIPE Tx Eq Coefficient
  input   wire        pipe_tx6_eqdone_i                ,  // PIPE Tx Eq Done
  output  wire        pipe_tx6_compliance_o            ,  // Pipelined PIPE Tx Compliance
  output  wire  [1:0] pipe_tx6_char_is_k_o             ,  // Pipelined PIPE Tx Char Is K
  output  wire [31:0] pipe_tx6_data_o                  ,  // Pipelined PIPE Tx Data
  output  wire        pipe_tx6_elec_idle_o             ,  // Pipelined PIPE Tx Electrical Idle
  output  wire  [1:0] pipe_tx6_powerdown_o             ,  // Pipelined PIPE Tx Powerdown
  output  wire        pipe_tx6_datavalid_o             ,  // Pipelined PIPE Tx Data Valid
  output  wire        pipe_tx6_startblock_o            ,  // Pipelined PIPE Tx Start Block
  output  wire  [1:0] pipe_tx6_syncheader_o            ,  // Pipelined PIPE Tx Sync Header
  output  wire  [1:0] pipe_tx6_eqcontrol_o             ,  // Pipelined PIPE Tx Eq Control
  output  wire  [5:0] pipe_tx6_eqdeemph_o              ,  // Pipelined PIPE Tx Eq Deemphesis
  output  wire  [3:0] pipe_tx6_eqpreset_o              ,  // Pipelined PIPE Tx Preset

  // Pipe Per-Lane Signals - Lane 7
  output  wire  [1:0] pipe_rx7_char_is_k_o             ,  // Pipelined PIPE Rx Char Is K
  output  wire [31:0] pipe_rx7_data_o                  ,  // Pipelined PIPE Rx Data
  output  wire        pipe_rx7_valid_o                 ,  // Pipelined PIPE Rx Valid
  output  wire        pipe_rx7_data_valid_o            ,  // Pipelined PIPE Rx Data Valid
  output  wire  [2:0] pipe_rx7_status_o                ,  // Pipelined PIPE Rx Status
  output  wire        pipe_rx7_phy_status_o            ,  // Pipelined PIPE Rx Phy Status
  output  wire        pipe_rx7_elec_idle_o             ,  // Pipelined PIPE Rx Electrical Idle
  output  wire        pipe_rx7_eqdone_o                ,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx7_eqlpadaptdone_o         ,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx7_eqlplffssel_o           ,  // Pipelined PIPE Rx Eq
  output  wire [17:0] pipe_rx7_eqlpnewtxcoefforpreset_o,  // Pipelined PIPE Rx Eq
  output  wire        pipe_rx7_startblock_o            ,  // Pipelined PIPE Rx Start Block
  output  wire  [1:0] pipe_rx7_syncheader_o            ,  // Pipelined PIPE Rx Sync Header
  input   wire        pipe_rx7_polarity_i              ,  // PIPE Rx Polarity
  input   wire  [1:0] pipe_rx7_eqcontrol_i             ,  // PIPE Rx Eq control
  input   wire  [5:0] pipe_rx7_eqlplffs_i              ,  // PIPE Rx Eq
  input   wire  [3:0] pipe_rx7_eqlptxpreset_i          ,  // PIPE Rx Eq
  input   wire  [2:0] pipe_rx7_eqpreset_i              ,  // PIPE Rx Eq
  output  wire [17:0] pipe_tx7_eqcoeff_o               ,  // Pipelined Tx Eq Coefficient
  output  wire        pipe_tx7_eqdone_o                ,  // Pipelined Tx Eq Done
  input   wire        pipe_tx7_compliance_i            ,  // PIPE Tx Compliance
  input   wire  [1:0] pipe_tx7_char_is_k_i             ,  // PIPE Tx Char Is K
  input   wire [31:0] pipe_tx7_data_i                  ,  // PIPE Tx Data
  input   wire        pipe_tx7_elec_idle_i             ,  // PIPE Tx Electrical Idle
  input   wire  [1:0] pipe_tx7_powerdown_i             ,  // PIPE Tx Powerdown
  input   wire        pipe_tx7_datavalid_i             ,  // PIPE Tx Data Valid
  input   wire        pipe_tx7_startblock_i            ,  // PIPE Tx Start Block
  input   wire  [1:0] pipe_tx7_syncheader_i            ,  // PIPE Tx Sync Header
  input   wire  [1:0] pipe_tx7_eqcontrol_i             ,  // PIPE Tx Eq Control
  input   wire  [5:0] pipe_tx7_eqdeemph_i              ,  // PIPE Tx Eq Deemphesis
  input   wire  [3:0] pipe_tx7_eqpreset_i              ,  // PIPE Tx Preset

  input   wire  [1:0] pipe_rx7_char_is_k_i             ,  // PIPE Rx Char Is K
  input   wire [31:0] pipe_rx7_data_i                  ,  // PIPE Rx Data
  input   wire        pipe_rx7_valid_i                 ,  // PIPE Rx Valid
  input   wire        pipe_rx7_data_valid_i            ,  // PIPE Rx Data Valid
  input   wire  [2:0] pipe_rx7_status_i                ,  // PIPE Rx Status
  input   wire        pipe_rx7_phy_status_i            ,  // PIPE Rx Phy Status
  input   wire        pipe_rx7_elec_idle_i             ,  // PIPE Rx Electrical Idle
  input   wire        pipe_rx7_eqdone_i                ,  // PIPE Rx Eq
  input   wire        pipe_rx7_eqlpadaptdone_i         ,  // PIPE Rx Eq
  input   wire        pipe_rx7_eqlplffssel_i           ,  // PIPE Rx Eq
  input   wire [17:0] pipe_rx7_eqlpnewtxcoefforpreset_i,  // PIPE Rx Eq
  input   wire        pipe_rx7_startblock_i            ,  // PIPE Rx Start Block
  input   wire  [1:0] pipe_rx7_syncheader_i            ,  // PIPE Rx Sync Header
  output  wire        pipe_rx7_polarity_o              ,  // Pipelined PIPE Rx Polarity
  output  wire  [1:0] pipe_rx7_eqcontrol_o             ,  // Pipelined PIPE Rx Eq control
  output  wire  [5:0] pipe_rx7_eqlplffs_o              ,  // Pipelined PIPE Rx Eq
  output  wire  [3:0] pipe_rx7_eqlptxpreset_o          ,  // Pipelined PIPE Rx Eq
  output  wire  [2:0] pipe_rx7_eqpreset_o              ,  // Pipelined PIPE Rx Eq
  input   wire [17:0] pipe_tx7_eqcoeff_i               ,  // PIPE Tx Eq Coefficient
  input   wire        pipe_tx7_eqdone_i                ,  // PIPE Tx Eq Done
  output  wire        pipe_tx7_compliance_o            ,  // Pipelined PIPE Tx Compliance
  output  wire  [1:0] pipe_tx7_char_is_k_o             ,  // Pipelined PIPE Tx Char Is K
  output  wire [31:0] pipe_tx7_data_o                  ,  // Pipelined PIPE Tx Data
  output  wire        pipe_tx7_elec_idle_o             ,  // Pipelined PIPE Tx Electrical Idle
  output  wire  [1:0] pipe_tx7_powerdown_o             ,  // Pipelined PIPE Tx Powerdown
  output  wire        pipe_tx7_datavalid_o             ,  // Pipelined PIPE Tx Data Valid
  output  wire        pipe_tx7_startblock_o            ,  // Pipelined PIPE Tx Start Block
  output  wire  [1:0] pipe_tx7_syncheader_o            ,  // Pipelined PIPE Tx Sync Header
  output  wire  [1:0] pipe_tx7_eqcontrol_o             ,  // Pipelined PIPE Tx Eq Control
  output  wire  [5:0] pipe_tx7_eqdeemph_o              ,  // Pipelined PIPE Tx Eq Deemphesis
  output  wire  [3:0] pipe_tx7_eqpreset_o              ,  // Pipelined PIPE Tx Preset

  // Non PIPE signals
  input   wire        pipe_clk                         ,  // PIPE Clock
  input   wire        rst_n                               // Reset
);

  generate

    rp_pcie_pipe_misc # (
      .TCQ                  ( TCQ ),
      .PIPE_PIPELINE_STAGES ( PIPE_PIPELINE_STAGES )

    ) pipe_misc_i (

      .pipe_tx_rcvr_det_i (pipe_tx_rcvr_det_i),
      .pipe_tx_reset_i    (pipe_tx_reset_i)   ,
      .pipe_tx_rate_i     (pipe_tx_rate_i)    ,
      .pipe_tx_deemph_i   (pipe_tx_deemph_i)  ,
      .pipe_tx_margin_i   (pipe_tx_margin_i)  ,
      .pipe_tx_swing_i    (pipe_tx_swing_i)   ,
      .pipe_tx_eqfs_i     (pipe_tx_eqfs_i )   ,
      .pipe_tx_eqlf_i     (pipe_tx_eqlf_i )   ,

      .pipe_tx_rcvr_det_o (pipe_tx_rcvr_det_o),
      .pipe_tx_reset_o    (pipe_tx_reset_o)   ,
      .pipe_tx_rate_o     (pipe_tx_rate_o)    ,
      .pipe_tx_deemph_o   (pipe_tx_deemph_o)  ,
      .pipe_tx_margin_o   (pipe_tx_margin_o)  ,
      .pipe_tx_swing_o    (pipe_tx_swing_o)   ,
      .pipe_tx_eqfs_o     (pipe_tx_eqfs_o )   ,
      .pipe_tx_eqlf_o     (pipe_tx_eqlf_o )   ,

      .pipe_clk           (pipe_clk)          ,
      .rst_n              (rst_n)
    );

    rp_pcie_pipe_lane # (
      .TCQ                  ( TCQ ),
      .PIPE_PIPELINE_STAGES ( PIPE_PIPELINE_STAGES )
    )
    pipe_lane_0_i (

      .pipe_rx_char_is_k_o              (pipe_rx0_char_is_k_o             ),
      .pipe_rx_data_o                   (pipe_rx0_data_o                  ),
      .pipe_rx_valid_o                  (pipe_rx0_valid_o                 ),
      .pipe_rx_data_valid_o             (pipe_rx0_data_valid_o            ),
      .pipe_rx_status_o                 (pipe_rx0_status_o                ),
      .pipe_rx_phy_status_o             (pipe_rx0_phy_status_o            ),
      .pipe_rx_elec_idle_o              (pipe_rx0_elec_idle_o             ),
      .pipe_rx_eqdone_o                 (pipe_rx0_eqdone_o                ),
      .pipe_rx_eqlpadaptdone_o          (pipe_rx0_eqlpadaptdone_o         ),
      .pipe_rx_eqlplffssel_o            (pipe_rx0_eqlplffssel_o           ),
      .pipe_rx_eqlpnewtxcoefforpreset_o (pipe_rx0_eqlpnewtxcoefforpreset_o),
      .pipe_rx_startblock_o             (pipe_rx0_startblock_o            ),
      .pipe_rx_syncheader_o             (pipe_rx0_syncheader_o            ),
      .pipe_rx_polarity_i               (pipe_rx0_polarity_i              ),
      .pipe_rx_eqcontrol_i              (pipe_rx0_eqcontrol_i             ),
      .pipe_rx_eqlplffs_i               (pipe_rx0_eqlplffs_i              ),
      .pipe_rx_eqlptxpreset_i           (pipe_rx0_eqlptxpreset_i          ),
      .pipe_rx_eqpreset_i               (pipe_rx0_eqpreset_i              ),
      .pipe_rx_slide_i                  (pipe_rxslide_i[0]                ),
      .pipe_rx_syncdone_i               (pipe_rxsyncdone_i[0]             ),
      .pipe_tx_eqcoeff_o                (pipe_tx0_eqcoeff_o               ),
      .pipe_tx_eqdone_o                 (pipe_tx0_eqdone_o                ),
      .pipe_tx_compliance_i             (pipe_tx0_compliance_i            ),
      .pipe_tx_char_is_k_i              (pipe_tx0_char_is_k_i             ),
      .pipe_tx_data_i                   (pipe_tx0_data_i                  ),
      .pipe_tx_elec_idle_i              (pipe_tx0_elec_idle_i             ),
      .pipe_tx_powerdown_i              (pipe_tx0_powerdown_i             ),
      .pipe_tx_datavalid_i              (pipe_tx0_datavalid_i             ),
      .pipe_tx_startblock_i             (pipe_tx0_startblock_i            ),
      .pipe_tx_syncheader_i             (pipe_tx0_syncheader_i            ),
      .pipe_tx_eqcontrol_i              (pipe_tx0_eqcontrol_i             ),
      .pipe_tx_eqdeemph_i               (pipe_tx0_eqdeemph_i              ),
      .pipe_tx_eqpreset_i               (pipe_tx0_eqpreset_i              ),

      .pipe_rx_char_is_k_i              (pipe_rx0_char_is_k_i             ),
      .pipe_rx_data_i                   (pipe_rx0_data_i                  ),
      .pipe_rx_valid_i                  (pipe_rx0_valid_i                 ),
      .pipe_rx_data_valid_i             (pipe_rx0_data_valid_i            ),
      .pipe_rx_status_i                 (pipe_rx0_status_i                ),
      .pipe_rx_phy_status_i             (pipe_rx0_phy_status_i            ),
      .pipe_rx_elec_idle_i              (pipe_rx0_elec_idle_i             ),
      .pipe_rx_eqdone_i                 (pipe_rx0_eqdone_i                ),
      .pipe_rx_eqlpadaptdone_i          (pipe_rx0_eqlpadaptdone_i         ),
      .pipe_rx_eqlplffssel_i            (pipe_rx0_eqlplffssel_i           ),
      .pipe_rx_eqlpnewtxcoefforpreset_i (pipe_rx0_eqlpnewtxcoefforpreset_i),
      .pipe_rx_startblock_i             (pipe_rx0_startblock_i            ),
      .pipe_rx_syncheader_i             (pipe_rx0_syncheader_i            ),
      .pipe_rx_polarity_o               (pipe_rx0_polarity_o              ),
      .pipe_rx_eqcontrol_o              (pipe_rx0_eqcontrol_o             ),
      .pipe_rx_eqlplffs_o               (pipe_rx0_eqlplffs_o              ),
      .pipe_rx_eqlptxpreset_o           (pipe_rx0_eqlptxpreset_o          ),
      .pipe_rx_eqpreset_o               (pipe_rx0_eqpreset_o              ),
      .pipe_rx_slide_o                  (pipe_rxslide_o[0]                ),
      .pipe_rx_syncdone_o               (pipe_rxsyncdone_o[0]             ),
      .pipe_tx_eqcoeff_i                (pipe_tx0_eqcoeff_i               ),
      .pipe_tx_eqdone_i                 (pipe_tx0_eqdone_i                ),
      .pipe_tx_compliance_o             (pipe_tx0_compliance_o            ),
      .pipe_tx_char_is_k_o              (pipe_tx0_char_is_k_o             ),
      .pipe_tx_data_o                   (pipe_tx0_data_o                  ),
      .pipe_tx_elec_idle_o              (pipe_tx0_elec_idle_o             ),
      .pipe_tx_powerdown_o              (pipe_tx0_powerdown_o             ),
      .pipe_tx_datavalid_o              (pipe_tx0_datavalid_o             ),
      .pipe_tx_startblock_o             (pipe_tx0_startblock_o            ),
      .pipe_tx_syncheader_o             (pipe_tx0_syncheader_o            ),
      .pipe_tx_eqcontrol_o              (pipe_tx0_eqcontrol_o             ),
      .pipe_tx_eqdeemph_o               (pipe_tx0_eqdeemph_o              ),
      .pipe_tx_eqpreset_o               (pipe_tx0_eqpreset_o              ),

      .pipe_clk                         (pipe_clk                         ),
      .rst_n                            (rst_n)

    );

    if (LINK_CAP_MAX_LINK_WIDTH >= 2) begin : pipe_2_lane

      rp_pcie_pipe_lane # (
       .TCQ                  ( TCQ ),
       .PIPE_PIPELINE_STAGES ( PIPE_PIPELINE_STAGES )
      ) pipe_lane_1_i (

      .pipe_rx_char_is_k_o              (pipe_rx1_char_is_k_o             ),
      .pipe_rx_data_o                   (pipe_rx1_data_o                  ),
      .pipe_rx_valid_o                  (pipe_rx1_valid_o                 ),
      .pipe_rx_data_valid_o             (pipe_rx1_data_valid_o            ),
      .pipe_rx_status_o                 (pipe_rx1_status_o                ),
      .pipe_rx_phy_status_o             (pipe_rx1_phy_status_o            ),
      .pipe_rx_elec_idle_o              (pipe_rx1_elec_idle_o             ),
      .pipe_rx_eqdone_o                 (pipe_rx1_eqdone_o                ),
      .pipe_rx_eqlpadaptdone_o          (pipe_rx1_eqlpadaptdone_o         ),
      .pipe_rx_eqlplffssel_o            (pipe_rx1_eqlplffssel_o           ),
      .pipe_rx_eqlpnewtxcoefforpreset_o (pipe_rx1_eqlpnewtxcoefforpreset_o),
      .pipe_rx_startblock_o             (pipe_rx1_startblock_o            ),
      .pipe_rx_syncheader_o             (pipe_rx1_syncheader_o            ),
      .pipe_rx_polarity_i               (pipe_rx1_polarity_i              ),
      .pipe_rx_eqcontrol_i              (pipe_rx1_eqcontrol_i             ),
      .pipe_rx_eqlplffs_i               (pipe_rx1_eqlplffs_i              ),
      .pipe_rx_eqlptxpreset_i           (pipe_rx1_eqlptxpreset_i          ),
      .pipe_rx_eqpreset_i               (pipe_rx1_eqpreset_i              ),
      .pipe_rx_slide_i                  (pipe_rxslide_i[1]                ),
      .pipe_rx_syncdone_i               (pipe_rxsyncdone_i[1]             ),
      .pipe_tx_eqcoeff_o                (pipe_tx1_eqcoeff_o               ),
      .pipe_tx_eqdone_o                 (pipe_tx1_eqdone_o                ),
      .pipe_tx_compliance_i             (pipe_tx1_compliance_i            ),
      .pipe_tx_char_is_k_i              (pipe_tx1_char_is_k_i             ),
      .pipe_tx_data_i                   (pipe_tx1_data_i                  ),
      .pipe_tx_elec_idle_i              (pipe_tx1_elec_idle_i             ),
      .pipe_tx_powerdown_i              (pipe_tx1_powerdown_i             ),
      .pipe_tx_datavalid_i              (pipe_tx1_datavalid_i             ),
      .pipe_tx_startblock_i             (pipe_tx1_startblock_i            ),
      .pipe_tx_syncheader_i             (pipe_tx1_syncheader_i            ),
      .pipe_tx_eqcontrol_i              (pipe_tx1_eqcontrol_i             ),
      .pipe_tx_eqdeemph_i               (pipe_tx1_eqdeemph_i              ),
      .pipe_tx_eqpreset_i               (pipe_tx1_eqpreset_i              ),

      .pipe_rx_char_is_k_i              (pipe_rx1_char_is_k_i             ),
      .pipe_rx_data_i                   (pipe_rx1_data_i                  ),
      .pipe_rx_valid_i                  (pipe_rx1_valid_i                 ),
      .pipe_rx_data_valid_i             (pipe_rx1_data_valid_i            ),
      .pipe_rx_status_i                 (pipe_rx1_status_i                ),
      .pipe_rx_phy_status_i             (pipe_rx1_phy_status_i            ),
      .pipe_rx_elec_idle_i              (pipe_rx1_elec_idle_i             ),
      .pipe_rx_eqdone_i                 (pipe_rx1_eqdone_i                ),
      .pipe_rx_eqlpadaptdone_i          (pipe_rx1_eqlpadaptdone_i         ),
      .pipe_rx_eqlplffssel_i            (pipe_rx1_eqlplffssel_i           ),
      .pipe_rx_eqlpnewtxcoefforpreset_i (pipe_rx1_eqlpnewtxcoefforpreset_i),
      .pipe_rx_startblock_i             (pipe_rx1_startblock_i            ),
      .pipe_rx_syncheader_i             (pipe_rx1_syncheader_i            ),
      .pipe_rx_polarity_o               (pipe_rx1_polarity_o              ),
      .pipe_rx_eqcontrol_o              (pipe_rx1_eqcontrol_o             ),
      .pipe_rx_eqlplffs_o               (pipe_rx1_eqlplffs_o              ),
      .pipe_rx_eqlptxpreset_o           (pipe_rx1_eqlptxpreset_o          ),
      .pipe_rx_eqpreset_o               (pipe_rx1_eqpreset_o              ),
      .pipe_rx_slide_o                  (pipe_rxslide_o[1]                ),
      .pipe_rx_syncdone_o               (pipe_rxsyncdone_o[1]             ),
      .pipe_tx_eqcoeff_i                (pipe_tx1_eqcoeff_i               ),
      .pipe_tx_eqdone_i                 (pipe_tx1_eqdone_i                ),
      .pipe_tx_compliance_o             (pipe_tx1_compliance_o            ),
      .pipe_tx_char_is_k_o              (pipe_tx1_char_is_k_o             ),
      .pipe_tx_data_o                   (pipe_tx1_data_o                  ),
      .pipe_tx_elec_idle_o              (pipe_tx1_elec_idle_o             ),
      .pipe_tx_powerdown_o              (pipe_tx1_powerdown_o             ),
      .pipe_tx_datavalid_o              (pipe_tx1_datavalid_o             ),
      .pipe_tx_startblock_o             (pipe_tx1_startblock_o            ),
      .pipe_tx_syncheader_o             (pipe_tx1_syncheader_o            ),
      .pipe_tx_eqcontrol_o              (pipe_tx1_eqcontrol_o             ),
      .pipe_tx_eqdeemph_o               (pipe_tx1_eqdeemph_o              ),
      .pipe_tx_eqpreset_o               (pipe_tx1_eqpreset_o              ),

      .pipe_clk                         (pipe_clk                         ),
      .rst_n                            (rst_n                            )

      );

    end // if (LINK_CAP_MAX_LINK_WIDTH >= 2)
    else
    begin

      assign pipe_rx1_char_is_k_o              =  2'b00;
      assign pipe_rx1_data_o                   = 32'h00000000;
      assign pipe_rx1_valid_o                  =  1'b0;
      assign pipe_rx1_data_valid_o             =  1'b0;
      assign pipe_rx1_status_o                 =  2'b00;
      assign pipe_rx1_phy_status_o             =  1'b0;
      assign pipe_rx1_elec_idle_o              =  1'b1;
      assign pipe_rx1_eqdone_o                 =  1'b0;
      assign pipe_rx1_eqlpadaptdone_o          =  1'b0;
      assign pipe_rx1_eqlplffssel_o            =  1'b0;
      assign pipe_rx1_eqlpnewtxcoefforpreset_o = 17'b00000000000000000;
      assign pipe_rx1_startblock_o             =  1'b0;
      assign pipe_rx1_syncheader_o             =  2'b00;
      assign pipe_tx1_eqcoeff_o                = 17'b00000000000000000;
      assign pipe_tx1_eqdone_o                 =  1'b0;
      assign pipe_rx1_polarity_o               =  1'b0;
      assign pipe_rx1_eqcontrol_o              =  2'b00;
      assign pipe_rx1_eqlplffs_o               =  6'b000000;
      assign pipe_rx1_eqlptxpreset_o           =  4'h0;
      assign pipe_rx1_eqpreset_o               =  3'b000;
      assign pipe_tx1_compliance_o             =  1'b0;
      assign pipe_tx1_char_is_k_o              =  2'b00;
      assign pipe_tx1_data_o                   = 32'h00000000;
      assign pipe_tx1_elec_idle_o              =  1'b1;
      assign pipe_tx1_powerdown_o              =  2'b00;
      assign pipe_tx1_datavalid_o              =  1'b0;
      assign pipe_tx1_startblock_o             =  1'b0;
      assign pipe_tx1_syncheader_o             =  2'b00;
      assign pipe_tx1_eqcontrol_o              =  2'b00;
      assign pipe_tx1_eqdeemph_o               =  6'b000000;
      assign pipe_tx1_eqpreset_o               =  4'h0;
      assign pipe_rxslide_o[1]                 =  1'b0;
      assign pipe_rxsyncdone_o[1]              =  1'b0;

    end // if !(LINK_CAP_MAX_LINK_WIDTH >= 2)

    if (LINK_CAP_MAX_LINK_WIDTH >= 4) begin : pipe_4_lane

      rp_pcie_pipe_lane # (
       .TCQ                  ( TCQ ),
       .PIPE_PIPELINE_STAGES ( PIPE_PIPELINE_STAGES )
      ) pipe_lane_2_i (

      .pipe_rx_char_is_k_o              (pipe_rx2_char_is_k_o             ),
      .pipe_rx_data_o                   (pipe_rx2_data_o                  ),
      .pipe_rx_valid_o                  (pipe_rx2_valid_o                 ),
      .pipe_rx_data_valid_o             (pipe_rx2_data_valid_o            ),
      .pipe_rx_status_o                 (pipe_rx2_status_o                ),
      .pipe_rx_phy_status_o             (pipe_rx2_phy_status_o            ),
      .pipe_rx_elec_idle_o              (pipe_rx2_elec_idle_o             ),
      .pipe_rx_eqdone_o                 (pipe_rx2_eqdone_o                ),
      .pipe_rx_eqlpadaptdone_o          (pipe_rx2_eqlpadaptdone_o         ),
      .pipe_rx_eqlplffssel_o            (pipe_rx2_eqlplffssel_o           ),
      .pipe_rx_eqlpnewtxcoefforpreset_o (pipe_rx2_eqlpnewtxcoefforpreset_o),
      .pipe_rx_startblock_o             (pipe_rx2_startblock_o            ),
      .pipe_rx_syncheader_o             (pipe_rx2_syncheader_o            ),
      .pipe_rx_polarity_i               (pipe_rx2_polarity_i              ),
      .pipe_rx_eqcontrol_i              (pipe_rx2_eqcontrol_i             ),
      .pipe_rx_eqlplffs_i               (pipe_rx2_eqlplffs_i              ),
      .pipe_rx_eqlptxpreset_i           (pipe_rx2_eqlptxpreset_i          ),
      .pipe_rx_eqpreset_i               (pipe_rx2_eqpreset_i              ),
      .pipe_rx_slide_i                  (pipe_rxslide_i[2]                ),
      .pipe_rx_syncdone_i               (pipe_rxsyncdone_i[2]             ),
      .pipe_tx_eqcoeff_o                (pipe_tx2_eqcoeff_o               ),
      .pipe_tx_eqdone_o                 (pipe_tx2_eqdone_o                ),
      .pipe_tx_compliance_i             (pipe_tx2_compliance_i            ),
      .pipe_tx_char_is_k_i              (pipe_tx2_char_is_k_i             ),
      .pipe_tx_data_i                   (pipe_tx2_data_i                  ),
      .pipe_tx_elec_idle_i              (pipe_tx2_elec_idle_i             ),
      .pipe_tx_powerdown_i              (pipe_tx2_powerdown_i             ),
      .pipe_tx_datavalid_i              (pipe_tx2_datavalid_i             ),
      .pipe_tx_startblock_i             (pipe_tx2_startblock_i            ),
      .pipe_tx_syncheader_i             (pipe_tx2_syncheader_i            ),
      .pipe_tx_eqcontrol_i              (pipe_tx2_eqcontrol_i             ),
      .pipe_tx_eqdeemph_i               (pipe_tx2_eqdeemph_i              ),
      .pipe_tx_eqpreset_i               (pipe_tx2_eqpreset_i              ),

      .pipe_rx_char_is_k_i              (pipe_rx2_char_is_k_i             ),
      .pipe_rx_data_i                   (pipe_rx2_data_i                  ),
      .pipe_rx_valid_i                  (pipe_rx2_valid_i                 ),
      .pipe_rx_data_valid_i             (pipe_rx2_data_valid_i            ),
      .pipe_rx_status_i                 (pipe_rx2_status_i                ),
      .pipe_rx_phy_status_i             (pipe_rx2_phy_status_i            ),
      .pipe_rx_elec_idle_i              (pipe_rx2_elec_idle_i             ),
      .pipe_rx_eqdone_i                 (pipe_rx2_eqdone_i                ),
      .pipe_rx_eqlpadaptdone_i          (pipe_rx2_eqlpadaptdone_i         ),
      .pipe_rx_eqlplffssel_i            (pipe_rx2_eqlplffssel_i           ),
      .pipe_rx_eqlpnewtxcoefforpreset_i (pipe_rx2_eqlpnewtxcoefforpreset_i),
      .pipe_rx_startblock_i             (pipe_rx2_startblock_i            ),
      .pipe_rx_syncheader_i             (pipe_rx2_syncheader_i            ),
      .pipe_rx_polarity_o               (pipe_rx2_polarity_o              ),
      .pipe_rx_eqcontrol_o              (pipe_rx2_eqcontrol_o             ),
      .pipe_rx_eqlplffs_o               (pipe_rx2_eqlplffs_o              ),
      .pipe_rx_eqlptxpreset_o           (pipe_rx2_eqlptxpreset_o          ),
      .pipe_rx_eqpreset_o               (pipe_rx2_eqpreset_o              ),
      .pipe_rx_slide_o                  (pipe_rxslide_o[2]                ),
      .pipe_rx_syncdone_o               (pipe_rxsyncdone_o[2]             ),
      .pipe_tx_eqcoeff_i                (pipe_tx2_eqcoeff_i               ),
      .pipe_tx_eqdone_i                 (pipe_tx2_eqdone_i                ),
      .pipe_tx_compliance_o             (pipe_tx2_compliance_o            ),
      .pipe_tx_char_is_k_o              (pipe_tx2_char_is_k_o             ),
      .pipe_tx_data_o                   (pipe_tx2_data_o                  ),
      .pipe_tx_elec_idle_o              (pipe_tx2_elec_idle_o             ),
      .pipe_tx_powerdown_o              (pipe_tx2_powerdown_o             ),
      .pipe_tx_datavalid_o              (pipe_tx2_datavalid_o             ),
      .pipe_tx_startblock_o             (pipe_tx2_startblock_o            ),
      .pipe_tx_syncheader_o             (pipe_tx2_syncheader_o            ),
      .pipe_tx_eqcontrol_o              (pipe_tx2_eqcontrol_o             ),
      .pipe_tx_eqdeemph_o               (pipe_tx2_eqdeemph_o              ),
      .pipe_tx_eqpreset_o               (pipe_tx2_eqpreset_o              ),

      .pipe_clk                         (pipe_clk                         ),
      .rst_n                            (rst_n                            )

      );

      rp_pcie_pipe_lane # (
       .TCQ                  ( TCQ ),
       .PIPE_PIPELINE_STAGES ( PIPE_PIPELINE_STAGES )
      ) pipe_lane_3_i (

      .pipe_rx_char_is_k_o              (pipe_rx3_char_is_k_o             ),
      .pipe_rx_data_o                   (pipe_rx3_data_o                  ),
      .pipe_rx_valid_o                  (pipe_rx3_valid_o                 ),
      .pipe_rx_data_valid_o             (pipe_rx3_data_valid_o            ),
      .pipe_rx_status_o                 (pipe_rx3_status_o                ),
      .pipe_rx_phy_status_o             (pipe_rx3_phy_status_o            ),
      .pipe_rx_elec_idle_o              (pipe_rx3_elec_idle_o             ),
      .pipe_rx_eqdone_o                 (pipe_rx3_eqdone_o                ),
      .pipe_rx_eqlpadaptdone_o          (pipe_rx3_eqlpadaptdone_o         ),
      .pipe_rx_eqlplffssel_o            (pipe_rx3_eqlplffssel_o           ),
      .pipe_rx_eqlpnewtxcoefforpreset_o (pipe_rx3_eqlpnewtxcoefforpreset_o),
      .pipe_rx_startblock_o             (pipe_rx3_startblock_o            ),
      .pipe_rx_syncheader_o             (pipe_rx3_syncheader_o            ),
      .pipe_rx_polarity_i               (pipe_rx3_polarity_i              ),
      .pipe_rx_eqcontrol_i              (pipe_rx3_eqcontrol_i             ),
      .pipe_rx_eqlplffs_i               (pipe_rx3_eqlplffs_i              ),
      .pipe_rx_eqlptxpreset_i           (pipe_rx3_eqlptxpreset_i          ),
      .pipe_rx_eqpreset_i               (pipe_rx3_eqpreset_i              ),
      .pipe_rx_slide_i                  (pipe_rxslide_i[3]                ),
      .pipe_rx_syncdone_i               (pipe_rxsyncdone_i[3]             ),
      .pipe_tx_eqcoeff_o                (pipe_tx3_eqcoeff_o               ),
      .pipe_tx_eqdone_o                 (pipe_tx3_eqdone_o                ),
      .pipe_tx_compliance_i             (pipe_tx3_compliance_i            ),
      .pipe_tx_char_is_k_i              (pipe_tx3_char_is_k_i             ),
      .pipe_tx_data_i                   (pipe_tx3_data_i                  ),
      .pipe_tx_elec_idle_i              (pipe_tx3_elec_idle_i             ),
      .pipe_tx_powerdown_i              (pipe_tx3_powerdown_i             ),
      .pipe_tx_datavalid_i              (pipe_tx3_datavalid_i             ),
      .pipe_tx_startblock_i             (pipe_tx3_startblock_i            ),
      .pipe_tx_syncheader_i             (pipe_tx3_syncheader_i            ),
      .pipe_tx_eqcontrol_i              (pipe_tx3_eqcontrol_i             ),
      .pipe_tx_eqdeemph_i               (pipe_tx3_eqdeemph_i              ),
      .pipe_tx_eqpreset_i               (pipe_tx3_eqpreset_i              ),

      .pipe_rx_char_is_k_i              (pipe_rx3_char_is_k_i             ),
      .pipe_rx_data_i                   (pipe_rx3_data_i                  ),
      .pipe_rx_valid_i                  (pipe_rx3_valid_i                 ),
      .pipe_rx_data_valid_i             (pipe_rx3_data_valid_i            ),
      .pipe_rx_status_i                 (pipe_rx3_status_i                ),
      .pipe_rx_phy_status_i             (pipe_rx3_phy_status_i            ),
      .pipe_rx_elec_idle_i              (pipe_rx3_elec_idle_i             ),
      .pipe_rx_eqdone_i                 (pipe_rx3_eqdone_i                ),
      .pipe_rx_eqlpadaptdone_i          (pipe_rx3_eqlpadaptdone_i         ),
      .pipe_rx_eqlplffssel_i            (pipe_rx3_eqlplffssel_i           ),
      .pipe_rx_eqlpnewtxcoefforpreset_i (pipe_rx3_eqlpnewtxcoefforpreset_i),
      .pipe_rx_startblock_i             (pipe_rx3_startblock_i            ),
      .pipe_rx_syncheader_i             (pipe_rx3_syncheader_i            ),
      .pipe_rx_polarity_o               (pipe_rx3_polarity_o              ),
      .pipe_rx_eqcontrol_o              (pipe_rx3_eqcontrol_o             ),
      .pipe_rx_eqlplffs_o               (pipe_rx3_eqlplffs_o              ),
      .pipe_rx_eqlptxpreset_o           (pipe_rx3_eqlptxpreset_o          ),
      .pipe_rx_eqpreset_o               (pipe_rx3_eqpreset_o              ),
      .pipe_rx_slide_o                  (pipe_rxslide_o[3]                ),
      .pipe_rx_syncdone_o               (pipe_rxsyncdone_o[3]             ),
      .pipe_tx_eqcoeff_i                (pipe_tx3_eqcoeff_i               ),
      .pipe_tx_eqdone_i                 (pipe_tx3_eqdone_i                ),
      .pipe_tx_compliance_o             (pipe_tx3_compliance_o            ),
      .pipe_tx_char_is_k_o              (pipe_tx3_char_is_k_o             ),
      .pipe_tx_data_o                   (pipe_tx3_data_o                  ),
      .pipe_tx_elec_idle_o              (pipe_tx3_elec_idle_o             ),
      .pipe_tx_powerdown_o              (pipe_tx3_powerdown_o             ),
      .pipe_tx_datavalid_o              (pipe_tx3_datavalid_o             ),
      .pipe_tx_startblock_o             (pipe_tx3_startblock_o            ),
      .pipe_tx_syncheader_o             (pipe_tx3_syncheader_o            ),
      .pipe_tx_eqcontrol_o              (pipe_tx3_eqcontrol_o             ),
      .pipe_tx_eqdeemph_o               (pipe_tx3_eqdeemph_o              ),
      .pipe_tx_eqpreset_o               (pipe_tx3_eqpreset_o              ),

      .pipe_clk                         (pipe_clk                         ),
      .rst_n                            (rst_n                            )
      );

    end // if (LINK_CAP_MAX_LINK_WIDTH >= 4)
    else
    begin
      assign pipe_rx2_char_is_k_o              =  2'b00;
      assign pipe_rx2_data_o                   = 32'h00000000;
      assign pipe_rx2_valid_o                  =  1'b0;
      assign pipe_rx2_data_valid_o             =  1'b0;
      assign pipe_rx2_status_o                 =  2'b00;
      assign pipe_rx2_phy_status_o             =  1'b0;
      assign pipe_rx2_elec_idle_o              =  1'b1;
      assign pipe_rx2_eqdone_o                 =  1'b0;
      assign pipe_rx2_eqlpadaptdone_o          =  1'b0;
      assign pipe_rx2_eqlplffssel_o            =  1'b0;
      assign pipe_rx2_eqlpnewtxcoefforpreset_o = 17'b00000000000000000;
      assign pipe_rx2_startblock_o             =  1'b0;
      assign pipe_rx2_syncheader_o             =  2'b00;
      assign pipe_tx2_eqcoeff_o                = 17'b00000000000000000;
      assign pipe_tx2_eqdone_o                 =  1'b0;
      assign pipe_rx2_polarity_o               =  1'b0;
      assign pipe_rx2_eqcontrol_o              =  2'b00;
      assign pipe_rx2_eqlplffs_o               =  6'b000000;
      assign pipe_rx2_eqlptxpreset_o           =  4'h0;
      assign pipe_rx2_eqpreset_o               =  3'b000;
      assign pipe_rxslide_o[2]                 =  1'b0;
      assign pipe_rxsyncdone_o[2]              =  1'b0;
      assign pipe_tx2_compliance_o             =  1'b0;
      assign pipe_tx2_char_is_k_o              =  2'b00;
      assign pipe_tx2_data_o                   = 32'h00000000;
      assign pipe_tx2_elec_idle_o              =  1'b1;
      assign pipe_tx2_powerdown_o              =  2'b00;
      assign pipe_tx2_datavalid_o              =  1'b0;
      assign pipe_tx2_startblock_o             =  1'b0;
      assign pipe_tx2_syncheader_o             =  2'b00;
      assign pipe_tx2_eqcontrol_o              =  2'b00;
      assign pipe_tx2_eqdeemph_o               =  6'b000000;
      assign pipe_tx2_eqpreset_o               =  4'h0;

      assign pipe_rx3_char_is_k_o              =  2'b00;
      assign pipe_rx3_data_o                   = 32'h00000000;
      assign pipe_rx3_valid_o                  =  1'b0;
      assign pipe_rx3_data_valid_o             =  1'b0;
      assign pipe_rx3_status_o                 =  2'b00;
      assign pipe_rx3_phy_status_o             =  1'b0;
      assign pipe_rx3_elec_idle_o              =  1'b1;
      assign pipe_rx3_eqdone_o                 =  1'b0;
      assign pipe_rx3_eqlpadaptdone_o          =  1'b0;
      assign pipe_rx3_eqlplffssel_o            =  1'b0;
      assign pipe_rx3_eqlpnewtxcoefforpreset_o = 17'b00000000000000000;
      assign pipe_rx3_startblock_o             =  1'b0;
      assign pipe_rx3_syncheader_o             =  2'b00;
      assign pipe_tx3_eqcoeff_o                = 17'b00000000000000000;
      assign pipe_tx3_eqdone_o                 =  1'b0;
      assign pipe_rx3_polarity_o               =  1'b0;
      assign pipe_rx3_eqcontrol_o              =  2'b00;
      assign pipe_rx3_eqlplffs_o               =  6'b000000;
      assign pipe_rx3_eqlptxpreset_o           =  4'h0;
      assign pipe_rx3_eqpreset_o               =  3'b000;
      assign pipe_rxslide_o[3]                 =  1'b0;
      assign pipe_rxsyncdone_o[3]              =  1'b0;
      assign pipe_tx3_compliance_o             =  1'b0;
      assign pipe_tx3_char_is_k_o              =  2'b00;
      assign pipe_tx3_data_o                   = 32'h00000000;
      assign pipe_tx3_elec_idle_o              =  1'b1;
      assign pipe_tx3_powerdown_o              =  2'b00;
      assign pipe_tx3_datavalid_o              =  1'b0;
      assign pipe_tx3_startblock_o             =  1'b0;
      assign pipe_tx3_syncheader_o             =  2'b00;
      assign pipe_tx3_eqcontrol_o              =  2'b00;
      assign pipe_tx3_eqdeemph_o               =  6'b000000;
      assign pipe_tx3_eqpreset_o               =  4'h0;

    end // if !(LINK_CAP_MAX_LINK_WIDTH >= 4)

    if (LINK_CAP_MAX_LINK_WIDTH >= 8) begin : pipe_8_lane

      rp_pcie_pipe_lane # (
       .TCQ                  ( TCQ ),
       .PIPE_PIPELINE_STAGES ( PIPE_PIPELINE_STAGES )
      ) pipe_lane_4_i (

      .pipe_rx_char_is_k_o              (pipe_rx4_char_is_k_o             ),
      .pipe_rx_data_o                   (pipe_rx4_data_o                  ),
      .pipe_rx_valid_o                  (pipe_rx4_valid_o                 ),
      .pipe_rx_data_valid_o             (pipe_rx4_data_valid_o            ),
      .pipe_rx_status_o                 (pipe_rx4_status_o                ),
      .pipe_rx_phy_status_o             (pipe_rx4_phy_status_o            ),
      .pipe_rx_elec_idle_o              (pipe_rx4_elec_idle_o             ),
      .pipe_rx_eqdone_o                 (pipe_rx4_eqdone_o                ),
      .pipe_rx_eqlpadaptdone_o          (pipe_rx4_eqlpadaptdone_o         ),
      .pipe_rx_eqlplffssel_o            (pipe_rx4_eqlplffssel_o           ),
      .pipe_rx_eqlpnewtxcoefforpreset_o (pipe_rx4_eqlpnewtxcoefforpreset_o),
      .pipe_rx_startblock_o             (pipe_rx4_startblock_o            ),
      .pipe_rx_syncheader_o             (pipe_rx4_syncheader_o            ),
      .pipe_rx_polarity_i               (pipe_rx4_polarity_i              ),
      .pipe_rx_eqcontrol_i              (pipe_rx4_eqcontrol_i             ),
      .pipe_rx_eqlplffs_i               (pipe_rx4_eqlplffs_i              ),
      .pipe_rx_eqlptxpreset_i           (pipe_rx4_eqlptxpreset_i          ),
      .pipe_rx_eqpreset_i               (pipe_rx4_eqpreset_i              ),
      .pipe_rx_slide_i                  (pipe_rxslide_i[4]                ),
      .pipe_rx_syncdone_i               (pipe_rxsyncdone_i[4]             ),
      .pipe_tx_eqcoeff_o                (pipe_tx4_eqcoeff_o               ),
      .pipe_tx_eqdone_o                 (pipe_tx4_eqdone_o                ),
      .pipe_tx_compliance_i             (pipe_tx4_compliance_i            ),
      .pipe_tx_char_is_k_i              (pipe_tx4_char_is_k_i             ),
      .pipe_tx_data_i                   (pipe_tx4_data_i                  ),
      .pipe_tx_elec_idle_i              (pipe_tx4_elec_idle_i             ),
      .pipe_tx_powerdown_i              (pipe_tx4_powerdown_i             ),
      .pipe_tx_datavalid_i              (pipe_tx4_datavalid_i             ),
      .pipe_tx_startblock_i             (pipe_tx4_startblock_i            ),
      .pipe_tx_syncheader_i             (pipe_tx4_syncheader_i            ),
      .pipe_tx_eqcontrol_i              (pipe_tx4_eqcontrol_i             ),
      .pipe_tx_eqdeemph_i               (pipe_tx4_eqdeemph_i              ),
      .pipe_tx_eqpreset_i               (pipe_tx4_eqpreset_i              ),

      .pipe_rx_char_is_k_i              (pipe_rx4_char_is_k_i             ),
      .pipe_rx_data_i                   (pipe_rx4_data_i                  ),
      .pipe_rx_valid_i                  (pipe_rx4_valid_i                 ),
      .pipe_rx_data_valid_i             (pipe_rx4_data_valid_i            ),
      .pipe_rx_status_i                 (pipe_rx4_status_i                ),
      .pipe_rx_phy_status_i             (pipe_rx4_phy_status_i            ),
      .pipe_rx_elec_idle_i              (pipe_rx4_elec_idle_i             ),
      .pipe_rx_eqdone_i                 (pipe_rx4_eqdone_i                ),
      .pipe_rx_eqlpadaptdone_i          (pipe_rx4_eqlpadaptdone_i         ),
      .pipe_rx_eqlplffssel_i            (pipe_rx4_eqlplffssel_i           ),
      .pipe_rx_eqlpnewtxcoefforpreset_i (pipe_rx4_eqlpnewtxcoefforpreset_i),
      .pipe_rx_startblock_i             (pipe_rx4_startblock_i            ),
      .pipe_rx_syncheader_i             (pipe_rx4_syncheader_i            ),
      .pipe_rx_polarity_o               (pipe_rx4_polarity_o              ),
      .pipe_rx_eqcontrol_o              (pipe_rx4_eqcontrol_o             ),
      .pipe_rx_eqlplffs_o               (pipe_rx4_eqlplffs_o              ),
      .pipe_rx_eqlptxpreset_o           (pipe_rx4_eqlptxpreset_o          ),
      .pipe_rx_eqpreset_o               (pipe_rx4_eqpreset_o              ),
      .pipe_rx_slide_o                  (pipe_rxslide_o[4]                ),
      .pipe_rx_syncdone_o               (pipe_rxsyncdone_o[4]             ),
      .pipe_tx_eqcoeff_i                (pipe_tx4_eqcoeff_i               ),
      .pipe_tx_eqdone_i                 (pipe_tx4_eqdone_i                ),
      .pipe_tx_compliance_o             (pipe_tx4_compliance_o            ),
      .pipe_tx_char_is_k_o              (pipe_tx4_char_is_k_o             ),
      .pipe_tx_data_o                   (pipe_tx4_data_o                  ),
      .pipe_tx_elec_idle_o              (pipe_tx4_elec_idle_o             ),
      .pipe_tx_powerdown_o              (pipe_tx4_powerdown_o             ),
      .pipe_tx_datavalid_o              (pipe_tx4_datavalid_o             ),
      .pipe_tx_startblock_o             (pipe_tx4_startblock_o            ),
      .pipe_tx_syncheader_o             (pipe_tx4_syncheader_o            ),
      .pipe_tx_eqcontrol_o              (pipe_tx4_eqcontrol_o             ),
      .pipe_tx_eqdeemph_o               (pipe_tx4_eqdeemph_o              ),
      .pipe_tx_eqpreset_o               (pipe_tx4_eqpreset_o              ),

      .pipe_clk                         (pipe_clk                         ),
      .rst_n                            (rst_n                            )

      );

      rp_pcie_pipe_lane # (
       .TCQ                  ( TCQ ),
       .PIPE_PIPELINE_STAGES ( PIPE_PIPELINE_STAGES )
      ) pipe_lane_5_i (

      .pipe_rx_char_is_k_o              (pipe_rx5_char_is_k_o             ),
      .pipe_rx_data_o                   (pipe_rx5_data_o                  ),
      .pipe_rx_valid_o                  (pipe_rx5_valid_o                 ),
      .pipe_rx_data_valid_o             (pipe_rx5_data_valid_o            ),
      .pipe_rx_status_o                 (pipe_rx5_status_o                ),
      .pipe_rx_phy_status_o             (pipe_rx5_phy_status_o            ),
      .pipe_rx_elec_idle_o              (pipe_rx5_elec_idle_o             ),
      .pipe_rx_eqdone_o                 (pipe_rx5_eqdone_o                ),
      .pipe_rx_eqlpadaptdone_o          (pipe_rx5_eqlpadaptdone_o         ),
      .pipe_rx_eqlplffssel_o            (pipe_rx5_eqlplffssel_o           ),
      .pipe_rx_eqlpnewtxcoefforpreset_o (pipe_rx5_eqlpnewtxcoefforpreset_o),
      .pipe_rx_startblock_o             (pipe_rx5_startblock_o            ),
      .pipe_rx_syncheader_o             (pipe_rx5_syncheader_o            ),
      .pipe_rx_polarity_i               (pipe_rx5_polarity_i              ),
      .pipe_rx_eqcontrol_i              (pipe_rx5_eqcontrol_i             ),
      .pipe_rx_eqlplffs_i               (pipe_rx5_eqlplffs_i              ),
      .pipe_rx_eqlptxpreset_i           (pipe_rx5_eqlptxpreset_i          ),
      .pipe_rx_eqpreset_i               (pipe_rx5_eqpreset_i              ),
      .pipe_rx_slide_i                  (pipe_rxslide_i[5]                ),
      .pipe_rx_syncdone_i               (pipe_rxsyncdone_i[5]             ),
      .pipe_tx_eqcoeff_o                (pipe_tx5_eqcoeff_o               ),
      .pipe_tx_eqdone_o                 (pipe_tx5_eqdone_o                ),
      .pipe_tx_compliance_i             (pipe_tx5_compliance_i            ),
      .pipe_tx_char_is_k_i              (pipe_tx5_char_is_k_i             ),
      .pipe_tx_data_i                   (pipe_tx5_data_i                  ),
      .pipe_tx_elec_idle_i              (pipe_tx5_elec_idle_i             ),
      .pipe_tx_powerdown_i              (pipe_tx5_powerdown_i             ),
      .pipe_tx_datavalid_i              (pipe_tx5_datavalid_i             ),
      .pipe_tx_startblock_i             (pipe_tx5_startblock_i            ),
      .pipe_tx_syncheader_i             (pipe_tx5_syncheader_i            ),
      .pipe_tx_eqcontrol_i              (pipe_tx5_eqcontrol_i             ),
      .pipe_tx_eqdeemph_i               (pipe_tx5_eqdeemph_i              ),
      .pipe_tx_eqpreset_i               (pipe_tx5_eqpreset_i              ),

      .pipe_rx_char_is_k_i              (pipe_rx5_char_is_k_i             ),
      .pipe_rx_data_i                   (pipe_rx5_data_i                  ),
      .pipe_rx_valid_i                  (pipe_rx5_valid_i                 ),
      .pipe_rx_data_valid_i             (pipe_rx5_data_valid_i            ),
      .pipe_rx_status_i                 (pipe_rx5_status_i                ),
      .pipe_rx_phy_status_i             (pipe_rx5_phy_status_i            ),
      .pipe_rx_elec_idle_i              (pipe_rx5_elec_idle_i             ),
      .pipe_rx_eqdone_i                 (pipe_rx5_eqdone_i                ),
      .pipe_rx_eqlpadaptdone_i          (pipe_rx5_eqlpadaptdone_i         ),
      .pipe_rx_eqlplffssel_i            (pipe_rx5_eqlplffssel_i           ),
      .pipe_rx_eqlpnewtxcoefforpreset_i (pipe_rx5_eqlpnewtxcoefforpreset_i),
      .pipe_rx_startblock_i             (pipe_rx5_startblock_i            ),
      .pipe_rx_syncheader_i             (pipe_rx5_syncheader_i            ),
      .pipe_rx_polarity_o               (pipe_rx5_polarity_o              ),
      .pipe_rx_eqcontrol_o              (pipe_rx5_eqcontrol_o             ),
      .pipe_rx_eqlplffs_o               (pipe_rx5_eqlplffs_o              ),
      .pipe_rx_eqlptxpreset_o           (pipe_rx5_eqlptxpreset_o          ),
      .pipe_rx_eqpreset_o               (pipe_rx5_eqpreset_o              ),
      .pipe_rx_slide_o                  (pipe_rxslide_o[5]                ),
      .pipe_rx_syncdone_o               (pipe_rxsyncdone_o[5]             ),
      .pipe_tx_eqcoeff_i                (pipe_tx5_eqcoeff_i               ),
      .pipe_tx_eqdone_i                 (pipe_tx5_eqdone_i                ),
      .pipe_tx_compliance_o             (pipe_tx5_compliance_o            ),
      .pipe_tx_char_is_k_o              (pipe_tx5_char_is_k_o             ),
      .pipe_tx_data_o                   (pipe_tx5_data_o                  ),
      .pipe_tx_elec_idle_o              (pipe_tx5_elec_idle_o             ),
      .pipe_tx_powerdown_o              (pipe_tx5_powerdown_o             ),
      .pipe_tx_datavalid_o              (pipe_tx5_datavalid_o             ),
      .pipe_tx_startblock_o             (pipe_tx5_startblock_o            ),
      .pipe_tx_syncheader_o             (pipe_tx5_syncheader_o            ),
      .pipe_tx_eqcontrol_o              (pipe_tx5_eqcontrol_o             ),
      .pipe_tx_eqdeemph_o               (pipe_tx5_eqdeemph_o              ),
      .pipe_tx_eqpreset_o               (pipe_tx5_eqpreset_o              ),

      .pipe_clk                         (pipe_clk                         ),
      .rst_n                            (rst_n                            )

      );

      rp_pcie_pipe_lane # (
       .TCQ                  ( TCQ ),
       .PIPE_PIPELINE_STAGES ( PIPE_PIPELINE_STAGES )
      ) pipe_lane_6_i (

      .pipe_rx_char_is_k_o              (pipe_rx6_char_is_k_o             ),
      .pipe_rx_data_o                   (pipe_rx6_data_o                  ),
      .pipe_rx_valid_o                  (pipe_rx6_valid_o                 ),
      .pipe_rx_data_valid_o             (pipe_rx6_data_valid_o            ),
      .pipe_rx_status_o                 (pipe_rx6_status_o                ),
      .pipe_rx_phy_status_o             (pipe_rx6_phy_status_o            ),
      .pipe_rx_elec_idle_o              (pipe_rx6_elec_idle_o             ),
      .pipe_rx_eqdone_o                 (pipe_rx6_eqdone_o                ),
      .pipe_rx_eqlpadaptdone_o          (pipe_rx6_eqlpadaptdone_o         ),
      .pipe_rx_eqlplffssel_o            (pipe_rx6_eqlplffssel_o           ),
      .pipe_rx_eqlpnewtxcoefforpreset_o (pipe_rx6_eqlpnewtxcoefforpreset_o),
      .pipe_rx_startblock_o             (pipe_rx6_startblock_o            ),
      .pipe_rx_syncheader_o             (pipe_rx6_syncheader_o            ),
      .pipe_rx_polarity_i               (pipe_rx6_polarity_i              ),
      .pipe_rx_eqcontrol_i              (pipe_rx6_eqcontrol_i             ),
      .pipe_rx_eqlplffs_i               (pipe_rx6_eqlplffs_i              ),
      .pipe_rx_eqlptxpreset_i           (pipe_rx6_eqlptxpreset_i          ),
      .pipe_rx_eqpreset_i               (pipe_rx6_eqpreset_i              ),
      .pipe_rx_slide_i                  (pipe_rxslide_i[6]                ),
      .pipe_rx_syncdone_i               (pipe_rxsyncdone_i[6]             ),
      .pipe_tx_eqcoeff_o                (pipe_tx6_eqcoeff_o               ),
      .pipe_tx_eqdone_o                 (pipe_tx6_eqdone_o                ),
      .pipe_tx_compliance_i             (pipe_tx6_compliance_i            ),
      .pipe_tx_char_is_k_i              (pipe_tx6_char_is_k_i             ),
      .pipe_tx_data_i                   (pipe_tx6_data_i                  ),
      .pipe_tx_elec_idle_i              (pipe_tx6_elec_idle_i             ),
      .pipe_tx_powerdown_i              (pipe_tx6_powerdown_i             ),
      .pipe_tx_datavalid_i              (pipe_tx6_datavalid_i             ),
      .pipe_tx_startblock_i             (pipe_tx6_startblock_i            ),
      .pipe_tx_syncheader_i             (pipe_tx6_syncheader_i            ),
      .pipe_tx_eqcontrol_i              (pipe_tx6_eqcontrol_i             ),
      .pipe_tx_eqdeemph_i               (pipe_tx6_eqdeemph_i              ),
      .pipe_tx_eqpreset_i               (pipe_tx6_eqpreset_i              ),

      .pipe_rx_char_is_k_i              (pipe_rx6_char_is_k_i             ),
      .pipe_rx_data_i                   (pipe_rx6_data_i                  ),
      .pipe_rx_valid_i                  (pipe_rx6_valid_i                 ),
      .pipe_rx_data_valid_i             (pipe_rx6_data_valid_i            ),
      .pipe_rx_status_i                 (pipe_rx6_status_i                ),
      .pipe_rx_phy_status_i             (pipe_rx6_phy_status_i            ),
      .pipe_rx_elec_idle_i              (pipe_rx6_elec_idle_i             ),
      .pipe_rx_eqdone_i                 (pipe_rx6_eqdone_i                ),
      .pipe_rx_eqlpadaptdone_i          (pipe_rx6_eqlpadaptdone_i         ),
      .pipe_rx_eqlplffssel_i            (pipe_rx6_eqlplffssel_i           ),
      .pipe_rx_eqlpnewtxcoefforpreset_i (pipe_rx6_eqlpnewtxcoefforpreset_i),
      .pipe_rx_startblock_i             (pipe_rx6_startblock_i            ),
      .pipe_rx_syncheader_i             (pipe_rx6_syncheader_i            ),
      .pipe_rx_polarity_o               (pipe_rx6_polarity_o              ),
      .pipe_rx_eqcontrol_o              (pipe_rx6_eqcontrol_o             ),
      .pipe_rx_eqlplffs_o               (pipe_rx6_eqlplffs_o              ),
      .pipe_rx_eqlptxpreset_o           (pipe_rx6_eqlptxpreset_o          ),
      .pipe_rx_eqpreset_o               (pipe_rx6_eqpreset_o              ),
      .pipe_rx_slide_o                  (pipe_rxslide_o[6]                ),
      .pipe_rx_syncdone_o               (pipe_rxsyncdone_o[6]             ),
      .pipe_tx_eqcoeff_i                (pipe_tx6_eqcoeff_i               ),
      .pipe_tx_eqdone_i                 (pipe_tx6_eqdone_i                ),
      .pipe_tx_compliance_o             (pipe_tx6_compliance_o            ),
      .pipe_tx_char_is_k_o              (pipe_tx6_char_is_k_o             ),
      .pipe_tx_data_o                   (pipe_tx6_data_o                  ),
      .pipe_tx_elec_idle_o              (pipe_tx6_elec_idle_o             ),
      .pipe_tx_powerdown_o              (pipe_tx6_powerdown_o             ),
      .pipe_tx_datavalid_o              (pipe_tx6_datavalid_o             ),
      .pipe_tx_startblock_o             (pipe_tx6_startblock_o            ),
      .pipe_tx_syncheader_o             (pipe_tx6_syncheader_o            ),
      .pipe_tx_eqcontrol_o              (pipe_tx6_eqcontrol_o             ),
      .pipe_tx_eqdeemph_o               (pipe_tx6_eqdeemph_o              ),
      .pipe_tx_eqpreset_o               (pipe_tx6_eqpreset_o              ),

      .pipe_clk                         (pipe_clk                         ),
      .rst_n                            (rst_n                            )

      );

      rp_pcie_pipe_lane # (
       .TCQ                  ( TCQ ),
       .PIPE_PIPELINE_STAGES ( PIPE_PIPELINE_STAGES )
      ) pipe_lane_7_i (

      .pipe_rx_char_is_k_o              (pipe_rx7_char_is_k_o             ),
      .pipe_rx_data_o                   (pipe_rx7_data_o                  ),
      .pipe_rx_valid_o                  (pipe_rx7_valid_o                 ),
      .pipe_rx_data_valid_o             (pipe_rx7_data_valid_o            ),
      .pipe_rx_status_o                 (pipe_rx7_status_o                ),
      .pipe_rx_phy_status_o             (pipe_rx7_phy_status_o            ),
      .pipe_rx_elec_idle_o              (pipe_rx7_elec_idle_o             ),
      .pipe_rx_eqdone_o                 (pipe_rx7_eqdone_o                ),
      .pipe_rx_eqlpadaptdone_o          (pipe_rx7_eqlpadaptdone_o         ),
      .pipe_rx_eqlplffssel_o            (pipe_rx7_eqlplffssel_o           ),
      .pipe_rx_eqlpnewtxcoefforpreset_o (pipe_rx7_eqlpnewtxcoefforpreset_o),
      .pipe_rx_startblock_o             (pipe_rx7_startblock_o            ),
      .pipe_rx_syncheader_o             (pipe_rx7_syncheader_o            ),
      .pipe_rx_polarity_i               (pipe_rx7_polarity_i              ),
      .pipe_rx_eqcontrol_i              (pipe_rx7_eqcontrol_i             ),
      .pipe_rx_eqlplffs_i               (pipe_rx7_eqlplffs_i              ),
      .pipe_rx_eqlptxpreset_i           (pipe_rx7_eqlptxpreset_i          ),
      .pipe_rx_eqpreset_i               (pipe_rx7_eqpreset_i              ),
      .pipe_rx_slide_i                  (pipe_rxslide_i[7]                ),
      .pipe_rx_syncdone_i               (pipe_rxsyncdone_i[7]             ),
      .pipe_tx_eqcoeff_o                (pipe_tx7_eqcoeff_o               ),
      .pipe_tx_eqdone_o                 (pipe_tx7_eqdone_o                ),
      .pipe_tx_compliance_i             (pipe_tx7_compliance_i            ),
      .pipe_tx_char_is_k_i              (pipe_tx7_char_is_k_i             ),
      .pipe_tx_data_i                   (pipe_tx7_data_i                  ),
      .pipe_tx_elec_idle_i              (pipe_tx7_elec_idle_i             ),
      .pipe_tx_powerdown_i              (pipe_tx7_powerdown_i             ),
      .pipe_tx_datavalid_i              (pipe_tx7_datavalid_i             ),
      .pipe_tx_startblock_i             (pipe_tx7_startblock_i            ),
      .pipe_tx_syncheader_i             (pipe_tx7_syncheader_i            ),
      .pipe_tx_eqcontrol_i              (pipe_tx7_eqcontrol_i             ),
      .pipe_tx_eqdeemph_i               (pipe_tx7_eqdeemph_i              ),
      .pipe_tx_eqpreset_i               (pipe_tx7_eqpreset_i              ),

      .pipe_rx_char_is_k_i              (pipe_rx7_char_is_k_i             ),
      .pipe_rx_data_i                   (pipe_rx7_data_i                  ),
      .pipe_rx_valid_i                  (pipe_rx7_valid_i                 ),
      .pipe_rx_data_valid_i             (pipe_rx7_data_valid_i            ),
      .pipe_rx_status_i                 (pipe_rx7_status_i                ),
      .pipe_rx_phy_status_i             (pipe_rx7_phy_status_i            ),
      .pipe_rx_elec_idle_i              (pipe_rx7_elec_idle_i             ),
      .pipe_rx_eqdone_i                 (pipe_rx7_eqdone_i                ),
      .pipe_rx_eqlpadaptdone_i          (pipe_rx7_eqlpadaptdone_i         ),
      .pipe_rx_eqlplffssel_i            (pipe_rx7_eqlplffssel_i           ),
      .pipe_rx_eqlpnewtxcoefforpreset_i (pipe_rx7_eqlpnewtxcoefforpreset_i),
      .pipe_rx_startblock_i             (pipe_rx7_startblock_i            ),
      .pipe_rx_syncheader_i             (pipe_rx7_syncheader_i            ),
      .pipe_rx_polarity_o               (pipe_rx7_polarity_o              ),
      .pipe_rx_eqcontrol_o              (pipe_rx7_eqcontrol_o             ),
      .pipe_rx_eqlplffs_o               (pipe_rx7_eqlplffs_o              ),
      .pipe_rx_eqlptxpreset_o           (pipe_rx7_eqlptxpreset_o          ),
      .pipe_rx_slide_o                  (pipe_rxslide_o[7]                ),
      .pipe_rx_syncdone_o               (pipe_rxsyncdone_o[7]             ),
      .pipe_rx_eqpreset_o               (pipe_rx7_eqpreset_o              ),
      .pipe_tx_eqcoeff_i                (pipe_tx7_eqcoeff_i               ),
      .pipe_tx_eqdone_i                 (pipe_tx7_eqdone_i                ),
      .pipe_tx_compliance_o             (pipe_tx7_compliance_o            ),
      .pipe_tx_char_is_k_o              (pipe_tx7_char_is_k_o             ),
      .pipe_tx_data_o                   (pipe_tx7_data_o                  ),
      .pipe_tx_elec_idle_o              (pipe_tx7_elec_idle_o             ),
      .pipe_tx_powerdown_o              (pipe_tx7_powerdown_o             ),
      .pipe_tx_datavalid_o              (pipe_tx7_datavalid_o             ),
      .pipe_tx_startblock_o             (pipe_tx7_startblock_o            ),
      .pipe_tx_syncheader_o             (pipe_tx7_syncheader_o            ),
      .pipe_tx_eqcontrol_o              (pipe_tx7_eqcontrol_o             ),
      .pipe_tx_eqdeemph_o               (pipe_tx7_eqdeemph_o              ),
      .pipe_tx_eqpreset_o               (pipe_tx7_eqpreset_o              ),

      .pipe_clk                         (pipe_clk                         ),
      .rst_n                            (rst_n                            )

      );

    end // if (LINK_CAP_MAX_LINK_WIDTH >= 8)
    else
    begin
      assign pipe_rx4_char_is_k_o              =  2'b00;
      assign pipe_rx4_data_o                   = 32'h00000000;
      assign pipe_rx4_valid_o                  =  1'b0;
      assign pipe_rx4_data_valid_o             =  1'b0;
      assign pipe_rx4_status_o                 =  2'b00;
      assign pipe_rx4_phy_status_o             =  1'b0;
      assign pipe_rx4_elec_idle_o              =  1'b1;
      assign pipe_rx4_eqdone_o                 =  1'b0;
      assign pipe_rx4_eqlpadaptdone_o          =  1'b0;
      assign pipe_rx4_eqlplffssel_o            =  1'b0;
      assign pipe_rx4_eqlpnewtxcoefforpreset_o = 17'b00000000000000000;
      assign pipe_rx4_startblock_o             =  1'b0;
      assign pipe_rx4_syncheader_o             =  2'b00;
      assign pipe_tx4_eqcoeff_o                = 17'b00000000000000000;
      assign pipe_tx4_eqdone_o                 =  1'b0;
      assign pipe_rx4_polarity_o               =  1'b0;
      assign pipe_rx4_eqcontrol_o              =  2'b00;
      assign pipe_rx4_eqlplffs_o               =  6'b000000;
      assign pipe_rx4_eqlptxpreset_o           =  4'h0;
      assign pipe_rx4_eqpreset_o               =  3'b000;
      assign pipe_rxslide_o[4]                 =  1'b0;
      assign pipe_rxsyncdone_o[4]              =  1'b0;
      assign pipe_tx4_compliance_o             =  1'b0;
      assign pipe_tx4_char_is_k_o              =  2'b00;
      assign pipe_tx4_data_o                   = 32'h00000000;
      assign pipe_tx4_elec_idle_o              =  1'b1;
      assign pipe_tx4_powerdown_o              =  2'b00;
      assign pipe_tx4_datavalid_o              =  1'b0;
      assign pipe_tx4_startblock_o             =  1'b0;
      assign pipe_tx4_syncheader_o             =  2'b00;
      assign pipe_tx4_eqcontrol_o              =  2'b00;
      assign pipe_tx4_eqdeemph_o               =  6'b000000;
      assign pipe_tx4_eqpreset_o               =  4'h0;

      assign pipe_rx5_char_is_k_o              =  2'b00;
      assign pipe_rx5_data_o                   = 32'h00000000;
      assign pipe_rx5_valid_o                  =  1'b0;
      assign pipe_rx5_data_valid_o             =  1'b0;
      assign pipe_rx5_status_o                 =  2'b00;
      assign pipe_rx5_phy_status_o             =  1'b0;
      assign pipe_rx5_elec_idle_o              =  1'b1;
      assign pipe_rx5_eqdone_o                 =  1'b0;
      assign pipe_rx5_eqlpadaptdone_o          =  1'b0;
      assign pipe_rx5_eqlplffssel_o            =  1'b0;
      assign pipe_rx5_eqlpnewtxcoefforpreset_o = 17'b00000000000000000;
      assign pipe_rx5_startblock_o             =  1'b0;
      assign pipe_rx5_syncheader_o             =  2'b00;
      assign pipe_tx5_eqcoeff_o                = 17'b00000000000000000;
      assign pipe_tx5_eqdone_o                 =  1'b0;
      assign pipe_rx5_polarity_o               =  1'b0;
      assign pipe_rx5_eqcontrol_o              =  2'b00;
      assign pipe_rx5_eqlplffs_o               =  6'b000000;
      assign pipe_rx5_eqlptxpreset_o           =  4'h0;
      assign pipe_rx5_eqpreset_o               =  3'b000;
      assign pipe_rxslide_o[5]                 =  1'b0;
      assign pipe_rxsyncdone_o[5]              =  1'b0;
      assign pipe_tx5_compliance_o             =  1'b0;
      assign pipe_tx5_char_is_k_o              =  2'b00;
      assign pipe_tx5_data_o                   = 32'h00000000;
      assign pipe_tx5_elec_idle_o              =  1'b1;
      assign pipe_tx5_powerdown_o              =  2'b00;
      assign pipe_tx5_datavalid_o              =  1'b0;
      assign pipe_tx5_startblock_o             =  1'b0;
      assign pipe_tx5_syncheader_o             =  2'b00;
      assign pipe_tx5_eqcontrol_o              =  2'b00;
      assign pipe_tx5_eqdeemph_o               =  6'b000000;
      assign pipe_tx5_eqpreset_o               =  4'h0;

      assign pipe_rx6_char_is_k_o              =  2'b00;
      assign pipe_rx6_data_o                   = 32'h00000000;
      assign pipe_rx6_valid_o                  =  1'b0;
      assign pipe_rx6_data_valid_o             =  1'b0;
      assign pipe_rx6_status_o                 =  2'b00;
      assign pipe_rx6_phy_status_o             =  1'b0;
      assign pipe_rx6_elec_idle_o              =  1'b1;
      assign pipe_rx6_eqdone_o                 =  1'b0;
      assign pipe_rx6_eqlpadaptdone_o          =  1'b0;
      assign pipe_rx6_eqlplffssel_o            =  1'b0;
      assign pipe_rx6_eqlpnewtxcoefforpreset_o = 17'b00000000000000000;
      assign pipe_rx6_startblock_o             =  1'b0;
      assign pipe_rx6_syncheader_o             =  2'b00;
      assign pipe_tx6_eqcoeff_o                = 17'b00000000000000000;
      assign pipe_tx6_eqdone_o                 =  1'b0;
      assign pipe_rx6_polarity_o               =  1'b0;
      assign pipe_rx6_eqcontrol_o              =  2'b00;
      assign pipe_rx6_eqlplffs_o               =  6'b000000;
      assign pipe_rx6_eqlptxpreset_o           =  4'h0;
      assign pipe_rx6_eqpreset_o               =  3'b000;
      assign pipe_rxslide_o[6]                 =  1'b0;
      assign pipe_rxsyncdone_o[6]              =  1'b0;
      assign pipe_tx6_compliance_o             =  1'b0;
      assign pipe_tx6_char_is_k_o              =  2'b00;
      assign pipe_tx6_data_o                   = 32'h00000000;
      assign pipe_tx6_elec_idle_o              =  1'b1;
      assign pipe_tx6_powerdown_o              =  2'b00;
      assign pipe_tx6_datavalid_o              =  1'b0;
      assign pipe_tx6_startblock_o             =  1'b0;
      assign pipe_tx6_syncheader_o             =  2'b00;
      assign pipe_tx6_eqcontrol_o              =  2'b00;
      assign pipe_tx6_eqdeemph_o               =  6'b000000;
      assign pipe_tx6_eqpreset_o               =  4'h0;

      assign pipe_rx7_char_is_k_o              =  2'b00;
      assign pipe_rx7_data_o                   = 32'h00000000;
      assign pipe_rx7_valid_o                  =  1'b0;
      assign pipe_rx7_data_valid_o             =  1'b0;
      assign pipe_rx7_status_o                 =  2'b00;
      assign pipe_rx7_phy_status_o             =  1'b0;
      assign pipe_rx7_elec_idle_o              =  1'b1;
      assign pipe_rx7_eqdone_o                 =  1'b0;
      assign pipe_rx7_eqlpadaptdone_o          =  1'b0;
      assign pipe_rx7_eqlplffssel_o            =  1'b0;
      assign pipe_rx7_eqlpnewtxcoefforpreset_o = 17'b00000000000000000;
      assign pipe_rx7_startblock_o             =  1'b0;
      assign pipe_rx7_syncheader_o             =  2'b00;
      assign pipe_rxslide_o[7]                 =  1'b0;
      assign pipe_rxsyncdone_o[7]              =  1'b0;
      assign pipe_tx7_eqcoeff_o                = 17'b00000000000000000;
      assign pipe_tx7_eqdone_o                 =  1'b0;
      assign pipe_rx7_polarity_o               =  1'b0;
      assign pipe_rx7_eqcontrol_o              =  2'b00;
      assign pipe_rx7_eqlplffs_o               =  6'b000000;
      assign pipe_rx7_eqlptxpreset_o           =  4'h0;
      assign pipe_rx7_eqpreset_o               =  3'b000;
      assign pipe_tx7_compliance_o             =  1'b0;
      assign pipe_tx7_char_is_k_o              =  2'b00;
      assign pipe_tx7_data_o                   = 32'h00000000;
      assign pipe_tx7_elec_idle_o              =  1'b1;
      assign pipe_tx7_powerdown_o              =  2'b00;
      assign pipe_tx7_datavalid_o              =  1'b0;
      assign pipe_tx7_startblock_o             =  1'b0;
      assign pipe_tx7_syncheader_o             =  2'b00;
      assign pipe_tx7_eqcontrol_o              =  2'b00;
      assign pipe_tx7_eqdeemph_o               =  6'b000000;
      assign pipe_tx7_eqpreset_o               =  4'h0;


    end // if !(LINK_CAP_MAX_LINK_WIDTH >= 8)

  endgenerate

endmodule

//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pcie_tlp_tph_tbl_7vx.v
// Version    : 4.0
//----------------------------------------------------------------------------//
// Project      : Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
// Filename     : rp_pcie_tlp_tph_tbl_7vx.v                                      //
// Description  : Implements the TLP TPH Processing Hints Table for the       //
//                Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
//---------- PIPE Wrapper Hierarchy ------------------------------------------//
//  pcie_tlp_tph_tbl_7vx.v                                                    //
//----------------------------------------------------------------------------//

`timescale 1ps/1ps

module rp_pcie_tlp_tph_tbl_7vx #
(
  parameter TCQ =  100
) (
  input         user_clk,                       // User Clock
  input         reset_n,                        // Warm, Hot Reset, active low

  input   [4:0] cfg_tph_stt_address_i,          // Address
  input   [2:0] cfg_tph_function_num_i,         // Function #
  input  [31:0] cfg_tph_stt_write_data_i,	      // Write Data
  input         cfg_tph_stt_write_enable_i,	    // Write Data Enable
  input   [3:0] cfg_tph_stt_write_byte_valid_i, // WBE
  output [31:0] cfg_tph_stt_read_data_o,        // Read Data
  input         cfg_tph_stt_read_enable_i,      // Read Data Enable
  output        cfg_tph_stt_read_data_valid_o,	// Read Data Valid

  input   [4:0] user_tph_stt_address_i,         // Address
  input   [2:0] user_tph_function_num_i,        // Function #
  input         user_tph_stt_read_enable_i,     // Read Enable
  output [31:0] user_tph_stt_read_data_o,       // Read Data
  output        user_tph_stt_read_data_valid_o  // Read Data Valid

);



  // Local Registers

  reg                 reg_cfg_tph_stt_read_data_valid_o;
  reg                 reg_user_tph_stt_read_data_valid_o;
  reg [7:0]           reg_count;
  reg                 reg_state = 1'b0; // on cold reset
  reg                 reg_next_state = 1'b0; // on cold reset
  reg                 reg_web;
  reg                 reg_cfg_tph_stt_read_enable_i;
  reg                 reg_user_tph_stt_read_enable_i;

  // Local Wires

  wire                N0, N1;
  wire  [3:0]         wea;
  wire                web;
  wire  [7:0]         addra, addrb;
  wire [31:0]         dina;
  wire [31:0]         dinb;
  wire  [7:0]         count_w;
  wire                ram_scrub_in_process_w;
  wire                state_w;
  wire                next_state_w;
  wire [31:0]         douta;
  wire [31:0]         doutb;

  // cfg_tph_stt_read_data_valid_o generation
  always @ (posedge user_clk or negedge reset_n) begin

    if (!reset_n) begin
      reg_cfg_tph_stt_read_data_valid_o   <= #TCQ 1'b0;
      reg_cfg_tph_stt_read_enable_i       <= #TCQ 1'b0;
    end else begin
      if (cfg_tph_stt_read_enable_i && reg_cfg_tph_stt_read_enable_i &&
          !reg_cfg_tph_stt_read_data_valid_o && !ram_scrub_in_process_w) begin
        reg_cfg_tph_stt_read_data_valid_o <= #TCQ 1'b1;
      end else begin
        reg_cfg_tph_stt_read_data_valid_o <= #TCQ 1'b0;
      end
      reg_cfg_tph_stt_read_enable_i       <= #TCQ cfg_tph_stt_read_enable_i;
    end
  end

  // user_tph_stt_read_data_valid_o generation
  always @ (posedge user_clk or negedge reset_n) begin

    if (!reset_n) begin
      reg_user_tph_stt_read_data_valid_o    <= #TCQ 1'b0;
      reg_user_tph_stt_read_enable_i       <= #TCQ 1'b0;
    end else begin
      if (user_tph_stt_read_enable_i && reg_user_tph_stt_read_enable_i &&
          !reg_user_tph_stt_read_data_valid_o && !ram_scrub_in_process_w) begin
        reg_user_tph_stt_read_data_valid_o <= #TCQ 1'b1;
      end else begin
        reg_user_tph_stt_read_data_valid_o <= #TCQ 1'b0;
      end
      reg_user_tph_stt_read_enable_i       <= #TCQ user_tph_stt_read_enable_i;
    end
  end

  // RAM scrub

  always @ (posedge user_clk) begin

    reg_state <= #(TCQ) next_state_w;

    if (state_w) begin
      reg_count <= #(TCQ) count_w + 1'b1;
    end else begin
      reg_count <= #(TCQ) 8'b0;
    end
  end

  always @ ( * ) begin

    case(state_w)

      1'b0 :
      begin
        if (!reset_n) begin
          reg_next_state = 1'b1;
        end else begin
          reg_next_state = 1'b0;
        end
      end

      1'b1 :
      begin
        if (count_w == 8'hFF) begin
          reg_next_state = 1'b0;
        end else begin
          reg_next_state = 1'b1;
        end
      end
    endcase
  end

  RAMB36E1 #(
    .DOA_REG ( 1 ),
    .DOB_REG ( 0 ),
    .EN_ECC_READ ( "FALSE" ),
    .EN_ECC_WRITE ( "FALSE" ),
    .INITP_00 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INITP_01 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INITP_02 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INITP_03 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INITP_04 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INITP_05 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INITP_06 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INITP_07 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INITP_08 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INITP_09 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INITP_0A ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INITP_0B ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INITP_0C ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INITP_0D ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INITP_0E ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INITP_0F ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_00 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_01 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_02 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_03 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_04 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_05 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_06 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_07 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_08 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_09 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_0A ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_0B ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_0C ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_0D ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_0E ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_0F ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_10 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_11 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_12 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_13 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_14 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_15 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_16 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_17 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_18 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_19 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_1A ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_1B ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_1C ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_1D ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_1E ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_1F ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_20 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_21 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_22 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_23 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_24 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_25 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_26 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_27 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_28 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_29 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_2A ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_2B ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_2C ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_2D ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_2E ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_2F ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_30 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_31 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_32 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_33 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_34 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_35 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_36 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_37 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_38 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_39 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_3A ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_3B ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_3C ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_3D ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_3E ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_3F ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_40 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_41 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_42 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_43 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_44 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_45 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_46 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_47 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_48 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_49 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_4A ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_4B ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_4C ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_4D ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_4E ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_4F ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_50 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_51 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_52 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_53 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_54 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_55 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_56 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_57 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_58 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_59 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_5A ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_5B ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_5C ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_5D ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_5E ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_5F ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_60 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_61 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_62 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_63 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_64 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_65 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_66 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_67 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_68 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_69 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_6A ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_6B ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_6C ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_6D ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_6E ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_6F ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_70 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_71 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_72 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_73 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_74 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_75 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_76 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_77 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_78 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_79 ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_7A ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_7B ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_7C ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_7D ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_7E ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_7F ( 256'h0000000000000000000000000000000000000000000000000000000000000000 ),
    .INIT_A ( 36'h000000000 ),
    .INIT_B ( 36'h000000000 ),
    .INIT_FILE ( "NONE" ),
    .RAM_EXTENSION_A ( "NONE" ),
    .RAM_EXTENSION_B ( "NONE" ),
    .RAM_MODE ( "TDP" ),
    .RDADDR_COLLISION_HWCONFIG ( "DELAYED_WRITE" ),
    .READ_WIDTH_A ( 36 ),
    .READ_WIDTH_B ( 36 ),
    .RSTREG_PRIORITY_A ( "REGCE" ),
    .RSTREG_PRIORITY_B ( "REGCE" ),
    .SIM_COLLISION_CHECK ( "GENERATE_X_ONLY" ),
    .SIM_DEVICE ( "7SERIES" ),
    .SRVAL_A ( 36'h000000000 ),
    .SRVAL_B ( 36'h000000000 ),
    .WRITE_MODE_A ( "WRITE_FIRST" ),
    .WRITE_MODE_B ( "WRITE_FIRST" ),
    .WRITE_WIDTH_A ( 36 ),
    .WRITE_WIDTH_B ( 36 ))
  u_ram  (
    .CASCADEINA(N1),
    .CASCADEINB(N1),
    .CASCADEOUTA () ,
    .CASCADEOUTB () ,
    .CLKARDCLK(user_clk),
    .CLKBWRCLK(user_clk),
    .DBITERR ( ) ,
    .ENARDEN(N0),
    .ENBWREN(N0),
    .INJECTDBITERR(N1),
    .INJECTSBITERR(N1),
    .REGCEAREGCE(N0),
    .REGCEB(N1),
    .RSTRAMARSTRAM(N1),
    .RSTRAMB(N1),
    .RSTREGARSTREG(N1),
    .RSTREGB(N1),
    .SBITERR ( ) ,
    .ADDRARDADDR({N0, N1, N1, addra[7:0], N1, N1, N1, N1, N1}),
    .ADDRBWRADDR({N0, N1, N1, addrb[7:0], N1, N1, N1, N1, N1}),
    .DIADI({dina[31:0]}),
    .DIBDI({dinb[31:0]}),
    .DIPADIP({N1, N1, N1, N1}),
    .DIPBDIP({N1, N1, N1, N1}),
    .DOADO({douta[31:0]}),
    .DOBDO({doutb[31:0]}),
    .DOPADOP(),
    .DOPBDOP(),
    .ECCPARITY(),
    .RDADDRECC(),
    .WEA(wea[3:0]),
    .WEBWE({N1, N1, N1, N1, web, web, web, web})
  );

  assign addra                          = {cfg_tph_function_num_i, cfg_tph_stt_address_i};
  assign dina                           = cfg_tph_stt_write_data_i;
  assign wea[3]                         = cfg_tph_stt_write_enable_i && cfg_tph_stt_write_byte_valid_i[3];
  assign wea[2]                         = cfg_tph_stt_write_enable_i && cfg_tph_stt_write_byte_valid_i[2];
  assign wea[1]                         = cfg_tph_stt_write_enable_i && cfg_tph_stt_write_byte_valid_i[1];
  assign wea[0]                         = cfg_tph_stt_write_enable_i && cfg_tph_stt_write_byte_valid_i[0];
  assign cfg_tph_stt_read_data_o        = douta;
  assign cfg_tph_stt_read_data_valid_o  = reg_cfg_tph_stt_read_data_valid_o;
  assign N0                             = 1'b1;
  assign N1                             = 1'b0;
  assign ram_scrub_in_process_w         = state_w;
  assign count_w                        = reg_count;
  assign state_w                        = reg_state;
  assign next_state_w                   = reg_next_state;
  assign dinb                           = 32'b0;
  assign web                            = reg_next_state;
  assign user_tph_stt_read_data_o       = doutb;
  assign user_tph_stt_read_data_valid_o = reg_user_tph_stt_read_data_valid_o;
  assign addrb                          = ram_scrub_in_process_w ? count_w : {user_tph_function_num_i, user_tph_stt_address_i};

endmodule // pcie_tlp_tph_tbl_7vx
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pcie_top.v
// Version    : 4.0
//----------------------------------------------------------------------------//
// Project      : Virtex-7 FPGA Gen3 Integrated Block for PCI Express         //
// Filename     : rp_pcie_top.v                                                  //
// Description  : Instantiates GEN3 PCIe Integrated Block Wrapper and         //
//                connects the IP to the PIPE Interface Pipeline module, the  //
//                PCIe Initialization Controller, and the TPH Table           //
//                implemented in a RAMB36                                     //
//---------- PIPE Wrapper Hierarchy ------------------------------------------//
//      pcie_top.v                                                            //
//          pcie_init_ctrl.v                                                  //
//          pcie_tlp_tph_tbl_7vx.v                                            //
//          pcie_7vx.v                                                        //
//              PCIE_3_0                                                      //
//              pcie_bram_7vx.v                                               //
//                  pcie_bram_7vx_rep.v                                       //
//                      pcie_bram_7vx_rep_8k.v                                //
//                  pcie_bram_7vx_req.v                                       //
//                      pcie_bram_7vx_8k.v                                    //
//                  pcie_bram_7vx_cpl.v                                       //
//                      pcie_bram_7vx_8k.v                                    //
//                      pcie_bram_7vx_16k.v                                   //
//          pcie_pipe_pipeline.v                                              //
//              pcie_pipe_lane.v                                              //
//              pcie_pipe_misc.v                                              //
//----------------------------------------------------------------------------//

`timescale 1ps/1ps

module axi_pcie3_0_pcie_top #
(
  parameter         TCQ = 100,
  parameter         PIPE_SIM_MODE = "FALSE",
  parameter         PIPE_PIPELINE_STAGES = 0,
  parameter         ARI_CAP_ENABLE = "FALSE",
  parameter         AXISTEN_IF_CC_ALIGNMENT_MODE = "FALSE",
  parameter         AXISTEN_IF_CC_PARITY_CHK = "TRUE",
  parameter         AXISTEN_IF_CQ_ALIGNMENT_MODE = "FALSE",
  parameter         AXISTEN_IF_ENABLE_CLIENT_TAG = "FALSE",
  parameter [17:0]  AXISTEN_IF_ENABLE_MSG_ROUTE = 18'h00000,
  parameter         AXISTEN_IF_ENABLE_RX_MSG_INTFC = "FALSE",
  parameter         AXISTEN_IF_RC_ALIGNMENT_MODE = "FALSE",
  parameter         AXISTEN_IF_RC_STRADDLE = "FALSE",
  parameter         AXISTEN_IF_RQ_ALIGNMENT_MODE = "FALSE",
  parameter         AXISTEN_IF_RQ_PARITY_CHK = "TRUE",
  parameter  [1:0]  AXISTEN_IF_WIDTH = 2'h2,
  parameter         C_DATA_WIDTH       = 256,
  parameter         CRM_CORE_CLK_FREQ_500 = "TRUE",
  parameter  [1:0]  CRM_USER_CLK_FREQ = 2'h2,
  parameter  [7:0]  DNSTREAM_LINK_NUM = 8'h00,
  parameter  [1:0]  GEN3_PCS_AUTO_REALIGN = 2'h1,
  parameter         GEN3_PCS_RX_ELECIDLE_INTERNAL = "TRUE",
  parameter         KEEP_WIDTH = C_DATA_WIDTH / 32,
  parameter  [8:0]  LL_ACK_TIMEOUT = 9'h000,
  parameter         LL_ACK_TIMEOUT_EN = "FALSE",
  parameter integer LL_ACK_TIMEOUT_FUNC = 0,
  parameter [15:0]  LL_CPL_FC_UPDATE_TIMER = 16'h0000,
  parameter         LL_CPL_FC_UPDATE_TIMER_OVERRIDE = "FALSE",
  parameter [15:0]  LL_FC_UPDATE_TIMER = 16'h0000,
  parameter         LL_FC_UPDATE_TIMER_OVERRIDE = "FALSE",
  parameter [15:0]  LL_NP_FC_UPDATE_TIMER = 16'h0000,
  parameter         LL_NP_FC_UPDATE_TIMER_OVERRIDE = "FALSE",
  parameter [15:0]  LL_P_FC_UPDATE_TIMER = 16'h0000,
  parameter         LL_P_FC_UPDATE_TIMER_OVERRIDE = "FALSE",
  parameter  [8:0]  LL_REPLAY_TIMEOUT = 9'h000,
  parameter         LL_REPLAY_TIMEOUT_EN = "FALSE",
  parameter integer LL_REPLAY_TIMEOUT_FUNC = 0,
  parameter  [9:0]  LTR_TX_MESSAGE_MINIMUM_INTERVAL = 10'h0FA,
  parameter         LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE = "FALSE",
  parameter         LTR_TX_MESSAGE_ON_LTR_ENABLE = "FALSE",
  parameter         PF0_AER_CAP_ECRC_CHECK_CAPABLE = "FALSE",
  parameter         PF0_AER_CAP_ECRC_GEN_CAPABLE = "FALSE",
  parameter [11:0]  PF0_AER_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  PF0_ARI_CAP_NEXTPTR = 12'h000,
  parameter  [7:0]  PF0_ARI_CAP_NEXT_FUNC = 8'h00,
  parameter  [3:0]  PF0_ARI_CAP_VER = 4'h1,
  parameter  [4:0]  PF0_BAR0_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR0_CONTROL = 3'h4,
  parameter  [4:0]  PF0_BAR1_APERTURE_SIZE = 5'h00,
  parameter  [2:0]  PF0_BAR1_CONTROL = 3'h0,
  parameter  [4:0]  PF0_BAR2_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR2_CONTROL = 3'h4,
  parameter  [4:0]  PF0_BAR3_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR3_CONTROL = 3'h0,
  parameter  [4:0]  PF0_BAR4_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR4_CONTROL = 3'h4,
  parameter  [4:0]  PF0_BAR5_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_BAR5_CONTROL = 3'h0,
  parameter  [7:0]  PF0_BIST_REGISTER = 8'h00,
  parameter  [7:0]  PF0_CAPABILITY_POINTER = 8'h50,
  parameter [23:0]  PF0_CLASS_CODE = 24'h000000,
  parameter [15:0]  PF0_DEVICE_ID = 16'h0000,
  parameter         PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT = "TRUE",
  parameter         PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT = "TRUE",
  parameter         PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT = "TRUE",
  parameter         PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE = "TRUE",
  parameter         PF0_DEV_CAP2_LTR_SUPPORT = "TRUE",
  parameter  [1:0]  PF0_DEV_CAP2_OBFF_SUPPORT = 2'h0,
  parameter         PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT = "FALSE",
  parameter integer PF0_DEV_CAP_ENDPOINT_L0S_LATENCY = 0,
  parameter integer PF0_DEV_CAP_ENDPOINT_L1_LATENCY = 0,
  parameter         PF0_DEV_CAP_EXT_TAG_SUPPORTED = "TRUE",
  parameter         PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE = "TRUE",
  parameter  [2:0]  PF0_DEV_CAP_MAX_PAYLOAD_SIZE = 3'h3,
  parameter [11:0]  PF0_DPA_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF0_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF1_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF2_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF3_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF4_ARI_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  VF5_ARI_CAP_NEXTPTR = 12'h000,
  parameter VF0_TPHR_CAP_DEV_SPECIFIC_MODE = "TRUE",
  parameter VF0_TPHR_CAP_ENABLE = "FALSE",
  parameter VF0_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0] VF0_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0] VF0_TPHR_CAP_ST_MODE_SEL = 3'h0,
  parameter [1:0] VF0_TPHR_CAP_ST_TABLE_LOC = 2'h0,
  parameter [10:0] VF0_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0] VF0_TPHR_CAP_VER = 4'h1,
  parameter VF1_TPHR_CAP_DEV_SPECIFIC_MODE = "TRUE",
  parameter VF1_TPHR_CAP_ENABLE = "FALSE",
  parameter VF1_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0] VF1_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0] VF1_TPHR_CAP_ST_MODE_SEL = 3'h0,
  parameter [1:0] VF1_TPHR_CAP_ST_TABLE_LOC = 2'h0,
  parameter [10:0] VF1_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0] VF1_TPHR_CAP_VER = 4'h1,
  parameter VF2_TPHR_CAP_DEV_SPECIFIC_MODE = "TRUE",
  parameter VF2_TPHR_CAP_ENABLE = "FALSE",
  parameter VF2_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0] VF2_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0] VF2_TPHR_CAP_ST_MODE_SEL = 3'h0,
  parameter [1:0] VF2_TPHR_CAP_ST_TABLE_LOC = 2'h0,
  parameter [10:0] VF2_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0] VF2_TPHR_CAP_VER = 4'h1,
  parameter VF3_TPHR_CAP_DEV_SPECIFIC_MODE = "TRUE",
  parameter VF3_TPHR_CAP_ENABLE = "FALSE",
  parameter VF3_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0] VF3_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0] VF3_TPHR_CAP_ST_MODE_SEL = 3'h0,
  parameter [1:0] VF3_TPHR_CAP_ST_TABLE_LOC = 2'h0,
  parameter [10:0] VF3_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0] VF3_TPHR_CAP_VER = 4'h1,
  parameter VF4_TPHR_CAP_DEV_SPECIFIC_MODE = "TRUE",
  parameter VF4_TPHR_CAP_ENABLE = "FALSE",
  parameter VF4_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0] VF4_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0] VF4_TPHR_CAP_ST_MODE_SEL = 3'h0,
  parameter [1:0] VF4_TPHR_CAP_ST_TABLE_LOC = 2'h0,
  parameter [10:0] VF4_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0] VF4_TPHR_CAP_VER = 4'h1,
  parameter VF5_TPHR_CAP_DEV_SPECIFIC_MODE = "TRUE",
  parameter VF5_TPHR_CAP_ENABLE = "FALSE",
  parameter VF5_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0] VF5_TPHR_CAP_NEXTPTR = 12'h000,
  parameter [2:0] VF5_TPHR_CAP_ST_MODE_SEL = 3'h0,
  parameter [1:0] VF5_TPHR_CAP_ST_TABLE_LOC = 2'h0,
  parameter [10:0] VF5_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter [3:0] VF5_TPHR_CAP_VER = 4'h1,
  parameter  [4:0]  PF0_DPA_CAP_SUB_STATE_CONTROL = 5'h00,
  parameter         PF0_DPA_CAP_SUB_STATE_CONTROL_EN = "TRUE",
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 = 8'h00,
  parameter  [7:0]  PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 = 8'h00,
  parameter  [3:0]  PF0_DPA_CAP_VER = 4'h1,
  parameter [11:0]  PF0_DSN_CAP_NEXTPTR = 12'h10C,
  parameter  [4:0]  PF0_EXPANSION_ROM_APERTURE_SIZE = 5'h03,
  parameter         PF0_EXPANSION_ROM_ENABLE = "FALSE",
  parameter  [7:0]  PF0_INTERRUPT_LINE = 8'h00,
  parameter  [2:0]  PF0_INTERRUPT_PIN = 3'h1,
  parameter integer PF0_LINK_CAP_ASPM_SUPPORT = 0,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2 = 7,
  parameter integer PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2 = 7,
  parameter integer PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3 = 7,
  parameter         PF0_LINK_STATUS_SLOT_CLOCK_CONFIG = "TRUE",
  parameter  [9:0]  PF0_LTR_CAP_MAX_NOSNOOP_LAT = 10'h000,
  parameter  [9:0]  PF0_LTR_CAP_MAX_SNOOP_LAT = 10'h000,
  parameter [11:0]  PF0_LTR_CAP_NEXTPTR = 12'h000,
  parameter  [3:0]  PF0_LTR_CAP_VER = 4'h1,
  parameter  [7:0]  PF0_MSIX_CAP_NEXTPTR = 8'h00,
  parameter integer PF0_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  PF0_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer PF0_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  PF0_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  PF0_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer PF0_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  PF0_MSI_CAP_NEXTPTR = 8'h00,
  parameter [11:0]  PF0_PB_CAP_NEXTPTR = 12'h000,
  parameter         PF0_PB_CAP_SYSTEM_ALLOCATED = "FALSE",
  parameter  [3:0]  PF0_PB_CAP_VER = 4'h1,
  parameter  [7:0]  PF0_PM_CAP_ID = 8'h01,
  parameter  [7:0]  PF0_PM_CAP_NEXTPTR = 8'h00,
  parameter         PF0_PM_CAP_PMESUPPORT_D0 = "TRUE",
  parameter         PF0_PM_CAP_PMESUPPORT_D1 = "TRUE",
  parameter         PF0_PM_CAP_PMESUPPORT_D3HOT = "TRUE",
  parameter         PF0_PM_CAP_SUPP_D1_STATE = "TRUE",
  parameter  [2:0]  PF0_PM_CAP_VER_ID = 3'h3,
  parameter         PF0_PM_CSR_NOSOFTRESET = "TRUE",
  parameter         PF0_RBAR_CAP_ENABLE = "FALSE",
  parameter  [2:0]  PF0_RBAR_CAP_INDEX0 = 3'h0,
  parameter  [2:0]  PF0_RBAR_CAP_INDEX1 = 3'h0,
  parameter  [2:0]  PF0_RBAR_CAP_INDEX2 = 3'h0,
  parameter [11:0]  PF0_RBAR_CAP_NEXTPTR = 12'h000,
  parameter [19:0]  PF0_RBAR_CAP_SIZE0 = 20'h00000,
  parameter [19:0]  PF0_RBAR_CAP_SIZE1 = 20'h00000,
  parameter [19:0]  PF0_RBAR_CAP_SIZE2 = 20'h00000,
  parameter  [3:0]  PF0_RBAR_CAP_VER = 4'h1,
  parameter  [2:0]  PF0_RBAR_NUM = 3'h1,
  parameter  [7:0]  PF0_REVISION_ID = 8'h00,
  parameter  [4:0]  PF0_SRIOV_BAR0_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR0_CONTROL = 3'h4,
  parameter  [4:0]  PF0_SRIOV_BAR1_APERTURE_SIZE = 5'h00,
  parameter  [2:0]  PF0_SRIOV_BAR1_CONTROL = 3'h0,
  parameter  [4:0]  PF0_SRIOV_BAR2_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR2_CONTROL = 3'h4,
  parameter  [4:0]  PF0_SRIOV_BAR3_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR3_CONTROL = 3'h0,
  parameter  [4:0]  PF0_SRIOV_BAR4_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR4_CONTROL = 3'h4,
  parameter  [4:0]  PF0_SRIOV_BAR5_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF0_SRIOV_BAR5_CONTROL = 3'h0,
  parameter [15:0]  PF0_SRIOV_CAP_INITIAL_VF = 16'h0000,
  parameter [11:0]  PF0_SRIOV_CAP_NEXTPTR = 12'h000,
  parameter [15:0]  PF0_SRIOV_CAP_TOTAL_VF = 16'h0000,
  parameter  [3:0]  PF0_SRIOV_CAP_VER = 4'h1,
  parameter [15:0]  PF0_SRIOV_FIRST_VF_OFFSET = 16'h0000,
  parameter [15:0]  PF0_SRIOV_FUNC_DEP_LINK = 16'h0000,
  parameter [31:0]  PF0_SRIOV_SUPPORTED_PAGE_SIZE = 32'h00000000,
  parameter [15:0]  PF0_SRIOV_VF_DEVICE_ID = 16'h0000,
  parameter [15:0]  PF0_SUBSYSTEM_ID = 16'h0000,
  parameter         PF0_TPHR_CAP_DEV_SPECIFIC_MODE = "TRUE",
  parameter         PF0_TPHR_CAP_ENABLE = "FALSE",
  parameter         PF0_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  PF0_TPHR_CAP_NEXTPTR = 12'h000,
  parameter  [2:0]  PF0_TPHR_CAP_ST_MODE_SEL = 3'h0,
  parameter  [1:0]  PF0_TPHR_CAP_ST_TABLE_LOC = 2'h0,
  parameter [10:0]  PF0_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter  [3:0]  PF0_TPHR_CAP_VER = 4'h1,
  parameter [11:0]  PF0_VC_CAP_NEXTPTR = 12'h000,
  parameter  [3:0]  PF0_VC_CAP_VER = 4'h1,
  parameter         PF1_AER_CAP_ECRC_CHECK_CAPABLE = "FALSE",
  parameter         PF1_AER_CAP_ECRC_GEN_CAPABLE = "FALSE",
  parameter [11:0]  PF1_AER_CAP_NEXTPTR = 12'h000,
  parameter [11:0]  PF1_ARI_CAP_NEXTPTR = 12'h000,
  parameter  [7:0]  PF1_ARI_CAP_NEXT_FUNC = 8'h00,
  parameter  [4:0]  PF1_BAR0_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR0_CONTROL = 3'h4,
  parameter  [4:0]  PF1_BAR1_APERTURE_SIZE = 5'h00,
  parameter  [2:0]  PF1_BAR1_CONTROL = 3'h0,
  parameter  [4:0]  PF1_BAR2_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR2_CONTROL = 3'h4,
  parameter  [4:0]  PF1_BAR3_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR3_CONTROL = 3'h0,
  parameter  [4:0]  PF1_BAR4_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR4_CONTROL = 3'h4,
  parameter  [4:0]  PF1_BAR5_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_BAR5_CONTROL = 3'h0,
  parameter  [7:0]  PF1_BIST_REGISTER = 8'h00,
  parameter  [7:0]  PF1_CAPABILITY_POINTER = 8'h50,
  parameter [23:0]  PF1_CLASS_CODE = 24'h000000,
  parameter [15:0]  PF1_DEVICE_ID = 16'h0000,
  parameter  [2:0]  PF1_DEV_CAP_MAX_PAYLOAD_SIZE = 3'h3,
  parameter [11:0]  PF1_DPA_CAP_NEXTPTR = 12'h000,
  parameter  [4:0]  PF1_DPA_CAP_SUB_STATE_CONTROL = 5'h00,
  parameter         PF1_DPA_CAP_SUB_STATE_CONTROL_EN = "TRUE",
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 = 8'h00,
  parameter  [7:0]  PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 = 8'h00,
  parameter  [3:0]  PF1_DPA_CAP_VER = 4'h1,
  parameter [11:0]  PF1_DSN_CAP_NEXTPTR = 12'h10C,
  parameter  [4:0]  PF1_EXPANSION_ROM_APERTURE_SIZE = 5'h03,
  parameter         PF1_EXPANSION_ROM_ENABLE = "FALSE",
  parameter  [7:0]  PF1_INTERRUPT_LINE = 8'h00,
  parameter  [2:0]  PF1_INTERRUPT_PIN = 3'h1,
  parameter  [7:0]  PF1_MSIX_CAP_NEXTPTR = 8'h00,
  parameter integer PF1_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  PF1_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer PF1_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  PF1_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  PF1_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer PF1_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  PF1_MSI_CAP_NEXTPTR = 8'h00,
  parameter [11:0]  PF1_PB_CAP_NEXTPTR = 12'h000,
  parameter         PF1_PB_CAP_SYSTEM_ALLOCATED = "FALSE",
  parameter  [3:0]  PF1_PB_CAP_VER = 4'h1,
  parameter  [7:0]  PF1_PM_CAP_ID = 8'h01,
  parameter  [7:0]  PF1_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  PF1_PM_CAP_VER_ID = 3'h3,
  parameter         PF1_RBAR_CAP_ENABLE = "FALSE",
  parameter  [2:0]  PF1_RBAR_CAP_INDEX0 = 3'h0,
  parameter  [2:0]  PF1_RBAR_CAP_INDEX1 = 3'h0,
  parameter  [2:0]  PF1_RBAR_CAP_INDEX2 = 3'h0,
  parameter [11:0]  PF1_RBAR_CAP_NEXTPTR = 12'h000,
  parameter [19:0]  PF1_RBAR_CAP_SIZE0 = 20'h00000,
  parameter [19:0]  PF1_RBAR_CAP_SIZE1 = 20'h00000,
  parameter [19:0]  PF1_RBAR_CAP_SIZE2 = 20'h00000,
  parameter  [3:0]  PF1_RBAR_CAP_VER = 4'h1,
  parameter  [2:0]  PF1_RBAR_NUM = 3'h1,
  parameter  [7:0]  PF1_REVISION_ID = 8'h00,
  parameter  [4:0]  PF1_SRIOV_BAR0_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR0_CONTROL = 3'h4,
  parameter  [4:0]  PF1_SRIOV_BAR1_APERTURE_SIZE = 5'h00,
  parameter  [2:0]  PF1_SRIOV_BAR1_CONTROL = 3'h0,
  parameter  [4:0]  PF1_SRIOV_BAR2_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR2_CONTROL = 3'h4,
  parameter  [4:0]  PF1_SRIOV_BAR3_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR3_CONTROL = 3'h0,
  parameter  [4:0]  PF1_SRIOV_BAR4_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR4_CONTROL = 3'h4,
  parameter  [4:0]  PF1_SRIOV_BAR5_APERTURE_SIZE = 5'h03,
  parameter  [2:0]  PF1_SRIOV_BAR5_CONTROL = 3'h0,
  parameter [15:0]  PF1_SRIOV_CAP_INITIAL_VF = 16'h0000,
  parameter [11:0]  PF1_SRIOV_CAP_NEXTPTR = 12'h000,
  parameter [15:0]  PF1_SRIOV_CAP_TOTAL_VF = 16'h0000,
  parameter  [3:0]  PF1_SRIOV_CAP_VER = 4'h1,
  parameter [15:0]  PF1_SRIOV_FIRST_VF_OFFSET = 16'h0000,
  parameter [15:0]  PF1_SRIOV_FUNC_DEP_LINK = 16'h0000,
  parameter [31:0]  PF1_SRIOV_SUPPORTED_PAGE_SIZE = 32'h00000000,
  parameter [15:0]  PF1_SRIOV_VF_DEVICE_ID = 16'h0000,
  parameter [15:0]  PF1_SUBSYSTEM_ID = 16'h0000,
  parameter         PF1_TPHR_CAP_DEV_SPECIFIC_MODE = "TRUE",
  parameter         PF1_TPHR_CAP_ENABLE = "FALSE",
  parameter         PF1_TPHR_CAP_INT_VEC_MODE = "TRUE",
  parameter [11:0]  PF1_TPHR_CAP_NEXTPTR = 12'h000,
  parameter  [2:0]  PF1_TPHR_CAP_ST_MODE_SEL = 3'h0,
  parameter  [1:0]  PF1_TPHR_CAP_ST_TABLE_LOC = 2'h0,
  parameter [10:0]  PF1_TPHR_CAP_ST_TABLE_SIZE = 11'h000,
  parameter  [3:0]  PF1_TPHR_CAP_VER = 4'h1,
  parameter         PL_DISABLE_EI_INFER_IN_L0 = "FALSE",
  parameter         PL_DISABLE_GEN3_DC_BALANCE = "FALSE",
  parameter         PL_DISABLE_SCRAMBLING = "FALSE",
  parameter         PL_DISABLE_UPCONFIG_CAPABLE = "FALSE",
  parameter         PL_EQ_ADAPT_DISABLE_COEFF_CHECK = "FALSE",
  parameter         PL_EQ_ADAPT_DISABLE_PRESET_CHECK = "FALSE",
  parameter  [4:0]  PL_EQ_ADAPT_ITER_COUNT = 5'h02,
  parameter  [1:0]  PL_EQ_ADAPT_REJECT_RETRY_COUNT = 2'h1,
  parameter         PL_EQ_BYPASS_PHASE23 = "FALSE",
  parameter         PL_EQ_SHORT_ADAPT_PHASE = "FALSE",
  parameter [15:0]  PL_LANE0_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE1_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE2_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE3_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE4_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE5_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE6_EQ_CONTROL = 16'h3F00,
  parameter [15:0]  PL_LANE7_EQ_CONTROL = 16'h3F00,
  parameter  [2:0]  PL_LINK_CAP_MAX_LINK_SPEED = 3'h4,
  parameter  [3:0]  PL_LINK_CAP_MAX_LINK_WIDTH = 4'h8,
  parameter integer PL_N_FTS_COMCLK_GEN1 = 255,
  parameter integer PL_N_FTS_COMCLK_GEN2 = 255,
  parameter integer PL_N_FTS_COMCLK_GEN3 = 255,
  parameter integer PL_N_FTS_GEN1 = 255,
  parameter integer PL_N_FTS_GEN2 = 255,
  parameter integer PL_N_FTS_GEN3 = 255,
  parameter         PL_SIM_FAST_LINK_TRAINING = "FALSE",
  parameter         PL_UPSTREAM_FACING = "TRUE",
  parameter [15:0]  PM_ASPML0S_TIMEOUT = 16'h05DC,
  parameter [19:0]  PM_ASPML1_ENTRY_DELAY = 20'h00000,
  parameter         PM_ENABLE_SLOT_POWER_CAPTURE = "TRUE",
  parameter [31:0]  PM_L1_REENTRY_DELAY = 32'h00000000,
  parameter [19:0]  PM_PME_SERVICE_TIMEOUT_DELAY = 20'h186A0,
  parameter [15:0]  PM_PME_TURNOFF_ACK_DELAY = 16'h0064,
  parameter         SIM_VERSION = "1.0",
  parameter integer SPARE_BIT0 = 0,
  parameter integer SPARE_BIT1 = 0,
  parameter integer SPARE_BIT2 = 0,
  parameter integer SPARE_BIT3 = 0,
  parameter integer SPARE_BIT4 = 0,
  parameter integer SPARE_BIT5 = 0,
  parameter integer SPARE_BIT6 = 0,
  parameter integer SPARE_BIT7 = 0,
  parameter integer SPARE_BIT8 = 0,
  parameter  [7:0]  SPARE_BYTE0 = 8'h00,
  parameter  [7:0]  SPARE_BYTE1 = 8'h00,
  parameter  [7:0]  SPARE_BYTE2 = 8'h00,
  parameter  [7:0]  SPARE_BYTE3 = 8'h00,
  parameter [31:0]  SPARE_WORD0 = 32'h00000000,
  parameter [31:0]  SPARE_WORD1 = 32'h00000000,
  parameter [31:0]  SPARE_WORD2 = 32'h00000000,
  parameter [31:0]  SPARE_WORD3 = 32'h00000000,
  parameter         SRIOV_CAP_ENABLE = "FALSE",
  parameter [23:0]  TL_COMPL_TIMEOUT_REG0 = 24'hBEBC20,
  parameter [27:0]  TL_COMPL_TIMEOUT_REG1 = 28'h0000000,
  parameter [11:0]  TL_CREDITS_CD = 12'h3E0,
  parameter  [7:0]  TL_CREDITS_CH = 8'h20,
  parameter [11:0]  TL_CREDITS_NPD = 12'h028,
  parameter  [7:0]  TL_CREDITS_NPH = 8'h20,
  parameter [11:0]  TL_CREDITS_PD = 12'h198,
  parameter  [7:0]  TL_CREDITS_PH = 8'h20,
  parameter         TL_ENABLE_MESSAGE_RID_CHECK_ENABLE = "TRUE",
  parameter         TL_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE = "FALSE",
  parameter         TL_LEGACY_CFG_EXTEND_INTERFACE_ENABLE = "FALSE",
  parameter         TL_LEGACY_MODE_ENABLE = "FALSE",
  parameter         TL_PF_ENABLE_REG = "FALSE",
  parameter         TL_TAG_MGMT_ENABLE = "TRUE",
  parameter  [7:0]  VF0_CAPABILITY_POINTER = 8'h50,
  parameter integer VF0_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF0_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF0_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF0_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF0_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF0_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF0_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF0_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF0_PM_CAP_VER_ID = 3'h3,
  parameter integer VF1_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF1_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF1_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF1_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF1_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF1_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF1_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF1_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF1_PM_CAP_VER_ID = 3'h3,
  parameter integer VF2_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF2_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF2_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF2_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF2_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF2_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF2_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF2_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF2_PM_CAP_VER_ID = 3'h3,
  parameter integer VF3_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF3_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF3_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF3_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF3_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF3_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF3_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF3_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF3_PM_CAP_VER_ID = 3'h3,
  parameter integer VF4_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF4_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF4_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF4_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF4_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF4_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF4_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF4_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF4_PM_CAP_VER_ID = 3'h3,
  parameter integer VF5_MSIX_CAP_PBA_BIR = 0,
  parameter [28:0]  VF5_MSIX_CAP_PBA_OFFSET = 29'h00000050,
  parameter integer VF5_MSIX_CAP_TABLE_BIR = 0,
  parameter [28:0]  VF5_MSIX_CAP_TABLE_OFFSET = 29'h00000040,
  parameter [10:0]  VF5_MSIX_CAP_TABLE_SIZE = 11'h000,
  parameter integer VF5_MSI_CAP_MULTIMSGCAP = 0,
  parameter  [7:0]  VF5_PM_CAP_ID = 8'h01,
  parameter  [7:0]  VF5_PM_CAP_NEXTPTR = 8'h00,
  parameter  [2:0]  VF5_PM_CAP_VER_ID = 3'h3,
  parameter         IMPL_TARGET = "HARD",
  parameter         NO_DECODE_LOGIC = "TRUE",
  parameter         INTERFACE_SPEED = "500 MHZ",
  parameter         COMPLETION_SPACE = "16KB"
) (

  input                            core_clk,
  input                            rec_clk,
  input                            user_clk,
  input                            pipe_clk,

  input                            phy_rdy,               // GT is ready : 1b = GT Ready
  input                            mmcm_lock,             // MMCM Locked : 1b = MMCM Locked

  input                            s_axis_rq_tlast,
  input  [C_DATA_WIDTH-1:0]        s_axis_rq_tdata,
  input              [59:0]        s_axis_rq_tuser,
  input    [KEEP_WIDTH-1:0]        s_axis_rq_tkeep,
  output              [3:0]        s_axis_rq_tready,
  input                            s_axis_rq_tvalid,

  output [C_DATA_WIDTH-1:0]        m_axis_rc_tdata,
  output             [74:0]        m_axis_rc_tuser,
  output                           m_axis_rc_tlast,
  output   [KEEP_WIDTH-1:0]        m_axis_rc_tkeep,
  output                           m_axis_rc_tvalid,
  input              [21:0]        m_axis_rc_tready,

  output [C_DATA_WIDTH-1:0]        m_axis_cq_tdata,
  output             [84:0]        m_axis_cq_tuser,
  output                           m_axis_cq_tlast,
  output   [KEEP_WIDTH-1:0]        m_axis_cq_tkeep,
  output                           m_axis_cq_tvalid,
  input              [21:0]        m_axis_cq_tready,

  input  [C_DATA_WIDTH-1:0]        s_axis_cc_tdata,
  input              [32:0]        s_axis_cc_tuser,
  input                            s_axis_cc_tlast,
  input    [KEEP_WIDTH-1:0]        s_axis_cc_tkeep,
  input                            s_axis_cc_tvalid,
  output              [3:0]        s_axis_cc_tready,

  output              [3:0]        pcie_rq_seq_num,
  output                           pcie_rq_seq_num_vld,
  output              [5:0]        pcie_rq_tag,
  output                           pcie_rq_tag_vld,

  output              [1:0]        pcie_tfc_nph_av,
  output              [1:0]        pcie_tfc_npd_av,
  input                            pcie_cq_np_req,
  output              [5:0]        pcie_cq_np_req_count,

  input              [18:0]        cfg_mgmt_addr,
  input                            cfg_mgmt_write,
  input              [31:0]        cfg_mgmt_write_data,
  input               [3:0]        cfg_mgmt_byte_enable,
  input                            cfg_mgmt_read,
  output             [31:0]        cfg_mgmt_read_data,
  output                           cfg_mgmt_read_write_done,
  input                            cfg_mgmt_type1_cfg_reg_access,

  output                           cfg_phy_link_down,
  output              [1:0]        cfg_phy_link_status,
  output              [3:0]        cfg_negotiated_width,
  output              [2:0]        cfg_current_speed,
  output              [2:0]        cfg_max_payload,
  output              [2:0]        cfg_max_read_req,
  output              [7:0]        cfg_function_status,
  output              [5:0]        cfg_function_power_state,
  output             [11:0]        cfg_vf_status,
  output             [17:0]        cfg_vf_power_state,
  output              [1:0]        cfg_link_power_state,

  output                           cfg_err_cor_out,
  output                           cfg_err_nonfatal_out,
  output                           cfg_err_fatal_out,
  output                           cfg_local_error,
  output                           cfg_ltr_enable,
  output              [5:0]        cfg_ltssm_state,
  output              [1:0]        cfg_rcb_status,
  output              [1:0]        cfg_dpa_substate_change,
  output              [1:0]        cfg_obff_enable,
  output                           cfg_pl_status_change,

  output              [1:0]        cfg_tph_requester_enable,
  output              [5:0]        cfg_tph_st_mode,
  output              [5:0]        cfg_vf_tph_requester_enable,
  output             [17:0]        cfg_vf_tph_st_mode,

  output                           cfg_msg_received,
  output              [7:0]        cfg_msg_received_data,
  output              [4:0]        cfg_msg_received_type,

  input                            cfg_msg_transmit,
  input               [2:0]        cfg_msg_transmit_type,
  input              [31:0]        cfg_msg_transmit_data,
  output                           cfg_msg_transmit_done,

  output              [7:0]        cfg_fc_ph,
  output             [11:0]        cfg_fc_pd,
  output              [7:0]        cfg_fc_nph,
  output             [11:0]        cfg_fc_npd,
  output              [7:0]        cfg_fc_cplh,
  output             [11:0]        cfg_fc_cpld,
  input               [2:0]        cfg_fc_sel,

  input               [2:0]        cfg_per_func_status_control,
  output             [15:0]        cfg_per_func_status_data,
  input               [2:0]        cfg_per_function_number,
  input                            cfg_per_function_output_request,
  output                           cfg_per_function_update_done,

  input              [63:0]        cfg_dsn,
  input                            cfg_power_state_change_ack,
  output                           cfg_power_state_change_interrupt,
  input                            cfg_err_cor_in,
  input                            cfg_err_uncor_in,

  output              [1:0]        cfg_flr_in_process,
  input               [1:0]        cfg_flr_done,
  output              [5:0]        cfg_vf_flr_in_process,
  input               [5:0]        cfg_vf_flr_done,

  input                            cfg_link_training_enable,

  input               [3:0]        cfg_interrupt_int,
  input               [1:0]        cfg_interrupt_pending,
  output                           cfg_interrupt_sent,

  output              [1:0]        cfg_interrupt_msi_enable,
  output              [5:0]        cfg_interrupt_msi_vf_enable,
  output              [5:0]        cfg_interrupt_msi_mmenable,
  output                           cfg_interrupt_msi_mask_update,
  output             [31:0]        cfg_interrupt_msi_data,
  input               [3:0]        cfg_interrupt_msi_select,
  input              [31:0]        cfg_interrupt_msi_int,
  input              [63:0]        cfg_interrupt_msi_pending_status,
  output                           cfg_interrupt_msi_sent,
  output                           cfg_interrupt_msi_fail,

  output              [1:0]        cfg_interrupt_msix_enable,
  output              [1:0]        cfg_interrupt_msix_mask,
  output              [5:0]        cfg_interrupt_msix_vf_enable,
  output              [5:0]        cfg_interrupt_msix_vf_mask,
  input              [31:0]        cfg_interrupt_msix_data,
  input              [63:0]        cfg_interrupt_msix_address,
  input                            cfg_interrupt_msix_int,
  output                           cfg_interrupt_msix_sent,
  output                           cfg_interrupt_msix_fail,

  input               [2:0]        cfg_interrupt_msi_attr,
  input                            cfg_interrupt_msi_tph_present,
  input               [1:0]        cfg_interrupt_msi_tph_type,
  input               [8:0]        cfg_interrupt_msi_tph_st_tag,
  input               [2:0]        cfg_interrupt_msi_function_number,

  output                           cfg_ext_read_received,
  output                           cfg_ext_write_received,
  output              [9:0]        cfg_ext_register_number,
  output              [7:0]        cfg_ext_function_number,
  output             [31:0]        cfg_ext_write_data,
  output              [3:0]        cfg_ext_write_byte_enable,
  input              [31:0]        cfg_ext_read_data,
  input                            cfg_ext_read_data_valid,

  input              [15:0]        cfg_dev_id,
  input              [15:0]        cfg_vend_id,
  input               [7:0]        cfg_rev_id,
  input              [15:0]        cfg_subsys_id,
  input              [15:0]        cfg_subsys_vend_id,

  input               [7:0]        cfg_ds_port_number,

// EP only
  output                           cfg_hot_reset_out,
  input                            cfg_config_space_enable,
  input                            cfg_req_pm_transition_l23_ready,

// RP only
  input                            cfg_hot_reset_in,

  input               [7:0]        cfg_ds_bus_number,
  input               [4:0]        cfg_ds_device_number,
  input               [2:0]        cfg_ds_function_number,

  output                           drp_rdy,
  output             [15:0]        drp_do,
  input                            drp_clk,
  input                            drp_en,
  input                            drp_we,
  input              [10:0]        drp_addr,
  input              [15:0]        drp_di,

  // TPH Interface
  input               [4:0]        user_tph_stt_address,
  input               [2:0]        user_tph_function_num,
  output             [31:0]        user_tph_stt_read_data,
  output                           user_tph_stt_read_data_valid,
  input                            user_tph_stt_read_enable,

  output wire                      pipe_rx0_polarity_gt,
  output wire                      pipe_rx1_polarity_gt,
  output wire                      pipe_rx2_polarity_gt,
  output wire                      pipe_rx3_polarity_gt,
  output wire                      pipe_rx4_polarity_gt,
  output wire                      pipe_rx5_polarity_gt,
  output wire                      pipe_rx6_polarity_gt,
  output wire                      pipe_rx7_polarity_gt,

  output wire                      pipe_tx0_compliance_gt,
  output wire                      pipe_tx1_compliance_gt,
  output wire                      pipe_tx2_compliance_gt,
  output wire                      pipe_tx3_compliance_gt,
  output wire                      pipe_tx4_compliance_gt,
  output wire                      pipe_tx5_compliance_gt,
  output wire                      pipe_tx6_compliance_gt,
  output wire                      pipe_tx7_compliance_gt,

  output wire                      pipe_tx0_data_valid_gt,
  output wire                      pipe_tx1_data_valid_gt,
  output wire                      pipe_tx2_data_valid_gt,
  output wire                      pipe_tx3_data_valid_gt,
  output wire                      pipe_tx4_data_valid_gt,
  output wire                      pipe_tx5_data_valid_gt,
  output wire                      pipe_tx6_data_valid_gt,
  output wire                      pipe_tx7_data_valid_gt,

  output wire                      pipe_tx0_elec_idle_gt,
  output wire                      pipe_tx1_elec_idle_gt,
  output wire                      pipe_tx2_elec_idle_gt,
  output wire                      pipe_tx3_elec_idle_gt,
  output wire                      pipe_tx4_elec_idle_gt,
  output wire                      pipe_tx5_elec_idle_gt,
  output wire                      pipe_tx6_elec_idle_gt,
  output wire                      pipe_tx7_elec_idle_gt,

  output wire                      pipe_tx0_start_block_gt,
  output wire                      pipe_tx1_start_block_gt,
  output wire                      pipe_tx2_start_block_gt,
  output wire                      pipe_tx3_start_block_gt,
  output wire                      pipe_tx4_start_block_gt,
  output wire                      pipe_tx5_start_block_gt,
  output wire                      pipe_tx6_start_block_gt,
  output wire                      pipe_tx7_start_block_gt,

  output                           pipe_tx_deemph_gt,
  output                           pipe_tx_rcvr_det_gt,
  output              [1:0]        pipe_tx_rate_gt,
  output              [2:0]        pipe_tx_margin_gt,
  output                           pipe_tx_swing_gt,
  input               [5:0]        pipe_tx_eqfs_gt,
  input               [5:0]        pipe_tx_eqlf_gt,

  output wire                      pipe_tx_reset_gt,

  output wire         [1:0]        pipe_rx0_eqcontrol_gt,
  output wire         [1:0]        pipe_rx1_eqcontrol_gt,
  output wire         [1:0]        pipe_rx2_eqcontrol_gt,
  output wire         [1:0]        pipe_rx3_eqcontrol_gt,
  output wire         [1:0]        pipe_rx4_eqcontrol_gt,
  output wire         [1:0]        pipe_rx5_eqcontrol_gt,
  output wire         [1:0]        pipe_rx6_eqcontrol_gt,
  output wire         [1:0]        pipe_rx7_eqcontrol_gt,

  output wire         [1:0]        pipe_tx0_char_is_k_gt,
  output wire         [1:0]        pipe_tx1_char_is_k_gt,
  output wire         [1:0]        pipe_tx2_char_is_k_gt,
  output wire         [1:0]        pipe_tx3_char_is_k_gt,
  output wire         [1:0]        pipe_tx4_char_is_k_gt,
  output wire         [1:0]        pipe_tx5_char_is_k_gt,
  output wire         [1:0]        pipe_tx6_char_is_k_gt,
  output wire         [1:0]        pipe_tx7_char_is_k_gt,

  output wire         [1:0]        pipe_tx0_eqcontrol_gt,
  output wire         [1:0]        pipe_tx1_eqcontrol_gt,
  output wire         [1:0]        pipe_tx2_eqcontrol_gt,
  output wire         [1:0]        pipe_tx3_eqcontrol_gt,
  output wire         [1:0]        pipe_tx4_eqcontrol_gt,
  output wire         [1:0]        pipe_tx5_eqcontrol_gt,
  output wire         [1:0]        pipe_tx6_eqcontrol_gt,
  output wire         [1:0]        pipe_tx7_eqcontrol_gt,

  output wire         [1:0]        pipe_tx0_powerdown_gt,
  output wire         [1:0]        pipe_tx1_powerdown_gt,
  output wire         [1:0]        pipe_tx2_powerdown_gt,
  output wire         [1:0]        pipe_tx3_powerdown_gt,
  output wire         [1:0]        pipe_tx4_powerdown_gt,
  output wire         [1:0]        pipe_tx5_powerdown_gt,
  output wire         [1:0]        pipe_tx6_powerdown_gt,
  output wire         [1:0]        pipe_tx7_powerdown_gt,

  output wire         [1:0]        pipe_tx0_syncheader_gt,
  output wire         [1:0]        pipe_tx1_syncheader_gt,
  output wire         [1:0]        pipe_tx2_syncheader_gt,
  output wire         [1:0]        pipe_tx3_syncheader_gt,
  output wire         [1:0]        pipe_tx4_syncheader_gt,
  output wire         [1:0]        pipe_tx5_syncheader_gt,
  output wire         [1:0]        pipe_tx6_syncheader_gt,
  output wire         [1:0]        pipe_tx7_syncheader_gt,

  output wire         [2:0]        pipe_rx0_eqpreset_gt,
  output wire         [2:0]        pipe_rx1_eqpreset_gt,
  output wire         [2:0]        pipe_rx2_eqpreset_gt,
  output wire         [2:0]        pipe_rx3_eqpreset_gt,
  output wire         [2:0]        pipe_rx4_eqpreset_gt,
  output wire         [2:0]        pipe_rx5_eqpreset_gt,
  output wire         [2:0]        pipe_rx6_eqpreset_gt,
  output wire         [2:0]        pipe_rx7_eqpreset_gt,

  output wire        [31:0]        pipe_tx0_data_gt,
  output wire        [31:0]        pipe_tx1_data_gt,
  output wire        [31:0]        pipe_tx2_data_gt,
  output wire        [31:0]        pipe_tx3_data_gt,
  output wire        [31:0]        pipe_tx4_data_gt,
  output wire        [31:0]        pipe_tx5_data_gt,
  output wire        [31:0]        pipe_tx6_data_gt,
  output wire        [31:0]        pipe_tx7_data_gt,

  output wire         [3:0]        pipe_rx0_eqlp_txpreset_gt,
  output wire         [3:0]        pipe_rx1_eqlp_txpreset_gt,
  output wire         [3:0]        pipe_rx2_eqlp_txpreset_gt,
  output wire         [3:0]        pipe_rx3_eqlp_txpreset_gt,
  output wire         [3:0]        pipe_rx4_eqlp_txpreset_gt,
  output wire         [3:0]        pipe_rx5_eqlp_txpreset_gt,
  output wire         [3:0]        pipe_rx6_eqlp_txpreset_gt,
  output wire         [3:0]        pipe_rx7_eqlp_txpreset_gt,

  output wire         [3:0]        pipe_tx0_eqpreset_gt,
  output wire         [3:0]        pipe_tx1_eqpreset_gt,
  output wire         [3:0]        pipe_tx2_eqpreset_gt,
  output wire         [3:0]        pipe_tx3_eqpreset_gt,
  output wire         [3:0]        pipe_tx4_eqpreset_gt,
  output wire         [3:0]        pipe_tx5_eqpreset_gt,
  output wire         [3:0]        pipe_tx6_eqpreset_gt,
  output wire         [3:0]        pipe_tx7_eqpreset_gt,

  output wire         [5:0]        pipe_rx0_eqlp_lffs_gt,
  output wire         [5:0]        pipe_rx1_eqlp_lffs_gt,
  output wire         [5:0]        pipe_rx2_eqlp_lffs_gt,
  output wire         [5:0]        pipe_rx3_eqlp_lffs_gt,
  output wire         [5:0]        pipe_rx4_eqlp_lffs_gt,
  output wire         [5:0]        pipe_rx5_eqlp_lffs_gt,
  output wire         [5:0]        pipe_rx6_eqlp_lffs_gt,
  output wire         [5:0]        pipe_rx7_eqlp_lffs_gt,

  output wire         [5:0]        pipe_tx0_eqdeemph_gt,
  output wire         [5:0]        pipe_tx1_eqdeemph_gt,
  output wire         [5:0]        pipe_tx2_eqdeemph_gt,
  output wire         [5:0]        pipe_tx3_eqdeemph_gt,
  output wire         [5:0]        pipe_tx4_eqdeemph_gt,
  output wire         [5:0]        pipe_tx5_eqdeemph_gt,
  output wire         [5:0]        pipe_tx6_eqdeemph_gt,
  output wire         [5:0]        pipe_tx7_eqdeemph_gt,

  output wire         [7:0]        pipe_rx_slide_gt,
  input  wire         [7:0]        pipe_rx_syncdone_gt,

  input                            pipe_rx0_data_valid_gt,
  input                            pipe_rx1_data_valid_gt,
  input                            pipe_rx2_data_valid_gt,
  input                            pipe_rx3_data_valid_gt,
  input                            pipe_rx4_data_valid_gt,
  input                            pipe_rx5_data_valid_gt,
  input                            pipe_rx6_data_valid_gt,
  input                            pipe_rx7_data_valid_gt,

  input                            pipe_rx0_elec_idle_gt,
  input                            pipe_rx1_elec_idle_gt,
  input                            pipe_rx2_elec_idle_gt,
  input                            pipe_rx3_elec_idle_gt,
  input                            pipe_rx4_elec_idle_gt,
  input                            pipe_rx5_elec_idle_gt,
  input                            pipe_rx6_elec_idle_gt,
  input                            pipe_rx7_elec_idle_gt,

  input                            pipe_rx0_eqdone_gt,
  input                            pipe_rx1_eqdone_gt,
  input                            pipe_rx2_eqdone_gt,
  input                            pipe_rx3_eqdone_gt,
  input                            pipe_rx4_eqdone_gt,
  input                            pipe_rx5_eqdone_gt,
  input                            pipe_rx6_eqdone_gt,
  input                            pipe_rx7_eqdone_gt,

  input                            pipe_rx0_eqlp_adaptdone_gt,
  input                            pipe_rx1_eqlp_adaptdone_gt,
  input                            pipe_rx2_eqlp_adaptdone_gt,
  input                            pipe_rx3_eqlp_adaptdone_gt,
  input                            pipe_rx4_eqlp_adaptdone_gt,
  input                            pipe_rx5_eqlp_adaptdone_gt,
  input                            pipe_rx6_eqlp_adaptdone_gt,
  input                            pipe_rx7_eqlp_adaptdone_gt,

  input                            pipe_rx0_eqlp_lffs_sel_gt,
  input                            pipe_rx1_eqlp_lffs_sel_gt,
  input                            pipe_rx2_eqlp_lffs_sel_gt,
  input                            pipe_rx3_eqlp_lffs_sel_gt,
  input                            pipe_rx4_eqlp_lffs_sel_gt,
  input                            pipe_rx5_eqlp_lffs_sel_gt,
  input                            pipe_rx6_eqlp_lffs_sel_gt,
  input                            pipe_rx7_eqlp_lffs_sel_gt,

  input                            pipe_rx0_phy_status_gt,
  input                            pipe_rx1_phy_status_gt,
  input                            pipe_rx2_phy_status_gt,
  input                            pipe_rx3_phy_status_gt,
  input                            pipe_rx4_phy_status_gt,
  input                            pipe_rx5_phy_status_gt,
  input                            pipe_rx6_phy_status_gt,
  input                            pipe_rx7_phy_status_gt,

  input                            pipe_rx0_start_block_gt,
  input                            pipe_rx1_start_block_gt,
  input                            pipe_rx2_start_block_gt,
  input                            pipe_rx3_start_block_gt,
  input                            pipe_rx4_start_block_gt,
  input                            pipe_rx5_start_block_gt,
  input                            pipe_rx6_start_block_gt,
  input                            pipe_rx7_start_block_gt,

  input                            pipe_rx0_valid_gt,
  input                            pipe_rx1_valid_gt,
  input                            pipe_rx2_valid_gt,
  input                            pipe_rx3_valid_gt,
  input                            pipe_rx4_valid_gt,
  input                            pipe_rx5_valid_gt,
  input                            pipe_rx6_valid_gt,
  input                            pipe_rx7_valid_gt,

  input                            pipe_tx0_eqdone_gt,
  input                            pipe_tx1_eqdone_gt,
  input                            pipe_tx2_eqdone_gt,
  input                            pipe_tx3_eqdone_gt,
  input                            pipe_tx4_eqdone_gt,
  input                            pipe_tx5_eqdone_gt,
  input                            pipe_tx6_eqdone_gt,
  input                            pipe_tx7_eqdone_gt,

  input              [17:0]        pipe_rx0_eqlp_new_txcoef_forpreset_gt,
  input              [17:0]        pipe_rx1_eqlp_new_txcoef_forpreset_gt,
  input              [17:0]        pipe_rx2_eqlp_new_txcoef_forpreset_gt,
  input              [17:0]        pipe_rx3_eqlp_new_txcoef_forpreset_gt,
  input              [17:0]        pipe_rx4_eqlp_new_txcoef_forpreset_gt,
  input              [17:0]        pipe_rx5_eqlp_new_txcoef_forpreset_gt,
  input              [17:0]        pipe_rx6_eqlp_new_txcoef_forpreset_gt,
  input              [17:0]        pipe_rx7_eqlp_new_txcoef_forpreset_gt,

  input              [17:0]        pipe_tx0_eqcoeff_gt,
  input              [17:0]        pipe_tx1_eqcoeff_gt,
  input              [17:0]        pipe_tx2_eqcoeff_gt,
  input              [17:0]        pipe_tx3_eqcoeff_gt,
  input              [17:0]        pipe_tx4_eqcoeff_gt,
  input              [17:0]        pipe_tx5_eqcoeff_gt,
  input              [17:0]        pipe_tx6_eqcoeff_gt,
  input              [17:0]        pipe_tx7_eqcoeff_gt,

  input               [1:0]        pipe_rx0_char_is_k_gt,
  input               [1:0]        pipe_rx1_char_is_k_gt,
  input               [1:0]        pipe_rx2_char_is_k_gt,
  input               [1:0]        pipe_rx3_char_is_k_gt,
  input               [1:0]        pipe_rx4_char_is_k_gt,
  input               [1:0]        pipe_rx5_char_is_k_gt,
  input               [1:0]        pipe_rx6_char_is_k_gt,
  input               [1:0]        pipe_rx7_char_is_k_gt,

  input               [1:0]        pipe_rx0_syncheader_gt,
  input               [1:0]        pipe_rx1_syncheader_gt,
  input               [1:0]        pipe_rx2_syncheader_gt,
  input               [1:0]        pipe_rx3_syncheader_gt,
  input               [1:0]        pipe_rx4_syncheader_gt,
  input               [1:0]        pipe_rx5_syncheader_gt,
  input               [1:0]        pipe_rx6_syncheader_gt,
  input               [1:0]        pipe_rx7_syncheader_gt,

  input               [2:0]        pipe_rx0_status_gt,
  input               [2:0]        pipe_rx1_status_gt,
  input               [2:0]        pipe_rx2_status_gt,
  input               [2:0]        pipe_rx3_status_gt,
  input               [2:0]        pipe_rx4_status_gt,
  input               [2:0]        pipe_rx5_status_gt,
  input               [2:0]        pipe_rx6_status_gt,
  input               [2:0]        pipe_rx7_status_gt,

  input               [31:0]       pipe_rx0_data_gt,
  input               [31:0]       pipe_rx1_data_gt,
  input               [31:0]       pipe_rx2_data_gt,
  input               [31:0]       pipe_rx3_data_gt,
  input               [31:0]       pipe_rx4_data_gt,
  input               [31:0]       pipe_rx5_data_gt,
  input               [31:0]       pipe_rx6_data_gt,
  input               [31:0]       pipe_rx7_data_gt

);
//extra wires to math the axi ports size//
  
  //MAXICQTDATA
  
  wire [255:0] m_axis_cq_tdata_256; 
  assign m_axis_cq_tdata=m_axis_cq_tdata_256[C_DATA_WIDTH-1 : 0]; 
  
  //MAXISRCTDATA
  
  wire [255:0] m_axis_rc_tdata_256; 
  assign  m_axis_rc_tdata=m_axis_rc_tdata_256[C_DATA_WIDTH-1 : 0];
  
  //MAXISCQTKEEP
    wire [7:0] m_axis_cq_tkeep_w; 
  assign m_axis_cq_tkeep=m_axis_cq_tkeep_w [(C_DATA_WIDTH/32)-1 : 0];
  
  //MAXISRCTKEEP
  
  wire [7:0] m_axis_rc_tkeep_w; 
  assign m_axis_rc_tkeep=m_axis_rc_tkeep_w [(C_DATA_WIDTH/32)-1 : 0];
  
  
  //SAXISRQTDATA
    //assign saxiscctdata_extra_wire=256'd0;
  wire [255:0] s_axis_rq_tdata_256; 
  assign s_axis_rq_tdata_256 =s_axis_rq_tdata;

  
  //SAXISCSTDATA
   
   //assign saxiscctdata_extra_wire=256'd0;
  wire [255:0] s_axis_cc_tdata_256; 
  assign s_axis_cc_tdata_256 =s_axis_cc_tdata; 
  
  //SAXISCCTKEEP
   wire [7:0] s_axis_cc_tkeep_w; 
  assign s_axis_cc_tkeep_w =s_axis_cc_tkeep;

  //SAXISRQTKEEP
   
  wire [7:0] s_axis_rq_tkeep_w; 
  assign s_axis_rq_tkeep_w = s_axis_rq_tkeep;


  //----------------------------------//
  // PIPE signals                     //
  //----------------------------------//

  wire        pipe_tx_rcvr_det;
  wire        pipe_tx_reset;
  wire [1:0]  pipe_tx_rate;
  wire        pipe_tx_deemph;
  wire [2:0]  pipe_tx_margin;
  wire        pipe_tx_swing;
  wire [5:0]  pipe_tx_eqfs;
  wire [5:0]  pipe_tx_eqlf;
  wire [7:0]  pipe_rx_slide;
  wire [7:0]  pipe_rx_syncdone;

  // Pipe Per-Lane Signals - Lane 0
  wire [ 1:0] pipe_rx0_char_is_k;
  wire [31:0] pipe_rx0_data;
  wire        pipe_rx0_valid;
  wire        pipe_rx0_data_valid;
  wire [ 2:0] pipe_rx0_status;
  wire        pipe_rx0_phy_status;
  wire        pipe_rx0_elec_idle;
  wire        pipe_rx0_eqdone;
  wire        pipe_rx0_eqlp_adaptdone;
  wire        pipe_rx0_eqlp_lffs_sel;
  wire [3:0]  pipe_rx0_eqlp_txpreset;
  wire [17:0] pipe_rx0_eqlp_new_txcoef_forpreset;
  wire        pipe_rx0_start_block;
  wire [ 1:0] pipe_rx0_syncheader;
  wire        pipe_rx0_polarity;
  wire [ 1:0] pipe_rx0_eqcontrol;
  wire [ 5:0] pipe_rx0_eqlp_lffs;
  wire [ 2:0] pipe_rx0_eqpreset;
  wire [17:0] pipe_tx0_eqcoeff;
  wire        pipe_tx0_eqdone;
  wire        pipe_tx0_compliance;
  wire [ 1:0] pipe_tx0_char_is_k;
  wire [31:0] pipe_tx0_data;
  wire        pipe_tx0_elec_idle;
  wire [ 1:0] pipe_tx0_powerdown;
  wire        pipe_tx0_data_valid;
  wire        pipe_tx0_start_block;
  wire [ 1:0] pipe_tx0_syncheader;
  wire [ 1:0] pipe_tx0_eqcontrol;
  wire [ 5:0] pipe_tx0_eqdeemph;
  wire [ 3:0] pipe_tx0_eqpreset;

  // Pipe Per-Lane Signals - Lane 1
  wire [ 1:0] pipe_rx1_char_is_k;
  wire [31:0] pipe_rx1_data;
  wire        pipe_rx1_valid;
  wire        pipe_rx1_data_valid;
  wire [ 2:0] pipe_rx1_status;
  wire        pipe_rx1_phy_status;
  wire        pipe_rx1_elec_idle;
  wire        pipe_rx1_eqdone;
  wire        pipe_rx1_eqlp_adaptdone;
  wire        pipe_rx1_eqlp_lffs_sel;
  wire [3:0]  pipe_rx1_eqlp_txpreset;
  wire [17:0] pipe_rx1_eqlp_new_txcoef_forpreset;
  wire        pipe_rx1_start_block;
  wire [ 1:0] pipe_rx1_syncheader;
  wire        pipe_rx1_polarity;
  wire [ 1:0] pipe_rx1_eqcontrol;
  wire [ 5:0] pipe_rx1_eqlp_lffs;
  wire [ 2:0] pipe_rx1_eqpreset;
  wire [17:0] pipe_tx1_eqcoeff;
  wire        pipe_tx1_eqdone;
  wire        pipe_tx1_compliance;
  wire [ 1:0] pipe_tx1_char_is_k;
  wire [31:0] pipe_tx1_data;
  wire        pipe_tx1_elec_idle;
  wire [ 1:0] pipe_tx1_powerdown;
  wire        pipe_tx1_data_valid;
  wire        pipe_tx1_start_block;
  wire [ 1:0] pipe_tx1_syncheader;
  wire [ 1:0] pipe_tx1_eqcontrol;
  wire [ 5:0] pipe_tx1_eqdeemph;
  wire [ 3:0] pipe_tx1_eqpreset;

  // Pipe Per-Lane Signals - Lane 2
  wire [ 1:0] pipe_rx2_char_is_k;
  wire [31:0] pipe_rx2_data;
  wire        pipe_rx2_valid;
  wire        pipe_rx2_data_valid;
  wire [ 2:0] pipe_rx2_status;
  wire        pipe_rx2_phy_status;
  wire        pipe_rx2_elec_idle;
  wire        pipe_rx2_eqdone;
  wire        pipe_rx2_eqlp_adaptdone;
  wire        pipe_rx2_eqlp_lffs_sel;
  wire [3:0]  pipe_rx2_eqlp_txpreset;
  wire [17:0] pipe_rx2_eqlp_new_txcoef_forpreset;
  wire        pipe_rx2_start_block;
  wire [ 1:0] pipe_rx2_syncheader;
  wire        pipe_rx2_polarity;
  wire [ 1:0] pipe_rx2_eqcontrol;
  wire [ 5:0] pipe_rx2_eqlp_lffs;
  wire [ 2:0] pipe_rx2_eqpreset;
  wire [17:0] pipe_tx2_eqcoeff;
  wire        pipe_tx2_eqdone;
  wire        pipe_tx2_compliance;
  wire [ 1:0] pipe_tx2_char_is_k;
  wire [31:0] pipe_tx2_data;
  wire        pipe_tx2_elec_idle;
  wire [ 1:0] pipe_tx2_powerdown;
  wire        pipe_tx2_data_valid;
  wire        pipe_tx2_start_block;
  wire [ 1:0] pipe_tx2_syncheader;
  wire [ 1:0] pipe_tx2_eqcontrol;
  wire [ 5:0] pipe_tx2_eqdeemph;
  wire [ 3:0] pipe_tx2_eqpreset;

  // Pipe Per-Lane Signals - Lane 3
  wire [ 1:0] pipe_rx3_char_is_k;
  wire [31:0] pipe_rx3_data;
  wire        pipe_rx3_valid;
  wire        pipe_rx3_data_valid;
  wire [ 2:0] pipe_rx3_status;
  wire        pipe_rx3_phy_status;
  wire        pipe_rx3_elec_idle;
  wire        pipe_rx3_eqdone;
  wire        pipe_rx3_eqlp_adaptdone;
  wire        pipe_rx3_eqlp_lffs_sel;
  wire [3:0]  pipe_rx3_eqlp_txpreset;
  wire [17:0] pipe_rx3_eqlp_new_txcoef_forpreset;
  wire        pipe_rx3_start_block;
  wire [ 1:0] pipe_rx3_syncheader;
  wire        pipe_rx3_polarity;
  wire [ 1:0] pipe_rx3_eqcontrol;
  wire [ 5:0] pipe_rx3_eqlp_lffs;
  wire [ 2:0] pipe_rx3_eqpreset;
  wire [17:0] pipe_tx3_eqcoeff;
  wire        pipe_tx3_eqdone;
  wire        pipe_tx3_compliance;
  wire [ 1:0] pipe_tx3_char_is_k;
  wire [31:0] pipe_tx3_data;
  wire        pipe_tx3_elec_idle;
  wire [ 1:0] pipe_tx3_powerdown;
  wire        pipe_tx3_data_valid;
  wire        pipe_tx3_start_block;
  wire [ 1:0] pipe_tx3_syncheader;
  wire [ 1:0] pipe_tx3_eqcontrol;
  wire [ 5:0] pipe_tx3_eqdeemph;
  wire [ 3:0] pipe_tx3_eqpreset;

  // Pipe Per-Lane Signals - Lane 4
  wire [ 1:0] pipe_rx4_char_is_k;
  wire [31:0] pipe_rx4_data;
  wire        pipe_rx4_valid;
  wire        pipe_rx4_data_valid;
  wire [ 2:0] pipe_rx4_status;
  wire        pipe_rx4_phy_status;
  wire        pipe_rx4_elec_idle;
  wire        pipe_rx4_eqdone;
  wire        pipe_rx4_eqlp_adaptdone;
  wire        pipe_rx4_eqlp_lffs_sel;
  wire [3:0]  pipe_rx4_eqlp_txpreset;
  wire [17:0] pipe_rx4_eqlp_new_txcoef_forpreset;
  wire        pipe_rx4_start_block;
  wire [ 1:0] pipe_rx4_syncheader;
  wire        pipe_rx4_polarity;
  wire [ 1:0] pipe_rx4_eqcontrol;
  wire [ 5:0] pipe_rx4_eqlp_lffs;
  wire [ 2:0] pipe_rx4_eqpreset;
  wire [17:0] pipe_tx4_eqcoeff;
  wire        pipe_tx4_eqdone;
  wire        pipe_tx4_compliance;
  wire [ 1:0] pipe_tx4_char_is_k;
  wire [31:0] pipe_tx4_data;
  wire        pipe_tx4_elec_idle;
  wire [ 1:0] pipe_tx4_powerdown;
  wire        pipe_tx4_data_valid;
  wire        pipe_tx4_start_block;
  wire [ 1:0] pipe_tx4_syncheader;
  wire [ 1:0] pipe_tx4_eqcontrol;
  wire [ 5:0] pipe_tx4_eqdeemph;
  wire [ 3:0] pipe_tx4_eqpreset;

  // Pipe Per-Lane Signals - Lane 5
  wire [ 1:0] pipe_rx5_char_is_k;
  wire [31:0] pipe_rx5_data;
  wire        pipe_rx5_valid;
  wire        pipe_rx5_data_valid;
  wire [ 2:0] pipe_rx5_status;
  wire        pipe_rx5_phy_status;
  wire        pipe_rx5_elec_idle;
  wire        pipe_rx5_eqdone;
  wire        pipe_rx5_eqlp_adaptdone;
  wire        pipe_rx5_eqlp_lffs_sel;
  wire [3:0]  pipe_rx5_eqlp_txpreset;
  wire [17:0] pipe_rx5_eqlp_new_txcoef_forpreset;
  wire        pipe_rx5_start_block;
  wire [ 1:0] pipe_rx5_syncheader;
  wire        pipe_rx5_polarity;
  wire [ 1:0] pipe_rx5_eqcontrol;
  wire [ 5:0] pipe_rx5_eqlp_lffs;
  wire [ 2:0] pipe_rx5_eqpreset;
  wire [17:0] pipe_tx5_eqcoeff;
  wire        pipe_tx5_eqdone;
  wire        pipe_tx5_compliance;
  wire [ 1:0] pipe_tx5_char_is_k;
  wire [31:0] pipe_tx5_data;
  wire        pipe_tx5_elec_idle;
  wire [ 1:0] pipe_tx5_powerdown;
  wire        pipe_tx5_data_valid;
  wire        pipe_tx5_start_block;
  wire [ 1:0] pipe_tx5_syncheader;
  wire [ 1:0] pipe_tx5_eqcontrol;
  wire [ 5:0] pipe_tx5_eqdeemph;
  wire [ 3:0] pipe_tx5_eqpreset;

  // Pipe Per-Lane Signals - Lane 6
  wire [ 1:0] pipe_rx6_char_is_k;
  wire [31:0] pipe_rx6_data;
  wire        pipe_rx6_valid;
  wire        pipe_rx6_data_valid;
  wire [ 2:0] pipe_rx6_status;
  wire        pipe_rx6_phy_status;
  wire        pipe_rx6_elec_idle;
  wire        pipe_rx6_eqdone;
  wire        pipe_rx6_eqlp_adaptdone;
  wire        pipe_rx6_eqlp_lffs_sel;
  wire [3:0]  pipe_rx6_eqlp_txpreset;
  wire [17:0] pipe_rx6_eqlp_new_txcoef_forpreset;
  wire        pipe_rx6_start_block;
  wire [ 1:0] pipe_rx6_syncheader;
  wire        pipe_rx6_polarity;
  wire [ 1:0] pipe_rx6_eqcontrol;
  wire [ 5:0] pipe_rx6_eqlp_lffs;
  wire [ 2:0] pipe_rx6_eqpreset;
  wire [17:0] pipe_tx6_eqcoeff;
  wire        pipe_tx6_eqdone;
  wire        pipe_tx6_compliance;
  wire [ 1:0] pipe_tx6_char_is_k;
  wire [31:0] pipe_tx6_data;
  wire        pipe_tx6_elec_idle;
  wire [ 1:0] pipe_tx6_powerdown;
  wire        pipe_tx6_data_valid;
  wire        pipe_tx6_start_block;
  wire [ 1:0] pipe_tx6_syncheader;
  wire [ 1:0] pipe_tx6_eqcontrol;
  wire [ 5:0] pipe_tx6_eqdeemph;
  wire [ 3:0] pipe_tx6_eqpreset;

  // Pipe Per-Lane Signals - Lane 7
  wire [ 1:0] pipe_rx7_char_is_k;
  wire [31:0] pipe_rx7_data;
  wire        pipe_rx7_valid;
  wire        pipe_rx7_data_valid;
  wire [ 2:0] pipe_rx7_status;
  wire        pipe_rx7_phy_status;
  wire        pipe_rx7_elec_idle;
  wire        pipe_rx7_eqdone;
  wire        pipe_rx7_eqlp_adaptdone;
  wire        pipe_rx7_eqlp_lffs_sel;
  wire [3:0]  pipe_rx7_eqlp_txpreset;
  wire [17:0] pipe_rx7_eqlp_new_txcoef_forpreset;
  wire        pipe_rx7_start_block;
  wire [ 1:0] pipe_rx7_syncheader;
  wire        pipe_rx7_polarity;
  wire [ 1:0] pipe_rx7_eqcontrol;
  wire [ 5:0] pipe_rx7_eqlp_lffs;
  wire [ 2:0] pipe_rx7_eqpreset;
  wire [17:0] pipe_tx7_eqcoeff;
  wire        pipe_tx7_eqdone;
  wire        pipe_tx7_compliance;
  wire [ 1:0] pipe_tx7_char_is_k;
  wire [31:0] pipe_tx7_data;
  wire        pipe_tx7_elec_idle;
  wire [ 1:0] pipe_tx7_powerdown;
  wire        pipe_tx7_data_valid;
  wire        pipe_tx7_start_block;
  wire [ 1:0] pipe_tx7_syncheader;
  wire [ 1:0] pipe_tx7_eqcontrol;
  wire [ 5:0] pipe_tx7_eqdeemph;
  wire [ 3:0] pipe_tx7_eqpreset;

  // Pipe Per-Lane Signals - Force Adapt

  wire [31:0] pipe_rx0_data_pcie;
  wire [31:0] pipe_rx1_data_pcie;
  wire [31:0] pipe_rx2_data_pcie;
  wire [31:0] pipe_rx3_data_pcie;
  wire [31:0] pipe_rx4_data_pcie;
  wire [31:0] pipe_rx5_data_pcie;
  wire [31:0] pipe_rx6_data_pcie;
  wire [31:0] pipe_rx7_data_pcie;

  
  wire [1:0]  pipe_rx0_eqcontrol_pcie;  
  wire [1:0]  pipe_rx1_eqcontrol_pcie;
  wire [1:0]  pipe_rx2_eqcontrol_pcie;
  wire [1:0]  pipe_rx3_eqcontrol_pcie;
  wire [1:0]  pipe_rx4_eqcontrol_pcie;
  wire [1:0]  pipe_rx5_eqcontrol_pcie;
  wire [1:0]  pipe_rx6_eqcontrol_pcie;
  wire [1:0]  pipe_rx7_eqcontrol_pcie;

  //----------------------------------//
  // Non PIPE signals                 //
  //----------------------------------//

  // Initialization Controller Signals
  wire        reset_n;
  wire        pipe_reset_n;
  wire        mgmt_reset_n;
  wire        mgmt_sticky_reset_n;
  wire        cfg_input_update_done;
  wire        cfg_input_update_request;
  wire        cfg_mc_update_done;
  wire        cfg_mc_update_request;

  // TLP Hints Table Signals
  wire [4:0]  cfg_tph_stt_address;
  wire [2:0]  cfg_tph_function_num;
  wire [31:0] cfg_tph_stt_write_data;
  wire        cfg_tph_stt_write_enable;
  wire [3:0]  cfg_tph_stt_write_byte_valid;
  wire [31:0] cfg_tph_stt_read_data;
  wire        cfg_tph_stt_read_enable;
  wire        cfg_tph_stt_read_data_valid;

  // Disable Gen3PCS in PIPE Simulation Mode
  wire gen3pcsdisable ;
  assign gen3pcsdisable = (PIPE_SIM_MODE == "FALSE") ? 1'b0 : 1'b1 ;
  // PCIe Initialization Controller
  rp_pcie_init_ctrl_7vx # (
    .PL_UPSTREAM_FACING                                ( PL_UPSTREAM_FACING ),
    .TCQ                     ( TCQ )
  ) pcie_init_ctrl_7vx_i (
    .clk_i                          (user_clk),
    .reset_n_o                      (reset_n),
    .pipe_reset_n_o                 (pipe_reset_n),
    .mgmt_reset_n_o                 (mgmt_reset_n),
    .mgmt_sticky_reset_n_o          (mgmt_sticky_reset_n),
    .mmcm_lock_i                    (mmcm_lock),
    .phy_rdy_i                      (phy_rdy),
    .cfg_input_update_done_i        (cfg_input_update_done),
    .cfg_input_update_request_o     (cfg_input_update_request),
    .cfg_mc_update_done_i           (cfg_mc_update_done),
    .cfg_mc_update_request_o        (cfg_mc_update_request),
    .user_cfg_input_update_i        ( 1'b0 ),
    .state_o                        (  )
  );

  // PCIe TLP Processing Hints Table
  rp_pcie_tlp_tph_tbl_7vx # (
    .TCQ                            (TCQ )
  ) pcie_tlp_tph_tbl_7vx_i (
    .user_clk                       ( user_clk ),                     // User Clock
    .reset_n                        ( reset_n ),                      // Warm, Hot Reset, active low

    // Integrated Block Interface
    .cfg_tph_stt_address_i          ( cfg_tph_stt_address ),          // Address
    .cfg_tph_function_num_i         ( cfg_tph_function_num ),         // Function #
    .cfg_tph_stt_write_data_i       ( cfg_tph_stt_write_data ), 	    // Write Data
    .cfg_tph_stt_write_enable_i     ( cfg_tph_stt_write_enable ),	    // Write Data Enable
    .cfg_tph_stt_write_byte_valid_i ( cfg_tph_stt_write_byte_valid ), // WBE
    .cfg_tph_stt_read_data_o        ( cfg_tph_stt_read_data ),        // Read Data
    .cfg_tph_stt_read_enable_i      ( cfg_tph_stt_read_enable ),      // Read Data Enable
    .cfg_tph_stt_read_data_valid_o	( cfg_tph_stt_read_data_valid ),  // Read Data Valid

    // User Interface
    .user_tph_stt_address_i         ( user_tph_stt_address ),         // Address
    .user_tph_function_num_i        ( user_tph_function_num ),        // Function #
    .user_tph_stt_read_data_o       ( user_tph_stt_read_data ),       // Read Data
    .user_tph_stt_read_data_valid_o ( user_tph_stt_read_data_valid ), // Read Data Valid
    .user_tph_stt_read_enable_i     ( user_tph_stt_read_enable )      // Read Data Enable
  );


  rp_pcie_7vx #(
    .ARI_CAP_ENABLE                                    ( ARI_CAP_ENABLE ),
    .AXISTEN_IF_CC_ALIGNMENT_MODE                      ( AXISTEN_IF_CC_ALIGNMENT_MODE ),
    .AXISTEN_IF_CC_PARITY_CHK                          ( AXISTEN_IF_CC_PARITY_CHK ),
    .AXISTEN_IF_CQ_ALIGNMENT_MODE                      ( AXISTEN_IF_CQ_ALIGNMENT_MODE ),
    .AXISTEN_IF_ENABLE_CLIENT_TAG                      ( AXISTEN_IF_ENABLE_CLIENT_TAG ),
    .AXISTEN_IF_ENABLE_MSG_ROUTE                       ( AXISTEN_IF_ENABLE_MSG_ROUTE ),
    .AXISTEN_IF_ENABLE_RX_MSG_INTFC                    ( AXISTEN_IF_ENABLE_RX_MSG_INTFC ),
    .AXISTEN_IF_RC_ALIGNMENT_MODE                      ( AXISTEN_IF_RC_ALIGNMENT_MODE ),
    .AXISTEN_IF_RC_STRADDLE                            ( AXISTEN_IF_RC_STRADDLE ),
    .AXISTEN_IF_RQ_ALIGNMENT_MODE                      ( AXISTEN_IF_RQ_ALIGNMENT_MODE ),
    .AXISTEN_IF_RQ_PARITY_CHK                          ( AXISTEN_IF_RQ_PARITY_CHK ),
    .AXISTEN_IF_WIDTH                                  ( AXISTEN_IF_WIDTH ),
    .CRM_CORE_CLK_FREQ_500                             ( CRM_CORE_CLK_FREQ_500 ),
    .CRM_USER_CLK_FREQ                                 ( CRM_USER_CLK_FREQ ),
    .DNSTREAM_LINK_NUM                                 ( DNSTREAM_LINK_NUM ),
    .GEN3_PCS_AUTO_REALIGN                             ( GEN3_PCS_AUTO_REALIGN ),
    .GEN3_PCS_RX_ELECIDLE_INTERNAL                     ( GEN3_PCS_RX_ELECIDLE_INTERNAL ),
    .LL_ACK_TIMEOUT                                    ( LL_ACK_TIMEOUT ),
    .LL_ACK_TIMEOUT_EN                                 ( LL_ACK_TIMEOUT_EN ),
    .LL_ACK_TIMEOUT_FUNC                               ( LL_ACK_TIMEOUT_FUNC ),
    .LL_CPL_FC_UPDATE_TIMER                            ( LL_CPL_FC_UPDATE_TIMER ),
    .LL_CPL_FC_UPDATE_TIMER_OVERRIDE                   ( LL_CPL_FC_UPDATE_TIMER_OVERRIDE ),
    .LL_FC_UPDATE_TIMER                                ( LL_FC_UPDATE_TIMER ),
    .LL_FC_UPDATE_TIMER_OVERRIDE                       ( LL_FC_UPDATE_TIMER_OVERRIDE ),
    .LL_NP_FC_UPDATE_TIMER                             ( LL_NP_FC_UPDATE_TIMER ),
    .LL_NP_FC_UPDATE_TIMER_OVERRIDE                    ( LL_NP_FC_UPDATE_TIMER_OVERRIDE ),
    .LL_P_FC_UPDATE_TIMER                              ( LL_P_FC_UPDATE_TIMER ),
    .LL_P_FC_UPDATE_TIMER_OVERRIDE                     ( LL_P_FC_UPDATE_TIMER_OVERRIDE ),
    .LL_REPLAY_TIMEOUT                                 ( LL_REPLAY_TIMEOUT ),
    .LL_REPLAY_TIMEOUT_EN                              ( LL_REPLAY_TIMEOUT_EN ),
    .LL_REPLAY_TIMEOUT_FUNC                            ( LL_REPLAY_TIMEOUT_FUNC ),
    .LTR_TX_MESSAGE_MINIMUM_INTERVAL                   ( LTR_TX_MESSAGE_MINIMUM_INTERVAL ),
    .LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE         ( LTR_TX_MESSAGE_ON_FUNC_POWER_STATE_CHANGE ),
    .LTR_TX_MESSAGE_ON_LTR_ENABLE                      ( LTR_TX_MESSAGE_ON_LTR_ENABLE ),
    .PF0_AER_CAP_ECRC_CHECK_CAPABLE                    ( PF0_AER_CAP_ECRC_CHECK_CAPABLE ),
    .PF0_AER_CAP_ECRC_GEN_CAPABLE                      ( PF0_AER_CAP_ECRC_GEN_CAPABLE ),
    .PF0_AER_CAP_NEXTPTR                               ( PF0_AER_CAP_NEXTPTR ),
    .PF0_ARI_CAP_NEXTPTR                               ( PF0_ARI_CAP_NEXTPTR ),
    .PF0_ARI_CAP_NEXT_FUNC                             ( PF0_ARI_CAP_NEXT_FUNC ),
    .PF0_ARI_CAP_VER                                   ( PF0_ARI_CAP_VER ),
    .PF0_BAR0_APERTURE_SIZE                            ( PF0_BAR0_APERTURE_SIZE ),
    .PF0_BAR0_CONTROL                                  ( PF0_BAR0_CONTROL ),
    .PF0_BAR1_APERTURE_SIZE                            ( PF0_BAR1_APERTURE_SIZE ),
    .PF0_BAR1_CONTROL                                  ( PF0_BAR1_CONTROL ),
    .PF0_BAR2_APERTURE_SIZE                            ( PF0_BAR2_APERTURE_SIZE ),
    .PF0_BAR2_CONTROL                                  ( PF0_BAR2_CONTROL ),
    .PF0_BAR3_APERTURE_SIZE                            ( PF0_BAR3_APERTURE_SIZE ),
    .PF0_BAR3_CONTROL                                  ( PF0_BAR3_CONTROL ),
    .PF0_BAR4_APERTURE_SIZE                            ( PF0_BAR4_APERTURE_SIZE ),
    .PF0_BAR4_CONTROL                                  ( PF0_BAR4_CONTROL ),
    .PF0_BAR5_APERTURE_SIZE                            ( PF0_BAR5_APERTURE_SIZE ),
    .PF0_BAR5_CONTROL                                  ( PF0_BAR5_CONTROL ),
    .PF0_BIST_REGISTER                                 ( PF0_BIST_REGISTER ),
    .PF0_CAPABILITY_POINTER                            ( PF0_CAPABILITY_POINTER ),
    .PF0_CLASS_CODE                                    ( PF0_CLASS_CODE ),
    .PF0_DEVICE_ID                                     ( PF0_DEVICE_ID ),
    .PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT    ( PF0_DEV_CAP2_128B_CAS_ATOMIC_COMPLETER_SUPPORT ),
    .PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT         ( PF0_DEV_CAP2_32B_ATOMIC_COMPLETER_SUPPORT ),
    .PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT         ( PF0_DEV_CAP2_64B_ATOMIC_COMPLETER_SUPPORT ),
    .PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE                  ( PF0_DEV_CAP2_CPL_TIMEOUT_DISABLE ),
    .PF0_DEV_CAP2_LTR_SUPPORT                          ( PF0_DEV_CAP2_LTR_SUPPORT ),
    .PF0_DEV_CAP2_OBFF_SUPPORT                         ( PF0_DEV_CAP2_OBFF_SUPPORT ),
    .PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT                ( PF0_DEV_CAP2_TPH_COMPLETER_SUPPORT ),
    .PF0_DEV_CAP_ENDPOINT_L0S_LATENCY                  ( PF0_DEV_CAP_ENDPOINT_L0S_LATENCY ),
    .PF0_DEV_CAP_ENDPOINT_L1_LATENCY                   ( PF0_DEV_CAP_ENDPOINT_L1_LATENCY ),
    .PF0_DEV_CAP_EXT_TAG_SUPPORTED                     ( PF0_DEV_CAP_EXT_TAG_SUPPORTED ),
    .PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE          ( PF0_DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE ),
    .PF0_DEV_CAP_MAX_PAYLOAD_SIZE                      ( PF0_DEV_CAP_MAX_PAYLOAD_SIZE ),
    .PF0_DPA_CAP_NEXTPTR                               ( PF0_DPA_CAP_NEXTPTR ),
    .VF0_ARI_CAP_NEXTPTR (VF0_ARI_CAP_NEXTPTR ),
    .VF1_ARI_CAP_NEXTPTR (VF1_ARI_CAP_NEXTPTR ),
    .VF2_ARI_CAP_NEXTPTR (VF2_ARI_CAP_NEXTPTR ),
    .VF3_ARI_CAP_NEXTPTR (VF3_ARI_CAP_NEXTPTR ),
    .VF4_ARI_CAP_NEXTPTR (VF4_ARI_CAP_NEXTPTR ),
    .VF5_ARI_CAP_NEXTPTR (VF5_ARI_CAP_NEXTPTR ),
    .VF0_TPHR_CAP_DEV_SPECIFIC_MODE (VF0_TPHR_CAP_DEV_SPECIFIC_MODE),
    .VF0_TPHR_CAP_ENABLE (VF0_TPHR_CAP_ENABLE),
    .VF0_TPHR_CAP_INT_VEC_MODE (VF0_TPHR_CAP_INT_VEC_MODE),
    .VF0_TPHR_CAP_NEXTPTR (VF0_TPHR_CAP_NEXTPTR),
    .VF0_TPHR_CAP_ST_MODE_SEL (VF0_TPHR_CAP_ST_MODE_SEL),
    .VF0_TPHR_CAP_ST_TABLE_LOC (VF0_TPHR_CAP_ST_TABLE_LOC),
    .VF0_TPHR_CAP_ST_TABLE_SIZE (VF0_TPHR_CAP_ST_TABLE_SIZE),
    .VF0_TPHR_CAP_VER (VF0_TPHR_CAP_VER),
    .VF1_TPHR_CAP_DEV_SPECIFIC_MODE (VF1_TPHR_CAP_DEV_SPECIFIC_MODE),
    .VF1_TPHR_CAP_ENABLE (VF1_TPHR_CAP_ENABLE),
    .VF1_TPHR_CAP_INT_VEC_MODE (VF1_TPHR_CAP_INT_VEC_MODE),
    .VF1_TPHR_CAP_NEXTPTR (VF1_TPHR_CAP_NEXTPTR),
    .VF1_TPHR_CAP_ST_MODE_SEL (VF1_TPHR_CAP_ST_MODE_SEL),
    .VF1_TPHR_CAP_ST_TABLE_LOC (VF1_TPHR_CAP_ST_TABLE_LOC),
    .VF1_TPHR_CAP_ST_TABLE_SIZE (VF1_TPHR_CAP_ST_TABLE_SIZE),
    .VF1_TPHR_CAP_VER (VF1_TPHR_CAP_VER),
    .VF2_TPHR_CAP_DEV_SPECIFIC_MODE (VF2_TPHR_CAP_DEV_SPECIFIC_MODE),
    .VF2_TPHR_CAP_ENABLE (VF2_TPHR_CAP_ENABLE),
    .VF2_TPHR_CAP_INT_VEC_MODE (VF2_TPHR_CAP_INT_VEC_MODE),
    .VF2_TPHR_CAP_NEXTPTR (VF2_TPHR_CAP_NEXTPTR),
    .VF2_TPHR_CAP_ST_MODE_SEL (VF2_TPHR_CAP_ST_MODE_SEL),
    .VF2_TPHR_CAP_ST_TABLE_LOC (VF2_TPHR_CAP_ST_TABLE_LOC),
    .VF2_TPHR_CAP_ST_TABLE_SIZE (VF2_TPHR_CAP_ST_TABLE_SIZE),
    .VF2_TPHR_CAP_VER (VF2_TPHR_CAP_VER),
    .VF3_TPHR_CAP_DEV_SPECIFIC_MODE (VF3_TPHR_CAP_DEV_SPECIFIC_MODE),
    .VF3_TPHR_CAP_ENABLE (VF3_TPHR_CAP_ENABLE),
    .VF3_TPHR_CAP_INT_VEC_MODE (VF3_TPHR_CAP_INT_VEC_MODE),
    .VF3_TPHR_CAP_NEXTPTR (VF3_TPHR_CAP_NEXTPTR),
    .VF3_TPHR_CAP_ST_MODE_SEL (VF3_TPHR_CAP_ST_MODE_SEL),
    .VF3_TPHR_CAP_ST_TABLE_LOC (VF3_TPHR_CAP_ST_TABLE_LOC),
    .VF3_TPHR_CAP_ST_TABLE_SIZE (VF3_TPHR_CAP_ST_TABLE_SIZE),
    .VF3_TPHR_CAP_VER (VF3_TPHR_CAP_VER),
    .VF4_TPHR_CAP_DEV_SPECIFIC_MODE (VF4_TPHR_CAP_DEV_SPECIFIC_MODE),
    .VF4_TPHR_CAP_ENABLE (VF4_TPHR_CAP_ENABLE),
    .VF4_TPHR_CAP_INT_VEC_MODE (VF4_TPHR_CAP_INT_VEC_MODE),
    .VF4_TPHR_CAP_NEXTPTR (VF4_TPHR_CAP_NEXTPTR),
    .VF4_TPHR_CAP_ST_MODE_SEL (VF4_TPHR_CAP_ST_MODE_SEL),
    .VF4_TPHR_CAP_ST_TABLE_LOC (VF4_TPHR_CAP_ST_TABLE_LOC),
    .VF4_TPHR_CAP_ST_TABLE_SIZE (VF4_TPHR_CAP_ST_TABLE_SIZE),
    .VF4_TPHR_CAP_VER (VF4_TPHR_CAP_VER),
    .VF5_TPHR_CAP_DEV_SPECIFIC_MODE (VF5_TPHR_CAP_DEV_SPECIFIC_MODE),
    .VF5_TPHR_CAP_ENABLE (VF5_TPHR_CAP_ENABLE),
    .VF5_TPHR_CAP_INT_VEC_MODE (VF5_TPHR_CAP_INT_VEC_MODE),
    .VF5_TPHR_CAP_NEXTPTR (VF5_TPHR_CAP_NEXTPTR),
    .VF5_TPHR_CAP_ST_MODE_SEL (VF5_TPHR_CAP_ST_MODE_SEL),
    .VF5_TPHR_CAP_ST_TABLE_LOC (VF5_TPHR_CAP_ST_TABLE_LOC),
    .VF5_TPHR_CAP_ST_TABLE_SIZE (VF5_TPHR_CAP_ST_TABLE_SIZE),
    .VF5_TPHR_CAP_VER (VF5_TPHR_CAP_VER),
    .PF0_DPA_CAP_SUB_STATE_CONTROL                     ( PF0_DPA_CAP_SUB_STATE_CONTROL ),
    .PF0_DPA_CAP_SUB_STATE_CONTROL_EN                  ( PF0_DPA_CAP_SUB_STATE_CONTROL_EN ),
    .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION0           ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 ),
    .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION1           ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 ),
    .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION2           ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 ),
    .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION3           ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 ),
    .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION4           ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 ),
    .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION5           ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 ),
    .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION6           ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 ),
    .PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION7           ( PF0_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 ),
    .PF0_DPA_CAP_VER                                   ( PF0_DPA_CAP_VER ),
    .PF0_DSN_CAP_NEXTPTR                               ( PF0_DSN_CAP_NEXTPTR ),
    .PF0_EXPANSION_ROM_APERTURE_SIZE                   ( PF0_EXPANSION_ROM_APERTURE_SIZE ),
    .PF0_EXPANSION_ROM_ENABLE                          ( PF0_EXPANSION_ROM_ENABLE ),
    .PF0_INTERRUPT_LINE                                ( PF0_INTERRUPT_LINE ),
    .PF0_INTERRUPT_PIN                                 ( PF0_INTERRUPT_PIN ),
    .PF0_LINK_CAP_ASPM_SUPPORT                         ( PF0_LINK_CAP_ASPM_SUPPORT ),
    .PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1         ( PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1 ),
    .PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2         ( PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2 ),
    .PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3         ( PF0_LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN3 ),
    .PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1                ( PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN1 ),
    .PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2                ( PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN2 ),
    .PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3                ( PF0_LINK_CAP_L0S_EXIT_LATENCY_GEN3 ),
    .PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1          ( PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1 ),
    .PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2          ( PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2 ),
    .PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3          ( PF0_LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN3 ),
    .PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1                 ( PF0_LINK_CAP_L1_EXIT_LATENCY_GEN1 ),
    .PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2                 ( PF0_LINK_CAP_L1_EXIT_LATENCY_GEN2 ),
    .PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3                 ( PF0_LINK_CAP_L1_EXIT_LATENCY_GEN3 ),
    .PF0_LINK_STATUS_SLOT_CLOCK_CONFIG                 ( PF0_LINK_STATUS_SLOT_CLOCK_CONFIG ),
    .PF0_LTR_CAP_MAX_NOSNOOP_LAT                       ( PF0_LTR_CAP_MAX_NOSNOOP_LAT ),
    .PF0_LTR_CAP_MAX_SNOOP_LAT                         ( PF0_LTR_CAP_MAX_SNOOP_LAT ),
    .PF0_LTR_CAP_NEXTPTR                               ( PF0_LTR_CAP_NEXTPTR ),
    .PF0_LTR_CAP_VER                                   ( PF0_LTR_CAP_VER ),
    .PF0_MSIX_CAP_NEXTPTR                              ( PF0_MSIX_CAP_NEXTPTR ),
    .PF0_MSIX_CAP_PBA_BIR                              ( PF0_MSIX_CAP_PBA_BIR ),
    .PF0_MSIX_CAP_PBA_OFFSET                           ( PF0_MSIX_CAP_PBA_OFFSET ),
    .PF0_MSIX_CAP_TABLE_BIR                            ( PF0_MSIX_CAP_TABLE_BIR ),
    .PF0_MSIX_CAP_TABLE_OFFSET                         ( PF0_MSIX_CAP_TABLE_OFFSET ),
    .PF0_MSIX_CAP_TABLE_SIZE                           ( PF0_MSIX_CAP_TABLE_SIZE ),
    .PF0_MSI_CAP_MULTIMSGCAP                           ( PF0_MSI_CAP_MULTIMSGCAP ),
    .PF0_MSI_CAP_NEXTPTR                               ( PF0_MSI_CAP_NEXTPTR ),
    .PF0_PB_CAP_NEXTPTR                                ( PF0_PB_CAP_NEXTPTR ),
    .PF0_PB_CAP_SYSTEM_ALLOCATED                       ( PF0_PB_CAP_SYSTEM_ALLOCATED ),
    .PF0_PB_CAP_VER                                    ( PF0_PB_CAP_VER ),
    .PF0_PM_CAP_ID                                     ( PF0_PM_CAP_ID ),
    .PF0_PM_CAP_NEXTPTR                                ( PF0_PM_CAP_NEXTPTR ),
    .PF0_PM_CAP_PMESUPPORT_D0                          ( PF0_PM_CAP_PMESUPPORT_D0 ),
    .PF0_PM_CAP_PMESUPPORT_D1                          ( PF0_PM_CAP_PMESUPPORT_D1 ),
    .PF0_PM_CAP_PMESUPPORT_D3HOT                       ( PF0_PM_CAP_PMESUPPORT_D3HOT ),
    .PF0_PM_CAP_SUPP_D1_STATE                          ( PF0_PM_CAP_SUPP_D1_STATE ),
    .PF0_PM_CAP_VER_ID                                 ( PF0_PM_CAP_VER_ID ),
    .PF0_PM_CSR_NOSOFTRESET                            ( PF0_PM_CSR_NOSOFTRESET ),
    .PF0_RBAR_CAP_ENABLE                               ( PF0_RBAR_CAP_ENABLE ),
    .PF0_RBAR_CAP_INDEX0                               ( PF0_RBAR_CAP_INDEX0 ),
    .PF0_RBAR_CAP_INDEX1                               ( PF0_RBAR_CAP_INDEX1 ),
    .PF0_RBAR_CAP_INDEX2                               ( PF0_RBAR_CAP_INDEX2 ),
    .PF0_RBAR_CAP_NEXTPTR                              ( PF0_RBAR_CAP_NEXTPTR ),
    .PF0_RBAR_CAP_SIZE0                                ( PF0_RBAR_CAP_SIZE0 ),
    .PF0_RBAR_CAP_SIZE1                                ( PF0_RBAR_CAP_SIZE1 ),
    .PF0_RBAR_CAP_SIZE2                                ( PF0_RBAR_CAP_SIZE2 ),
    .PF0_RBAR_CAP_VER                                  ( PF0_RBAR_CAP_VER ),
    .PF0_RBAR_NUM                                      ( PF0_RBAR_NUM ),
    .PF0_REVISION_ID                                   ( PF0_REVISION_ID ),
    .PF0_SRIOV_BAR0_APERTURE_SIZE                      ( PF0_SRIOV_BAR0_APERTURE_SIZE ),
    .PF0_SRIOV_BAR0_CONTROL                            ( PF0_SRIOV_BAR0_CONTROL ),
    .PF0_SRIOV_BAR1_APERTURE_SIZE                      ( PF0_SRIOV_BAR1_APERTURE_SIZE ),
    .PF0_SRIOV_BAR1_CONTROL                            ( PF0_SRIOV_BAR1_CONTROL ),
    .PF0_SRIOV_BAR2_APERTURE_SIZE                      ( PF0_SRIOV_BAR2_APERTURE_SIZE ),
    .PF0_SRIOV_BAR2_CONTROL                            ( PF0_SRIOV_BAR2_CONTROL ),
    .PF0_SRIOV_BAR3_APERTURE_SIZE                      ( PF0_SRIOV_BAR3_APERTURE_SIZE ),
    .PF0_SRIOV_BAR3_CONTROL                            ( PF0_SRIOV_BAR3_CONTROL ),
    .PF0_SRIOV_BAR4_APERTURE_SIZE                      ( PF0_SRIOV_BAR4_APERTURE_SIZE ),
    .PF0_SRIOV_BAR4_CONTROL                            ( PF0_SRIOV_BAR4_CONTROL ),
    .PF0_SRIOV_BAR5_APERTURE_SIZE                      ( PF0_SRIOV_BAR5_APERTURE_SIZE ),
    .PF0_SRIOV_BAR5_CONTROL                            ( PF0_SRIOV_BAR5_CONTROL ),
    .PF0_SRIOV_CAP_INITIAL_VF                          ( PF0_SRIOV_CAP_INITIAL_VF ),
    .PF0_SRIOV_CAP_NEXTPTR                             ( PF0_SRIOV_CAP_NEXTPTR ),
    .PF0_SRIOV_CAP_TOTAL_VF                            ( PF0_SRIOV_CAP_TOTAL_VF ),
    .PF0_SRIOV_CAP_VER                                 ( PF0_SRIOV_CAP_VER ),
    .PF0_SRIOV_FIRST_VF_OFFSET                         ( PF0_SRIOV_FIRST_VF_OFFSET ),
    .PF0_SRIOV_FUNC_DEP_LINK                           ( PF0_SRIOV_FUNC_DEP_LINK ),
    .PF0_SRIOV_SUPPORTED_PAGE_SIZE                     ( PF0_SRIOV_SUPPORTED_PAGE_SIZE ),
    .PF0_SRIOV_VF_DEVICE_ID                            ( PF0_SRIOV_VF_DEVICE_ID ),
    .PF0_SUBSYSTEM_ID                                  ( PF0_SUBSYSTEM_ID ),
    .PF0_TPHR_CAP_DEV_SPECIFIC_MODE                    ( PF0_TPHR_CAP_DEV_SPECIFIC_MODE ),
    .PF0_TPHR_CAP_ENABLE                               ( PF0_TPHR_CAP_ENABLE ),
    .PF0_TPHR_CAP_INT_VEC_MODE                         ( PF0_TPHR_CAP_INT_VEC_MODE ),
    .PF0_TPHR_CAP_NEXTPTR                              ( PF0_TPHR_CAP_NEXTPTR ),
    .PF0_TPHR_CAP_ST_MODE_SEL                          ( PF0_TPHR_CAP_ST_MODE_SEL ),
    .PF0_TPHR_CAP_ST_TABLE_LOC                         ( PF0_TPHR_CAP_ST_TABLE_LOC ),
    .PF0_TPHR_CAP_ST_TABLE_SIZE                        ( PF0_TPHR_CAP_ST_TABLE_SIZE ),
    .PF0_TPHR_CAP_VER                                  ( PF0_TPHR_CAP_VER ),
    .PF0_VC_CAP_NEXTPTR                                ( PF0_VC_CAP_NEXTPTR ),
    .PF0_VC_CAP_VER                                    ( PF0_VC_CAP_VER ),
    .PF1_AER_CAP_ECRC_CHECK_CAPABLE                    ( PF1_AER_CAP_ECRC_CHECK_CAPABLE ),
    .PF1_AER_CAP_ECRC_GEN_CAPABLE                      ( PF1_AER_CAP_ECRC_GEN_CAPABLE ),
    .PF1_AER_CAP_NEXTPTR                               ( PF1_AER_CAP_NEXTPTR ),
    .PF1_ARI_CAP_NEXTPTR                               ( PF1_ARI_CAP_NEXTPTR ),
    .PF1_ARI_CAP_NEXT_FUNC                             ( PF1_ARI_CAP_NEXT_FUNC ),
    .PF1_BAR0_APERTURE_SIZE                            ( PF1_BAR0_APERTURE_SIZE ),
    .PF1_BAR0_CONTROL                                  ( PF1_BAR0_CONTROL ),
    .PF1_BAR1_APERTURE_SIZE                            ( PF1_BAR1_APERTURE_SIZE ),
    .PF1_BAR1_CONTROL                                  ( PF1_BAR1_CONTROL ),
    .PF1_BAR2_APERTURE_SIZE                            ( PF1_BAR2_APERTURE_SIZE ),
    .PF1_BAR2_CONTROL                                  ( PF1_BAR2_CONTROL ),
    .PF1_BAR3_APERTURE_SIZE                            ( PF1_BAR3_APERTURE_SIZE ),
    .PF1_BAR3_CONTROL                                  ( PF1_BAR3_CONTROL ),
    .PF1_BAR4_APERTURE_SIZE                            ( PF1_BAR4_APERTURE_SIZE ),
    .PF1_BAR4_CONTROL                                  ( PF1_BAR4_CONTROL ),
    .PF1_BAR5_APERTURE_SIZE                            ( PF1_BAR5_APERTURE_SIZE ),
    .PF1_BAR5_CONTROL                                  ( PF1_BAR5_CONTROL ),
    .PF1_BIST_REGISTER                                 ( PF1_BIST_REGISTER ),
    .PF1_CAPABILITY_POINTER                            ( PF1_CAPABILITY_POINTER ),
    .PF1_CLASS_CODE                                    ( PF1_CLASS_CODE ),
    .PF1_DEVICE_ID                                     ( PF1_DEVICE_ID ),
    .PF1_DEV_CAP_MAX_PAYLOAD_SIZE                      ( PF1_DEV_CAP_MAX_PAYLOAD_SIZE ),
    .PF1_DPA_CAP_NEXTPTR                               ( PF1_DPA_CAP_NEXTPTR ),
    .PF1_DPA_CAP_SUB_STATE_CONTROL                     ( PF1_DPA_CAP_SUB_STATE_CONTROL ),
    .PF1_DPA_CAP_SUB_STATE_CONTROL_EN                  ( PF1_DPA_CAP_SUB_STATE_CONTROL_EN ),
    .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION0           ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION0 ),
    .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION1           ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION1 ),
    .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION2           ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION2 ),
    .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION3           ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION3 ),
    .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION4           ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION4 ),
    .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION5           ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION5 ),
    .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION6           ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION6 ),
    .PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION7           ( PF1_DPA_CAP_SUB_STATE_POWER_ALLOCATION7 ),
    .PF1_DPA_CAP_VER                                   ( PF1_DPA_CAP_VER ),
    .PF1_DSN_CAP_NEXTPTR                               ( PF1_DSN_CAP_NEXTPTR ),
    .PF1_EXPANSION_ROM_APERTURE_SIZE                   ( PF1_EXPANSION_ROM_APERTURE_SIZE ),
    .PF1_EXPANSION_ROM_ENABLE                          ( PF1_EXPANSION_ROM_ENABLE ),
    .PF1_INTERRUPT_LINE                                ( PF1_INTERRUPT_LINE ),
    .PF1_INTERRUPT_PIN                                 ( PF1_INTERRUPT_PIN ),
    .PF1_MSIX_CAP_NEXTPTR                              ( PF1_MSIX_CAP_NEXTPTR ),
    .PF1_MSIX_CAP_PBA_BIR                              ( PF1_MSIX_CAP_PBA_BIR ),
    .PF1_MSIX_CAP_PBA_OFFSET                           ( PF1_MSIX_CAP_PBA_OFFSET ),
    .PF1_MSIX_CAP_TABLE_BIR                            ( PF1_MSIX_CAP_TABLE_BIR ),
    .PF1_MSIX_CAP_TABLE_OFFSET                         ( PF1_MSIX_CAP_TABLE_OFFSET ),
    .PF1_MSIX_CAP_TABLE_SIZE                           ( PF1_MSIX_CAP_TABLE_SIZE ),
    .PF1_MSI_CAP_MULTIMSGCAP                           ( PF1_MSI_CAP_MULTIMSGCAP ),
    .PF1_MSI_CAP_NEXTPTR                               ( PF1_MSI_CAP_NEXTPTR ),
    .PF1_PB_CAP_NEXTPTR                                ( PF1_PB_CAP_NEXTPTR ),
    .PF1_PB_CAP_SYSTEM_ALLOCATED                       ( PF1_PB_CAP_SYSTEM_ALLOCATED ),
    .PF1_PB_CAP_VER                                    ( PF1_PB_CAP_VER ),
    .PF1_PM_CAP_ID                                     ( PF1_PM_CAP_ID ),
    .PF1_PM_CAP_NEXTPTR                                ( PF1_PM_CAP_NEXTPTR ),
    .PF1_PM_CAP_VER_ID                                 ( PF1_PM_CAP_VER_ID ),
    .PF1_RBAR_CAP_ENABLE                               ( PF1_RBAR_CAP_ENABLE ),
    .PF1_RBAR_CAP_INDEX0                               ( PF1_RBAR_CAP_INDEX0 ),
    .PF1_RBAR_CAP_INDEX1                               ( PF1_RBAR_CAP_INDEX1 ),
    .PF1_RBAR_CAP_INDEX2                               ( PF1_RBAR_CAP_INDEX2 ),
    .PF1_RBAR_CAP_NEXTPTR                              ( PF1_RBAR_CAP_NEXTPTR ),
    .PF1_RBAR_CAP_SIZE0                                ( PF1_RBAR_CAP_SIZE0 ),
    .PF1_RBAR_CAP_SIZE1                                ( PF1_RBAR_CAP_SIZE1 ),
    .PF1_RBAR_CAP_SIZE2                                ( PF1_RBAR_CAP_SIZE2 ),
    .PF1_RBAR_CAP_VER                                  ( PF1_RBAR_CAP_VER ),
    .PF1_RBAR_NUM                                      ( PF1_RBAR_NUM ),
    .PF1_REVISION_ID                                   ( PF1_REVISION_ID ),
    .PF1_SRIOV_BAR0_APERTURE_SIZE                      ( PF1_SRIOV_BAR0_APERTURE_SIZE ),
    .PF1_SRIOV_BAR0_CONTROL                            ( PF1_SRIOV_BAR0_CONTROL ),
    .PF1_SRIOV_BAR1_APERTURE_SIZE                      ( PF1_SRIOV_BAR1_APERTURE_SIZE ),
    .PF1_SRIOV_BAR1_CONTROL                            ( PF1_SRIOV_BAR1_CONTROL ),
    .PF1_SRIOV_BAR2_APERTURE_SIZE                      ( PF1_SRIOV_BAR2_APERTURE_SIZE ),
    .PF1_SRIOV_BAR2_CONTROL                            ( PF1_SRIOV_BAR2_CONTROL ),
    .PF1_SRIOV_BAR3_APERTURE_SIZE                      ( PF1_SRIOV_BAR3_APERTURE_SIZE ),
    .PF1_SRIOV_BAR3_CONTROL                            ( PF1_SRIOV_BAR3_CONTROL ),
    .PF1_SRIOV_BAR4_APERTURE_SIZE                      ( PF1_SRIOV_BAR4_APERTURE_SIZE ),
    .PF1_SRIOV_BAR4_CONTROL                            ( PF1_SRIOV_BAR4_CONTROL ),
    .PF1_SRIOV_BAR5_APERTURE_SIZE                      ( PF1_SRIOV_BAR5_APERTURE_SIZE ),
    .PF1_SRIOV_BAR5_CONTROL                            ( PF1_SRIOV_BAR5_CONTROL ),
    .PF1_SRIOV_CAP_INITIAL_VF                          ( PF1_SRIOV_CAP_INITIAL_VF ),
    .PF1_SRIOV_CAP_NEXTPTR                             ( PF1_SRIOV_CAP_NEXTPTR ),
    .PF1_SRIOV_CAP_TOTAL_VF                            ( PF1_SRIOV_CAP_TOTAL_VF ),
    .PF1_SRIOV_CAP_VER                                 ( PF1_SRIOV_CAP_VER ),
    .PF1_SRIOV_FIRST_VF_OFFSET                         ( PF1_SRIOV_FIRST_VF_OFFSET ),
    .PF1_SRIOV_FUNC_DEP_LINK                           ( PF1_SRIOV_FUNC_DEP_LINK ),
    .PF1_SRIOV_SUPPORTED_PAGE_SIZE                     ( PF1_SRIOV_SUPPORTED_PAGE_SIZE ),
    .PF1_SRIOV_VF_DEVICE_ID                            ( PF1_SRIOV_VF_DEVICE_ID ),
    .PF1_SUBSYSTEM_ID                                  ( PF1_SUBSYSTEM_ID ),
    .PF1_TPHR_CAP_DEV_SPECIFIC_MODE                    ( PF1_TPHR_CAP_DEV_SPECIFIC_MODE ),
    .PF1_TPHR_CAP_ENABLE                               ( PF1_TPHR_CAP_ENABLE ),
    .PF1_TPHR_CAP_INT_VEC_MODE                         ( PF1_TPHR_CAP_INT_VEC_MODE ),
    .PF1_TPHR_CAP_NEXTPTR                              ( PF1_TPHR_CAP_NEXTPTR ),
    .PF1_TPHR_CAP_ST_MODE_SEL                          ( PF1_TPHR_CAP_ST_MODE_SEL ),
    .PF1_TPHR_CAP_ST_TABLE_LOC                         ( PF1_TPHR_CAP_ST_TABLE_LOC ),
    .PF1_TPHR_CAP_ST_TABLE_SIZE                        ( PF1_TPHR_CAP_ST_TABLE_SIZE ),
    .PF1_TPHR_CAP_VER                                  ( PF1_TPHR_CAP_VER ),
    .PL_DISABLE_EI_INFER_IN_L0                         ( PL_DISABLE_EI_INFER_IN_L0 ),
    .PL_DISABLE_GEN3_DC_BALANCE                        ( PL_DISABLE_GEN3_DC_BALANCE ),
    .PL_DISABLE_SCRAMBLING                             ( PL_DISABLE_SCRAMBLING ),
    .PL_DISABLE_UPCONFIG_CAPABLE                       ( PL_DISABLE_UPCONFIG_CAPABLE ),
    .PL_EQ_ADAPT_DISABLE_COEFF_CHECK                   ( PL_EQ_ADAPT_DISABLE_COEFF_CHECK ),
    .PL_EQ_ADAPT_DISABLE_PRESET_CHECK                  ( PL_EQ_ADAPT_DISABLE_PRESET_CHECK ),
    .PL_EQ_ADAPT_ITER_COUNT                            ( PL_EQ_ADAPT_ITER_COUNT ),
    .PL_EQ_ADAPT_REJECT_RETRY_COUNT                    ( PL_EQ_ADAPT_REJECT_RETRY_COUNT ),
    .PL_EQ_BYPASS_PHASE23                              ( PL_EQ_BYPASS_PHASE23 ),
    .PL_EQ_SHORT_ADAPT_PHASE                           ( PL_EQ_SHORT_ADAPT_PHASE ),
    .PL_LANE0_EQ_CONTROL                               ( PL_LANE0_EQ_CONTROL ),
    .PL_LANE1_EQ_CONTROL                               ( PL_LANE1_EQ_CONTROL ),
    .PL_LANE2_EQ_CONTROL                               ( PL_LANE2_EQ_CONTROL ),
    .PL_LANE3_EQ_CONTROL                               ( PL_LANE3_EQ_CONTROL ),
    .PL_LANE4_EQ_CONTROL                               ( PL_LANE4_EQ_CONTROL ),
    .PL_LANE5_EQ_CONTROL                               ( PL_LANE5_EQ_CONTROL ),
    .PL_LANE6_EQ_CONTROL                               ( PL_LANE6_EQ_CONTROL ),
    .PL_LANE7_EQ_CONTROL                               ( PL_LANE7_EQ_CONTROL ),
    .PL_LINK_CAP_MAX_LINK_SPEED                        ( PL_LINK_CAP_MAX_LINK_SPEED ),
    .PL_LINK_CAP_MAX_LINK_WIDTH                        ( PL_LINK_CAP_MAX_LINK_WIDTH ),
    .PL_N_FTS_COMCLK_GEN1                              ( PL_N_FTS_COMCLK_GEN1 ),
    .PL_N_FTS_COMCLK_GEN2                              ( PL_N_FTS_COMCLK_GEN2 ),
    .PL_N_FTS_COMCLK_GEN3                              ( PL_N_FTS_COMCLK_GEN3 ),
    .PL_N_FTS_GEN1                                     ( PL_N_FTS_GEN1 ),
    .PL_N_FTS_GEN2                                     ( PL_N_FTS_GEN2 ),
    .PL_N_FTS_GEN3                                     ( PL_N_FTS_GEN3 ),
    .PL_SIM_FAST_LINK_TRAINING                         ( PL_SIM_FAST_LINK_TRAINING ),
    .PL_UPSTREAM_FACING                                ( PL_UPSTREAM_FACING ),
    .PM_ASPML0S_TIMEOUT                                ( PM_ASPML0S_TIMEOUT ),
    .PM_ASPML1_ENTRY_DELAY                             ( PM_ASPML1_ENTRY_DELAY ),
    .PM_ENABLE_SLOT_POWER_CAPTURE                      ( PM_ENABLE_SLOT_POWER_CAPTURE ),
    .PM_L1_REENTRY_DELAY                               ( PM_L1_REENTRY_DELAY ),
    .PM_PME_SERVICE_TIMEOUT_DELAY                      ( PM_PME_SERVICE_TIMEOUT_DELAY ),
    .PM_PME_TURNOFF_ACK_DELAY                          ( PM_PME_TURNOFF_ACK_DELAY ),
    .SIM_VERSION                                       ( SIM_VERSION ),
    .SPARE_BIT0                                        ( SPARE_BIT0 ),
    .SPARE_BIT1                                        ( SPARE_BIT1 ),
    .SPARE_BIT2                                        ( SPARE_BIT2 ),
    .SPARE_BIT3                                        ( SPARE_BIT3 ),
    .SPARE_BIT4                                        ( SPARE_BIT4 ),
    .SPARE_BIT5                                        ( SPARE_BIT5 ),
    .SPARE_BIT6                                        ( SPARE_BIT6 ),
    .SPARE_BIT7                                        ( SPARE_BIT7 ),
    .SPARE_BIT8                                        ( SPARE_BIT8 ),
    .SPARE_BYTE0                                       ( SPARE_BYTE0 ),
    .SPARE_BYTE1                                       ( SPARE_BYTE1 ),
    .SPARE_BYTE2                                       ( SPARE_BYTE2 ),
    .SPARE_BYTE3                                       ( SPARE_BYTE3 ),
    .SPARE_WORD0                                       ( SPARE_WORD0 ),
    .SPARE_WORD1                                       ( SPARE_WORD1 ),
    .SPARE_WORD2                                       ( SPARE_WORD2 ),
    .SPARE_WORD3                                       ( SPARE_WORD3 ),
    .SRIOV_CAP_ENABLE                                  ( SRIOV_CAP_ENABLE ),
    .TL_COMPL_TIMEOUT_REG0                             ( TL_COMPL_TIMEOUT_REG0 ),
    .TL_COMPL_TIMEOUT_REG1                             ( TL_COMPL_TIMEOUT_REG1 ),
    .TL_CREDITS_CD                                     ( TL_CREDITS_CD ),
    .TL_CREDITS_CH                                     ( TL_CREDITS_CH ),
    .TL_CREDITS_NPD                                    ( TL_CREDITS_NPD ),
    .TL_CREDITS_NPH                                    ( TL_CREDITS_NPH ),
    .TL_CREDITS_PD                                     ( TL_CREDITS_PD ),
    .TL_CREDITS_PH                                     ( TL_CREDITS_PH ),
    .TL_ENABLE_MESSAGE_RID_CHECK_ENABLE                ( TL_ENABLE_MESSAGE_RID_CHECK_ENABLE ),
    .TL_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE           ( TL_EXTENDED_CFG_EXTEND_INTERFACE_ENABLE ),
    .TL_LEGACY_CFG_EXTEND_INTERFACE_ENABLE             ( TL_LEGACY_CFG_EXTEND_INTERFACE_ENABLE ),
    .TL_LEGACY_MODE_ENABLE                             ( TL_LEGACY_MODE_ENABLE ),
    .TL_PF_ENABLE_REG                                  ( TL_PF_ENABLE_REG ),
    .TL_TAG_MGMT_ENABLE                                ( TL_TAG_MGMT_ENABLE ),
    .VF0_CAPABILITY_POINTER                            ( VF0_CAPABILITY_POINTER ),
    .VF0_MSIX_CAP_PBA_BIR                              ( VF0_MSIX_CAP_PBA_BIR ),
    .VF0_MSIX_CAP_PBA_OFFSET                           ( VF0_MSIX_CAP_PBA_OFFSET ),
    .VF0_MSIX_CAP_TABLE_BIR                            ( VF0_MSIX_CAP_TABLE_BIR ),
    .VF0_MSIX_CAP_TABLE_OFFSET                         ( VF0_MSIX_CAP_TABLE_OFFSET ),
    .VF0_MSIX_CAP_TABLE_SIZE                           ( VF0_MSIX_CAP_TABLE_SIZE ),
    .VF0_MSI_CAP_MULTIMSGCAP                           ( VF0_MSI_CAP_MULTIMSGCAP ),
    .VF0_PM_CAP_ID                                     ( VF0_PM_CAP_ID ),
    .VF0_PM_CAP_NEXTPTR                                ( VF0_PM_CAP_NEXTPTR ),
    .VF0_PM_CAP_VER_ID                                 ( VF0_PM_CAP_VER_ID ),
    .VF1_MSIX_CAP_PBA_BIR                              ( VF1_MSIX_CAP_PBA_BIR ),
    .VF1_MSIX_CAP_PBA_OFFSET                           ( VF1_MSIX_CAP_PBA_OFFSET ),
    .VF1_MSIX_CAP_TABLE_BIR                            ( VF1_MSIX_CAP_TABLE_BIR ),
    .VF1_MSIX_CAP_TABLE_OFFSET                         ( VF1_MSIX_CAP_TABLE_OFFSET ),
    .VF1_MSIX_CAP_TABLE_SIZE                           ( VF1_MSIX_CAP_TABLE_SIZE ),
    .VF1_MSI_CAP_MULTIMSGCAP                           ( VF1_MSI_CAP_MULTIMSGCAP ),
    .VF1_PM_CAP_ID                                     ( VF1_PM_CAP_ID ),
    .VF1_PM_CAP_NEXTPTR                                ( VF1_PM_CAP_NEXTPTR ),
    .VF1_PM_CAP_VER_ID                                 ( VF1_PM_CAP_VER_ID ),
    .VF2_MSIX_CAP_PBA_BIR                              ( VF2_MSIX_CAP_PBA_BIR ),
    .VF2_MSIX_CAP_PBA_OFFSET                           ( VF2_MSIX_CAP_PBA_OFFSET ),
    .VF2_MSIX_CAP_TABLE_BIR                            ( VF2_MSIX_CAP_TABLE_BIR ),
    .VF2_MSIX_CAP_TABLE_OFFSET                         ( VF2_MSIX_CAP_TABLE_OFFSET ),
    .VF2_MSIX_CAP_TABLE_SIZE                           ( VF2_MSIX_CAP_TABLE_SIZE ),
    .VF2_MSI_CAP_MULTIMSGCAP                           ( VF2_MSI_CAP_MULTIMSGCAP ),
    .VF2_PM_CAP_ID                                     ( VF2_PM_CAP_ID ),
    .VF2_PM_CAP_NEXTPTR                                ( VF2_PM_CAP_NEXTPTR ),
    .VF2_PM_CAP_VER_ID                                 ( VF2_PM_CAP_VER_ID ),
    .VF3_MSIX_CAP_PBA_BIR                              ( VF3_MSIX_CAP_PBA_BIR ),
    .VF3_MSIX_CAP_PBA_OFFSET                           ( VF3_MSIX_CAP_PBA_OFFSET ),
    .VF3_MSIX_CAP_TABLE_BIR                            ( VF3_MSIX_CAP_TABLE_BIR ),
    .VF3_MSIX_CAP_TABLE_OFFSET                         ( VF3_MSIX_CAP_TABLE_OFFSET ),
    .VF3_MSIX_CAP_TABLE_SIZE                           ( VF3_MSIX_CAP_TABLE_SIZE ),
    .VF3_MSI_CAP_MULTIMSGCAP                           ( VF3_MSI_CAP_MULTIMSGCAP ),
    .VF3_PM_CAP_ID                                     ( VF3_PM_CAP_ID ),
    .VF3_PM_CAP_NEXTPTR                                ( VF3_PM_CAP_NEXTPTR ),
    .VF3_PM_CAP_VER_ID                                 ( VF3_PM_CAP_VER_ID ),
    .VF4_MSIX_CAP_PBA_BIR                              ( VF4_MSIX_CAP_PBA_BIR ),
    .VF4_MSIX_CAP_PBA_OFFSET                           ( VF4_MSIX_CAP_PBA_OFFSET ),
    .VF4_MSIX_CAP_TABLE_BIR                            ( VF4_MSIX_CAP_TABLE_BIR ),
    .VF4_MSIX_CAP_TABLE_OFFSET                         ( VF4_MSIX_CAP_TABLE_OFFSET ),
    .VF4_MSIX_CAP_TABLE_SIZE                           ( VF4_MSIX_CAP_TABLE_SIZE ),
    .VF4_MSI_CAP_MULTIMSGCAP                           ( VF4_MSI_CAP_MULTIMSGCAP ),
    .VF4_PM_CAP_ID                                     ( VF4_PM_CAP_ID ),
    .VF4_PM_CAP_NEXTPTR                                ( VF4_PM_CAP_NEXTPTR ),
    .VF4_PM_CAP_VER_ID                                 ( VF4_PM_CAP_VER_ID ),
    .VF5_MSIX_CAP_PBA_BIR                              ( VF5_MSIX_CAP_PBA_BIR ),
    .VF5_MSIX_CAP_PBA_OFFSET                           ( VF5_MSIX_CAP_PBA_OFFSET ),
    .VF5_MSIX_CAP_TABLE_BIR                            ( VF5_MSIX_CAP_TABLE_BIR ),
    .VF5_MSIX_CAP_TABLE_OFFSET                         ( VF5_MSIX_CAP_TABLE_OFFSET ),
    .VF5_MSIX_CAP_TABLE_SIZE                           ( VF5_MSIX_CAP_TABLE_SIZE ),
    .VF5_MSI_CAP_MULTIMSGCAP                           ( VF5_MSI_CAP_MULTIMSGCAP ),
    .VF5_PM_CAP_ID                                     ( VF5_PM_CAP_ID ),
    .VF5_PM_CAP_NEXTPTR                                ( VF5_PM_CAP_NEXTPTR ),
    .VF5_PM_CAP_VER_ID                                 ( VF5_PM_CAP_VER_ID ),
    .IMPL_TARGET                                       ( IMPL_TARGET ),
    .NO_DECODE_LOGIC                                   ( NO_DECODE_LOGIC ),
    .INTERFACE_SPEED                                   ( INTERFACE_SPEED ),
    .COMPLETION_SPACE                                  ( COMPLETION_SPACE )
  )
  pcie_7vx_i(
    .CFGERRCOROUT                                      ( cfg_err_cor_out ),
    .CFGERRFATALOUT                                    ( cfg_err_fatal_out ),
    .CFGERRNONFATALOUT                                 ( cfg_err_nonfatal_out ),
    .CFGEXTREADRECEIVED                                ( cfg_ext_read_received ),
    .CFGEXTWRITERECEIVED                               ( cfg_ext_write_received ),
    .CFGHOTRESETOUT                                    ( cfg_hot_reset_out ),
    .CFGINPUTUPDATEDONE                                ( cfg_input_update_done ),
    .CFGINTERRUPTAOUTPUT                               (  ),
    .CFGINTERRUPTBOUTPUT                               (  ),
    .CFGINTERRUPTCOUTPUT                               (  ),
    .CFGINTERRUPTDOUTPUT                               (  ),
    .CFGINTERRUPTMSIFAIL                               ( cfg_interrupt_msi_fail ),
    .CFGINTERRUPTMSIMASKUPDATE                         ( cfg_interrupt_msi_mask_update ),
    .CFGINTERRUPTMSISENT                               ( cfg_interrupt_msi_sent ),
    .CFGINTERRUPTMSIXFAIL                              ( cfg_interrupt_msix_fail ),
    .CFGINTERRUPTMSIXSENT                              ( cfg_interrupt_msix_sent ),
    .CFGINTERRUPTSENT                                  ( cfg_interrupt_sent ),
    .CFGLOCALERROR                                     ( cfg_local_error ),
    .CFGLTRENABLE                                      ( cfg_ltr_enable ),
    .CFGMCUPDATEDONE                                   ( cfg_mc_update_done ),
    .CFGMGMTREADWRITEDONE                              ( cfg_mgmt_read_write_done ),
    .CFGMSGRECEIVED                                    ( cfg_msg_received ),
    .CFGMSGTRANSMITDONE                                ( cfg_msg_transmit_done ),
    .CFGPERFUNCTIONUPDATEDONE                          ( cfg_per_function_update_done ),
    .CFGPHYLINKDOWN                                    ( cfg_phy_link_down ),
    .CFGPLSTATUSCHANGE                                 ( cfg_pl_status_change ),
    .CFGPOWERSTATECHANGEINTERRUPT                      ( cfg_power_state_change_interrupt ),
    .CFGTPHSTTREADENABLE                               ( cfg_tph_stt_read_enable ),
    .CFGTPHSTTWRITEENABLE                              ( cfg_tph_stt_write_enable ),
    .DRPRDY                                            ( drp_rdy ),
    .MAXISCQTLAST                                      ( m_axis_cq_tlast ),
    .MAXISCQTVALID                                     ( m_axis_cq_tvalid ),
    .MAXISRCTLAST                                      ( m_axis_rc_tlast ),
    .MAXISRCTVALID                                     ( m_axis_rc_tvalid ),
    .PCIERQSEQNUMVLD                                   ( pcie_rq_seq_num_vld ),
    .PCIERQTAGVLD                                      ( pcie_rq_tag_vld ),
    .PIPERX0POLARITY                                   ( pipe_rx0_polarity ),
    .PIPERX1POLARITY                                   ( pipe_rx1_polarity ),
    .PIPERX2POLARITY                                   ( pipe_rx2_polarity ),
    .PIPERX3POLARITY                                   ( pipe_rx3_polarity ),
    .PIPERX4POLARITY                                   ( pipe_rx4_polarity ),
    .PIPERX5POLARITY                                   ( pipe_rx5_polarity ),
    .PIPERX6POLARITY                                   ( pipe_rx6_polarity ),
    .PIPERX7POLARITY                                   ( pipe_rx7_polarity ),
    .PIPETX0COMPLIANCE                                 ( pipe_tx0_compliance ),
    .PIPETX1COMPLIANCE                                 ( pipe_tx1_compliance ),
    .PIPETX2COMPLIANCE                                 ( pipe_tx2_compliance ),
    .PIPETX3COMPLIANCE                                 ( pipe_tx3_compliance ),
    .PIPETX4COMPLIANCE                                 ( pipe_tx4_compliance ),
    .PIPETX5COMPLIANCE                                 ( pipe_tx5_compliance ),
    .PIPETX6COMPLIANCE                                 ( pipe_tx6_compliance ),
    .PIPETX7COMPLIANCE                                 ( pipe_tx7_compliance ),
    .PIPETXDEEMPH                                      ( pipe_tx_deemph ),
    .PIPETXRCVRDET                                     ( pipe_tx_rcvr_det ),
    .PIPETXRESET                                       ( pipe_tx_reset ),
    .PIPETXSWING                                       ( pipe_tx_swing ),
    .PLEQINPROGRESS                                    (  ),
    .CFGFCCPLD                                         ( cfg_fc_cpld ),
    .CFGFCNPD                                          ( cfg_fc_npd ),
    .CFGFCPD                                           ( cfg_fc_pd ),
    .CFGVFSTATUS                                       ( cfg_vf_status ),
    .CFGPERFUNCSTATUSDATA                              ( cfg_per_func_status_data ),
    .DBGDATAOUT                                        (  ),
    .DRPDO                                             ( drp_do ),
    .CFGVFPOWERSTATE                                   ( cfg_vf_power_state ),
    .CFGVFTPHSTMODE                                    ( cfg_vf_tph_st_mode ),
    .CFGDPASUBSTATECHANGE                              ( cfg_dpa_substate_change ),
    .CFGFLRINPROCESS                                   ( cfg_flr_in_process ),
    .CFGINTERRUPTMSIENABLE                             ( cfg_interrupt_msi_enable ),
    .CFGINTERRUPTMSIXENABLE                            ( cfg_interrupt_msix_enable ),
    .CFGINTERRUPTMSIXMASK                              ( cfg_interrupt_msix_mask ),
    .CFGLINKPOWERSTATE                                 ( cfg_link_power_state ),
    .CFGOBFFENABLE                                     ( cfg_obff_enable ),
    .CFGPHYLINKSTATUS                                  ( cfg_phy_link_status ),
    .CFGRCBSTATUS                                      ( cfg_rcb_status ),
    .CFGTPHREQUESTERENABLE                             ( cfg_tph_requester_enable ),
    .PCIETFCNPDAV                                      ( pcie_tfc_npd_av ),
    .PCIETFCNPHAV                                      ( pcie_tfc_nph_av ),
    .PIPERX0EQCONTROL                                  ( pipe_rx0_eqcontrol_pcie ),
    .PIPERX1EQCONTROL                                  ( pipe_rx1_eqcontrol_pcie ),
    .PIPERX2EQCONTROL                                  ( pipe_rx2_eqcontrol_pcie ),
    .PIPERX3EQCONTROL                                  ( pipe_rx3_eqcontrol_pcie ),
    .PIPERX4EQCONTROL                                  ( pipe_rx4_eqcontrol_pcie ),
    .PIPERX5EQCONTROL                                  ( pipe_rx5_eqcontrol_pcie ),
    .PIPERX6EQCONTROL                                  ( pipe_rx6_eqcontrol_pcie ),
    .PIPERX7EQCONTROL                                  ( pipe_rx7_eqcontrol_pcie ),
    .PIPETX0CHARISK                                    ( pipe_tx0_char_is_k ),
    .PIPETX0EQCONTROL                                  ( pipe_tx0_eqcontrol ),
    .PIPETX0POWERDOWN                                  ( pipe_tx0_powerdown ),
    .PIPETX0SYNCHEADER                                 ( pipe_tx0_syncheader ),
    .PIPETX1CHARISK                                    ( pipe_tx1_char_is_k ),
    .PIPETX1EQCONTROL                                  ( pipe_tx1_eqcontrol ),
    .PIPETX1POWERDOWN                                  ( pipe_tx1_powerdown ),
    .PIPETX1SYNCHEADER                                 ( pipe_tx1_syncheader ),
    .PIPETX2CHARISK                                    ( pipe_tx2_char_is_k ),
    .PIPETX2EQCONTROL                                  ( pipe_tx2_eqcontrol ),
    .PIPETX2POWERDOWN                                  ( pipe_tx2_powerdown ),
    .PIPETX2SYNCHEADER                                 ( pipe_tx2_syncheader ),
    .PIPETX3CHARISK                                    ( pipe_tx3_char_is_k ),
    .PIPETX3EQCONTROL                                  ( pipe_tx3_eqcontrol ),
    .PIPETX3POWERDOWN                                  ( pipe_tx3_powerdown ),
    .PIPETX3SYNCHEADER                                 ( pipe_tx3_syncheader ),
    .PIPETX4CHARISK                                    ( pipe_tx4_char_is_k ),
    .PIPETX4EQCONTROL                                  ( pipe_tx4_eqcontrol ),
    .PIPETX4POWERDOWN                                  ( pipe_tx4_powerdown ),
    .PIPETX4SYNCHEADER                                 ( pipe_tx4_syncheader ),
    .PIPETX5CHARISK                                    ( pipe_tx5_char_is_k ),
    .PIPETX5EQCONTROL                                  ( pipe_tx5_eqcontrol ),
    .PIPETX5POWERDOWN                                  ( pipe_tx5_powerdown ),
    .PIPETX5SYNCHEADER                                 ( pipe_tx5_syncheader ),
    .PIPETX6CHARISK                                    ( pipe_tx6_char_is_k ),
    .PIPETX6EQCONTROL                                  ( pipe_tx6_eqcontrol ),
    .PIPETX6POWERDOWN                                  ( pipe_tx6_powerdown ),
    .PIPETX6SYNCHEADER                                 ( pipe_tx6_syncheader ),
    .PIPETX7CHARISK                                    ( pipe_tx7_char_is_k ),
    .PIPETX7EQCONTROL                                  ( pipe_tx7_eqcontrol ),
    .PIPETX7POWERDOWN                                  ( pipe_tx7_powerdown ),
    .PIPETX7SYNCHEADER                                 ( pipe_tx7_syncheader ),
    .PIPETXRATE                                        ( pipe_tx_rate ),
    .PLEQPHASE                                         (  ),
    .MAXISCQTDATA                                      ( m_axis_cq_tdata_256 ),
    .MAXISRCTDATA                                      ( m_axis_rc_tdata_256 ),
    .CFGCURRENTSPEED                                   ( cfg_current_speed ),
    .CFGMAXPAYLOAD                                     ( cfg_max_payload ),
    .CFGMAXREADREQ                                     ( cfg_max_read_req ),
    .CFGTPHFUNCTIONNUM                                 ( cfg_tph_function_num ),
    .PIPERX0EQPRESET                                   ( pipe_rx0_eqpreset ),
    .PIPERX1EQPRESET                                   ( pipe_rx1_eqpreset ),
    .PIPERX2EQPRESET                                   ( pipe_rx2_eqpreset ),
    .PIPERX3EQPRESET                                   ( pipe_rx3_eqpreset ),
    .PIPERX4EQPRESET                                   ( pipe_rx4_eqpreset ),
    .PIPERX5EQPRESET                                   ( pipe_rx5_eqpreset ),
    .PIPERX6EQPRESET                                   ( pipe_rx6_eqpreset ),
    .PIPERX7EQPRESET                                   ( pipe_rx7_eqpreset ),
    .PIPETXMARGIN                                      ( pipe_tx_margin ),
    .CFGEXTWRITEDATA                                   ( cfg_ext_write_data ),
    .CFGINTERRUPTMSIDATA                               ( cfg_interrupt_msi_data ),
    .CFGMGMTREADDATA                                   ( cfg_mgmt_read_data ),
    .CFGTPHSTTWRITEDATA                                ( cfg_tph_stt_write_data ),
    .PIPETX0DATA                                       ( pipe_tx0_data ),
    .PIPETX1DATA                                       ( pipe_tx1_data ),
    .PIPETX2DATA                                       ( pipe_tx2_data ),
    .PIPETX3DATA                                       ( pipe_tx3_data ),
    .PIPETX4DATA                                       ( pipe_tx4_data ),
    .PIPETX5DATA                                       ( pipe_tx5_data ),
    .PIPETX6DATA                                       ( pipe_tx6_data ),
    .PIPETX7DATA                                       ( pipe_tx7_data ),
    .PIPETX0DATAVALID                                  ( pipe_tx0_data_valid ),
    .PIPETX1DATAVALID                                  ( pipe_tx1_data_valid ),
    .PIPETX2DATAVALID                                  ( pipe_tx2_data_valid ),
    .PIPETX3DATAVALID                                  ( pipe_tx3_data_valid ),
    .PIPETX4DATAVALID                                  ( pipe_tx4_data_valid ),
    .PIPETX5DATAVALID                                  ( pipe_tx5_data_valid ),
    .PIPETX6DATAVALID                                  ( pipe_tx6_data_valid ),
    .PIPETX7DATAVALID                                  ( pipe_tx7_data_valid ),
    .PIPETX0ELECIDLE                                   ( pipe_tx0_elec_idle ),
    .PIPETX1ELECIDLE                                   ( pipe_tx1_elec_idle ),
    .PIPETX2ELECIDLE                                   ( pipe_tx2_elec_idle ),
    .PIPETX3ELECIDLE                                   ( pipe_tx3_elec_idle ),
    .PIPETX4ELECIDLE                                   ( pipe_tx4_elec_idle ),
    .PIPETX5ELECIDLE                                   ( pipe_tx5_elec_idle ),
    .PIPETX6ELECIDLE                                   ( pipe_tx6_elec_idle ),
    .PIPETX7ELECIDLE                                   ( pipe_tx7_elec_idle ),
    .PIPETX0STARTBLOCK                                 ( pipe_tx0_start_block ),
    .PIPETX1STARTBLOCK                                 ( pipe_tx1_start_block ),
    .PIPETX2STARTBLOCK                                 ( pipe_tx2_start_block ),
    .PIPETX3STARTBLOCK                                 ( pipe_tx3_start_block ),
    .PIPETX4STARTBLOCK                                 ( pipe_tx4_start_block ),
    .PIPETX5STARTBLOCK                                 ( pipe_tx5_start_block ),
    .PIPETX6STARTBLOCK                                 ( pipe_tx6_start_block ),
    .PIPETX7STARTBLOCK                                 ( pipe_tx7_start_block ),
    .CFGEXTWRITEBYTEENABLE                             ( cfg_ext_write_byte_enable ),
    .CFGNEGOTIATEDWIDTH                                ( cfg_negotiated_width ),
    .CFGTPHSTTWRITEBYTEVALID                           ( cfg_tph_stt_write_byte_valid ),
    .PCIERQSEQNUM                                      ( pcie_rq_seq_num ),
    .PIPERX0EQLPTXPRESET                               ( pipe_rx0_eqlp_txpreset ),
    .PIPERX1EQLPTXPRESET                               ( pipe_rx1_eqlp_txpreset ),
    .PIPERX2EQLPTXPRESET                               ( pipe_rx2_eqlp_txpreset ),
    .PIPERX3EQLPTXPRESET                               ( pipe_rx3_eqlp_txpreset ),
    .PIPERX4EQLPTXPRESET                               ( pipe_rx4_eqlp_txpreset ),
    .PIPERX5EQLPTXPRESET                               ( pipe_rx5_eqlp_txpreset ),
    .PIPERX6EQLPTXPRESET                               ( pipe_rx6_eqlp_txpreset ),
    .PIPERX7EQLPTXPRESET                               ( pipe_rx7_eqlp_txpreset ),
    .PIPETX0EQPRESET                                   ( pipe_tx0_eqpreset ),
    .PIPETX1EQPRESET                                   ( pipe_tx1_eqpreset ),
    .PIPETX2EQPRESET                                   ( pipe_tx2_eqpreset ),
    .PIPETX3EQPRESET                                   ( pipe_tx3_eqpreset ),
    .PIPETX4EQPRESET                                   ( pipe_tx4_eqpreset ),
    .PIPETX5EQPRESET                                   ( pipe_tx5_eqpreset ),
    .PIPETX6EQPRESET                                   ( pipe_tx6_eqpreset ),
    .PIPETX7EQPRESET                                   ( pipe_tx7_eqpreset ),
    .SAXISCCTREADY                                     ( s_axis_cc_tready ),
    .SAXISRQTREADY                                     ( s_axis_rq_tready ),
    .CFGMSGRECEIVEDTYPE                                ( cfg_msg_received_type ),
    .CFGTPHSTTADDRESS                                  ( cfg_tph_stt_address ),
    .CFGFUNCTIONPOWERSTATE                             ( cfg_function_power_state ),
    .CFGINTERRUPTMSIMMENABLE                           ( cfg_interrupt_msi_mmenable ),
    .CFGINTERRUPTMSIVFENABLE                           ( cfg_interrupt_msi_vf_enable ),
    .CFGINTERRUPTMSIXVFENABLE                          ( cfg_interrupt_msix_vf_enable ),
    .CFGINTERRUPTMSIXVFMASK                            ( cfg_interrupt_msix_vf_mask ),
    .CFGLTSSMSTATE                                     ( cfg_ltssm_state ),
    .CFGTPHSTMODE                                      ( cfg_tph_st_mode ),
    .CFGVFFLRINPROCESS                                 ( cfg_vf_flr_in_process ),
    .CFGVFTPHREQUESTERENABLE                           ( cfg_vf_tph_requester_enable ),
    .PCIECQNPREQCOUNT                                  ( pcie_cq_np_req_count ),
    .PCIERQTAG                                         ( pcie_rq_tag ),
    .PIPERX0EQLPLFFS                                   ( pipe_rx0_eqlp_lffs ),
    .PIPERX1EQLPLFFS                                   ( pipe_rx1_eqlp_lffs ),
    .PIPERX2EQLPLFFS                                   ( pipe_rx2_eqlp_lffs ),
    .PIPERX3EQLPLFFS                                   ( pipe_rx3_eqlp_lffs ),
    .PIPERX4EQLPLFFS                                   ( pipe_rx4_eqlp_lffs ),
    .PIPERX5EQLPLFFS                                   ( pipe_rx5_eqlp_lffs ),
    .PIPERX6EQLPLFFS                                   ( pipe_rx6_eqlp_lffs ),
    .PIPERX7EQLPLFFS                                   ( pipe_rx7_eqlp_lffs ),
    .PIPETX0EQDEEMPH                                   ( pipe_tx0_eqdeemph ),
    .PIPETX1EQDEEMPH                                   ( pipe_tx1_eqdeemph ),
    .PIPETX2EQDEEMPH                                   ( pipe_tx2_eqdeemph ),
    .PIPETX3EQDEEMPH                                   ( pipe_tx3_eqdeemph ),
    .PIPETX4EQDEEMPH                                   ( pipe_tx4_eqdeemph ),
    .PIPETX5EQDEEMPH                                   ( pipe_tx5_eqdeemph ),
    .PIPETX6EQDEEMPH                                   ( pipe_tx6_eqdeemph ),
    .PIPETX7EQDEEMPH                                   ( pipe_tx7_eqdeemph ),
    .MAXISRCTUSER                                      ( m_axis_rc_tuser ),
    .CFGEXTFUNCTIONNUMBER                              ( cfg_ext_function_number ),
    .CFGFCCPLH                                         ( cfg_fc_cplh ),
    .CFGFCNPH                                          ( cfg_fc_nph ),
    .CFGFCPH                                           ( cfg_fc_ph ),
    .CFGFUNCTIONSTATUS                                 ( cfg_function_status ),
    .CFGMSGRECEIVEDDATA                                ( cfg_msg_received_data ),
    .MAXISCQTKEEP                                      ( m_axis_cq_tkeep_w ),
    .MAXISRCTKEEP                                      ( m_axis_rc_tkeep_w ),
    .PLGEN3PCSRXSLIDE                                  ( pipe_rx_slide ),
    .MAXISCQTUSER                                      ( m_axis_cq_tuser ),
    .CFGEXTREGISTERNUMBER                              ( cfg_ext_register_number ),
    .CFGCONFIGSPACEENABLE                              ( cfg_config_space_enable ),
    .CFGERRCORIN                                       ( cfg_err_cor_in ),
    .CFGERRUNCORIN                                     ( cfg_err_uncor_in ),
    .CFGEXTREADDATAVALID                               ( cfg_ext_read_data_valid ),
    .CFGHOTRESETIN                                     ( cfg_hot_reset_in ),
    .CFGINPUTUPDATEREQUEST                             ( cfg_input_update_request ),
    .CFGINTERRUPTMSITPHPRESENT                         ( cfg_interrupt_msi_tph_present ),
    .CFGINTERRUPTMSIXINT                               ( cfg_interrupt_msix_int ),
    .CFGLINKTRAININGENABLE                             ( cfg_link_training_enable ),
    .CFGMCUPDATEREQUEST                                ( cfg_mc_update_request ),
    .CFGMGMTREAD                                       ( cfg_mgmt_read ),
    .CFGMGMTTYPE1CFGREGACCESS                          ( cfg_mgmt_type1_cfg_reg_access ),
    .CFGMGMTWRITE                                      ( cfg_mgmt_write ),
    .CFGMSGTRANSMIT                                    ( cfg_msg_transmit ),
    .CFGPERFUNCTIONOUTPUTREQUEST                       ( cfg_per_function_output_request ),
    .CFGPOWERSTATECHANGEACK                            ( cfg_power_state_change_ack ),
    .CFGREQPMTRANSITIONL23READY                        ( cfg_req_pm_transition_l23_ready ),
    .CFGTPHSTTREADDATAVALID                            ( cfg_tph_stt_read_data_valid ),
    .CORECLK                                           ( core_clk ),  // 250MHz for 5.0GT/s.  500MHz for 8.0GT/s
    .CORECLKMICOMPLETIONRAML                           ( core_clk ),
    .CORECLKMICOMPLETIONRAMU                           ( core_clk ),
    .CORECLKMIREPLAYRAM                                ( core_clk ),
    .CORECLKMIREQUESTRAM                               ( core_clk ),
    .DRPCLK                                            ( drp_clk ),
    .DRPEN                                             ( drp_en ),
    .DRPWE                                             ( drp_we ),
    .MGMTRESETN                                        ( mgmt_reset_n ),
    .MGMTSTICKYRESETN                                  ( mgmt_sticky_reset_n ),
    .PCIECQNPREQ                                       ( pcie_cq_np_req ),
    .PIPECLK                                           ( pipe_clk ),
    .PIPERESETN                                        ( pipe_reset_n ),
    .PIPERX0DATAVALID                                  ( pipe_rx0_data_valid ),
    .PIPERX0ELECIDLE                                   ( pipe_rx0_elec_idle ),
    .PIPERX0EQDONE                                     ( pipe_rx0_eqdone ),
    .PIPERX0EQLPADAPTDONE                              ( pipe_rx0_eqlp_adaptdone ),
    .PIPERX0EQLPLFFSSEL                                ( pipe_rx0_eqlp_lffs_sel ),
    .PIPERX0PHYSTATUS                                  ( pipe_rx0_phy_status ),
    .PIPERX0STARTBLOCK                                 ( pipe_rx0_start_block ),
    .PIPERX0VALID                                      ( pipe_rx0_valid ),
    .PIPERX1DATAVALID                                  ( pipe_rx1_data_valid ),
    .PIPERX1ELECIDLE                                   ( pipe_rx1_elec_idle ),
    .PIPERX1EQDONE                                     ( pipe_rx1_eqdone ),
    .PIPERX1EQLPADAPTDONE                              ( pipe_rx1_eqlp_adaptdone ),
    .PIPERX1EQLPLFFSSEL                                ( pipe_rx1_eqlp_lffs_sel ),
    .PIPERX1PHYSTATUS                                  ( pipe_rx1_phy_status ),
    .PIPERX1STARTBLOCK                                 ( pipe_rx1_start_block ),
    .PIPERX1VALID                                      ( pipe_rx1_valid ),
    .PIPERX2DATAVALID                                  ( pipe_rx2_data_valid ),
    .PIPERX2ELECIDLE                                   ( pipe_rx2_elec_idle ),
    .PIPERX2EQDONE                                     ( pipe_rx2_eqdone ),
    .PIPERX2EQLPADAPTDONE                              ( pipe_rx2_eqlp_adaptdone ),
    .PIPERX2EQLPLFFSSEL                                ( pipe_rx2_eqlp_lffs_sel ),
    .PIPERX2PHYSTATUS                                  ( pipe_rx2_phy_status ),
    .PIPERX2STARTBLOCK                                 ( pipe_rx2_start_block ),
    .PIPERX2VALID                                      ( pipe_rx2_valid ),
    .PIPERX3DATAVALID                                  ( pipe_rx3_data_valid ),
    .PIPERX3ELECIDLE                                   ( pipe_rx3_elec_idle ),
    .PIPERX3EQDONE                                     ( pipe_rx3_eqdone ),
    .PIPERX3EQLPADAPTDONE                              ( pipe_rx3_eqlp_adaptdone ),
    .PIPERX3EQLPLFFSSEL                                ( pipe_rx3_eqlp_lffs_sel ),
    .PIPERX3PHYSTATUS                                  ( pipe_rx3_phy_status ),
    .PIPERX3STARTBLOCK                                 ( pipe_rx3_start_block ),
    .PIPERX3VALID                                      ( pipe_rx3_valid ),
    .PIPERX4DATAVALID                                  ( pipe_rx4_data_valid ),
    .PIPERX4ELECIDLE                                   ( pipe_rx4_elec_idle ),
    .PIPERX4EQDONE                                     ( pipe_rx4_eqdone ),
    .PIPERX4EQLPADAPTDONE                              ( pipe_rx4_eqlp_adaptdone ),
    .PIPERX4EQLPLFFSSEL                                ( pipe_rx4_eqlp_lffs_sel ),
    .PIPERX4PHYSTATUS                                  ( pipe_rx4_phy_status ),
    .PIPERX4STARTBLOCK                                 ( pipe_rx4_start_block ),
    .PIPERX4VALID                                      ( pipe_rx4_valid ),
    .PIPERX5DATAVALID                                  ( pipe_rx5_data_valid ),
    .PIPERX5ELECIDLE                                   ( pipe_rx5_elec_idle ),
    .PIPERX5EQDONE                                     ( pipe_rx5_eqdone ),
    .PIPERX5EQLPADAPTDONE                              ( pipe_rx5_eqlp_adaptdone ),
    .PIPERX5EQLPLFFSSEL                                ( pipe_rx5_eqlp_lffs_sel ),
    .PIPERX5PHYSTATUS                                  ( pipe_rx5_phy_status ),
    .PIPERX5STARTBLOCK                                 ( pipe_rx5_start_block ),
    .PIPERX5VALID                                      ( pipe_rx5_valid ),
    .PIPERX6DATAVALID                                  ( pipe_rx6_data_valid ),
    .PIPERX6ELECIDLE                                   ( pipe_rx6_elec_idle ),
    .PIPERX6EQDONE                                     ( pipe_rx6_eqdone ),
    .PIPERX6EQLPADAPTDONE                              ( pipe_rx6_eqlp_adaptdone ),
    .PIPERX6EQLPLFFSSEL                                ( pipe_rx6_eqlp_lffs_sel ),
    .PIPERX6PHYSTATUS                                  ( pipe_rx6_phy_status ),
    .PIPERX6STARTBLOCK                                 ( pipe_rx6_start_block ),
    .PIPERX6VALID                                      ( pipe_rx6_valid ),
    .PIPERX7DATAVALID                                  ( pipe_rx7_data_valid ),
    .PIPERX7ELECIDLE                                   ( pipe_rx7_elec_idle ),
    .PIPERX7EQDONE                                     ( pipe_rx7_eqdone ),
    .PIPERX7EQLPADAPTDONE                              ( pipe_rx7_eqlp_adaptdone ),
    .PIPERX7EQLPLFFSSEL                                ( pipe_rx7_eqlp_lffs_sel ),
    .PIPERX7PHYSTATUS                                  ( pipe_rx7_phy_status ),
    .PIPERX7STARTBLOCK                                 ( pipe_rx7_start_block ),
    .PIPERX7VALID                                      ( pipe_rx7_valid ),
    .PIPETX0EQDONE                                     ( pipe_tx0_eqdone ),
    .PIPETX1EQDONE                                     ( pipe_tx1_eqdone ),
    .PIPETX2EQDONE                                     ( pipe_tx2_eqdone ),
    .PIPETX3EQDONE                                     ( pipe_tx3_eqdone ),
    .PIPETX4EQDONE                                     ( pipe_tx4_eqdone ),
    .PIPETX5EQDONE                                     ( pipe_tx5_eqdone ),
    .PIPETX6EQDONE                                     ( pipe_tx6_eqdone ),
    .PIPETX7EQDONE                                     ( pipe_tx7_eqdone ),
    .PLDISABLESCRAMBLER                                ( 1'b0 ),
    .PLEQRESETEIEOSCOUNT                               ( 1'b0 ),
    .PLGEN3PCSDISABLE                                  ( gen3pcsdisable ),
    .RECCLK                                            ( rec_clk ),
    .RESETN                                            ( reset_n ),
    .SAXISCCTLAST                                      ( s_axis_cc_tlast ),
    .SAXISCCTVALID                                     ( s_axis_cc_tvalid ),
    .SAXISRQTLAST                                      ( s_axis_rq_tlast ),
    .SAXISRQTVALID                                     ( s_axis_rq_tvalid ),
    .USERCLK                                           ( user_clk ),
    .DRPADDR                                           ( drp_addr ),
    .CFGDEVID                                          ( cfg_dev_id ),
    .CFGSUBSYSID                                       ( cfg_subsys_id ),
    .CFGSUBSYSVENDID                                   ( cfg_subsys_vend_id ),
    .CFGVENDID                                         ( cfg_vend_id ),
    .DRPDI                                             ( drp_di ),
    .PIPERX0EQLPNEWTXCOEFFORPRESET                     ( pipe_rx0_eqlp_new_txcoef_forpreset ),
    .PIPERX1EQLPNEWTXCOEFFORPRESET                     ( pipe_rx1_eqlp_new_txcoef_forpreset ),
    .PIPERX2EQLPNEWTXCOEFFORPRESET                     ( pipe_rx2_eqlp_new_txcoef_forpreset ),
    .PIPERX3EQLPNEWTXCOEFFORPRESET                     ( pipe_rx3_eqlp_new_txcoef_forpreset ),
    .PIPERX4EQLPNEWTXCOEFFORPRESET                     ( pipe_rx4_eqlp_new_txcoef_forpreset ),
    .PIPERX5EQLPNEWTXCOEFFORPRESET                     ( pipe_rx5_eqlp_new_txcoef_forpreset ),
    .PIPERX6EQLPNEWTXCOEFFORPRESET                     ( pipe_rx6_eqlp_new_txcoef_forpreset ),
    .PIPERX7EQLPNEWTXCOEFFORPRESET                     ( pipe_rx7_eqlp_new_txcoef_forpreset ),
    .PIPETX0EQCOEFF                                    ( pipe_tx0_eqcoeff ),
    .PIPETX1EQCOEFF                                    ( pipe_tx1_eqcoeff ),
    .PIPETX2EQCOEFF                                    ( pipe_tx2_eqcoeff ),
    .PIPETX3EQCOEFF                                    ( pipe_tx3_eqcoeff ),
    .PIPETX4EQCOEFF                                    ( pipe_tx4_eqcoeff ),
    .PIPETX5EQCOEFF                                    ( pipe_tx5_eqcoeff ),
    .PIPETX6EQCOEFF                                    ( pipe_tx6_eqcoeff ),
    .PIPETX7EQCOEFF                                    ( pipe_tx7_eqcoeff ),
    .CFGMGMTADDR                                       ( cfg_mgmt_addr ),
    .CFGFLRDONE                                        ( cfg_flr_done ),
    .CFGINTERRUPTMSITPHTYPE                            ( cfg_interrupt_msi_tph_type ),
    .CFGINTERRUPTPENDING                               ( cfg_interrupt_pending ),
    .PIPERX0CHARISK                                    ( pipe_rx0_char_is_k ),
    .PIPERX0SYNCHEADER                                 ( pipe_rx0_syncheader ),
    .PIPERX1CHARISK                                    ( pipe_rx1_char_is_k ),
    .PIPERX1SYNCHEADER                                 ( pipe_rx1_syncheader ),
    .PIPERX2CHARISK                                    ( pipe_rx2_char_is_k ),
    .PIPERX2SYNCHEADER                                 ( pipe_rx2_syncheader ),
    .PIPERX3CHARISK                                    ( pipe_rx3_char_is_k ),
    .PIPERX3SYNCHEADER                                 ( pipe_rx3_syncheader ),
    .PIPERX4CHARISK                                    ( pipe_rx4_char_is_k ),
    .PIPERX4SYNCHEADER                                 ( pipe_rx4_syncheader ),
    .PIPERX5CHARISK                                    ( pipe_rx5_char_is_k ),
    .PIPERX5SYNCHEADER                                 ( pipe_rx5_syncheader ),
    .PIPERX6CHARISK                                    ( pipe_rx6_char_is_k ),
    .PIPERX6SYNCHEADER                                 ( pipe_rx6_syncheader ),
    .PIPERX7CHARISK                                    ( pipe_rx7_char_is_k ),
    .PIPERX7SYNCHEADER                                 ( pipe_rx7_syncheader ),
    .MAXISCQTREADY                                     ( m_axis_cq_tready ),
    .MAXISRCTREADY                                     ( m_axis_rc_tready ),
    .SAXISCCTDATA                                      ( s_axis_cc_tdata_256 ),
    .SAXISRQTDATA                                      ( s_axis_rq_tdata_256 ),
    .CFGDSFUNCTIONNUMBER                               ( cfg_ds_function_number ),
    .CFGFCSEL                                          ( cfg_fc_sel ),
    .CFGINTERRUPTMSIATTR                               ( cfg_interrupt_msi_attr ),
    .CFGINTERRUPTMSIFUNCTIONNUMBER                     ( cfg_interrupt_msi_function_number ),
    .CFGMSGTRANSMITTYPE                                ( cfg_msg_transmit_type ),
    .CFGPERFUNCSTATUSCONTROL                           ( cfg_per_func_status_control ),
    .CFGPERFUNCTIONNUMBER                              ( cfg_per_function_number ),
    .PIPERX0STATUS                                     ( pipe_rx0_status ),
    .PIPERX1STATUS                                     ( pipe_rx1_status ),
    .PIPERX2STATUS                                     ( pipe_rx2_status ),
    .PIPERX3STATUS                                     ( pipe_rx3_status ),
    .PIPERX4STATUS                                     ( pipe_rx4_status ),
    .PIPERX5STATUS                                     ( pipe_rx5_status ),
    .PIPERX6STATUS                                     ( pipe_rx6_status ),
    .PIPERX7STATUS                                     ( pipe_rx7_status ),
    .CFGEXTREADDATA                                    ( cfg_ext_read_data ),
    .CFGINTERRUPTMSIINT                                ( cfg_interrupt_msi_int ),
    .CFGINTERRUPTMSIXDATA                              ( cfg_interrupt_msix_data ),
    .CFGMGMTWRITEDATA                                  ( cfg_mgmt_write_data ),
    .CFGMSGTRANSMITDATA                                ( cfg_msg_transmit_data ),
    .CFGTPHSTTREADDATA                                 ( cfg_tph_stt_read_data ),
    .PIPERX0DATA                                       ( pipe_rx0_data_pcie ),
    .PIPERX1DATA                                       ( pipe_rx1_data_pcie ),
    .PIPERX2DATA                                       ( pipe_rx2_data_pcie ),
    .PIPERX3DATA                                       ( pipe_rx3_data_pcie ),
    .PIPERX4DATA                                       ( pipe_rx4_data_pcie ),
    .PIPERX5DATA                                       ( pipe_rx5_data_pcie ),
    .PIPERX6DATA                                       ( pipe_rx6_data_pcie ),
    .PIPERX7DATA                                       ( pipe_rx7_data_pcie ),
    .SAXISCCTUSER                                      ( s_axis_cc_tuser ),
    .CFGINTERRUPTINT                                   ( cfg_interrupt_int ),
    .CFGINTERRUPTMSISELECT                             ( cfg_interrupt_msi_select ),
    .CFGMGMTBYTEENABLE                                 ( cfg_mgmt_byte_enable ),
    .CFGDSDEVICENUMBER                                 ( cfg_ds_device_number ),
    .SAXISRQTUSER                                      ( s_axis_rq_tuser ),
    .CFGVFFLRDONE                                      ( cfg_vf_flr_done ),
    .PIPEEQFS                                          ( pipe_tx_eqfs ),
    .PIPEEQLF                                          ( pipe_tx_eqlf ),
    .CFGDSN                                            ( cfg_dsn ),
    .CFGINTERRUPTMSIPENDINGSTATUS                      ( cfg_interrupt_msi_pending_status ),
    .CFGINTERRUPTMSIXADDRESS                           ( cfg_interrupt_msix_address ),
    .CFGDSBUSNUMBER                                    ( cfg_ds_bus_number ),
    .CFGDSPORTNUMBER                                   ( cfg_ds_port_number ),
    .CFGREVID                                          ( cfg_rev_id ),
    .PLGEN3PCSRXSYNCDONE                               ( pipe_rx_syncdone ),
    .SAXISCCTKEEP                                      ( s_axis_cc_tkeep_w ),
    .SAXISRQTKEEP                                      ( s_axis_rq_tkeep_w ),
    .CFGINTERRUPTMSITPHSTTAG                           ( cfg_interrupt_msi_tph_st_tag )
  );

  //------------------------------------------------------------------------------------------------------------------//
  // Force Adapt for Gen3                                                                                  //
  //------------------------------------------------------------------------------------------------------------------//

  rp_pcie_force_adapt force_adapt_i(
  .pipe_clk(pipe_clk),
  .user_clk(user_clk),
  .cfg_ltssm_state(cfg_ltssm_state),  
  .cfg_current_speed(cfg_current_speed),
  .pipe_tx0_rate(pipe_tx_rate),
  .pipe_rx0_elec_idle(pipe_rx0_elec_idle),
  .pipe_rx0_eqlp_adaptdone(pipe_rx0_eqlp_adaptdone),
  .pipe_tx0_eqcontrol(pipe_tx0_eqcontrol), 
  .pipe_rx0_data_in(pipe_rx0_data),
  .pipe_rx1_data_in(pipe_rx1_data),
  .pipe_rx2_data_in(pipe_rx2_data),
  .pipe_rx3_data_in(pipe_rx3_data),
  .pipe_rx4_data_in(pipe_rx4_data),
  .pipe_rx5_data_in(pipe_rx5_data),
  .pipe_rx6_data_in(pipe_rx6_data),
  .pipe_rx7_data_in(pipe_rx7_data),
  .pipe_rx0_eqcontrol_in(pipe_rx0_eqcontrol_pcie),
  .pipe_rx1_eqcontrol_in(pipe_rx1_eqcontrol_pcie),
  .pipe_rx2_eqcontrol_in(pipe_rx2_eqcontrol_pcie),
  .pipe_rx3_eqcontrol_in(pipe_rx3_eqcontrol_pcie),
  .pipe_rx4_eqcontrol_in(pipe_rx4_eqcontrol_pcie),
  .pipe_rx5_eqcontrol_in(pipe_rx5_eqcontrol_pcie),
  .pipe_rx6_eqcontrol_in(pipe_rx6_eqcontrol_pcie),
  .pipe_rx7_eqcontrol_in(pipe_rx7_eqcontrol_pcie),
  .pipe_rx0_data_out(pipe_rx0_data_pcie),
  .pipe_rx1_data_out(pipe_rx1_data_pcie),
  .pipe_rx2_data_out(pipe_rx2_data_pcie),
  .pipe_rx3_data_out(pipe_rx3_data_pcie),
  .pipe_rx4_data_out(pipe_rx4_data_pcie),
  .pipe_rx5_data_out(pipe_rx5_data_pcie),
  .pipe_rx6_data_out(pipe_rx6_data_pcie),
  .pipe_rx7_data_out(pipe_rx7_data_pcie),   
  .pipe_rx0_eqcontrol_out(pipe_rx0_eqcontrol),
  .pipe_rx1_eqcontrol_out(pipe_rx1_eqcontrol),
  .pipe_rx2_eqcontrol_out(pipe_rx2_eqcontrol),
  .pipe_rx3_eqcontrol_out(pipe_rx3_eqcontrol),
  .pipe_rx4_eqcontrol_out(pipe_rx4_eqcontrol),
  .pipe_rx5_eqcontrol_out(pipe_rx5_eqcontrol),
  .pipe_rx6_eqcontrol_out(pipe_rx6_eqcontrol),
  .pipe_rx7_eqcontrol_out(pipe_rx7_eqcontrol)
);

  //------------------------------------------------------------------------------------------------------------------//
  // PIPE Interface PIPELINE Module                                                                                   //
  //------------------------------------------------------------------------------------------------------------------//
  rp_pcie_pipe_pipeline #
  (
    .TCQ                     ( TCQ ),
    .LINK_CAP_MAX_LINK_WIDTH ( PL_LINK_CAP_MAX_LINK_WIDTH ),
    .PIPE_PIPELINE_STAGES    ( PIPE_PIPELINE_STAGES )
  )
  pcie_pipe_pipeline_i (

    // Pipe Per-Link Signals
    .pipe_tx_rcvr_det_i                  ( pipe_tx_rcvr_det ),
    .pipe_tx_reset_i                     ( pipe_tx_reset  ),
    .pipe_tx_rate_i                      ( pipe_tx_rate ),
    .pipe_tx_deemph_i                    ( pipe_tx_deemph ),
    .pipe_tx_margin_i                    ( pipe_tx_margin ),
    .pipe_tx_swing_i                     ( pipe_tx_swing ),
    .pipe_tx_eqfs_i                      ( pipe_tx_eqfs_gt ),
    .pipe_tx_eqlf_i                      ( pipe_tx_eqlf_gt ),

    .pipe_tx_rcvr_det_o                  ( pipe_tx_rcvr_det_gt ),
    .pipe_tx_reset_o                     ( pipe_tx_reset_gt ),
    .pipe_tx_rate_o                      ( pipe_tx_rate_gt ),
    .pipe_tx_deemph_o                    ( pipe_tx_deemph_gt ),
    .pipe_tx_margin_o                    ( pipe_tx_margin_gt ),
    .pipe_tx_swing_o                     ( pipe_tx_swing_gt ),
    .pipe_tx_eqfs_o                      ( pipe_tx_eqfs ),
    .pipe_tx_eqlf_o                      ( pipe_tx_eqlf ),

    // Pipe Per-Lane Signals
    .pipe_rxslide_i                      ( pipe_rx_slide ),
    .pipe_rxsyncdone_i                   ( pipe_rx_syncdone_gt ),
    .pipe_rxslide_o                      ( pipe_rx_slide_gt ),
    .pipe_rxsyncdone_o                   ( pipe_rx_syncdone ),

    // Pipe Per-Lane Signals - Lane 0
    .pipe_rx0_char_is_k_o                ( pipe_rx0_char_is_k ),
    .pipe_rx0_data_o                     ( pipe_rx0_data ),
    .pipe_rx0_valid_o                    ( pipe_rx0_valid ),
    .pipe_rx0_data_valid_o               ( pipe_rx0_data_valid ),
    .pipe_rx0_status_o                   ( pipe_rx0_status ),
    .pipe_rx0_phy_status_o               ( pipe_rx0_phy_status ),
    .pipe_rx0_elec_idle_o                ( pipe_rx0_elec_idle ),
    .pipe_rx0_eqdone_o                   ( pipe_rx0_eqdone ),
    .pipe_rx0_eqlpadaptdone_o            ( pipe_rx0_eqlp_adaptdone ),
    .pipe_rx0_eqlplffssel_o              ( pipe_rx0_eqlp_lffs_sel ),
    .pipe_rx0_eqlpnewtxcoefforpreset_o   ( pipe_rx0_eqlp_new_txcoef_forpreset ),
    .pipe_rx0_startblock_o               ( pipe_rx0_start_block ),
    .pipe_rx0_syncheader_o               ( pipe_rx0_syncheader ),
    .pipe_rx0_polarity_i                 ( pipe_rx0_polarity ),
    .pipe_rx0_eqcontrol_i                ( pipe_rx0_eqcontrol ),
    .pipe_rx0_eqlplffs_i                 ( pipe_rx0_eqlp_lffs ),
    .pipe_rx0_eqlptxpreset_i             ( pipe_rx0_eqlp_txpreset ),
    .pipe_rx0_eqpreset_i                 ( pipe_rx0_eqpreset ),
    .pipe_tx0_eqcoeff_o                  ( pipe_tx0_eqcoeff ),
    .pipe_tx0_eqdone_o                   ( pipe_tx0_eqdone ),
    .pipe_tx0_compliance_i               ( pipe_tx0_compliance ),
    .pipe_tx0_char_is_k_i                ( pipe_tx0_char_is_k ),
    .pipe_tx0_data_i                     ( pipe_tx0_data ),
    .pipe_tx0_elec_idle_i                ( pipe_tx0_elec_idle ),
    .pipe_tx0_powerdown_i                ( pipe_tx0_powerdown ),
    .pipe_tx0_datavalid_i                ( pipe_tx0_data_valid ),
    .pipe_tx0_startblock_i               ( pipe_tx0_start_block ),
    .pipe_tx0_syncheader_i               ( pipe_tx0_syncheader ),
    .pipe_tx0_eqcontrol_i                ( pipe_tx0_eqcontrol ),
    .pipe_tx0_eqdeemph_i                 ( pipe_tx0_eqdeemph ),
    .pipe_tx0_eqpreset_i                 ( pipe_tx0_eqpreset ),

    .pipe_rx0_char_is_k_i                ( pipe_rx0_char_is_k_gt ),
    .pipe_rx0_data_i                     ( pipe_rx0_data_gt ),
    .pipe_rx0_valid_i                    ( pipe_rx0_valid_gt ),
    .pipe_rx0_data_valid_i               ( pipe_rx0_data_valid_gt ),
    .pipe_rx0_status_i                   ( pipe_rx0_status_gt ),
    .pipe_rx0_phy_status_i               ( pipe_rx0_phy_status_gt ),
    .pipe_rx0_elec_idle_i                ( pipe_rx0_elec_idle_gt ),
    .pipe_rx0_eqdone_i                   ( pipe_rx0_eqdone_gt ),
    .pipe_rx0_eqlpadaptdone_i            ( pipe_rx0_eqlp_adaptdone_gt ),
    .pipe_rx0_eqlplffssel_i              ( pipe_rx0_eqlp_lffs_sel_gt ),
    .pipe_rx0_eqlpnewtxcoefforpreset_i   ( pipe_rx0_eqlp_new_txcoef_forpreset_gt ),
    .pipe_rx0_startblock_i               ( pipe_rx0_start_block_gt ),
    .pipe_rx0_syncheader_i               ( pipe_rx0_syncheader_gt ),
    .pipe_rx0_polarity_o                 ( pipe_rx0_polarity_gt ),
    .pipe_rx0_eqcontrol_o                ( pipe_rx0_eqcontrol_gt ),
    .pipe_rx0_eqlplffs_o                 ( pipe_rx0_eqlp_lffs_gt ),
    .pipe_rx0_eqlptxpreset_o             ( pipe_rx0_eqlp_txpreset_gt ),
    .pipe_rx0_eqpreset_o                 ( pipe_rx0_eqpreset_gt ),
    .pipe_tx0_eqcoeff_i                  ( pipe_tx0_eqcoeff_gt ),
    .pipe_tx0_eqdone_i                   ( pipe_tx0_eqdone_gt ),
    .pipe_tx0_compliance_o               ( pipe_tx0_compliance_gt ),
    .pipe_tx0_char_is_k_o                ( pipe_tx0_char_is_k_gt ),
    .pipe_tx0_data_o                     ( pipe_tx0_data_gt ),
    .pipe_tx0_elec_idle_o                ( pipe_tx0_elec_idle_gt ),
    .pipe_tx0_powerdown_o                ( pipe_tx0_powerdown_gt ),
    .pipe_tx0_datavalid_o                ( pipe_tx0_data_valid_gt ),
    .pipe_tx0_startblock_o               ( pipe_tx0_start_block_gt ),
    .pipe_tx0_syncheader_o               ( pipe_tx0_syncheader_gt ),
    .pipe_tx0_eqcontrol_o                ( pipe_tx0_eqcontrol_gt ),
    .pipe_tx0_eqdeemph_o                 ( pipe_tx0_eqdeemph_gt ),
    .pipe_tx0_eqpreset_o                 ( pipe_tx0_eqpreset_gt ),

    // Pipe Per-Lane Signals - Lane 1
    .pipe_rx1_char_is_k_o                ( pipe_rx1_char_is_k ),
    .pipe_rx1_data_o                     ( pipe_rx1_data ),
    .pipe_rx1_valid_o                    ( pipe_rx1_valid ),
    .pipe_rx1_data_valid_o               ( pipe_rx1_data_valid ),
    .pipe_rx1_status_o                   ( pipe_rx1_status ),
    .pipe_rx1_phy_status_o               ( pipe_rx1_phy_status ),
    .pipe_rx1_elec_idle_o                ( pipe_rx1_elec_idle ),
    .pipe_rx1_eqdone_o                   ( pipe_rx1_eqdone ),
    .pipe_rx1_eqlpadaptdone_o            ( pipe_rx1_eqlp_adaptdone ),
    .pipe_rx1_eqlplffssel_o              ( pipe_rx1_eqlp_lffs_sel ),
    .pipe_rx1_eqlpnewtxcoefforpreset_o   ( pipe_rx1_eqlp_new_txcoef_forpreset ),
    .pipe_rx1_startblock_o               ( pipe_rx1_start_block ),
    .pipe_rx1_syncheader_o               ( pipe_rx1_syncheader ),
    .pipe_rx1_polarity_i                 ( pipe_rx1_polarity ),
    .pipe_rx1_eqcontrol_i                ( pipe_rx1_eqcontrol ),
    .pipe_rx1_eqlplffs_i                 ( pipe_rx1_eqlp_lffs ),
    .pipe_rx1_eqlptxpreset_i             ( pipe_rx1_eqlp_txpreset ),
    .pipe_rx1_eqpreset_i                 ( pipe_rx1_eqpreset ),
    .pipe_tx1_eqcoeff_o                  ( pipe_tx1_eqcoeff ),
    .pipe_tx1_eqdone_o                   ( pipe_tx1_eqdone ),
    .pipe_tx1_compliance_i               ( pipe_tx1_compliance ),
    .pipe_tx1_char_is_k_i                ( pipe_tx1_char_is_k ),
    .pipe_tx1_data_i                     ( pipe_tx1_data ),
    .pipe_tx1_elec_idle_i                ( pipe_tx1_elec_idle ),
    .pipe_tx1_powerdown_i                ( pipe_tx1_powerdown ),
    .pipe_tx1_datavalid_i                ( pipe_tx1_data_valid ),
    .pipe_tx1_startblock_i               ( pipe_tx1_start_block ),
    .pipe_tx1_syncheader_i               ( pipe_tx1_syncheader ),
    .pipe_tx1_eqcontrol_i                ( pipe_tx1_eqcontrol ),
    .pipe_tx1_eqdeemph_i                 ( pipe_tx1_eqdeemph ),
    .pipe_tx1_eqpreset_i                 ( pipe_tx1_eqpreset ),

    .pipe_rx1_char_is_k_i                ( pipe_rx1_char_is_k_gt ),
    .pipe_rx1_data_i                     ( pipe_rx1_data_gt ),
    .pipe_rx1_valid_i                    ( pipe_rx1_valid_gt ),
    .pipe_rx1_data_valid_i               ( pipe_rx1_data_valid_gt ),
    .pipe_rx1_status_i                   ( pipe_rx1_status_gt ),
    .pipe_rx1_phy_status_i               ( pipe_rx1_phy_status_gt ),
    .pipe_rx1_elec_idle_i                ( pipe_rx1_elec_idle_gt ),
    .pipe_rx1_eqdone_i                   ( pipe_rx1_eqdone_gt ),
    .pipe_rx1_eqlpadaptdone_i            ( pipe_rx1_eqlp_adaptdone_gt ),
    .pipe_rx1_eqlplffssel_i              ( pipe_rx1_eqlp_lffs_sel_gt ),
    .pipe_rx1_eqlpnewtxcoefforpreset_i   ( pipe_rx1_eqlp_new_txcoef_forpreset_gt ),
    .pipe_rx1_startblock_i               ( pipe_rx1_start_block_gt ),
    .pipe_rx1_syncheader_i               ( pipe_rx1_syncheader_gt ),
    .pipe_rx1_polarity_o                 ( pipe_rx1_polarity_gt ),
    .pipe_rx1_eqcontrol_o                ( pipe_rx1_eqcontrol_gt ),
    .pipe_rx1_eqlplffs_o                 ( pipe_rx1_eqlp_lffs_gt ),
    .pipe_rx1_eqlptxpreset_o             ( pipe_rx1_eqlp_txpreset_gt ),
    .pipe_rx1_eqpreset_o                 ( pipe_rx1_eqpreset_gt ),
    .pipe_tx1_eqcoeff_i                  ( pipe_tx1_eqcoeff_gt ),
    .pipe_tx1_eqdone_i                   ( pipe_tx1_eqdone_gt ),
    .pipe_tx1_compliance_o               ( pipe_tx1_compliance_gt ),
    .pipe_tx1_char_is_k_o                ( pipe_tx1_char_is_k_gt ),
    .pipe_tx1_data_o                     ( pipe_tx1_data_gt ),
    .pipe_tx1_elec_idle_o                ( pipe_tx1_elec_idle_gt ),
    .pipe_tx1_powerdown_o                ( pipe_tx1_powerdown_gt ),
    .pipe_tx1_datavalid_o                ( pipe_tx1_data_valid_gt ),
    .pipe_tx1_startblock_o               ( pipe_tx1_start_block_gt ),
    .pipe_tx1_syncheader_o               ( pipe_tx1_syncheader_gt ),
    .pipe_tx1_eqcontrol_o                ( pipe_tx1_eqcontrol_gt ),
    .pipe_tx1_eqdeemph_o                 ( pipe_tx1_eqdeemph_gt ),
    .pipe_tx1_eqpreset_o                 ( pipe_tx1_eqpreset_gt ),

    // Pipe Per-Lane Signals - Lane 2
    .pipe_rx2_char_is_k_o                ( pipe_rx2_char_is_k ),
    .pipe_rx2_data_o                     ( pipe_rx2_data ),
    .pipe_rx2_valid_o                    ( pipe_rx2_valid ),
    .pipe_rx2_data_valid_o               ( pipe_rx2_data_valid ),
    .pipe_rx2_status_o                   ( pipe_rx2_status ),
    .pipe_rx2_phy_status_o               ( pipe_rx2_phy_status ),
    .pipe_rx2_elec_idle_o                ( pipe_rx2_elec_idle ),
    .pipe_rx2_eqdone_o                   ( pipe_rx2_eqdone ),
    .pipe_rx2_eqlpadaptdone_o            ( pipe_rx2_eqlp_adaptdone ),
    .pipe_rx2_eqlplffssel_o              ( pipe_rx2_eqlp_lffs_sel ),
    .pipe_rx2_eqlpnewtxcoefforpreset_o   ( pipe_rx2_eqlp_new_txcoef_forpreset ),
    .pipe_rx2_startblock_o               ( pipe_rx2_start_block ),
    .pipe_rx2_syncheader_o               ( pipe_rx2_syncheader ),
    .pipe_rx2_polarity_i                 ( pipe_rx2_polarity ),
    .pipe_rx2_eqcontrol_i                ( pipe_rx2_eqcontrol ),
    .pipe_rx2_eqlplffs_i                 ( pipe_rx2_eqlp_lffs ),
    .pipe_rx2_eqlptxpreset_i             ( pipe_rx2_eqlp_txpreset ),
    .pipe_rx2_eqpreset_i                 ( pipe_rx2_eqpreset ),
    .pipe_tx2_eqcoeff_o                  ( pipe_tx2_eqcoeff ),
    .pipe_tx2_eqdone_o                   ( pipe_tx2_eqdone ),
    .pipe_tx2_compliance_i               ( pipe_tx2_compliance ),
    .pipe_tx2_char_is_k_i                ( pipe_tx2_char_is_k ),
    .pipe_tx2_data_i                     ( pipe_tx2_data ),
    .pipe_tx2_elec_idle_i                ( pipe_tx2_elec_idle ),
    .pipe_tx2_powerdown_i                ( pipe_tx2_powerdown ),
    .pipe_tx2_datavalid_i                ( pipe_tx2_data_valid ),
    .pipe_tx2_startblock_i               ( pipe_tx2_start_block ),
    .pipe_tx2_syncheader_i               ( pipe_tx2_syncheader ),
    .pipe_tx2_eqcontrol_i                ( pipe_tx2_eqcontrol ),
    .pipe_tx2_eqdeemph_i                 ( pipe_tx2_eqdeemph ),
    .pipe_tx2_eqpreset_i                 ( pipe_tx2_eqpreset ),

    .pipe_rx2_char_is_k_i                ( pipe_rx2_char_is_k_gt ),
    .pipe_rx2_data_i                     ( pipe_rx2_data_gt ),
    .pipe_rx2_valid_i                    ( pipe_rx2_valid_gt ),
    .pipe_rx2_data_valid_i               ( pipe_rx2_data_valid_gt ),
    .pipe_rx2_status_i                   ( pipe_rx2_status_gt ),
    .pipe_rx2_phy_status_i               ( pipe_rx2_phy_status_gt ),
    .pipe_rx2_elec_idle_i                ( pipe_rx2_elec_idle_gt ),
    .pipe_rx2_eqdone_i                   ( pipe_rx2_eqdone_gt ),
    .pipe_rx2_eqlpadaptdone_i            ( pipe_rx2_eqlp_adaptdone_gt ),
    .pipe_rx2_eqlplffssel_i              ( pipe_rx2_eqlp_lffs_sel_gt ),
    .pipe_rx2_eqlpnewtxcoefforpreset_i   ( pipe_rx2_eqlp_new_txcoef_forpreset_gt ),
    .pipe_rx2_startblock_i               ( pipe_rx2_start_block_gt ),
    .pipe_rx2_syncheader_i               ( pipe_rx2_syncheader_gt ),
    .pipe_rx2_polarity_o                 ( pipe_rx2_polarity_gt ),
    .pipe_rx2_eqcontrol_o                ( pipe_rx2_eqcontrol_gt ),
    .pipe_rx2_eqlplffs_o                 ( pipe_rx2_eqlp_lffs_gt ),
    .pipe_rx2_eqlptxpreset_o             ( pipe_rx2_eqlp_txpreset_gt ),
    .pipe_rx2_eqpreset_o                 ( pipe_rx2_eqpreset_gt ),
    .pipe_tx2_eqcoeff_i                  ( pipe_tx2_eqcoeff_gt ),
    .pipe_tx2_eqdone_i                   ( pipe_tx2_eqdone_gt ),
    .pipe_tx2_compliance_o               ( pipe_tx2_compliance_gt ),
    .pipe_tx2_char_is_k_o                ( pipe_tx2_char_is_k_gt ),
    .pipe_tx2_data_o                     ( pipe_tx2_data_gt ),
    .pipe_tx2_elec_idle_o                ( pipe_tx2_elec_idle_gt ),
    .pipe_tx2_powerdown_o                ( pipe_tx2_powerdown_gt ),
    .pipe_tx2_datavalid_o                ( pipe_tx2_data_valid_gt ),
    .pipe_tx2_startblock_o               ( pipe_tx2_start_block_gt ),
    .pipe_tx2_syncheader_o               ( pipe_tx2_syncheader_gt ),
    .pipe_tx2_eqcontrol_o                ( pipe_tx2_eqcontrol_gt ),
    .pipe_tx2_eqdeemph_o                 ( pipe_tx2_eqdeemph_gt ),
    .pipe_tx2_eqpreset_o                 ( pipe_tx2_eqpreset_gt ),

    // Pipe Per-Lane Signals - Lane 3
    .pipe_rx3_char_is_k_o                ( pipe_rx3_char_is_k ),
    .pipe_rx3_data_o                     ( pipe_rx3_data ),
    .pipe_rx3_valid_o                    ( pipe_rx3_valid ),
    .pipe_rx3_data_valid_o               ( pipe_rx3_data_valid ),
    .pipe_rx3_status_o                   ( pipe_rx3_status ),
    .pipe_rx3_phy_status_o               ( pipe_rx3_phy_status ),
    .pipe_rx3_elec_idle_o                ( pipe_rx3_elec_idle ),
    .pipe_rx3_eqdone_o                   ( pipe_rx3_eqdone ),
    .pipe_rx3_eqlpadaptdone_o            ( pipe_rx3_eqlp_adaptdone ),
    .pipe_rx3_eqlplffssel_o              ( pipe_rx3_eqlp_lffs_sel ),
    .pipe_rx3_eqlpnewtxcoefforpreset_o   ( pipe_rx3_eqlp_new_txcoef_forpreset ),
    .pipe_rx3_startblock_o               ( pipe_rx3_start_block ),
    .pipe_rx3_syncheader_o               ( pipe_rx3_syncheader ),
    .pipe_rx3_polarity_i                 ( pipe_rx3_polarity ),
    .pipe_rx3_eqcontrol_i                ( pipe_rx3_eqcontrol ),
    .pipe_rx3_eqlplffs_i                 ( pipe_rx3_eqlp_lffs ),
    .pipe_rx3_eqlptxpreset_i             ( pipe_rx3_eqlp_txpreset ),
    .pipe_rx3_eqpreset_i                 ( pipe_rx3_eqpreset ),
    .pipe_tx3_eqcoeff_o                  ( pipe_tx3_eqcoeff ),
    .pipe_tx3_eqdone_o                   ( pipe_tx3_eqdone ),
    .pipe_tx3_compliance_i               ( pipe_tx3_compliance ),
    .pipe_tx3_char_is_k_i                ( pipe_tx3_char_is_k ),
    .pipe_tx3_data_i                     ( pipe_tx3_data ),
    .pipe_tx3_elec_idle_i                ( pipe_tx3_elec_idle ),
    .pipe_tx3_powerdown_i                ( pipe_tx3_powerdown ),
    .pipe_tx3_datavalid_i                ( pipe_tx3_data_valid ),
    .pipe_tx3_startblock_i               ( pipe_tx3_start_block ),
    .pipe_tx3_syncheader_i               ( pipe_tx3_syncheader ),
    .pipe_tx3_eqcontrol_i                ( pipe_tx3_eqcontrol ),
    .pipe_tx3_eqdeemph_i                 ( pipe_tx3_eqdeemph ),
    .pipe_tx3_eqpreset_i                 ( pipe_tx3_eqpreset ),

    .pipe_rx3_char_is_k_i                ( pipe_rx3_char_is_k_gt ),
    .pipe_rx3_data_i                     ( pipe_rx3_data_gt ),
    .pipe_rx3_valid_i                    ( pipe_rx3_valid_gt ),
    .pipe_rx3_data_valid_i               ( pipe_rx3_data_valid_gt ),
    .pipe_rx3_status_i                   ( pipe_rx3_status_gt ),
    .pipe_rx3_phy_status_i               ( pipe_rx3_phy_status_gt ),
    .pipe_rx3_elec_idle_i                ( pipe_rx3_elec_idle_gt ),
    .pipe_rx3_eqdone_i                   ( pipe_rx3_eqdone_gt ),
    .pipe_rx3_eqlpadaptdone_i            ( pipe_rx3_eqlp_adaptdone_gt ),
    .pipe_rx3_eqlplffssel_i              ( pipe_rx3_eqlp_lffs_sel_gt ),
    .pipe_rx3_eqlpnewtxcoefforpreset_i   ( pipe_rx3_eqlp_new_txcoef_forpreset_gt ),
    .pipe_rx3_startblock_i               ( pipe_rx3_start_block_gt ),
    .pipe_rx3_syncheader_i               ( pipe_rx3_syncheader_gt ),
    .pipe_rx3_polarity_o                 ( pipe_rx3_polarity_gt ),
    .pipe_rx3_eqcontrol_o                ( pipe_rx3_eqcontrol_gt ),
    .pipe_rx3_eqlplffs_o                 ( pipe_rx3_eqlp_lffs_gt ),
    .pipe_rx3_eqlptxpreset_o             ( pipe_rx3_eqlp_txpreset_gt ),
    .pipe_rx3_eqpreset_o                 ( pipe_rx3_eqpreset_gt ),
    .pipe_tx3_eqcoeff_i                  ( pipe_tx3_eqcoeff_gt ),
    .pipe_tx3_eqdone_i                   ( pipe_tx3_eqdone_gt ),
    .pipe_tx3_compliance_o               ( pipe_tx3_compliance_gt ),
    .pipe_tx3_char_is_k_o                ( pipe_tx3_char_is_k_gt ),
    .pipe_tx3_data_o                     ( pipe_tx3_data_gt ),
    .pipe_tx3_elec_idle_o                ( pipe_tx3_elec_idle_gt ),
    .pipe_tx3_powerdown_o                ( pipe_tx3_powerdown_gt ),
    .pipe_tx3_datavalid_o                ( pipe_tx3_data_valid_gt ),
    .pipe_tx3_startblock_o               ( pipe_tx3_start_block_gt ),
    .pipe_tx3_syncheader_o               ( pipe_tx3_syncheader_gt ),
    .pipe_tx3_eqcontrol_o                ( pipe_tx3_eqcontrol_gt ),
    .pipe_tx3_eqdeemph_o                 ( pipe_tx3_eqdeemph_gt ),
    .pipe_tx3_eqpreset_o                 ( pipe_tx3_eqpreset_gt ),

    // Pipe Per-Lane Signals - Lane 4
    .pipe_rx4_char_is_k_o                ( pipe_rx4_char_is_k ),
    .pipe_rx4_data_o                     ( pipe_rx4_data ),
    .pipe_rx4_valid_o                    ( pipe_rx4_valid ),
    .pipe_rx4_data_valid_o               ( pipe_rx4_data_valid ),
    .pipe_rx4_status_o                   ( pipe_rx4_status ),
    .pipe_rx4_phy_status_o               ( pipe_rx4_phy_status ),
    .pipe_rx4_elec_idle_o                ( pipe_rx4_elec_idle ),
    .pipe_rx4_eqdone_o                   ( pipe_rx4_eqdone ),
    .pipe_rx4_eqlpadaptdone_o            ( pipe_rx4_eqlp_adaptdone ),
    .pipe_rx4_eqlplffssel_o              ( pipe_rx4_eqlp_lffs_sel ),
    .pipe_rx4_eqlpnewtxcoefforpreset_o   ( pipe_rx4_eqlp_new_txcoef_forpreset ),
    .pipe_rx4_startblock_o               ( pipe_rx4_start_block ),
    .pipe_rx4_syncheader_o               ( pipe_rx4_syncheader ),
    .pipe_rx4_polarity_i                 ( pipe_rx4_polarity ),
    .pipe_rx4_eqcontrol_i                ( pipe_rx4_eqcontrol ),
    .pipe_rx4_eqlplffs_i                 ( pipe_rx4_eqlp_lffs ),
    .pipe_rx4_eqlptxpreset_i             ( pipe_rx4_eqlp_txpreset ),
    .pipe_rx4_eqpreset_i                 ( pipe_rx4_eqpreset ),
    .pipe_tx4_eqcoeff_o                  ( pipe_tx4_eqcoeff ),
    .pipe_tx4_eqdone_o                   ( pipe_tx4_eqdone ),
    .pipe_tx4_compliance_i               ( pipe_tx4_compliance ),
    .pipe_tx4_char_is_k_i                ( pipe_tx4_char_is_k ),
    .pipe_tx4_data_i                     ( pipe_tx4_data ),
    .pipe_tx4_elec_idle_i                ( pipe_tx4_elec_idle ),
    .pipe_tx4_powerdown_i                ( pipe_tx4_powerdown ),
    .pipe_tx4_datavalid_i                ( pipe_tx4_data_valid ),
    .pipe_tx4_startblock_i               ( pipe_tx4_start_block ),
    .pipe_tx4_syncheader_i               ( pipe_tx4_syncheader ),
    .pipe_tx4_eqcontrol_i                ( pipe_tx4_eqcontrol ),
    .pipe_tx4_eqdeemph_i                 ( pipe_tx4_eqdeemph ),
    .pipe_tx4_eqpreset_i                 ( pipe_tx4_eqpreset ),

    .pipe_rx4_char_is_k_i                ( pipe_rx4_char_is_k_gt ),
    .pipe_rx4_data_i                     ( pipe_rx4_data_gt ),
    .pipe_rx4_valid_i                    ( pipe_rx4_valid_gt ),
    .pipe_rx4_data_valid_i               ( pipe_rx4_data_valid_gt ),
    .pipe_rx4_status_i                   ( pipe_rx4_status_gt ),
    .pipe_rx4_phy_status_i               ( pipe_rx4_phy_status_gt ),
    .pipe_rx4_elec_idle_i                ( pipe_rx4_elec_idle_gt ),
    .pipe_rx4_eqdone_i                   ( pipe_rx4_eqdone_gt ),
    .pipe_rx4_eqlpadaptdone_i            ( pipe_rx4_eqlp_adaptdone_gt ),
    .pipe_rx4_eqlplffssel_i              ( pipe_rx4_eqlp_lffs_sel_gt ),
    .pipe_rx4_eqlpnewtxcoefforpreset_i   ( pipe_rx4_eqlp_new_txcoef_forpreset_gt ),
    .pipe_rx4_startblock_i               ( pipe_rx4_start_block_gt ),
    .pipe_rx4_syncheader_i               ( pipe_rx4_syncheader_gt ),
    .pipe_rx4_polarity_o                 ( pipe_rx4_polarity_gt ),
    .pipe_rx4_eqcontrol_o                ( pipe_rx4_eqcontrol_gt ),
    .pipe_rx4_eqlplffs_o                 ( pipe_rx4_eqlp_lffs_gt ),
    .pipe_rx4_eqlptxpreset_o             ( pipe_rx4_eqlp_txpreset_gt ),
    .pipe_rx4_eqpreset_o                 ( pipe_rx4_eqpreset_gt ),
    .pipe_tx4_eqcoeff_i                  ( pipe_tx4_eqcoeff_gt ),
    .pipe_tx4_eqdone_i                   ( pipe_tx4_eqdone_gt ),
    .pipe_tx4_compliance_o               ( pipe_tx4_compliance_gt ),
    .pipe_tx4_char_is_k_o                ( pipe_tx4_char_is_k_gt ),
    .pipe_tx4_data_o                     ( pipe_tx4_data_gt ),
    .pipe_tx4_elec_idle_o                ( pipe_tx4_elec_idle_gt ),
    .pipe_tx4_powerdown_o                ( pipe_tx4_powerdown_gt ),
    .pipe_tx4_datavalid_o                ( pipe_tx4_data_valid_gt ),
    .pipe_tx4_startblock_o               ( pipe_tx4_start_block_gt ),
    .pipe_tx4_syncheader_o               ( pipe_tx4_syncheader_gt ),
    .pipe_tx4_eqcontrol_o                ( pipe_tx4_eqcontrol_gt ),
    .pipe_tx4_eqdeemph_o                 ( pipe_tx4_eqdeemph_gt ),
    .pipe_tx4_eqpreset_o                 ( pipe_tx4_eqpreset_gt ),

    // Pipe Per-Lane Signals - Lane 5
    .pipe_rx5_char_is_k_o                ( pipe_rx5_char_is_k ),
    .pipe_rx5_data_o                     ( pipe_rx5_data ),
    .pipe_rx5_valid_o                    ( pipe_rx5_valid ),
    .pipe_rx5_data_valid_o               ( pipe_rx5_data_valid ),
    .pipe_rx5_status_o                   ( pipe_rx5_status ),
    .pipe_rx5_phy_status_o               ( pipe_rx5_phy_status ),
    .pipe_rx5_elec_idle_o                ( pipe_rx5_elec_idle ),
    .pipe_rx5_eqdone_o                   ( pipe_rx5_eqdone ),
    .pipe_rx5_eqlpadaptdone_o            ( pipe_rx5_eqlp_adaptdone ),
    .pipe_rx5_eqlplffssel_o              ( pipe_rx5_eqlp_lffs_sel ),
    .pipe_rx5_eqlpnewtxcoefforpreset_o   ( pipe_rx5_eqlp_new_txcoef_forpreset ),
    .pipe_rx5_startblock_o               ( pipe_rx5_start_block ),
    .pipe_rx5_syncheader_o               ( pipe_rx5_syncheader ),
    .pipe_rx5_polarity_i                 ( pipe_rx5_polarity ),
    .pipe_rx5_eqcontrol_i                ( pipe_rx5_eqcontrol ),
    .pipe_rx5_eqlplffs_i                 ( pipe_rx5_eqlp_lffs ),
    .pipe_rx5_eqlptxpreset_i             ( pipe_rx5_eqlp_txpreset ),
    .pipe_rx5_eqpreset_i                 ( pipe_rx5_eqpreset ),
    .pipe_tx5_eqcoeff_o                  ( pipe_tx5_eqcoeff ),
    .pipe_tx5_eqdone_o                   ( pipe_tx5_eqdone ),
    .pipe_tx5_compliance_i               ( pipe_tx5_compliance ),
    .pipe_tx5_char_is_k_i                ( pipe_tx5_char_is_k ),
    .pipe_tx5_data_i                     ( pipe_tx5_data ),
    .pipe_tx5_elec_idle_i                ( pipe_tx5_elec_idle ),
    .pipe_tx5_powerdown_i                ( pipe_tx5_powerdown ),
    .pipe_tx5_datavalid_i                ( pipe_tx5_data_valid ),
    .pipe_tx5_startblock_i               ( pipe_tx5_start_block ),
    .pipe_tx5_syncheader_i               ( pipe_tx5_syncheader ),
    .pipe_tx5_eqcontrol_i                ( pipe_tx5_eqcontrol ),
    .pipe_tx5_eqdeemph_i                 ( pipe_tx5_eqdeemph ),
    .pipe_tx5_eqpreset_i                 ( pipe_tx5_eqpreset ),

    .pipe_rx5_char_is_k_i                ( pipe_rx5_char_is_k_gt ),
    .pipe_rx5_data_i                     ( pipe_rx5_data_gt ),
    .pipe_rx5_valid_i                    ( pipe_rx5_valid_gt ),
    .pipe_rx5_data_valid_i               ( pipe_rx5_data_valid_gt ),
    .pipe_rx5_status_i                   ( pipe_rx5_status_gt ),
    .pipe_rx5_phy_status_i               ( pipe_rx5_phy_status_gt ),
    .pipe_rx5_elec_idle_i                ( pipe_rx5_elec_idle_gt ),
    .pipe_rx5_eqdone_i                   ( pipe_rx5_eqdone_gt ),
    .pipe_rx5_eqlpadaptdone_i            ( pipe_rx5_eqlp_adaptdone_gt ),
    .pipe_rx5_eqlplffssel_i              ( pipe_rx5_eqlp_lffs_sel_gt ),
    .pipe_rx5_eqlpnewtxcoefforpreset_i   ( pipe_rx5_eqlp_new_txcoef_forpreset_gt ),
    .pipe_rx5_startblock_i               ( pipe_rx5_start_block_gt ),
    .pipe_rx5_syncheader_i               ( pipe_rx5_syncheader_gt ),
    .pipe_rx5_polarity_o                 ( pipe_rx5_polarity_gt ),
    .pipe_rx5_eqcontrol_o                ( pipe_rx5_eqcontrol_gt ),
    .pipe_rx5_eqlplffs_o                 ( pipe_rx5_eqlp_lffs_gt ),
    .pipe_rx5_eqlptxpreset_o             ( pipe_rx5_eqlp_txpreset_gt ),
    .pipe_rx5_eqpreset_o                 ( pipe_rx5_eqpreset_gt ),
    .pipe_tx5_eqcoeff_i                  ( pipe_tx5_eqcoeff_gt ),
    .pipe_tx5_eqdone_i                   ( pipe_tx5_eqdone_gt ),
    .pipe_tx5_compliance_o               ( pipe_tx5_compliance_gt ),
    .pipe_tx5_char_is_k_o                ( pipe_tx5_char_is_k_gt ),
    .pipe_tx5_data_o                     ( pipe_tx5_data_gt ),
    .pipe_tx5_elec_idle_o                ( pipe_tx5_elec_idle_gt ),
    .pipe_tx5_powerdown_o                ( pipe_tx5_powerdown_gt ),
    .pipe_tx5_datavalid_o                ( pipe_tx5_data_valid_gt ),
    .pipe_tx5_startblock_o               ( pipe_tx5_start_block_gt ),
    .pipe_tx5_syncheader_o               ( pipe_tx5_syncheader_gt ),
    .pipe_tx5_eqcontrol_o                ( pipe_tx5_eqcontrol_gt ),
    .pipe_tx5_eqdeemph_o                 ( pipe_tx5_eqdeemph_gt ),
    .pipe_tx5_eqpreset_o                 ( pipe_tx5_eqpreset_gt ),

    // Pipe Per-Lane Signals - Lane 6
    .pipe_rx6_char_is_k_o                ( pipe_rx6_char_is_k ),
    .pipe_rx6_data_o                     ( pipe_rx6_data ),
    .pipe_rx6_valid_o                    ( pipe_rx6_valid ),
    .pipe_rx6_data_valid_o               ( pipe_rx6_data_valid ),
    .pipe_rx6_status_o                   ( pipe_rx6_status ),
    .pipe_rx6_phy_status_o               ( pipe_rx6_phy_status ),
    .pipe_rx6_elec_idle_o                ( pipe_rx6_elec_idle ),
    .pipe_rx6_eqdone_o                   ( pipe_rx6_eqdone ),
    .pipe_rx6_eqlpadaptdone_o            ( pipe_rx6_eqlp_adaptdone ),
    .pipe_rx6_eqlplffssel_o              ( pipe_rx6_eqlp_lffs_sel ),
    .pipe_rx6_eqlpnewtxcoefforpreset_o   ( pipe_rx6_eqlp_new_txcoef_forpreset ),
    .pipe_rx6_startblock_o               ( pipe_rx6_start_block ),
    .pipe_rx6_syncheader_o               ( pipe_rx6_syncheader ),
    .pipe_rx6_polarity_i                 ( pipe_rx6_polarity ),
    .pipe_rx6_eqcontrol_i                ( pipe_rx6_eqcontrol ),
    .pipe_rx6_eqlplffs_i                 ( pipe_rx6_eqlp_lffs ),
    .pipe_rx6_eqlptxpreset_i             ( pipe_rx6_eqlp_txpreset ),
    .pipe_rx6_eqpreset_i                 ( pipe_rx6_eqpreset ),
    .pipe_tx6_eqcoeff_o                  ( pipe_tx6_eqcoeff ),
    .pipe_tx6_eqdone_o                   ( pipe_tx6_eqdone ),
    .pipe_tx6_compliance_i               ( pipe_tx6_compliance ),
    .pipe_tx6_char_is_k_i                ( pipe_tx6_char_is_k ),
    .pipe_tx6_data_i                     ( pipe_tx6_data ),
    .pipe_tx6_elec_idle_i                ( pipe_tx6_elec_idle ),
    .pipe_tx6_powerdown_i                ( pipe_tx6_powerdown ),
    .pipe_tx6_datavalid_i                ( pipe_tx6_data_valid ),
    .pipe_tx6_startblock_i               ( pipe_tx6_start_block ),
    .pipe_tx6_syncheader_i               ( pipe_tx6_syncheader ),
    .pipe_tx6_eqcontrol_i                ( pipe_tx6_eqcontrol ),
    .pipe_tx6_eqdeemph_i                 ( pipe_tx6_eqdeemph ),
    .pipe_tx6_eqpreset_i                 ( pipe_tx6_eqpreset ),

    .pipe_rx6_char_is_k_i                ( pipe_rx6_char_is_k_gt ),
    .pipe_rx6_data_i                     ( pipe_rx6_data_gt ),
    .pipe_rx6_valid_i                    ( pipe_rx6_valid_gt ),
    .pipe_rx6_data_valid_i               ( pipe_rx6_data_valid_gt ),
    .pipe_rx6_status_i                   ( pipe_rx6_status_gt ),
    .pipe_rx6_phy_status_i               ( pipe_rx6_phy_status_gt ),
    .pipe_rx6_elec_idle_i                ( pipe_rx6_elec_idle_gt ),
    .pipe_rx6_eqdone_i                   ( pipe_rx6_eqdone_gt ),
    .pipe_rx6_eqlpadaptdone_i            ( pipe_rx6_eqlp_adaptdone_gt ),
    .pipe_rx6_eqlplffssel_i              ( pipe_rx6_eqlp_lffs_sel_gt ),
    .pipe_rx6_eqlpnewtxcoefforpreset_i   ( pipe_rx6_eqlp_new_txcoef_forpreset_gt ),
    .pipe_rx6_startblock_i               ( pipe_rx6_start_block_gt ),
    .pipe_rx6_syncheader_i               ( pipe_rx6_syncheader_gt ),
    .pipe_rx6_polarity_o                 ( pipe_rx6_polarity_gt ),
    .pipe_rx6_eqcontrol_o                ( pipe_rx6_eqcontrol_gt ),
    .pipe_rx6_eqlplffs_o                 ( pipe_rx6_eqlp_lffs_gt ),
    .pipe_rx6_eqlptxpreset_o             ( pipe_rx6_eqlp_txpreset_gt ),
    .pipe_rx6_eqpreset_o                 ( pipe_rx6_eqpreset_gt ),
    .pipe_tx6_eqcoeff_i                  ( pipe_tx6_eqcoeff_gt ),
    .pipe_tx6_eqdone_i                   ( pipe_tx6_eqdone_gt ),
    .pipe_tx6_compliance_o               ( pipe_tx6_compliance_gt ),
    .pipe_tx6_char_is_k_o                ( pipe_tx6_char_is_k_gt ),
    .pipe_tx6_data_o                     ( pipe_tx6_data_gt ),
    .pipe_tx6_elec_idle_o                ( pipe_tx6_elec_idle_gt ),
    .pipe_tx6_powerdown_o                ( pipe_tx6_powerdown_gt ),
    .pipe_tx6_datavalid_o                ( pipe_tx6_data_valid_gt ),
    .pipe_tx6_startblock_o               ( pipe_tx6_start_block_gt ),
    .pipe_tx6_syncheader_o               ( pipe_tx6_syncheader_gt ),
    .pipe_tx6_eqcontrol_o                ( pipe_tx6_eqcontrol_gt ),
    .pipe_tx6_eqdeemph_o                 ( pipe_tx6_eqdeemph_gt ),
    .pipe_tx6_eqpreset_o                 ( pipe_tx6_eqpreset_gt ),

    // Pipe Per-Lane Signals - Lane 7
    .pipe_rx7_char_is_k_o                ( pipe_rx7_char_is_k ),
    .pipe_rx7_data_o                     ( pipe_rx7_data ),
    .pipe_rx7_valid_o                    ( pipe_rx7_valid ),
    .pipe_rx7_data_valid_o               ( pipe_rx7_data_valid ),
    .pipe_rx7_status_o                   ( pipe_rx7_status ),
    .pipe_rx7_phy_status_o               ( pipe_rx7_phy_status ),
    .pipe_rx7_elec_idle_o                ( pipe_rx7_elec_idle ),
    .pipe_rx7_eqdone_o                   ( pipe_rx7_eqdone ),
    .pipe_rx7_eqlpadaptdone_o            ( pipe_rx7_eqlp_adaptdone ),
    .pipe_rx7_eqlplffssel_o              ( pipe_rx7_eqlp_lffs_sel ),
    .pipe_rx7_eqlpnewtxcoefforpreset_o   ( pipe_rx7_eqlp_new_txcoef_forpreset ),
    .pipe_rx7_startblock_o               ( pipe_rx7_start_block ),
    .pipe_rx7_syncheader_o               ( pipe_rx7_syncheader ),
    .pipe_rx7_polarity_i                 ( pipe_rx7_polarity ),
    .pipe_rx7_eqcontrol_i                ( pipe_rx7_eqcontrol ),
    .pipe_rx7_eqlplffs_i                 ( pipe_rx7_eqlp_lffs ),
    .pipe_rx7_eqlptxpreset_i             ( pipe_rx7_eqlp_txpreset ),
    .pipe_rx7_eqpreset_i                 ( pipe_rx7_eqpreset ),
    .pipe_tx7_eqcoeff_o                  ( pipe_tx7_eqcoeff ),
    .pipe_tx7_eqdone_o                   ( pipe_tx7_eqdone ),
    .pipe_tx7_compliance_i               ( pipe_tx7_compliance ),
    .pipe_tx7_char_is_k_i                ( pipe_tx7_char_is_k ),
    .pipe_tx7_data_i                     ( pipe_tx7_data ),
    .pipe_tx7_elec_idle_i                ( pipe_tx7_elec_idle ),
    .pipe_tx7_powerdown_i                ( pipe_tx7_powerdown ),
    .pipe_tx7_datavalid_i                ( pipe_tx7_data_valid ),
    .pipe_tx7_startblock_i               ( pipe_tx7_start_block ),
    .pipe_tx7_syncheader_i               ( pipe_tx7_syncheader ),
    .pipe_tx7_eqcontrol_i                ( pipe_tx7_eqcontrol ),
    .pipe_tx7_eqdeemph_i                 ( pipe_tx7_eqdeemph ),
    .pipe_tx7_eqpreset_i                 ( pipe_tx7_eqpreset ),

    .pipe_rx7_char_is_k_i                ( pipe_rx7_char_is_k_gt ),
    .pipe_rx7_data_i                     ( pipe_rx7_data_gt ),
    .pipe_rx7_valid_i                    ( pipe_rx7_valid_gt ),
    .pipe_rx7_data_valid_i               ( pipe_rx7_data_valid_gt ),
    .pipe_rx7_status_i                   ( pipe_rx7_status_gt ),
    .pipe_rx7_phy_status_i               ( pipe_rx7_phy_status_gt ),
    .pipe_rx7_elec_idle_i                ( pipe_rx7_elec_idle_gt ),
    .pipe_rx7_eqdone_i                   ( pipe_rx7_eqdone_gt ),
    .pipe_rx7_eqlpadaptdone_i            ( pipe_rx7_eqlp_adaptdone_gt ),
    .pipe_rx7_eqlplffssel_i              ( pipe_rx7_eqlp_lffs_sel_gt ),
    .pipe_rx7_eqlpnewtxcoefforpreset_i   ( pipe_rx7_eqlp_new_txcoef_forpreset_gt ),
    .pipe_rx7_startblock_i               ( pipe_rx7_start_block_gt ),
    .pipe_rx7_syncheader_i               ( pipe_rx7_syncheader_gt ),
    .pipe_rx7_polarity_o                 ( pipe_rx7_polarity_gt ),
    .pipe_rx7_eqcontrol_o                ( pipe_rx7_eqcontrol_gt ),
    .pipe_rx7_eqlplffs_o                 ( pipe_rx7_eqlp_lffs_gt ),
    .pipe_rx7_eqlptxpreset_o             ( pipe_rx7_eqlp_txpreset_gt ),
    .pipe_rx7_eqpreset_o                 ( pipe_rx7_eqpreset_gt ),
    .pipe_tx7_eqcoeff_i                  ( pipe_tx7_eqcoeff_gt ),
    .pipe_tx7_eqdone_i                   ( pipe_tx7_eqdone_gt ),
    .pipe_tx7_compliance_o               ( pipe_tx7_compliance_gt ),
    .pipe_tx7_char_is_k_o                ( pipe_tx7_char_is_k_gt ),
    .pipe_tx7_data_o                     ( pipe_tx7_data_gt ),
    .pipe_tx7_elec_idle_o                ( pipe_tx7_elec_idle_gt ),
    .pipe_tx7_powerdown_o                ( pipe_tx7_powerdown_gt ),
    .pipe_tx7_datavalid_o                ( pipe_tx7_data_valid_gt ),
    .pipe_tx7_startblock_o               ( pipe_tx7_start_block_gt ),
    .pipe_tx7_syncheader_o               ( pipe_tx7_syncheader_gt ),
    .pipe_tx7_eqcontrol_o                ( pipe_tx7_eqcontrol_gt ),
    .pipe_tx7_eqdeemph_o                 ( pipe_tx7_eqdeemph_gt ),
    .pipe_tx7_eqpreset_o                 ( pipe_tx7_eqpreset_gt ),

    // Non PIPE signals
    .pipe_clk                            ( pipe_clk ),
    .rst_n                               ( reset_n )
  );

endmodule
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pipe_clock.v
// Version    : 4.0

//----------------------------------------------------------------------------//
//  Filename     :  rp_pipe_clock.v
//  Description  :  PIPE Clock Module for 7 Series Transceiver
//  Version      :  20.2
//------------------------------------------------------------------------------

`timescale 1ns / 1ps



//---------- PIPE Clock Module -------------------------------------------------
module rp_pipe_clock #
(

    parameter PCIE_ASYNC_EN      = "FALSE",                 // PCIe async enable
    parameter PCIE_TXBUF_EN      = "FALSE",                 // PCIe TX buffer enable for Gen1/Gen2 only
    parameter PCIE_CLK_SHARING_EN= "TRUE",                 // Enable Clock Sharing
    parameter PCIE_LANE          = 1,                       // PCIe number of lanes
    parameter PCIE_LINK_SPEED    = 3,                       // PCIe link speed 
    parameter PCIE_REFCLK_FREQ   = 0,                       // PCIe reference clock frequency
    parameter PCIE_USERCLK1_FREQ = 2,                       // PCIe user clock 1 frequency
    parameter PCIE_USERCLK2_FREQ = 2,                       // PCIe user clock 2 frequency
    parameter PCIE_OOBCLK_MODE   = 1,                       // PCIe oob clock mode
    parameter PCIE_DEBUG_MODE    = 0                        // PCIe Debug mode
    
)

(

    //---------- Input -------------------------------------
    input                       CLK_CLK,
    input                       CLK_TXOUTCLK,
    input       [PCIE_LANE-1:0] CLK_RXOUTCLK_IN,
    input                       CLK_RST_N,
    input       [PCIE_LANE-1:0] CLK_PCLK_SEL,
    input       [PCIE_LANE-1:0] CLK_PCLK_SEL_SLAVE,
    input                       CLK_GEN3,
    
    //---------- Output ------------------------------------
    output                      CLK_PCLK,
    output                      CLK_PCLK_SLAVE,
    output                      CLK_RXUSRCLK,
    output      [PCIE_LANE-1:0] CLK_RXOUTCLK_OUT,
    output                      CLK_DCLK,
    output                      CLK_OOBCLK,
    output                      CLK_USERCLK1,
    output                      CLK_USERCLK2,
    output                      CLK_MMCM_LOCK
    
);
    
    //---------- Select Clock Divider ----------------------
    localparam          DIVCLK_DIVIDE    = (PCIE_REFCLK_FREQ == 2) ? 1 :
                                           (PCIE_REFCLK_FREQ == 1) ? 1 : 1;
                                               
    localparam          CLKFBOUT_MULT_F  = (PCIE_REFCLK_FREQ == 2) ? 4 :
                                           (PCIE_REFCLK_FREQ == 1) ? 8 : 10;
               
    localparam          CLKIN1_PERIOD    = (PCIE_REFCLK_FREQ == 2) ? 4 :
                                           (PCIE_REFCLK_FREQ == 1) ? 8 : 10;
                                               
    localparam          CLKOUT0_DIVIDE_F = 8;
    
    localparam          CLKOUT1_DIVIDE   = 4;
    
    localparam          CLKOUT2_DIVIDE   = (PCIE_USERCLK1_FREQ == 5) ?  2 : 
                                           (PCIE_USERCLK1_FREQ == 4) ?  4 :
                                           (PCIE_USERCLK1_FREQ == 3) ?  8 :
                                           (PCIE_USERCLK1_FREQ == 1) ? 32 : 16;
                                               
    localparam          CLKOUT3_DIVIDE   = (PCIE_USERCLK2_FREQ == 5) ?  2 : 
                                           (PCIE_USERCLK2_FREQ == 4) ?  4 :
                                           (PCIE_USERCLK2_FREQ == 3) ?  8 :
                                           (PCIE_USERCLK2_FREQ == 1) ? 32 : 16;
                                           
    localparam          CLKOUT4_DIVIDE   = 20;

    localparam          PCIE_GEN1_MODE    = 1'b0;             // PCIe link speed is GEN1 only
                                    
       
    //---------- Input Registers ---------------------------
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0] pclk_sel_reg1 = {PCIE_LANE{1'd0}};
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0] pclk_sel_slave_reg1 = {PCIE_LANE{1'd0}};
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                         gen3_reg1     = 1'd0;
    
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0] pclk_sel_reg2 = {PCIE_LANE{1'd0}};
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0] pclk_sel_slave_reg2 = {PCIE_LANE{1'd0}};
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                         gen3_reg2     = 1'd0;   
       
    //---------- Internal Signals -------------------------- 
    wire                        refclk;
    wire                        mmcm_fb;
    wire                        clk_125mhz;
    wire                        clk_125mhz_buf;
    wire                        clk_250mhz;
    wire                        userclk1;
    wire                        userclk2;
    wire                        oobclk;
    reg   pclk_sel = 1'd0;
    reg                         pclk_sel_slave = 1'd0;

    //---------- Output Registers --------------------------
    wire                        pclk_1;
    wire                        pclk;
    wire                        userclk1_1;
    wire                        userclk2_1;
    wire                        mmcm_lock;
    
    //---------- Generate Per-Lane Signals -----------------
    genvar              i;                                  // Index for per-lane signals



//---------- Input FF ----------------------------------------------------------
always @ (posedge pclk)
begin

    if (!CLK_RST_N)
        begin
        //---------- 1st Stage FF --------------------------
        pclk_sel_reg1 <= {PCIE_LANE{1'd0}};
        pclk_sel_slave_reg1 <= {PCIE_LANE{1'd0}};
        gen3_reg1     <= 1'd0;
        //---------- 2nd Stage FF --------------------------
        pclk_sel_reg2 <= {PCIE_LANE{1'd0}};
        pclk_sel_slave_reg2 <= {PCIE_LANE{1'd0}};
        gen3_reg2     <= 1'd0;
        end
    else
        begin  
        //---------- 1st Stage FF --------------------------
        pclk_sel_reg1 <= CLK_PCLK_SEL;
        pclk_sel_slave_reg1 <= CLK_PCLK_SEL_SLAVE;
        gen3_reg1     <= CLK_GEN3;
        //---------- 2nd Stage FF --------------------------
        pclk_sel_reg2 <= pclk_sel_reg1;
        pclk_sel_slave_reg2 <= pclk_sel_slave_reg1;
        gen3_reg2     <= gen3_reg1;
        end
        
end


/*   
//---------- Select Reference clock or TXOUTCLK --------------------------------   
generate if ((PCIE_TXBUF_EN == "TRUE") && (PCIE_LINK_SPEED != 3))

    begin : refclk_i

    //---------- Select Reference Clock ----------------------------------------
    BUFG refclk_i
    (
    
        //---------- Input -------------------------------------
        .I                          (CLK_CLK),
        //---------- Output ------------------------------------
        .O                          (refclk)
       
    );
      
    end

else

    begin : txoutclk_i
    
    //---------- Select TXOUTCLK -----------------------------------------------
    BUFG txoutclk_i
    (
    
        //---------- Input -------------------------------------
        .I                          (CLK_TXOUTCLK),
        //---------- Output ------------------------------------
        .O                          (refclk)
       
    );
   
    end

endgenerate
*/


//---------- MMCM --------------------------------------------------------------
MMCME2_ADV #
(

    .BANDWIDTH                  ("OPTIMIZED"),
    .CLKOUT4_CASCADE            ("FALSE"),
    .COMPENSATION               ("ZHOLD"),
    .STARTUP_WAIT               ("FALSE"),
    .DIVCLK_DIVIDE              (DIVCLK_DIVIDE),
    .CLKFBOUT_MULT_F            (CLKFBOUT_MULT_F),  
    .CLKFBOUT_PHASE             (0.000),
    .CLKFBOUT_USE_FINE_PS       ("FALSE"),
    .CLKOUT0_DIVIDE_F           (CLKOUT0_DIVIDE_F),                    
    .CLKOUT0_PHASE              (0.000),
    .CLKOUT0_DUTY_CYCLE         (0.500),
    .CLKOUT0_USE_FINE_PS        ("FALSE"),
    .CLKOUT1_DIVIDE             (CLKOUT1_DIVIDE),                    
    .CLKOUT1_PHASE              (0.000),
    .CLKOUT1_DUTY_CYCLE         (0.500),
    .CLKOUT1_USE_FINE_PS        ("FALSE"),
    .CLKOUT2_DIVIDE             (CLKOUT2_DIVIDE),                  
    .CLKOUT2_PHASE              (0.000),
    .CLKOUT2_DUTY_CYCLE         (0.500),
    .CLKOUT2_USE_FINE_PS        ("FALSE"),
    .CLKOUT3_DIVIDE             (CLKOUT3_DIVIDE),                  
    .CLKOUT3_PHASE              (0.000),
    .CLKOUT3_DUTY_CYCLE         (0.500),
    .CLKOUT3_USE_FINE_PS        ("FALSE"),
    .CLKOUT4_DIVIDE             (CLKOUT4_DIVIDE),                  
    .CLKOUT4_PHASE              (0.000),
    .CLKOUT4_DUTY_CYCLE         (0.500),
    .CLKOUT4_USE_FINE_PS        ("FALSE"),
    .CLKIN1_PERIOD              (CLKIN1_PERIOD),                   
    .REF_JITTER1                (0.010)
    
)
mmcm_i
(

     //---------- Input ------------------------------------
    .CLKIN1                     (CLK_TXOUTCLK),
    .CLKIN2                     (1'd0),                     // not used, comment out CLKIN2 if it cause implementation issues
  //.CLKIN2                     (refclk),                   // not used, comment out CLKIN2 if it cause implementation issues
    .CLKINSEL                   (1'd1),
    .CLKFBIN                    (mmcm_fb),
    .RST                        (!CLK_RST_N),
    .PWRDWN                     (1'd0), 
    
    //---------- Output ------------------------------------
    .CLKFBOUT                   (mmcm_fb),
    .CLKFBOUTB                  (),
    .CLKOUT0                    (clk_125mhz),
    .CLKOUT0B                   (),
    .CLKOUT1                    (clk_250mhz),
    .CLKOUT1B                   (),
    .CLKOUT2                    (userclk1),
    .CLKOUT2B                   (),
    .CLKOUT3                    (userclk2),
    .CLKOUT3B                   (),
    .CLKOUT4                    (oobclk),
    .CLKOUT5                    (),
    .CLKOUT6                    (),
    .LOCKED                     (mmcm_lock),
    
    //---------- Dynamic Reconfiguration -------------------
    .DCLK                       ( 1'd0),
    .DADDR                      ( 7'd0),
    .DEN                        ( 1'd0),
    .DWE                        ( 1'd0),
    .DI                         (16'd0),
    .DO                         (),
    .DRDY                       (),
    
    //---------- Dynamic Phase Shift -----------------------
    .PSCLK                      (1'd0),
    .PSEN                       (1'd0),
    .PSINCDEC                   (1'd0),
    .PSDONE                     (),
    
    //---------- Status ------------------------------------
    .CLKINSTOPPED               (),
    .CLKFBSTOPPED               ()  

); 
  


//---------- Select PCLK MUX ---------------------------------------------------
generate if (PCIE_LINK_SPEED != 1) 

    begin : pclk_i1_bufgctrl
    //---------- PCLK Mux ----------------------------------
    BUFGCTRL pclk_i1
    (
        //---------- Input ---------------------------------
        .CE0                        (1'd1),         
        .CE1                        (1'd1),        
        .I0                         (clk_125mhz),   
        .I1                         (clk_250mhz),   
        .IGNORE0                    (1'd0),        
        .IGNORE1                    (1'd0),        
        .S0                         (~pclk_sel),    
        .S1                         ( pclk_sel),    
        //---------- Output --------------------------------
        .O                          (pclk_1)
    );
    end

else 

    //---------- Select PCLK Buffer ------------------------
    begin : pclk_i1_bufg
    //---------- PCLK Buffer -------------------------------
    BUFG pclk_i1
    (
        //---------- Input ---------------------------------
        .I                          (clk_125mhz), 
        //---------- Output --------------------------------
        .O                          (clk_125mhz_buf)
    );
    assign pclk_1 = clk_125mhz_buf;
    end 

endgenerate

//---------- Select PCLK MUX for Slave---------------------------------------------------
generate  if(PCIE_CLK_SHARING_EN == "FALSE")
   //---------- PCLK MUX for Slave------------------// 
    begin : pclk_slave_disable
    assign CLK_PCLK_SLAVE = 1'b0;
    end  

else if (PCIE_LINK_SPEED != 1) 

    begin : pclk_slave_bufgctrl
    //---------- PCLK Mux ----------------------------------
    BUFGCTRL pclk_slave
    (
        //---------- Input ---------------------------------
        .CE0                        (1'd1),         
        .CE1                        (1'd1),        
        .I0                         (clk_125mhz),   
        .I1                         (clk_250mhz),   
        .IGNORE0                    (1'd0),        
        .IGNORE1                    (1'd0),        
        .S0                         (~pclk_sel_slave),    
        .S1                         ( pclk_sel_slave),    
        //---------- Output --------------------------------
        .O                          (CLK_PCLK_SLAVE)
    );
    end

else 

    //---------- Select PCLK Buffer ------------------------
    begin : pclk_slave_bufg
    //---------- PCLK Buffer -------------------------------
    BUFG pclk_slave
    (
        //---------- Input ---------------------------------
        .I                          (clk_125mhz), 
        //---------- Output --------------------------------
        .O                          (CLK_PCLK_SLAVE)
    );
    end 

endgenerate



//---------- Generate RXOUTCLK Buffer for Debug --------------------------------
generate if ((PCIE_DEBUG_MODE == 1) || (PCIE_ASYNC_EN == "TRUE"))
        
    begin : rxoutclk_per_lane
    //---------- Generate per Lane -------------------------
    for (i=0; i<PCIE_LANE; i=i+1) 
    
        begin : rxoutclk_i
        //---------- RXOUTCLK Buffer -----------------------
        BUFG rxoutclk_i
        (
            //---------- Input -----------------------------
            .I                          (CLK_RXOUTCLK_IN[i]), 
            //---------- Output ----------------------------
            .O                          (CLK_RXOUTCLK_OUT[i])
        );
        end

    end 
        
else

    //---------- Disable RXOUTCLK Buffer for Normal Operation 
    begin : rxoutclk_i_disable
    assign CLK_RXOUTCLK_OUT = {PCIE_LANE{1'd0}};
    end       
            
endgenerate 


////---------- Generate DCLK Buffer ----------------------------------------------
//generate if (PCIE_USERCLK2_FREQ <= 3)
////---------- Disable DCLK Buffer -----------------------
//    begin : dclk_i
//    assign CLK_DCLK = userclk2_1;                       // always less than 125Mhz
//    end
//else
//    begin : dclk_i_bufg
////---------- DCLK Buffer -------------------------------
//    BUFG dclk_i
//    (
////---------- Input ---------------------------------
//        .I                          (clk_125mhz), 
////---------- Output --------------------------------
//        .O                          (CLK_DCLK)
//    );
//    end 
//endgenerate

generate if (PCIE_LINK_SPEED != 1)

    begin : dclk_i_bufg
    //---------- DCLK Buffer -------------------------------
    BUFG dclk_i
    (
        //---------- Input ---------------------------------
        .I                          (clk_125mhz),
        //---------- Output --------------------------------
        .O                          (CLK_DCLK)
    );
    end

else

    //---------- Disable DCLK Buffer -----------------------
    begin : dclk_i
    assign CLK_DCLK = clk_125mhz_buf;                       // always 125 MHz in Gen1
    end

endgenerate



//---------- Generate USERCLK1 Buffer ------------------------------------------
generate if (PCIE_GEN1_MODE == 1'b1 && PCIE_USERCLK1_FREQ == 3) 
    //---------- USERCLK1 same as PCLK -------------------
    begin :userclk1_i1_no_bufg
    assign userclk1_1 = pclk_1;
    end 
else
    begin : userclk1_i1
    //---------- USERCLK1 Buffer ---------------------------
    BUFG usrclk1_i1
    (
        //---------- Input ---------------------------------
        .I                          (userclk1),
        //---------- Output --------------------------------
        .O                          (userclk1_1)
    );
    end 
endgenerate 



//---------- Generate USERCLK2 Buffer ------------------------------------------

generate if (PCIE_GEN1_MODE == 1'b1 && PCIE_USERCLK2_FREQ == 3 ) 
//---------- USERCLK2 same as PCLK -------------------
    begin : userclk2_i1_no_bufg0
    assign userclk2_1 = pclk_1;
    end 
else if (PCIE_USERCLK2_FREQ == PCIE_USERCLK1_FREQ ) 
//---------- USERCLK2 same as USERCLK1 -------------------
    begin : userclk2_i1_no_bufg1
    assign userclk2_1 = userclk1_1;
    end  
else    
    begin : userclk2_i1
    //---------- USERCLK2 Buffer ---------------------------
    BUFG usrclk2_i1
    (
        //---------- Input ---------------------------------
        .I                          (userclk2),
        //---------- Output --------------------------------
        .O                          (userclk2_1)
    );
    end
endgenerate 



//---------- Generate OOBCLK Buffer --------------------------------------------
generate if (PCIE_OOBCLK_MODE == 2) 

    begin : oobclk_i1
    //---------- OOBCLK Buffer -----------------------------
    BUFG oobclk_i1
    (
        //---------- Input ---------------------------------
        .I                          (oobclk),
        //---------- Output --------------------------------
        .O                          (CLK_OOBCLK)
    );
    end

else 
        
    //---------- Disable OOBCLK Buffer ---------------------
    begin : oobclk_i1_disable
    assign CLK_OOBCLK = pclk;
    end  

endgenerate 


// Disabled Second Stage Buffers
    assign pclk         = pclk_1;
    assign CLK_RXUSRCLK = pclk_1;
    assign CLK_USERCLK1 = userclk1_1;
    assign CLK_USERCLK2 = userclk2_1;
 



//---------- Select PCLK -------------------------------------------------------
always @ (posedge pclk)
begin

    if (!CLK_RST_N)
        pclk_sel <= 1'd0;
    else
        begin 
        //---------- Select 250 MHz ------------------------
        if (&pclk_sel_reg2)
            pclk_sel <= 1'd1;
        //---------- Select 125 MHz ------------------------  
        else if (&(~pclk_sel_reg2))
            pclk_sel <= 1'd0;  
        //---------- Hold PCLK -----------------------------
        else
            pclk_sel <= pclk_sel;
        end

end  

always @ (posedge pclk)
begin

    if (!CLK_RST_N)
        pclk_sel_slave<= 1'd0;
    else
        begin 
        //---------- Select 250 MHz ------------------------
        if (&pclk_sel_slave_reg2)
            pclk_sel_slave <= 1'd1;
        //---------- Select 125 MHz ------------------------  
        else if (&(~pclk_sel_slave_reg2))
            pclk_sel_slave <= 1'd0;  
        //---------- Hold PCLK -----------------------------
        else
            pclk_sel_slave <= pclk_sel_slave;
        end

end       



//---------- PIPE Clock Output -------------------------------------------------
assign CLK_PCLK      = pclk;
assign CLK_MMCM_LOCK = mmcm_lock;



endmodule

//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pipe_drp.v
// Version    : 4.0
//----------------------------------------------------------------------------//
//  Filename     :  rp_pipe_drp.v
//  Description  :  PIPE DRP Module for 7 Series Transceiver
//  Version      :  20.0
//------------------------------------------------------------------------------



`timescale 1ns / 1ps



//---------- PIPE DRP Module ---------------------------------------------------
module rp_pipe_drp #
(

    parameter PCIE_GT_DEVICE       = "GTX",                                     // PCIe GT device
    parameter PCIE_USE_MODE        = "3.0",                                     // PCIe use mode
    parameter PCIE_ASYNC_EN        = "FALSE",                                   // PCIe async mode
    parameter PCIE_PLL_SEL         = "CPLL",                                    // PCIe PLL select for Gen1/Gen2 only
    parameter PCIE_AUX_CDR_GEN3_EN = "TRUE",                                   // PCIe AUX CDR Gen3 enable
    parameter PCIE_TXBUF_EN        = "FALSE",                                   // PCIe TX buffer enable for Gen1/Gen2 only
    parameter PCIE_RXBUF_EN        = "TRUE",                                    // PCIe RX buffer enable for Gen3      only
    parameter PCIE_TXSYNC_MODE     = 0,                                         // PCIe TX sync mode
    parameter PCIE_RXSYNC_MODE     = 0,                                         // PCIe RX sync mode
    parameter LOAD_CNT_MAX         = 2'd1,                                      // Load max count
    parameter INDEX_MAX            = 5'd21                                      // Index max count
    
)

(
    
    //---------- Input -------------------------------------
    input               DRP_CLK,
    input               DRP_RST_N,
    input               DRP_GTXRESET,
    input       [ 1:0]  DRP_RATE,
    input               DRP_X16X20_MODE,
    input               DRP_X16,
    input               DRP_START,
    input       [15:0]  DRP_DO,
    input               DRP_RDY,
    
    //---------- Output ------------------------------------
    output      [ 8:0]  DRP_ADDR,
    output              DRP_EN,  
    output      [15:0]  DRP_DI,   
    output              DRP_WE,
    output              DRP_DONE,
    output      [ 6:0]  DRP_FSM
    
);

    //---------- Input Registers ---------------------------
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 gtxreset_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 1:0]  rate_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 x16x20_mode_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 x16_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 start_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [15:0]  do_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rdy_reg1;
    
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 gtxreset_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 1:0]  rate_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 x16x20_mode_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 x16_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 start_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [15:0]  do_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rdy_reg2;
    
    //---------- Internal Signals --------------------------
    reg         [ 1:0]  load_cnt =  2'd0;
    reg         [ 4:0]  index    =  5'd0;
    reg                 mode     =  1'd0;
    reg         [ 8:0]  addr_reg =  9'd0;
    reg         [15:0]  di_reg   = 16'd0;
    
    //---------- Output Registers --------------------------
    reg                 done     =  1'd0;
    reg         [ 6:0]  fsm      =  7'd1;      
                        
    //---------- DRP Address -------------------------------
    //  DRP access for *RXCDR_EIDLE includes 
    //    - [11] RXCDR_HOLD_DURING_EIDLE
    //    - [12] RXCDR_FR_RESET_ON_EIDLE
    //    - [13] RXCDR_PH_RESET_ON_EIDLE
    //------------------------------------------------------
    localparam          ADDR_PCS_RSVD_ATTR        = 9'h06F;
    localparam          ADDR_TXOUT_DIV            = 9'h088;
    localparam          ADDR_RXOUT_DIV            = 9'h088;
    localparam          ADDR_TX_DATA_WIDTH        = 9'h06B;            
    localparam          ADDR_TX_INT_DATAWIDTH     = 9'h06B;         
    localparam          ADDR_RX_DATA_WIDTH        = 9'h011;            
    localparam          ADDR_RX_INT_DATAWIDTH     = 9'h011;              
    localparam          ADDR_TXBUF_EN             = 9'h01C;           
    localparam          ADDR_RXBUF_EN             = 9'h09D;
    localparam          ADDR_TX_XCLK_SEL          = 9'h059;
    localparam          ADDR_RX_XCLK_SEL          = 9'h059;                 
    localparam          ADDR_CLK_CORRECT_USE      = 9'h044; 
    localparam          ADDR_TX_DRIVE_MODE        = 9'h019;
    localparam          ADDR_RXCDR_EIDLE          = 9'h0A7;  
    localparam          ADDR_RX_DFE_LPM_EIDLE     = 9'h01E;
    localparam          ADDR_PMA_RSV_A            = 9'h099;
    localparam          ADDR_PMA_RSV_B            = 9'h09A;
    localparam          ADDR_RXCDR_CFG_A          = 9'h0A8;
    localparam          ADDR_RXCDR_CFG_B          = 9'h0A9;
    localparam          ADDR_RXCDR_CFG_C          = 9'h0AA;
    localparam          ADDR_RXCDR_CFG_D          = 9'h0AB;
    localparam          ADDR_RXCDR_CFG_E          = 9'h0AC;
    localparam          ADDR_RXCDR_CFG_F          = 9'h0AD;  // GTH only
    
    //---------- DRP Mask ----------------------------------
    localparam          MASK_PCS_RSVD_ATTR        = 16'b1111111111111001;  // Unmask bit [ 2: 1]
    localparam          MASK_TXOUT_DIV            = 16'b1111111110001111;  // Unmask bit [ 6: 4]
    localparam          MASK_RXOUT_DIV            = 16'b1111111111111000;  // Unmask bit [ 2: 0]
    localparam          MASK_TX_DATA_WIDTH        = 16'b1111111111111000;  // Unmask bit [ 2: 0]   
    localparam          MASK_TX_INT_DATAWIDTH     = 16'b1111111111101111;  // Unmask bit [    4]
    localparam          MASK_RX_DATA_WIDTH        = 16'b1100011111111111;  // Unmask bit [13:11]  
    localparam          MASK_X16X20_RX_DATA_WIDTH = 16'b1111011111111111;  // Unmask bit [   11] // for x16 or x20 mode only 
    localparam          MASK_RX_INT_DATAWIDTH     = 16'b1011111111111111;  // Unmask bit [   14]  
    localparam          MASK_TXBUF_EN             = 16'b1011111111111111;  // Unmask bit [   14]  
    localparam          MASK_RXBUF_EN             = 16'b1111111111111101;  // Unmask bit [    1] 
    localparam          MASK_TX_XCLK_SEL          = 16'b1111111101111111;  // Unmask bit [    7]    
    localparam          MASK_RX_XCLK_SEL          = 16'b1111111110111111;  // Unmask bit [    6]       
    localparam          MASK_CLK_CORRECT_USE      = 16'b1011111111111111;  // Unmask bit [   14]
    localparam          MASK_TX_DRIVE_MODE        = 16'b1111111111100000;  // Unmask bit [  4:0]      
    localparam          MASK_RXCDR_EIDLE          = 16'b1111011111111111;  // Unmask bit [   11]  
    localparam          MASK_RX_DFE_LPM_EIDLE     = 16'b1011111111111111;  // Unmask bit [   14] 
    localparam          MASK_PMA_RSV_A            = 16'b0000000000000000;  // Unmask bit [15: 0]
    localparam          MASK_PMA_RSV_B            = 16'b0000000000000000;  // Unmask bit [15: 0]
    localparam          MASK_RXCDR_CFG_A          = 16'b0000000000000000;  // Unmask bit [15: 0]
    localparam          MASK_RXCDR_CFG_B          = 16'b0000000000000000;  // Unmask bit [15: 0]
    localparam          MASK_RXCDR_CFG_C          = 16'b0000000000000000;  // Unmask bit [15: 0]    
    localparam          MASK_RXCDR_CFG_D          = 16'b0000000000000000;  // Unmask bit [15: 0]  
    localparam          MASK_RXCDR_CFG_E_GTX      = 16'b1111111100000000;  // Unmask bit [ 7: 0]   
    localparam          MASK_RXCDR_CFG_E_GTH      = 16'b0000000000000000;  // Unmask bit [15: 0] 
    localparam          MASK_RXCDR_CFG_F_GTX      = 16'b1111111111111111;  // Unmask bit [     ] 
    localparam          MASK_RXCDR_CFG_F_GTH      = 16'b1111111111111000;  // Unmask bit [ 2: 0]
         
    //---------- DRP Data for PCIe Gen1 and Gen2 -----------
    localparam          GEN12_TXOUT_DIV           = (PCIE_PLL_SEL == "QPLL") ? 16'b0000000000100000 : 16'b0000000000010000;  // Divide by 4 or 2
    localparam          GEN12_RXOUT_DIV           = (PCIE_PLL_SEL == "QPLL") ? 16'b0000000000000010 : 16'b0000000000000001;  // Divide by 4 or 2
    localparam          GEN12_TX_DATA_WIDTH       = 16'b0000000000000011;  // 2-byte (16-bit) external data width   
    localparam          GEN12_TX_INT_DATAWIDTH    = 16'b0000000000000000;  // 2-byte (20-bit) internal data width
    localparam          GEN12_RX_DATA_WIDTH       = 16'b0001100000000000;  // 2-byte (16-bit) external data width
    localparam          GEN12_RX_INT_DATAWIDTH    = 16'b0000000000000000;  // 2-byte (20-bit) internal data width
    localparam          GEN12_TXBUF_EN            = 16'b0100000000000000;  // Use TX buffer if PCIE_TXBUF_EN == "TRUE"
    localparam          GEN12_RXBUF_EN            = 16'b0000000000000010;  // Use RX buffer 
    localparam          GEN12_TX_XCLK_SEL         = 16'b0000000000000000;  // Use TXOUT if PCIE_TXBUF_EN == "TRUE"
    localparam          GEN12_RX_XCLK_SEL         = 16'b0000000000000000;  // Use RXREC  
    localparam          GEN12_CLK_CORRECT_USE     = 16'b0100000000000000;  // Use clock correction
    localparam          GEN12_TX_DRIVE_MODE       = 16'b0000000000000001;  // Use PIPE   Gen1 and Gen2 mode    
    localparam          GEN12_RXCDR_EIDLE         = 16'b0000100000000000;  // Hold RXCDR during electrical idle 
    localparam          GEN12_RX_DFE_LPM_EIDLE    = 16'b0100000000000000;  // Hold RX DFE or LPM during electrical idle
    localparam          GEN12_PMA_RSV_A_GTX       = 16'b1000010010000000;  // 16'h8480
    localparam          GEN12_PMA_RSV_B_GTX       = 16'b0000000000000001;  // 16'h0001
    localparam          GEN12_PMA_RSV_A_GTH       = 16'b0000000000001000;  // 16'h0008
    localparam          GEN12_PMA_RSV_B_GTH       = 16'b0000000000000000;  // 16'h0000
    //----------
    localparam          GEN12_RXCDR_CFG_A_GTX     = 16'h0020;              // 16'h0020
    localparam          GEN12_RXCDR_CFG_B_GTX     = 16'h1020;              // 16'h1020
    localparam          GEN12_RXCDR_CFG_C_GTX     = 16'h23FF;              // 16'h23FF
    localparam          GEN12_RXCDR_CFG_D_GTX_S   = 16'h0000;              // 16'h0000 Sync
    localparam          GEN12_RXCDR_CFG_D_GTX_A   = 16'h8000;              // 16'h8000 Async    
    localparam          GEN12_RXCDR_CFG_E_GTX     = 16'h0003;              // 16'h0003
    localparam          GEN12_RXCDR_CFG_F_GTX     = 16'h0000;              // 16'h0000
    //----------
    localparam          GEN12_RXCDR_CFG_A_GTH_S   = 16'h0018;              // 16'h0018 Sync
    localparam          GEN12_RXCDR_CFG_A_GTH_A   = 16'h8018;              // 16'h8018 Async
    localparam          GEN12_RXCDR_CFG_B_GTH     = 16'hC208;              // 16'hC208
    localparam          GEN12_RXCDR_CFG_C_GTH     = 16'h2000;              // 16'h2000
    localparam          GEN12_RXCDR_CFG_D_GTH     = 16'h07FE;              // 16'h07FE
    localparam          GEN12_RXCDR_CFG_E_GTH     = 16'h0020;              // 16'h0020
    localparam          GEN12_RXCDR_CFG_F_GTH     = 16'h0000;              // 16'h0000  
    
    //---------- DRP Data for PCIe Gen3 --------------------                 
    localparam          GEN3_TXOUT_DIV            = 16'b0000000000000000;  // Divide by 1
    localparam          GEN3_RXOUT_DIV            = 16'b0000000000000000;  // Divide by 1
    localparam          GEN3_TX_DATA_WIDTH        = 16'b0000000000000100;  // 4-byte (32-bit) external data width                     
    localparam          GEN3_TX_INT_DATAWIDTH     = 16'b0000000000010000;  // 4-byte (32-bit) internal data width               
    localparam          GEN3_RX_DATA_WIDTH        = 16'b0010000000000000;  // 4-byte (32-bit) external data width                  
    localparam          GEN3_RX_INT_DATAWIDTH     = 16'b0100000000000000;  // 4-byte (32-bit) internal data width               
    localparam          GEN3_TXBUF_EN             = 16'b0000000000000000;  // Bypass TX buffer 
    localparam          GEN3_RXBUF_EN             = 16'b0000000000000000;  // Bypass RX buffer  
    localparam          GEN3_TX_XCLK_SEL          = 16'b0000000010000000;  // Use TXUSR  
    localparam          GEN3_RX_XCLK_SEL          = 16'b0000000001000000;  // Use RXUSR                         
    localparam          GEN3_CLK_CORRECT_USE      = 16'b0000000000000000;  // Bypass clock correction  
    localparam          GEN3_TX_DRIVE_MODE        = 16'b0000000000000010;  // Use PIPE Gen3 mode   
    localparam          GEN3_RXCDR_EIDLE          = 16'b0000000000000000;  // Disable Hold RXCDR during electrical idle 
    localparam          GEN3_RX_DFE_LPM_EIDLE     = 16'b0000000000000000;  // Disable RX DFE or LPM during electrical idle   
    localparam          GEN3_PMA_RSV_A_GTX        = 16'b0111000010000000;  // 16'h7080
    localparam          GEN3_PMA_RSV_B_GTX        = 16'b0000000000011110;  // 16'h001E
    localparam          GEN3_PMA_RSV_A_GTH        = 16'b0000000000001000;  // 16'h0008
    localparam          GEN3_PMA_RSV_B_GTH        = 16'b0000000000000000;  // 16'h0000   
    //---------- 
    localparam          GEN3_RXCDR_CFG_A_GTX      = 16'h0080;              // 16'h0080
    localparam          GEN3_RXCDR_CFG_B_GTX      = 16'h1010;              // 16'h1010
    localparam          GEN3_RXCDR_CFG_C_GTX      = 16'h0BFF;              // 16'h0BFF
    localparam          GEN3_RXCDR_CFG_D_GTX_S    = 16'h0000;              // 16'h0000 Sync
    localparam          GEN3_RXCDR_CFG_D_GTX_A    = 16'h8000;              // 16'h8000 Async    
    localparam          GEN3_RXCDR_CFG_E_GTX      = 16'h000B;              // 16'h000B
    localparam          GEN3_RXCDR_CFG_F_GTX      = 16'h0000;              // 16'h0000
    //----------                                 
  //localparam          GEN3_RXCDR_CFG_A_GTH_S    = 16'h0018;              // 16'h0018 Sync
  //localparam          GEN3_RXCDR_CFG_A_GTH_A    = 16'h8018;              // 16'h8018 Async
  //localparam          GEN3_RXCDR_CFG_B_GTH      = 16'hC208;              // 16'hC848
  //localparam          GEN3_RXCDR_CFG_C_GTH      = 16'h2000;              // 16'h1000
  //localparam          GEN3_RXCDR_CFG_D_GTH      = 16'h07FE;              // 16'h07FE v1.0 silicon
  //localparam          GEN3_RXCDR_CFG_D_GTH_AUX  = 16'h0FFE;              // 16'h07FE v2.0 silicon, [62:59] AUX CDR configuration
  //localparam          GEN3_RXCDR_CFG_E_GTH      = 16'h0020;              // 16'h0010
  //localparam          GEN3_RXCDR_CFG_F_GTH      = 16'h0000;              // 16'h0000 v1.0 silicon
  //localparam          GEN3_RXCDR_CFG_F_GTH_AUX  = 16'h0002;              // 16'h0000 v2.0 silicon, [81] AUX CDR enable
    //----------                                 
    localparam          GEN3_RXCDR_CFG_A_GTH_S    = 16'h0018;              // 16'h0018 Sync
    localparam          GEN3_RXCDR_CFG_A_GTH_A    = 16'h8018;              // 16'h8018 Async
    localparam          GEN3_RXCDR_CFG_B_GTH      = 16'hC848;              // 16'hC848
    localparam          GEN3_RXCDR_CFG_C_GTH      = 16'h1000;              // 16'h1000
    localparam          GEN3_RXCDR_CFG_D_GTH      = 16'h07FE;              // 16'h07FE v1.0 silicon
    localparam          GEN3_RXCDR_CFG_D_GTH_AUX  = 16'h0FFE;              // 16'h07FE v2.0 silicon, [62:59] AUX CDR configuration
    localparam          GEN3_RXCDR_CFG_E_GTH      = 16'h0010;              // 16'h0010
    localparam          GEN3_RXCDR_CFG_F_GTH      = 16'h0000;              // 16'h0000 v1.0 silicon
    localparam          GEN3_RXCDR_CFG_F_GTH_AUX  = 16'h0002;              // 16'h0000 v2.0 silicon, [81] AUX CDR enable
      
    //---------- DRP Data for PCIe Gen1, Gen2 and Gen3 -----    
    localparam          GEN123_PCS_RSVD_ATTR_A    = 16'b0000000000000000;  // Auto TX and RX sync mode
    localparam          GEN123_PCS_RSVD_ATTR_M_TX = 16'b0000000000000010;  // Manual TX sync mode
    localparam          GEN123_PCS_RSVD_ATTR_M_RX = 16'b0000000000000100;  // Manual RX sync mode
      
    //---------- DRP Data for x16 --------------------------
    localparam          X16_RX_DATAWIDTH   = 16'b0000000000000000;  // 2-byte (16-bit) internal data width
    
    //---------- DRP Data for x20 --------------------------                                  
    localparam          X20_RX_DATAWIDTH   = 16'b0000100000000000;  // 2-byte (20-bit) internal data width       
      
    //---------- DRP Data ----------------------------------     
    wire        [15:0]  data_txout_div;
    wire        [15:0]  data_rxout_div;
    wire        [15:0]  data_tx_data_width;               
    wire        [15:0]  data_tx_int_datawidth;            
    wire        [15:0]  data_rx_data_width;               
    wire        [15:0]  data_rx_int_datawidth;                
    wire        [15:0]  data_txbuf_en;        
    wire        [15:0]  data_rxbuf_en;        
    wire        [15:0]  data_tx_xclk_sel;
    wire        [15:0]  data_rx_xclk_sel;            
    wire        [15:0]  data_clk_correction_use; 
    wire        [15:0]  data_tx_drive_mode;
    wire        [15:0]  data_rxcdr_eidle;
    wire        [15:0]  data_rx_dfe_lpm_eidle;
    wire        [15:0]  data_pma_rsv_a;
    wire        [15:0]  data_pma_rsv_b;
    
    wire        [15:0]  data_rxcdr_cfg_a;
    wire        [15:0]  data_rxcdr_cfg_b; 
    wire        [15:0]  data_rxcdr_cfg_c;
    wire        [15:0]  data_rxcdr_cfg_d; 
    wire        [15:0]  data_rxcdr_cfg_e;
    wire        [15:0]  data_rxcdr_cfg_f;
        
    wire        [15:0]  data_pcs_rsvd_attr_a;  
    wire        [15:0]  data_pcs_rsvd_attr_m_tx; 
    wire        [15:0]  data_pcs_rsvd_attr_m_rx; 
    wire        [15:0]  data_pcs_rsvd_attr_m;   
                
    wire        [15:0]  data_x16x20_rx_datawidth;    
           
    //---------- FSM ---------------------------------------  
    localparam          FSM_IDLE  = 7'b0000001;  
    localparam          FSM_LOAD  = 7'b0000010;                           
    localparam          FSM_READ  = 7'b0000100;
    localparam          FSM_RRDY  = 7'b0001000;
    localparam          FSM_WRITE = 7'b0010000;
    localparam          FSM_WRDY  = 7'b0100000;    
    localparam          FSM_DONE  = 7'b1000000;   

    
    
//---------- Input FF ----------------------------------------------------------
always @ (posedge DRP_CLK)
begin

    if (!DRP_RST_N)
        begin
        //---------- 1st Stage FF --------------------------
        gtxreset_reg1    <=  1'd0;
        rate_reg1        <=  2'd0;
        x16x20_mode_reg1 <=  1'd0;
        x16_reg1         <=  1'd0;
        do_reg1          <= 16'd0;
        rdy_reg1         <=  1'd0;
        start_reg1       <=  1'd0;
        //---------- 2nd Stage FF --------------------------
        gtxreset_reg2    <=  1'd0;
        rate_reg2        <=  2'd0;
        x16x20_mode_reg2 <=  1'd0;
        x16_reg2         <=  1'd0;
        do_reg2          <= 16'd0;
        rdy_reg2         <=  1'd0;
        start_reg2       <=  1'd0;
        end
        
    else
        begin
        //---------- 1st Stage FF --------------------------
        gtxreset_reg1    <= DRP_GTXRESET;
        rate_reg1        <= DRP_RATE;
        x16x20_mode_reg1 <= DRP_X16X20_MODE;
        x16_reg1         <= DRP_X16;
        do_reg1          <= DRP_DO;
        rdy_reg1         <= DRP_RDY;
        start_reg1       <= DRP_START;
        //---------- 2nd Stage FF --------------------------
        gtxreset_reg2    <= gtxreset_reg1;
        rate_reg2        <= rate_reg1;
        x16x20_mode_reg2 <= x16x20_mode_reg1;
        x16_reg2         <= x16_reg1;
        do_reg2          <= do_reg1;
        rdy_reg2         <= rdy_reg1;
        start_reg2       <= start_reg1;
        end
    
end  



//---------- Select DRP Data ---------------------------------------------------
assign data_txout_div          =  (rate_reg2 == 2'd2)                                ? GEN3_TXOUT_DIV        : GEN12_TXOUT_DIV;
assign data_rxout_div          =  (rate_reg2 == 2'd2)                                ? GEN3_RXOUT_DIV        : GEN12_RXOUT_DIV;
assign data_tx_data_width      =  (rate_reg2 == 2'd2)                                ? GEN3_TX_DATA_WIDTH    : GEN12_TX_DATA_WIDTH;
assign data_tx_int_datawidth   =  (rate_reg2 == 2'd2)                                ? GEN3_TX_INT_DATAWIDTH : GEN12_TX_INT_DATAWIDTH;
assign data_rx_data_width      =  (rate_reg2 == 2'd2)                                ? GEN3_RX_DATA_WIDTH    : GEN12_RX_DATA_WIDTH;

assign data_rx_int_datawidth   =  (rate_reg2 == 2'd2)                                ? GEN3_RX_INT_DATAWIDTH : GEN12_RX_INT_DATAWIDTH;

assign data_txbuf_en           = ((rate_reg2 == 2'd2) || (PCIE_TXBUF_EN == "FALSE")) ? GEN3_TXBUF_EN         : GEN12_TXBUF_EN;
assign data_rxbuf_en           = ((rate_reg2 == 2'd2) && (PCIE_RXBUF_EN == "FALSE")) ? GEN3_RXBUF_EN         : GEN12_RXBUF_EN;
assign data_tx_xclk_sel        = ((rate_reg2 == 2'd2) || (PCIE_TXBUF_EN == "FALSE")) ? GEN3_TX_XCLK_SEL      : GEN12_TX_XCLK_SEL;
assign data_rx_xclk_sel        = ((rate_reg2 == 2'd2) && (PCIE_RXBUF_EN == "FALSE")) ? GEN3_RX_XCLK_SEL      : GEN12_RX_XCLK_SEL;
assign data_clk_correction_use =  (rate_reg2 == 2'd2)                                ? GEN3_CLK_CORRECT_USE  : GEN12_CLK_CORRECT_USE;
assign data_tx_drive_mode      =  (rate_reg2 == 2'd2)                                ? GEN3_TX_DRIVE_MODE    : GEN12_TX_DRIVE_MODE;   
assign data_rxcdr_eidle        =  (rate_reg2 == 2'd2)                                ? GEN3_RXCDR_EIDLE      : GEN12_RXCDR_EIDLE;
assign data_rx_dfe_lpm_eidle   =  (rate_reg2 == 2'd2)                                ? GEN3_RX_DFE_LPM_EIDLE : GEN12_RX_DFE_LPM_EIDLE;
assign data_pma_rsv_a          =  (rate_reg2 == 2'd2)                                ? ((PCIE_GT_DEVICE == "GTH") ? GEN3_PMA_RSV_A_GTH  : GEN3_PMA_RSV_A_GTX) :
                                                                                       ((PCIE_GT_DEVICE == "GTH") ? GEN12_PMA_RSV_A_GTH : GEN12_PMA_RSV_A_GTX);
assign data_pma_rsv_b          =  (rate_reg2 == 2'd2)                                ? ((PCIE_GT_DEVICE == "GTH") ? GEN3_PMA_RSV_B_GTH  : GEN3_PMA_RSV_B_GTX) :
                                                                                       ((PCIE_GT_DEVICE == "GTH") ? GEN12_PMA_RSV_B_GTH : GEN12_PMA_RSV_B_GTX);

assign data_rxcdr_cfg_a = (rate_reg2 == 2'd2) ? ((PCIE_GT_DEVICE == "GTH") ? ((PCIE_ASYNC_EN == "TRUE") ? GEN3_RXCDR_CFG_A_GTH_A  : GEN3_RXCDR_CFG_A_GTH_S)  : GEN3_RXCDR_CFG_A_GTX) :
                                                ((PCIE_GT_DEVICE == "GTH") ? ((PCIE_ASYNC_EN == "TRUE") ? GEN12_RXCDR_CFG_A_GTH_A : GEN12_RXCDR_CFG_A_GTH_S) : GEN12_RXCDR_CFG_A_GTX);

assign data_rxcdr_cfg_b = (rate_reg2 == 2'd2) ? ((PCIE_GT_DEVICE == "GTH") ?  GEN3_RXCDR_CFG_B_GTH  : GEN3_RXCDR_CFG_B_GTX) :
                                                ((PCIE_GT_DEVICE == "GTH") ?  GEN12_RXCDR_CFG_B_GTH : GEN12_RXCDR_CFG_B_GTX);

assign data_rxcdr_cfg_c = (rate_reg2 == 2'd2) ? ((PCIE_GT_DEVICE == "GTH") ?  GEN3_RXCDR_CFG_C_GTH  : GEN3_RXCDR_CFG_C_GTX) :
                                                ((PCIE_GT_DEVICE == "GTH") ?  GEN12_RXCDR_CFG_C_GTH : GEN12_RXCDR_CFG_C_GTX);
                                                
assign data_rxcdr_cfg_d = (rate_reg2 == 2'd2) ? ((PCIE_GT_DEVICE == "GTH") ?  ((PCIE_AUX_CDR_GEN3_EN == "TRUE") ? GEN3_RXCDR_CFG_D_GTH_AUX : GEN3_RXCDR_CFG_D_GTH) : ((PCIE_ASYNC_EN == "TRUE") ? GEN3_RXCDR_CFG_D_GTX_A : GEN3_RXCDR_CFG_D_GTX_S)) :
                                                ((PCIE_GT_DEVICE == "GTH") ?  GEN12_RXCDR_CFG_D_GTH : ((PCIE_ASYNC_EN == "TRUE") ? GEN3_RXCDR_CFG_D_GTX_A : GEN3_RXCDR_CFG_D_GTX_S));

assign data_rxcdr_cfg_e = (rate_reg2 == 2'd2) ? ((PCIE_GT_DEVICE == "GTH") ?  GEN3_RXCDR_CFG_E_GTH  : GEN3_RXCDR_CFG_E_GTX) :
                                                ((PCIE_GT_DEVICE == "GTH") ?  GEN12_RXCDR_CFG_E_GTH : GEN12_RXCDR_CFG_E_GTX);
                                                
assign data_rxcdr_cfg_f = (rate_reg2 == 2'd2) ? ((PCIE_GT_DEVICE == "GTH") ?  ((PCIE_AUX_CDR_GEN3_EN == "TRUE") ? GEN3_RXCDR_CFG_F_GTH_AUX : GEN3_RXCDR_CFG_F_GTH) : GEN3_RXCDR_CFG_F_GTX) :
                                                ((PCIE_GT_DEVICE == "GTH") ?  GEN12_RXCDR_CFG_F_GTH : GEN12_RXCDR_CFG_F_GTX);

assign data_pcs_rsvd_attr_a    = GEN123_PCS_RSVD_ATTR_A;
assign data_pcs_rsvd_attr_m_tx = PCIE_TXSYNC_MODE ? GEN123_PCS_RSVD_ATTR_A : GEN123_PCS_RSVD_ATTR_M_TX;
assign data_pcs_rsvd_attr_m_rx = PCIE_RXSYNC_MODE ? GEN123_PCS_RSVD_ATTR_A : GEN123_PCS_RSVD_ATTR_M_RX;
assign data_pcs_rsvd_attr_m    = data_pcs_rsvd_attr_m_tx | data_pcs_rsvd_attr_m_rx;

assign data_x16x20_rx_datawidth = x16_reg2 ? X16_RX_DATAWIDTH : X20_RX_DATAWIDTH;


//---------- Load Counter ------------------------------------------------------
always @ (posedge DRP_CLK)
begin

    if (!DRP_RST_N)
        load_cnt <= 2'd0;
    else
    
        //---------- Increment Load Counter ----------------
        if ((fsm == FSM_LOAD) && (load_cnt < LOAD_CNT_MAX))
            load_cnt <= load_cnt + 2'd1;
            
        //---------- Hold Load Counter ---------------------
        else if ((fsm == FSM_LOAD) && (load_cnt == LOAD_CNT_MAX))
            load_cnt <= load_cnt;
            
        //---------- Reset Load Counter --------------------
        else
            load_cnt <= 2'd0;
        
end 



//---------- Update DRP Address and Data ---------------------------------------
always @ (posedge DRP_CLK)
begin

    if (!DRP_RST_N)
        begin
        addr_reg <=  9'd0;
        di_reg   <= 16'd0;
        end
    else
        begin
        
        case (index)
        
        //--------------------------------------------------      
        5'd0:     
            begin
            addr_reg <= mode             ? ADDR_PCS_RSVD_ATTR : 
                        x16x20_mode_reg2 ? ADDR_RX_DATA_WIDTH : ADDR_TXOUT_DIV; 
            di_reg   <= mode             ? ((do_reg2 & MASK_PCS_RSVD_ATTR)        | data_pcs_rsvd_attr_a) : 
                        x16x20_mode_reg2 ? ((do_reg2 & MASK_X16X20_RX_DATA_WIDTH) | data_x16x20_rx_datawidth) : 
                                           ((do_reg2 & MASK_TXOUT_DIV)            | data_txout_div);
            end 
            
        //--------------------------------------------------      
        5'd1:    
            begin
            addr_reg <= mode ? ADDR_PCS_RSVD_ATTR : ADDR_RXOUT_DIV;
            di_reg   <= mode ? ((do_reg2 & MASK_PCS_RSVD_ATTR)  | data_pcs_rsvd_attr_m) : 
                               ((do_reg2 & MASK_RXOUT_DIV)      | data_rxout_div);
            end 
            
        //--------------------------------------------------
        5'd2 :
            begin        
            addr_reg <= ADDR_TX_DATA_WIDTH;
            di_reg   <= (do_reg2 & MASK_TX_DATA_WIDTH) | data_tx_data_width;
            end
           
        //--------------------------------------------------    
        5'd3 :
            begin        
            addr_reg <= ADDR_TX_INT_DATAWIDTH;
            di_reg   <= (do_reg2 & MASK_TX_INT_DATAWIDTH) | data_tx_int_datawidth;
            end    
        
        //--------------------------------------------------     
        5'd4 :
            begin
            addr_reg <= ADDR_RX_DATA_WIDTH;
            di_reg   <= (do_reg2 & MASK_RX_DATA_WIDTH) | data_rx_data_width;
            end   
        
        //--------------------------------------------------     
        5'd5 :
            begin        
            addr_reg <= ADDR_RX_INT_DATAWIDTH;
            di_reg   <= (do_reg2 & MASK_RX_INT_DATAWIDTH) | data_rx_int_datawidth;
            end  
  
        //--------------------------------------------------         
        5'd6 :
            begin        
            addr_reg <= ADDR_TXBUF_EN;
            di_reg   <= (do_reg2 & MASK_TXBUF_EN) | data_txbuf_en;
            end   
        
        //--------------------------------------------------         
        5'd7 :
            begin        
            addr_reg <= ADDR_RXBUF_EN;
            di_reg   <= (do_reg2 & MASK_RXBUF_EN) | data_rxbuf_en;
            end   
        
        //--------------------------------------------------         
        5'd8 :
            begin        
            addr_reg <= ADDR_TX_XCLK_SEL;
            di_reg   <= (do_reg2 & MASK_TX_XCLK_SEL) | data_tx_xclk_sel;
            end   
        
        //--------------------------------------------------         
        5'd9 :
            begin        
            addr_reg <= ADDR_RX_XCLK_SEL;
            di_reg   <= (do_reg2 & MASK_RX_XCLK_SEL) | data_rx_xclk_sel;
            end   
        
        //--------------------------------------------------      
        5'd10 :
            begin
            addr_reg <= ADDR_CLK_CORRECT_USE;
            di_reg   <= (do_reg2 & MASK_CLK_CORRECT_USE) | data_clk_correction_use;
            end 

        //--------------------------------------------------      
        5'd11 :
            begin
            addr_reg <= ADDR_TX_DRIVE_MODE;
            di_reg   <= (do_reg2 & MASK_TX_DRIVE_MODE) | data_tx_drive_mode;
            end 
            
        //--------------------------------------------------      
        5'd12 :
            begin
            addr_reg <= ADDR_RXCDR_EIDLE;
            di_reg   <= (do_reg2 & MASK_RXCDR_EIDLE) | data_rxcdr_eidle;
            end 
            
        //--------------------------------------------------      
        5'd13 :
            begin
            addr_reg <= ADDR_RX_DFE_LPM_EIDLE;
            di_reg   <= (do_reg2 & MASK_RX_DFE_LPM_EIDLE) | data_rx_dfe_lpm_eidle;
            end     
            
        //--------------------------------------------------      
        5'd14 :
            begin
            addr_reg <= ADDR_PMA_RSV_A;
            di_reg   <= (do_reg2 & MASK_PMA_RSV_A) | data_pma_rsv_a;
            end  
            
        //--------------------------------------------------      
        5'd15 :
            begin
            addr_reg <= ADDR_PMA_RSV_B;
            di_reg   <= (do_reg2 & MASK_PMA_RSV_B) | data_pma_rsv_b;
            end 

        //--------------------------------------------------      
        5'd16 :
            begin
            addr_reg <= ADDR_RXCDR_CFG_A;
            di_reg   <= (do_reg2 & MASK_RXCDR_CFG_A) | data_rxcdr_cfg_a;
            end 
            
        //--------------------------------------------------      
        5'd17 :
            begin
            addr_reg <= ADDR_RXCDR_CFG_B;
            di_reg   <= (do_reg2 & MASK_RXCDR_CFG_B) | data_rxcdr_cfg_b;
            end 
            
        //--------------------------------------------------      
        5'd18 :
            begin
            addr_reg <= ADDR_RXCDR_CFG_C;
            di_reg   <= (do_reg2 & MASK_RXCDR_CFG_C) | data_rxcdr_cfg_c;
            end                         

        //--------------------------------------------------      
        5'd19 :
            begin
            addr_reg <= ADDR_RXCDR_CFG_D;
            di_reg   <= (do_reg2 & MASK_RXCDR_CFG_D) | data_rxcdr_cfg_d;
            end    
            
        //--------------------------------------------------      
        5'd20 :
            begin
            addr_reg <= ADDR_RXCDR_CFG_E;
            di_reg   <= (do_reg2 & ((PCIE_GT_DEVICE == "GTH") ? MASK_RXCDR_CFG_E_GTH : MASK_RXCDR_CFG_E_GTX)) | data_rxcdr_cfg_e;
            end             
            
        //--------------------------------------------------      
        5'd21 :
            begin
            addr_reg <= ADDR_RXCDR_CFG_F;
            di_reg   <= (do_reg2 & ((PCIE_GT_DEVICE == "GTH") ? MASK_RXCDR_CFG_F_GTH : MASK_RXCDR_CFG_F_GTX)) | data_rxcdr_cfg_f;
            end             
            
        //--------------------------------------------------
        default : 
            begin
            addr_reg <=  9'd0;
            di_reg   <= 16'd0;
            end
            
        endcase
        
        end
        
end  



//---------- PIPE DRP FSM ------------------------------------------------------
always @ (posedge DRP_CLK)
begin

    if (!DRP_RST_N)
        begin
        fsm   <= FSM_IDLE;
        index <= 5'd0;
        mode  <= 1'd0;
        done  <= 1'd0;
        end
    else
        begin
        
        case (fsm)

        //---------- Idle State ----------------------------
        FSM_IDLE :  
          
            begin
            //---------- Reset or Rate Change --------------
            if (start_reg2)
                begin
                fsm   <= FSM_LOAD;
                index <= 5'd0;
                mode  <= 1'd0;
                done  <= 1'd0; 
                end
            //---------- GTXRESET --------------------------    
            else if ((gtxreset_reg2 && !gtxreset_reg1) && ((PCIE_TXSYNC_MODE == 0) || (PCIE_RXSYNC_MODE == 0)) && (PCIE_USE_MODE == "1.0"))
                begin
                fsm   <= FSM_LOAD;
                index <= 5'd0;
                mode  <= 1'd1;
                done  <= 1'd0;
                end
            //---------- Idle ------------------------------
            else       
                begin
                fsm   <= FSM_IDLE;
                index <= 5'd0;
                mode  <= 1'd0;
                done  <= 1'd1;
                end 
            end    
            
        //---------- Load DRP Address  ---------------------
        FSM_LOAD :
        
            begin
            fsm   <= (load_cnt == LOAD_CNT_MAX) ? FSM_READ : FSM_LOAD;
            index <= index;
            mode  <= mode;
            done  <= 1'd0;
            end  
            
        //---------- Read DRP ------------------------------
        FSM_READ :
        
            begin
            fsm   <= FSM_RRDY;
            index <= index;
            mode  <= mode;
            done  <= 1'd0;
            end
            
        //---------- Read DRP Ready ------------------------
        FSM_RRDY :    
        
            begin
            fsm   <= rdy_reg2 ? FSM_WRITE : FSM_RRDY;
            index <= index;
            mode  <= mode;
            done  <= 1'd0;
            end
  
            
        //---------- Write DRP -----------------------------
        FSM_WRITE :    
        
            begin
            fsm   <= FSM_WRDY;
            index <= index;
            mode  <= mode;
            done  <= 1'd0;
            end       
            
        //---------- Write DRP Ready -----------------------
        FSM_WRDY :    
        
            begin
            fsm   <= rdy_reg2 ? FSM_DONE : FSM_WRDY;
            index <= index;
            mode  <= mode;
            done  <= 1'd0;
            end        
             
        //---------- DRP Done ------------------------------
        FSM_DONE :
        
            begin
            if ((index == INDEX_MAX) || (mode && (index == 5'd1)) || (x16x20_mode_reg2 && (index == 5'd0)))
                begin
                fsm   <= FSM_IDLE;
                index <= 5'd0;
                mode  <= 1'd0;
                done  <= 1'd0;
                end
            else       
                begin
                fsm   <= FSM_LOAD;
                index <= index + 5'd1;
                mode  <= mode;
                done  <= 1'd0;
                end
            end     
              
        //---------- Default State -------------------------
        default :
        
            begin      
            fsm   <= FSM_IDLE;
            index <= 5'd0;
            mode  <= 1'd0;
            done  <= 1'd0;
            end
            
        endcase
        
        end
        
end 



//---------- PIPE DRP Output ---------------------------------------------------
assign DRP_ADDR = addr_reg;
assign DRP_EN   = (fsm == FSM_READ) || (fsm == FSM_WRITE);
assign DRP_DI   = di_reg;
assign DRP_WE   = (fsm == FSM_WRITE);
assign DRP_DONE = done;
assign DRP_FSM  = fsm;



endmodule
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pipe_eq.v
// Version    : 4.0
//----------------------------------------------------------------------------//
//  Filename     :  rp_pipe_eq.v
//  Description  :  PIPE Equalization Module for 7 Series Transceiver
//  Version      :  20.1
//------------------------------------------------------------------------------



`timescale 1ns / 1ps



//---------- PIPE Equalization Module ------------------------------------------
module rp_pipe_eq #
(
    parameter PCIE_SIM_MODE       = "FALSE",
    parameter PCIE_GT_DEVICE      = "GTX",
    parameter PCIE_RXEQ_MODE_GEN3 = 1
)

(

    //---------- Input -------------------------------------
    input               EQ_CLK,                            
    input               EQ_RST_N,
    input               EQ_GEN3,

    input       [ 1:0]  EQ_TXEQ_CONTROL,    
    input       [ 3:0]  EQ_TXEQ_PRESET,
    input       [ 3:0]  EQ_TXEQ_PRESET_DEFAULT,
    input       [ 5:0]  EQ_TXEQ_DEEMPH_IN,
                                
    input       [ 1:0]  EQ_RXEQ_CONTROL,  
    input       [ 2:0]  EQ_RXEQ_PRESET,
    input       [ 5:0]  EQ_RXEQ_LFFS,  
    input       [ 3:0]  EQ_RXEQ_TXPRESET,
    input               EQ_RXEQ_USER_EN,
    input       [17:0]  EQ_RXEQ_USER_TXCOEFF,
    input               EQ_RXEQ_USER_MODE, 
    
    
    //---------- Output ------------------------------------
    output              EQ_TXEQ_DEEMPH,
    output      [ 4:0]  EQ_TXEQ_PRECURSOR,
    output      [ 6:0]  EQ_TXEQ_MAINCURSOR,
    output      [ 4:0]  EQ_TXEQ_POSTCURSOR,
    output      [17:0]  EQ_TXEQ_DEEMPH_OUT,
    output              EQ_TXEQ_DONE,
    output      [ 5:0]  EQ_TXEQ_FSM,
    
    output      [17:0]  EQ_RXEQ_NEW_TXCOEFF,
    output              EQ_RXEQ_LFFS_SEL,
    output              EQ_RXEQ_ADAPT_DONE,
    output              EQ_RXEQ_DONE, 
    output      [ 5:0]  EQ_RXEQ_FSM

);          

    //---------- Input Registers ---------------------------
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 gen3_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 gen3_reg2;
    
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 1:0]  txeq_control_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 3:0]  txeq_preset_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 5:0]  txeq_deemph_reg1;
    
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 1:0]  txeq_control_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg	      [ 3:0]  txeq_preset_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 5:0]  txeq_deemph_reg2;
    
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 1:0]  rxeq_control_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 2:0]  rxeq_preset_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 5:0]  rxeq_lffs_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 3:0]  rxeq_txpreset_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxeq_user_en_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [17:0]  rxeq_user_txcoeff_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxeq_user_mode_reg1;
    
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 1:0]  rxeq_control_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg	      [ 2:0]  rxeq_preset_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 5:0]  rxeq_lffs_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 3:0]  rxeq_txpreset_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxeq_user_en_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [17:0]  rxeq_user_txcoeff_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxeq_user_mode_reg2;
    
    //---------- Internal Signals --------------------------
    reg         [18:0]  txeq_preset          = 19'd0;          
    reg                 txeq_preset_done     =  1'd0;
    reg         [ 1:0]  txeq_txcoeff_cnt     =  2'd0;
    
    reg         [ 2:0]  rxeq_preset          =  3'd0;
    reg                 rxeq_preset_valid    =  1'd0;
    reg         [ 3:0]  rxeq_txpreset        =  4'd0;
    reg         [17:0]  rxeq_txcoeff         = 18'd0; 
    reg         [ 2:0]  rxeq_cnt             =  3'd0;
    reg         [ 5:0]  rxeq_fs              =  6'd0;
    reg         [ 5:0]  rxeq_lf              =  6'd0;
    reg                 rxeq_new_txcoeff_req =  1'd0;
   
    //---------- Output Registers --------------------------     
    reg         [18:0]  txeq_txcoeff        = 19'd0;
    reg                 txeq_done           =  1'd0;
    reg         [ 5:0]  fsm_tx              =  6'd0;
   
    reg         [17:0]  rxeq_new_txcoeff    = 18'd0;
    reg                 rxeq_lffs_sel       =  1'd0;
    reg                 rxeq_adapt_done_reg =  1'd0;
    reg                 rxeq_adapt_done     =  1'd0;
    reg                 rxeq_done           =  1'd0; 
    reg         [ 5:0]  fsm_rx              =  6'd0;    
    
    //---------- RXEQ Eye Scan Module Output ---------------
    wire                rxeqscan_lffs_sel;
    wire                rxeqscan_preset_done;
    wire        [17:0]  rxeqscan_new_txcoeff;
    wire                rxeqscan_new_txcoeff_done;
    wire                rxeqscan_adapt_done;
                  
    //---------- FSM ---------------------------------------   
    localparam          FSM_TXEQ_IDLE            = 6'b000001; 
    localparam          FSM_TXEQ_PRESET          = 6'b000010;                                     
    localparam          FSM_TXEQ_TXCOEFF         = 6'b000100;
    localparam          FSM_TXEQ_REMAP           = 6'b001000;
    localparam          FSM_TXEQ_QUERY           = 6'b010000;                                     
    localparam          FSM_TXEQ_DONE            = 6'b100000;
                                          
    localparam          FSM_RXEQ_IDLE            = 6'b000001; 
    localparam          FSM_RXEQ_PRESET          = 6'b000010;                                     
    localparam          FSM_RXEQ_TXCOEFF         = 6'b000100;
    localparam          FSM_RXEQ_LF              = 6'b001000;
    localparam          FSM_RXEQ_NEW_TXCOEFF_REQ = 6'b010000;                                  
    localparam          FSM_RXEQ_DONE            = 6'b100000;
                
    //---------- TXEQ Presets Look-up Table ----------------
    // TXPRECURSOR  = Coefficient range between  0 and 20 units 
    // TXMAINCURSOR = Coefficient range between 29 and 80 units
    // TXPOSTCURSOR = Coefficient range between  0 and 31 units
    //------------------------------------------------------
    // Actual    Full Swing    (FS) = 80
    // Actual    Low Frequency (LF) = 29
    // Advertise Full Swing    (FS) = 40
    // Advertise Low Frequency (LF) = 15
    //------------------------------------------------------
    // Pre-emphasis  = 20 log [80 - (2 * TXPRECURSOR)] / 80], assuming no de-emphasis
    // Main-emphasis = 80 - (TXPRECURSOR + TXPOSTCURSOR)
    // De-emphasis   = 20 log [80 - (2 *  TXPOSTCURSOR)] / 80], assuming no pre-emphasis
    //------------------------------------------------------    
    // Note:  TXMAINCURSOR calculated internally in GT
    //------------------------------------------------------                           
    localparam          TXPRECURSOR_00  = 6'd0;             //  0.0 dB
    localparam          TXMAINCURSOR_00 = 7'd60;                                
    localparam          TXPOSTCURSOR_00 = 6'd20;            // -6.0 +/- 1 dB
    
    localparam          TXPRECURSOR_01  = 6'd0;             //  0.0 dB
    localparam          TXMAINCURSOR_01 = 7'd68;            // added 1 to compensate decimal                                
    localparam          TXPOSTCURSOR_01 = 6'd13;            // -3.5 +/- 1 dB
    
    localparam          TXPRECURSOR_02  = 6'd0;             //  0.0 dB
    localparam          TXMAINCURSOR_02 = 7'd64;                                
    localparam          TXPOSTCURSOR_02 = 6'd16;            // -4.4 +/- 1.5 dB
    
    localparam          TXPRECURSOR_03  = 6'd0;             //  0.0 dB
    localparam          TXMAINCURSOR_03 = 7'd70;                                
    localparam          TXPOSTCURSOR_03 = 6'd10;            // -2.5 +/- 1 dB

    localparam          TXPRECURSOR_04  = 6'd0;             //  0.0 dB
    localparam          TXMAINCURSOR_04 = 7'd80;                                
    localparam          TXPOSTCURSOR_04 = 6'd0;             //  0.0 dB
    
    localparam          TXPRECURSOR_05  = 6'd8;             // -1.9 +/- 1 dB
    localparam          TXMAINCURSOR_05 = 7'd72;                                
    localparam          TXPOSTCURSOR_05 = 6'd0;             //  0.0 dB
    
    localparam          TXPRECURSOR_06  = 6'd10;            // -2.5 +/- 1 dB
    localparam          TXMAINCURSOR_06 = 7'd70;                                
    localparam          TXPOSTCURSOR_06 = 6'd0;             //  0.0 dB
    
    localparam          TXPRECURSOR_07  = 6'd8;             // -3.5 +/- 1 dB
    localparam          TXMAINCURSOR_07 = 7'd56;                                
    localparam          TXPOSTCURSOR_07 = 6'd16;            // -6.0 +/- 1 dB
        
    localparam          TXPRECURSOR_08  = 6'd10;            // -3.5 +/- 1 dB
    localparam          TXMAINCURSOR_08 = 7'd60;                                
    localparam          TXPOSTCURSOR_08 = 6'd10;            // -3.5 +/- 1 dB
    
    localparam          TXPRECURSOR_09  = 6'd13;            // -3.5 +/- 1 dB
    localparam          TXMAINCURSOR_09 = 7'd68;            //  added 1 to compensate decimal                  
    localparam          TXPOSTCURSOR_09 = 6'd0;             //  0.0 dB
    
    localparam          TXPRECURSOR_10  = 6'd0;             //  0.0 dB
    localparam          TXMAINCURSOR_10 = 7'd56;            //  added 1 to compensate decimal                     
    localparam          TXPOSTCURSOR_10 = 6'd25;            //  9.5 +/- 1 dB, updated for coefficient rules
    
    
    
//---------- Input FF ----------------------------------------------------------
always @ (posedge EQ_CLK)
begin

    if (!EQ_RST_N)
        begin   
        //---------- 1st Stage FF --------------------------  
        gen3_reg1              <=  1'd0;
                                  
        txeq_control_reg1      <=  2'd0;
        txeq_preset_reg1       <=  4'd0;
        txeq_deemph_reg1       <=  6'd1;
                                  
        rxeq_control_reg1      <=  2'd0;
        rxeq_preset_reg1       <=  3'd0;
        rxeq_lffs_reg1         <=  6'd0;
        rxeq_txpreset_reg1     <=  4'd0;
        rxeq_user_en_reg1      <=  1'd0;
        rxeq_user_txcoeff_reg1 <= 18'd0;
        rxeq_user_mode_reg1    <=  1'd0;
        //---------- 2nd Stage FF --------------------------
        gen3_reg2              <=  1'd0;
                                   
        txeq_control_reg2      <=  2'd0;
        txeq_preset_reg2       <=  4'd0;
        txeq_deemph_reg2       <=  6'd1;
                                   
        rxeq_control_reg2      <=  2'd0;
        rxeq_preset_reg2       <=  3'd0;
        rxeq_lffs_reg2         <=  6'd0;
        rxeq_txpreset_reg2     <=  4'd0;
        rxeq_user_en_reg2      <=  1'd0;
        rxeq_user_txcoeff_reg2 <= 18'd0;
        rxeq_user_mode_reg2    <=  1'd0;
        end
    else
        begin  
        //---------- 1st Stage FF -------------------------- 
        gen3_reg1              <= EQ_GEN3;
                               
        txeq_control_reg1      <= EQ_TXEQ_CONTROL;
        txeq_preset_reg1       <= EQ_TXEQ_PRESET;
        txeq_deemph_reg1       <= EQ_TXEQ_DEEMPH_IN;
                               
        rxeq_control_reg1      <= EQ_RXEQ_CONTROL;
        rxeq_preset_reg1       <= EQ_RXEQ_PRESET;
        rxeq_lffs_reg1         <= EQ_RXEQ_LFFS;
        rxeq_txpreset_reg1     <= EQ_RXEQ_TXPRESET;
        rxeq_user_en_reg1      <= EQ_RXEQ_USER_EN;
        rxeq_user_txcoeff_reg1 <= EQ_RXEQ_USER_TXCOEFF;
        rxeq_user_mode_reg1    <= EQ_RXEQ_USER_MODE;
        //---------- 2nd Stage FF -------------------------- 
        gen3_reg2              <= gen3_reg1;
                               
        txeq_control_reg2      <= txeq_control_reg1;
        txeq_preset_reg2       <= txeq_preset_reg1;
        txeq_deemph_reg2       <= txeq_deemph_reg1;
                               
        rxeq_control_reg2      <= rxeq_control_reg1;
        rxeq_preset_reg2       <= rxeq_preset_reg1;
        rxeq_lffs_reg2         <= rxeq_lffs_reg1;
        rxeq_txpreset_reg2     <= rxeq_txpreset_reg1;
        rxeq_user_en_reg2      <= rxeq_user_en_reg1;
        rxeq_user_txcoeff_reg2 <= rxeq_user_txcoeff_reg1;
        rxeq_user_mode_reg2    <= rxeq_user_mode_reg1;
        end
        
end       



//---------- TXEQ Preset -------------------------------------------------------
always @ (posedge EQ_CLK)
begin

    if (!EQ_RST_N)
        begin
        
        //---------- Select TXEQ Preset ----------------
        case (EQ_TXEQ_PRESET_DEFAULT)
        4'd0    : txeq_preset <= {TXPOSTCURSOR_00, TXMAINCURSOR_00, TXPRECURSOR_00};
        4'd1    : txeq_preset <= {TXPOSTCURSOR_01, TXMAINCURSOR_01, TXPRECURSOR_01};
        4'd2    : txeq_preset <= {TXPOSTCURSOR_02, TXMAINCURSOR_02, TXPRECURSOR_02};
        4'd3    : txeq_preset <= {TXPOSTCURSOR_03, TXMAINCURSOR_03, TXPRECURSOR_03};
        4'd4    : txeq_preset <= {TXPOSTCURSOR_04, TXMAINCURSOR_04, TXPRECURSOR_04};
        4'd5    : txeq_preset <= {TXPOSTCURSOR_05, TXMAINCURSOR_05, TXPRECURSOR_05};
        4'd6    : txeq_preset <= {TXPOSTCURSOR_06, TXMAINCURSOR_06, TXPRECURSOR_06};
        4'd7    : txeq_preset <= {TXPOSTCURSOR_07, TXMAINCURSOR_07, TXPRECURSOR_07};
        4'd8    : txeq_preset <= {TXPOSTCURSOR_08, TXMAINCURSOR_08, TXPRECURSOR_08};      
        4'd9    : txeq_preset <= {TXPOSTCURSOR_09, TXMAINCURSOR_09, TXPRECURSOR_09};   
        4'd10   : txeq_preset <= {TXPOSTCURSOR_10, TXMAINCURSOR_10, TXPRECURSOR_10};                 
        default : txeq_preset <= 19'd4;     
        endcase
        	   
        txeq_preset_done <=  1'd0;
        end                    
    else
        begin   
        if (fsm_tx == FSM_TXEQ_PRESET)
            begin
            
            //---------- Select TXEQ Preset ----------------
            case (txeq_preset_reg2)
            4'd0    : txeq_preset <= {TXPOSTCURSOR_00, TXMAINCURSOR_00, TXPRECURSOR_00};
            4'd1    : txeq_preset <= {TXPOSTCURSOR_01, TXMAINCURSOR_01, TXPRECURSOR_01};
            4'd2    : txeq_preset <= {TXPOSTCURSOR_02, TXMAINCURSOR_02, TXPRECURSOR_02};
            4'd3    : txeq_preset <= {TXPOSTCURSOR_03, TXMAINCURSOR_03, TXPRECURSOR_03};
            4'd4    : txeq_preset <= {TXPOSTCURSOR_04, TXMAINCURSOR_04, TXPRECURSOR_04};
            4'd5    : txeq_preset <= {TXPOSTCURSOR_05, TXMAINCURSOR_05, TXPRECURSOR_05};
            4'd6    : txeq_preset <= {TXPOSTCURSOR_06, TXMAINCURSOR_06, TXPRECURSOR_06};
            4'd7    : txeq_preset <= {TXPOSTCURSOR_07, TXMAINCURSOR_07, TXPRECURSOR_07};
            4'd8    : txeq_preset <= {TXPOSTCURSOR_08, TXMAINCURSOR_08, TXPRECURSOR_08};      
            4'd9    : txeq_preset <= {TXPOSTCURSOR_09, TXMAINCURSOR_09, TXPRECURSOR_09}; 
            4'd10   : txeq_preset <= {TXPOSTCURSOR_10, TXMAINCURSOR_10, TXPRECURSOR_10};                   
            default : txeq_preset <= 19'd4;     
        	   endcase
        
            txeq_preset_done <= 1'd1;
            end
        else
            begin
            txeq_preset      <= txeq_preset;
            txeq_preset_done <= 1'd0;
            end
        end
        
end     



//---------- TXEQ FSM ----------------------------------------------------------
always @ (posedge EQ_CLK)
begin

    if (!EQ_RST_N)
        begin
        fsm_tx           <=  FSM_TXEQ_IDLE; 
        txeq_txcoeff     <= 19'd0;
        txeq_txcoeff_cnt <=  2'd0;
        txeq_done        <=  1'd0;
        end                    
    else
        begin
        
        case (fsm_tx)
        
        //---------- Idle State ----------------------------
        FSM_TXEQ_IDLE :
        
            begin
            
            case (txeq_control_reg2)
            
            //---------- Idle ------------------------------
            2'd0    :
                begin
                fsm_tx           <= FSM_TXEQ_IDLE; 
                txeq_txcoeff     <= txeq_txcoeff;
                txeq_txcoeff_cnt <= 2'd0;
                txeq_done        <= 1'd0;
                end 
                
            //---------- Process TXEQ Preset ---------------
            2'd1    :
                begin
                fsm_tx           <= FSM_TXEQ_PRESET; 
                txeq_txcoeff     <= txeq_txcoeff;
                txeq_txcoeff_cnt <= 2'd0;
                txeq_done        <= 1'd0;
                end  
                
            //---------- Coefficient -----------------------
            2'd2    :
                begin
                fsm_tx           <= FSM_TXEQ_TXCOEFF; 
                txeq_txcoeff     <= {txeq_deemph_reg2, txeq_txcoeff[18:6]};
                txeq_txcoeff_cnt <= 2'd1;
                txeq_done        <= 1'd0;
                end
                
            //---------- Query -----------------------------
            2'd3    :
                begin
                fsm_tx           <= FSM_TXEQ_QUERY; 
                txeq_txcoeff     <= txeq_txcoeff;
                txeq_txcoeff_cnt <= 2'd0;
                txeq_done        <= 1'd0;
                end
                
            //---------- Default ---------------------------
            default :
                begin
                fsm_tx           <= FSM_TXEQ_IDLE; 
                txeq_txcoeff     <= txeq_txcoeff;
                txeq_txcoeff_cnt <= 2'd0;
                txeq_done        <= 1'd0;
                end
                
            endcase
            
            end
            
        //---------- Process TXEQ Preset -------------------
        FSM_TXEQ_PRESET :
        
            begin
            fsm_tx           <= (txeq_preset_done ? FSM_TXEQ_DONE : FSM_TXEQ_PRESET);
            txeq_txcoeff     <= txeq_preset;
            txeq_txcoeff_cnt <= 2'd0;
            txeq_done        <= 1'd0;
            end    
            
        //---------- Latch Link Partner TX Coefficient -----
        FSM_TXEQ_TXCOEFF :
        
            begin
            fsm_tx <= ((txeq_txcoeff_cnt == 2'd2) ? FSM_TXEQ_REMAP : FSM_TXEQ_TXCOEFF);
            
            //---------- Shift in extra bit for TXMAINCURSOR 
            if (txeq_txcoeff_cnt == 2'd1)
                txeq_txcoeff <= {1'd0, txeq_deemph_reg2, txeq_txcoeff[18:7]};
            else
                txeq_txcoeff <= {txeq_deemph_reg2, txeq_txcoeff[18:6]};
                
            txeq_txcoeff_cnt <= txeq_txcoeff_cnt + 2'd1;
            txeq_done        <= 1'd0; 
            end
            
        //---------- Remap to GT TX Coefficient ------------
        FSM_TXEQ_REMAP :
        
            begin
            fsm_tx           <= FSM_TXEQ_DONE;
            txeq_txcoeff     <= txeq_txcoeff << 1;          // Multiply by 2x
            txeq_txcoeff_cnt <= 2'd0;
            txeq_done        <= 1'd0; 
            end
            
        //---------- Query TXEQ Coefficient ----------------
        FSM_TXEQ_QUERY:
        
            begin
            fsm_tx           <= FSM_TXEQ_DONE;
            txeq_txcoeff     <= txeq_txcoeff; 
            txeq_txcoeff_cnt <= 2'd0;
            txeq_done        <= 1'd0;
            end     
                  
        //---------- Done ----------------------------------
        FSM_TXEQ_DONE :
        
            begin
            fsm_tx           <= ((txeq_control_reg2 == 2'd0) ? FSM_TXEQ_IDLE : FSM_TXEQ_DONE);
            txeq_txcoeff     <= txeq_txcoeff;          
            txeq_txcoeff_cnt <= 2'd0;
            txeq_done        <= 1'd1;
            end        
                          
        //---------- Default State -------------------------
        default : 
            begin
            fsm_tx           <=  FSM_TXEQ_IDLE;
            txeq_txcoeff     <= 19'd0;
            txeq_txcoeff_cnt <=  2'd0;
            txeq_done        <=  1'd0;
            end    
                    
        endcase
        
        end
        
end  



//---------- RXEQ FSM ----------------------------------------------------------
always @ (posedge EQ_CLK)
begin

    if (!EQ_RST_N)
        begin
        fsm_rx               <= FSM_RXEQ_IDLE; 
        rxeq_preset          <=  3'd0;
        rxeq_preset_valid    <=  1'd0;
        rxeq_txpreset        <=  4'd0;
        rxeq_txcoeff         <= 18'd0; 
        rxeq_cnt             <=  3'd0;
        rxeq_fs              <=  6'd0;
        rxeq_lf              <=  6'd0;
        rxeq_new_txcoeff_req <=  1'd0; 
        rxeq_new_txcoeff     <= 18'd0;
        rxeq_lffs_sel        <=  1'd0;
        rxeq_adapt_done_reg  <=  1'd0;
        rxeq_adapt_done      <=  1'd0;   
        rxeq_done            <=  1'd0; 
        end                    
    else
        begin
        
        case (fsm_rx)
        
        //---------- Idle State ----------------------------
        FSM_RXEQ_IDLE :
        
            begin
            
            case (rxeq_control_reg2)
                
            //---------- Process RXEQ Preset ---------------
            2'd1 :
                begin
                fsm_rx               <= FSM_RXEQ_PRESET; 
                rxeq_preset          <= rxeq_preset_reg2;
                rxeq_preset_valid    <= 1'd0;
                rxeq_txpreset        <= rxeq_txpreset;
                rxeq_txcoeff         <= rxeq_txcoeff;
                rxeq_cnt             <= 3'd0;
                rxeq_fs              <= rxeq_fs;
                rxeq_lf              <= rxeq_lf;
                rxeq_new_txcoeff_req <= 1'd0;
                rxeq_new_txcoeff     <= rxeq_new_txcoeff;
                rxeq_lffs_sel        <= 1'd0;
                rxeq_adapt_done_reg  <= 1'd0;
                rxeq_adapt_done      <= 1'd0;
                rxeq_done            <= 1'd0; 
                end  
                
            //---------- Request New TX Coefficient --------
            2'd2 :
                begin
                fsm_rx               <= FSM_RXEQ_TXCOEFF; 
                rxeq_preset          <= rxeq_preset;
                rxeq_preset_valid    <= 1'd0;
                rxeq_txpreset        <= rxeq_txpreset_reg2;
                rxeq_txcoeff         <= {txeq_deemph_reg2, rxeq_txcoeff[17:6]};
                rxeq_cnt             <= 3'd1;
                rxeq_fs              <= rxeq_lffs_reg2;
                rxeq_lf              <= rxeq_lf;
                rxeq_new_txcoeff_req <= 1'd0;
                rxeq_new_txcoeff     <= rxeq_new_txcoeff;
                rxeq_lffs_sel        <= 1'd0;
                rxeq_adapt_done_reg  <= rxeq_adapt_done_reg;
                rxeq_adapt_done      <= 1'd0;
                rxeq_done            <= 1'd0; 
                end
                
            //---------- Phase2/3 Bypass (reuse logic from rxeq_control = 2 ----
            2'd3 :
                begin
                fsm_rx               <= FSM_RXEQ_TXCOEFF; 
                rxeq_preset          <= rxeq_preset;
                rxeq_preset_valid    <= 1'd0;
                rxeq_txpreset        <= rxeq_txpreset_reg2;
                rxeq_txcoeff         <= {txeq_deemph_reg2, rxeq_txcoeff[17:6]};
                rxeq_cnt             <= 3'd1;
                rxeq_fs              <= rxeq_lffs_reg2;
                rxeq_lf              <= rxeq_lf;
                rxeq_new_txcoeff_req <= 1'd0;
                rxeq_new_txcoeff     <= rxeq_new_txcoeff;
                rxeq_lffs_sel        <= 1'd0;
                rxeq_adapt_done_reg  <= rxeq_adapt_done_reg;
                rxeq_adapt_done      <= 1'd0;
                rxeq_done            <= 1'd0; 
                end
                
            //---------- Default ---------------------------
            default :
                begin
                fsm_rx               <= FSM_RXEQ_IDLE; 
                rxeq_preset          <= rxeq_preset;
                rxeq_preset_valid    <= 1'd0;
                rxeq_txpreset        <= rxeq_txpreset;
                rxeq_txcoeff         <= rxeq_txcoeff;
                rxeq_cnt             <= 3'd0;
                rxeq_fs              <= rxeq_fs;
                rxeq_lf              <= rxeq_lf;
                rxeq_new_txcoeff_req <= 1'd0;
                rxeq_new_txcoeff     <= rxeq_new_txcoeff;
                rxeq_lffs_sel        <= 1'd0;
                rxeq_adapt_done_reg  <= rxeq_adapt_done_reg;
                rxeq_adapt_done      <= 1'd0;
                rxeq_done            <= 1'd0; 
                end
                
            endcase
            
            end
            
        //---------- Process RXEQ Preset -------------------
        FSM_RXEQ_PRESET :
        
            begin
            fsm_rx               <= (rxeqscan_preset_done ? FSM_RXEQ_DONE : FSM_RXEQ_PRESET);
            rxeq_preset          <= rxeq_preset_reg2;
            rxeq_preset_valid    <= 1'd1; 
            rxeq_txpreset        <= rxeq_txpreset;
            rxeq_txcoeff         <= rxeq_txcoeff; 
            rxeq_cnt             <= 3'd0;
            rxeq_fs              <= rxeq_fs;
            rxeq_lf              <= rxeq_lf;
            rxeq_new_txcoeff_req <= 1'd0;
            rxeq_new_txcoeff     <= rxeq_new_txcoeff;
            rxeq_lffs_sel        <= 1'd0;
            rxeq_adapt_done_reg  <= rxeq_adapt_done_reg;
            rxeq_adapt_done      <= 1'd0;
            rxeq_done            <= 1'd0; 
            end    
            
        //---------- Shift-in Link Partner TX Coefficient and Preset 
        FSM_RXEQ_TXCOEFF :
        
            begin
            fsm_rx               <= ((rxeq_cnt == 3'd2) ? FSM_RXEQ_LF : FSM_RXEQ_TXCOEFF);
            rxeq_preset          <= rxeq_preset;
            rxeq_preset_valid    <= 1'd0; 
            rxeq_txpreset        <= rxeq_txpreset_reg2;
            rxeq_txcoeff         <= {txeq_deemph_reg2, rxeq_txcoeff[17:6]}; 
            rxeq_cnt             <= rxeq_cnt + 2'd1;
            rxeq_fs              <= rxeq_fs;
            rxeq_lf              <= rxeq_lf;
            rxeq_new_txcoeff_req <= 1'd0;
            rxeq_new_txcoeff     <= rxeq_new_txcoeff;
            rxeq_lffs_sel        <= 1'd1;
            rxeq_adapt_done_reg  <= rxeq_adapt_done_reg;
            rxeq_adapt_done      <= 1'd0;
            rxeq_done            <= 1'd0; 
            end
            
        //---------- Read Low Frequency (LF) Value ---------
        FSM_RXEQ_LF :
            begin
            fsm_rx               <= ((rxeq_cnt == 3'd7) ? FSM_RXEQ_NEW_TXCOEFF_REQ : FSM_RXEQ_LF);
            rxeq_preset          <= rxeq_preset;
            rxeq_preset_valid    <= 1'd0; 
            rxeq_txpreset        <= rxeq_txpreset;
            rxeq_txcoeff         <= rxeq_txcoeff; 
            rxeq_cnt             <= rxeq_cnt + 2'd1;
            rxeq_fs              <= rxeq_fs;
            rxeq_lf              <= ((rxeq_cnt == 3'd7) ? rxeq_lffs_reg2 : rxeq_lf);
            rxeq_new_txcoeff_req <= 1'd0;
            rxeq_new_txcoeff     <= rxeq_new_txcoeff;
            rxeq_lffs_sel        <= 1'd1;
            rxeq_adapt_done_reg  <= rxeq_adapt_done_reg;
            rxeq_adapt_done      <= 1'd0;
            rxeq_done            <= 1'd0; 
            end
            
        //---------- Request New TX Coefficient ------------
        FSM_RXEQ_NEW_TXCOEFF_REQ :
        
            begin            
            rxeq_preset          <= rxeq_preset;
            rxeq_preset_valid    <= 1'd0; 
            rxeq_txpreset        <= rxeq_txpreset;
            rxeq_txcoeff         <= rxeq_txcoeff; 
            rxeq_cnt             <= 3'd0;
            rxeq_fs              <= rxeq_fs;
            rxeq_lf              <= rxeq_lf;
            
            if (rxeqscan_new_txcoeff_done)
                begin
                fsm_rx               <= FSM_RXEQ_DONE;
                rxeq_new_txcoeff_req <= 1'd0;
                rxeq_new_txcoeff     <= rxeqscan_lffs_sel ? {14'd0, rxeqscan_new_txcoeff[3:0]} : rxeqscan_new_txcoeff;
                rxeq_lffs_sel        <= rxeqscan_lffs_sel;
                rxeq_adapt_done_reg  <= rxeqscan_adapt_done || rxeq_adapt_done_reg;
                rxeq_adapt_done      <= rxeqscan_adapt_done || rxeq_adapt_done_reg;
                rxeq_done            <= 1'd1; 
                end
            else
                begin
                fsm_rx               <= FSM_RXEQ_NEW_TXCOEFF_REQ;
                rxeq_new_txcoeff_req <= 1'd1;
                rxeq_new_txcoeff     <= rxeq_new_txcoeff;
                rxeq_lffs_sel        <= 1'd0;
                rxeq_adapt_done_reg  <= rxeq_adapt_done_reg;
                rxeq_adapt_done      <= 1'd0;
                rxeq_done            <= 1'd0; 
                end
            
            end     
             
        //---------- RXEQ Done -----------------------------
        FSM_RXEQ_DONE :
        
            begin
            fsm_rx               <= ((rxeq_control_reg2 == 2'd0) ? FSM_RXEQ_IDLE : FSM_RXEQ_DONE);
            rxeq_preset          <= rxeq_preset;
            rxeq_preset_valid    <= 1'd0;
            rxeq_txpreset        <= rxeq_txpreset; 
            rxeq_txcoeff         <= rxeq_txcoeff;
            rxeq_cnt             <= 3'd0;
            rxeq_fs              <= rxeq_fs;
            rxeq_lf              <= rxeq_lf;
            rxeq_new_txcoeff_req <= 1'd0;
            rxeq_new_txcoeff     <= rxeq_new_txcoeff;
            rxeq_lffs_sel        <= rxeq_lffs_sel;
            rxeq_adapt_done_reg  <= rxeq_adapt_done_reg;
            rxeq_adapt_done      <= rxeq_adapt_done;  
            rxeq_done            <= 1'd1; 
            end        
                          
        //---------- Default State -------------------------
        default : 
            begin
            fsm_rx               <= FSM_RXEQ_IDLE;
            rxeq_preset          <=  3'd0;
            rxeq_preset_valid    <=  1'd0;
            rxeq_txpreset        <=  4'd0;
            rxeq_txcoeff         <= 18'd0;
            rxeq_cnt             <=  3'd0;
            rxeq_fs              <=  6'd0;
            rxeq_lf              <=  6'd0;
            rxeq_new_txcoeff_req <=  1'd0;
            rxeq_new_txcoeff     <= 18'd0;
            rxeq_lffs_sel        <=  1'd0;
            rxeq_adapt_done_reg  <=  1'd0;
            rxeq_adapt_done      <=  1'd0;
            rxeq_done            <=  1'd0;   
            end    
                    
    	   endcase
        
        end
        
end      



//---------- RXEQ Eye Scan Module ----------------------------------------------
rp_rxeq_scan #
(
    .PCIE_SIM_MODE                      (PCIE_SIM_MODE),
    .PCIE_GT_DEVICE                     (PCIE_GT_DEVICE),
    .PCIE_RXEQ_MODE_GEN3                (PCIE_RXEQ_MODE_GEN3)
)

rxeq_scan_i
(

    //---------- Input -------------------------------------
    .RXEQSCAN_CLK                       (EQ_CLK),
    .RXEQSCAN_RST_N                     (EQ_RST_N),
    .RXEQSCAN_CONTROL                   (rxeq_control_reg2),
    .RXEQSCAN_FS                        (rxeq_fs),      
    .RXEQSCAN_LF                        (rxeq_lf), 
    .RXEQSCAN_PRESET                    (rxeq_preset),
    .RXEQSCAN_PRESET_VALID              (rxeq_preset_valid),   
    .RXEQSCAN_TXPRESET                  (rxeq_txpreset),
    .RXEQSCAN_TXCOEFF                   (rxeq_txcoeff),    
    .RXEQSCAN_NEW_TXCOEFF_REQ           (rxeq_new_txcoeff_req),                
    
    //---------- Output ------------------------------------
    .RXEQSCAN_PRESET_DONE               (rxeqscan_preset_done),
    .RXEQSCAN_NEW_TXCOEFF               (rxeqscan_new_txcoeff),
    .RXEQSCAN_NEW_TXCOEFF_DONE          (rxeqscan_new_txcoeff_done),
    .RXEQSCAN_LFFS_SEL                  (rxeqscan_lffs_sel),
    .RXEQSCAN_ADAPT_DONE                (rxeqscan_adapt_done)
    
); 



//---------- PIPE EQ Output ----------------------------------------------------
assign EQ_TXEQ_DEEMPH      = txeq_txcoeff[0];       
assign EQ_TXEQ_PRECURSOR   = gen3_reg2 ? txeq_txcoeff[ 4: 0] : 5'h00;
assign EQ_TXEQ_MAINCURSOR  = gen3_reg2 ? txeq_txcoeff[12: 6] : 7'h00; 
assign EQ_TXEQ_POSTCURSOR  = gen3_reg2 ? txeq_txcoeff[17:13] : 5'h00;
assign EQ_TXEQ_DEEMPH_OUT  = {1'd0, txeq_txcoeff[18:14], txeq_txcoeff[12:7], 1'd0, txeq_txcoeff[5:1]}; // Divide by 2x
assign EQ_TXEQ_DONE        = txeq_done;
assign EQ_TXEQ_FSM         = fsm_tx;

assign EQ_RXEQ_NEW_TXCOEFF = rxeq_user_en_reg2 ? rxeq_user_txcoeff_reg2 : rxeq_new_txcoeff;
assign EQ_RXEQ_LFFS_SEL    = rxeq_user_en_reg2 ? rxeq_user_mode_reg2    : rxeq_lffs_sel;
assign EQ_RXEQ_ADAPT_DONE  = rxeq_adapt_done;
assign EQ_RXEQ_DONE        = rxeq_done;
assign EQ_RXEQ_FSM         = fsm_rx;



endmodule
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pipe_rate.v
// Version    : 4.0
//----------------------------------------------------------------------------//
//  Filename     :  rp_pipe_rate.v
//  Description  :  PIPE Rate Module for 7 Series Transceiver
//  Version      :  20.1
//------------------------------------------------------------------------------



`timescale 1ns / 1ps



//---------- PIPE Rate Module --------------------------------------------------
module rp_pipe_rate #
(

    parameter PCIE_SIM_SPEEDUP  = "FALSE",                  // PCIe sim speedup
    parameter PCIE_GT_DEVICE    = "GTX",                    // PCIe GT device
    parameter PCIE_USE_MODE     = "3.0",                    // PCIe use mode
    parameter PCIE_PLL_SEL      = "CPLL",                   // PCIe PLL select for Gen1/Gen2 only
    parameter PCIE_POWER_SAVING = "TRUE",                   // PCIe power saving
    parameter PCIE_ASYNC_EN     = "FALSE",                  // PCIe async enable
    parameter PCIE_TXBUF_EN     = "FALSE",                  // PCIe TX buffer enable for Gen1/Gen2 only
    parameter PCIE_RXBUF_EN     = "TRUE",                   // PCIe RX buffer enable for Gen3      only
    parameter TXDATA_WAIT_MAX   = 4'd15                     // TXDATA wait max

)

(

    //---------- Input -------------------------------------
    input               RATE_CLK,
    input               RATE_RST_N,
    input               RATE_RST_IDLE,
    input               RATE_ACTIVE_LANE,
    input       [ 1:0]  RATE_RATE_IN,
    input               RATE_CPLLLOCK,
    input               RATE_QPLLLOCK,
    input               RATE_MMCM_LOCK,
    input               RATE_DRP_DONE,
    input               RATE_RXPMARESETDONE,
    input               RATE_TXRESETDONE,
    input               RATE_RXRESETDONE,
    input               RATE_TXRATEDONE,
    input               RATE_RXRATEDONE,
    input               RATE_PHYSTATUS,
    input               RATE_RESETOVRD_DONE,
    input               RATE_TXSYNC_DONE,
    input               RATE_RXSYNC_DONE,
    
    //---------- Output ------------------------------------
    output              RATE_CPLLPD,
    output              RATE_QPLLPD,
    output              RATE_CPLLRESET,
    output              RATE_QPLLRESET,
    output              RATE_TXPMARESET,
    output              RATE_RXPMARESET,
    output              RATE_DRP_START,
    output      [ 1:0]  RATE_SYSCLKSEL,
    output              RATE_PCLK_SEL,
    output              RATE_GEN3,
    output              RATE_DRP_X16X20_MODE,
    output              RATE_DRP_X16,
    output      [ 2:0]  RATE_RATE_OUT,
    output              RATE_RESETOVRD_START,
    output              RATE_TXSYNC_START,
    output              RATE_DONE,
    output              RATE_RXSYNC_START,
    output              RATE_RXSYNC,
    output              RATE_IDLE,
    output      [4:0]   RATE_FSM

);

    //---------- Input FF or Buffer ------------------------
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rst_idle_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 1:0]  rate_in_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 cplllock_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 qplllock_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 mmcm_lock_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 drp_done_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxpmaresetdone_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txresetdone_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxresetdone_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txratedone_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxratedone_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 phystatus_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 resetovrd_done_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txsync_done_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxsync_done_reg1;
    
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rst_idle_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 1:0]  rate_in_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 cplllock_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 qplllock_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 mmcm_lock_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 drp_done_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxpmaresetdone_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txresetdone_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxresetdone_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txratedone_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxratedone_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 phystatus_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 resetovrd_done_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txsync_done_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxsync_done_reg2;
    
    //---------- Internal Signals --------------------------
    wire                pll_lock;
    wire        [ 2:0]  rate;
    reg         [ 3:0]  txdata_wait_cnt = 4'd0;
    reg                 txratedone      = 1'd0;
    reg                 rxratedone      = 1'd0;
    reg                 phystatus       = 1'd0;
    reg                 ratedone        = 1'd0;
    reg                 gen3_exit       = 1'd0;
    
    //---------- Output FF or Buffer -----------------------
    reg                 cpllpd     =  1'd0;
    reg                 qpllpd     =  1'd0;
    reg                 cpllreset  =  1'd0;
    reg                 qpllreset  =  1'd0;
    reg                 txpmareset =  1'd0;
    reg                 rxpmareset =  1'd0;
    reg         [ 1:0]  sysclksel  = (PCIE_PLL_SEL == "QPLL") ? 2'd1 : 2'd0;  
    reg                 gen3       =  1'd0;
    reg                 pclk_sel   =  1'd0; 
    reg         [ 2:0]  rate_out   =  3'd0; 
    reg                 drp_start       = 1'd0;
    reg                 drp_x16x20_mode = 1'd0;
    reg                 drp_x16         = 1'd0;
    reg         [4:0]  fsm              = 0;
   
    //---------- FSM ---------------------------------------                                         
    localparam          FSM_IDLE               = 0;
    localparam          FSM_PLL_PU             = 1; // Gen 3 only
    localparam          FSM_PLL_PURESET        = 2; // Gen 3 only
    localparam          FSM_PLL_LOCK           = 3; // Gen 3 or reset only
    localparam          FSM_DRP_X16_GEN3_START = 4;
    localparam          FSM_DRP_X16_GEN3_DONE  = 5;
    localparam          FSM_PMARESET_HOLD      = 6; // Gen 3 or reset only
    localparam          FSM_PLL_SEL            = 7; // Gen 3 or reset only
    localparam          FSM_MMCM_LOCK          = 8; // Gen 3 or reset only
    localparam          FSM_DRP_START          = 9; // Gen 3 or reset only
    localparam          FSM_DRP_DONE           = 10; // Gen 3 or reset only
    localparam          FSM_PMARESET_RELEASE   = 11; // Gen 3 only
    localparam          FSM_PMARESET_DONE      = 12; // Gen 3 only
    localparam          FSM_TXDATA_WAIT        = 13;
    localparam          FSM_PCLK_SEL           = 14;
    localparam          FSM_DRP_X16_START      = 15;
    localparam          FSM_DRP_X16_DONE       = 16;
    localparam          FSM_RATE_SEL           = 17;
    localparam          FSM_RXPMARESETDONE     = 18;
    localparam          FSM_DRP_X20_START      = 19;
    localparam          FSM_DRP_X20_DONE       = 20;
    localparam          FSM_RATE_DONE          = 21;
    localparam          FSM_RESETOVRD_START    = 22; // PCIe use mode 1.0 only
    localparam          FSM_RESETOVRD_DONE     = 23; // PCIe use mode 1.0 only
    localparam          FSM_PLL_PDRESET        = 24;
    localparam          FSM_PLL_PD             = 25;
    localparam          FSM_TXSYNC_START       = 26;
    localparam          FSM_TXSYNC_DONE        = 27;
    localparam          FSM_DONE               = 28; // Must sync value to pipe_user.v
    localparam          FSM_RXSYNC_START       = 29; // Gen 3 only
    localparam          FSM_RXSYNC_DONE        = 30; // Gen 3 only
    
    
    
//---------- Input FF ----------------------------------------------------------
always @ (posedge RATE_CLK)
begin

    if (!RATE_RST_N)
        begin    
        //---------- 1st Stage FF -------------------------- 
        rst_idle_reg1       <= 1'd0;   
        rate_in_reg1        <= 2'd0;
        cplllock_reg1       <= 1'd0;
        qplllock_reg1       <= 1'd0;
        mmcm_lock_reg1      <= 1'd0;
        drp_done_reg1       <= 1'd0;
        rxpmaresetdone_reg1 <= 1'd0;
        txresetdone_reg1    <= 1'd0;
        rxresetdone_reg1    <= 1'd0;
        txratedone_reg1     <= 1'd0;
        rxratedone_reg1     <= 1'd0;
        phystatus_reg1      <= 1'd0;
        resetovrd_done_reg1 <= 1'd0; 
        txsync_done_reg1    <= 1'd0;
        rxsync_done_reg1    <= 1'd0;
        //---------- 2nd Stage FF --------------------------
        rst_idle_reg2       <= 1'd0;
        rate_in_reg2        <= 2'd0;
        cplllock_reg2       <= 1'd0;
        qplllock_reg2       <= 1'd0;
        mmcm_lock_reg2      <= 1'd0;
        drp_done_reg2       <= 1'd0;
        rxpmaresetdone_reg2 <= 1'd0;
        txresetdone_reg2    <= 1'd0;
        rxresetdone_reg2    <= 1'd0;
        txratedone_reg2     <= 1'd0;
        rxratedone_reg2     <= 1'd0;
        phystatus_reg2      <= 1'd0;
        resetovrd_done_reg2 <= 1'd0;
        txsync_done_reg2    <= 1'd0;
        rxsync_done_reg2    <= 1'd0;
        end
    else
        begin  
        //---------- 1st Stage FF --------------------------
        rst_idle_reg1       <= RATE_RST_IDLE;
        rate_in_reg1        <= RATE_RATE_IN;
        cplllock_reg1       <= RATE_CPLLLOCK;
        qplllock_reg1       <= RATE_QPLLLOCK;
        mmcm_lock_reg1      <= RATE_MMCM_LOCK;
        drp_done_reg1       <= RATE_DRP_DONE;
        rxpmaresetdone_reg1 <= RATE_RXPMARESETDONE;
        txresetdone_reg1    <= RATE_TXRESETDONE;
        rxresetdone_reg1    <= RATE_RXRESETDONE;
        txratedone_reg1     <= RATE_TXRATEDONE;
        rxratedone_reg1     <= RATE_RXRATEDONE;
        phystatus_reg1      <= RATE_PHYSTATUS;
        resetovrd_done_reg1 <= RATE_RESETOVRD_DONE;
        txsync_done_reg1    <= RATE_TXSYNC_DONE;
        rxsync_done_reg1    <= RATE_RXSYNC_DONE;
        //---------- 2nd Stage FF --------------------------
        rst_idle_reg2       <= rst_idle_reg1;
        rate_in_reg2        <= rate_in_reg1;
        cplllock_reg2       <= cplllock_reg1;
        qplllock_reg2       <= qplllock_reg1;
        mmcm_lock_reg2      <= mmcm_lock_reg1;
        drp_done_reg2       <= drp_done_reg1;
        rxpmaresetdone_reg2 <= rxpmaresetdone_reg1;
        txresetdone_reg2    <= txresetdone_reg1;
        rxresetdone_reg2    <= rxresetdone_reg1;
        txratedone_reg2     <= txratedone_reg1;
        rxratedone_reg2     <= rxratedone_reg1;
        phystatus_reg2      <= phystatus_reg1;
        resetovrd_done_reg2 <= resetovrd_done_reg1;
        txsync_done_reg2    <= txsync_done_reg1;   
        rxsync_done_reg2    <= rxsync_done_reg1; 
        end
        
end    



//---------- Select CPLL or QPLL Lock ------------------------------------------
//  Gen1 : Wait for QPLL lock if QPLL is used for Gen1/Gen2, else wait for CPLL lock 
//  Gen2 : Wait for QPLL lock if QPLL is used for Gen1/Gen2, else wait for CPLL lock
//  Gen3 : Wait for QPLL lock
//------------------------------------------------------------------------------
assign pll_lock = (rate_in_reg2 == 2'd2) || (PCIE_PLL_SEL == "QPLL") ? qplllock_reg2 : cplllock_reg2;



//---------- Select Rate -------------------------------------------------------
//  Gen1 : Div 4 using [TX/RX]OUT_DIV = 4 if QPLL is used for Gen1/Gen2, else div 2 using [TX/RX]OUT_DIV = 2
//  Gen2 : Div 2 using [TX/RX]RATE = 3'd2 if QPLL is used for Gen1/Gen2, else div 1 using [TX/RX]RATE = 3'd1
//  Gen3 : Div 1 using [TX/RX]OUT_DIV = 1
//------------------------------------------------------------------------------
assign rate = (rate_in_reg2 == 2'd1) && (PCIE_PLL_SEL == "QPLL") ? 3'd2 : 
              (rate_in_reg2 == 2'd1) && (PCIE_PLL_SEL == "CPLL") ? 3'd1 : 3'd0;



//---------- TXDATA Wait Counter -----------------------------------------------
always @ (posedge RATE_CLK)
begin

    if (!RATE_RST_N)
        txdata_wait_cnt <= 4'd0;
    else
    
        //---------- Increment Wait Counter ----------------
        if ((fsm == FSM_TXDATA_WAIT) && (txdata_wait_cnt < TXDATA_WAIT_MAX))
            txdata_wait_cnt <= txdata_wait_cnt + 4'd1;
            
        //---------- Hold Wait Counter ---------------------
        else if ((fsm == FSM_TXDATA_WAIT) && (txdata_wait_cnt == TXDATA_WAIT_MAX))
            txdata_wait_cnt <= txdata_wait_cnt;
            
        //---------- Reset Wait Counter --------------------
        else
            txdata_wait_cnt <= 4'd0;
        
end 



//---------- Latch TXRATEDONE, RXRATEDONE, and PHYSTATUS -----------------------
always @ (posedge RATE_CLK)
begin

    if (!RATE_RST_N)
        begin   
        txratedone <= 1'd0;
        rxratedone <= 1'd0; 
        phystatus  <= 1'd0;
        ratedone   <= 1'd0;
        end
    else
        begin  

        if (fsm == FSM_RATE_DONE)
        
            begin
            
            //---------- Latch TXRATEDONE ------------------
            if (txratedone_reg2)
                txratedone <= 1'd1; 
            else
                txratedone <= txratedone;
 
            //---------- Latch RXRATEDONE ------------------
            if (rxratedone_reg2)
                rxratedone <= 1'd1; 
            else
                rxratedone <= rxratedone;
  
            //---------- Latch PHYSTATUS -------------------
            if (phystatus_reg2)
                phystatus <= 1'd1; 
            else
                phystatus <= phystatus;
  
            //---------- Latch Rate Done -------------------
            if (rxratedone && txratedone && phystatus)
                ratedone <= 1'd1; 
            else
                ratedone <= ratedone;
  
            end
  
        else 
        
            begin
            txratedone <= 1'd0;
            rxratedone <= 1'd0;
            phystatus  <= 1'd0;
            ratedone   <= 1'd0;
            end
        
        end
        
end    



//---------- PIPE Rate FSM -----------------------------------------------------
always @ (posedge RATE_CLK)
begin

    if (!RATE_RST_N)
        begin
        fsm        <= FSM_PLL_LOCK;
        gen3_exit  <= 1'd0;
        cpllpd     <= 1'd0;
        qpllpd     <= 1'd0;
        cpllreset  <= 1'd0;
        qpllreset  <= 1'd0;
        txpmareset <= 1'd0;
        rxpmareset <= 1'd0;
        sysclksel  <= (PCIE_PLL_SEL == "QPLL") ? 2'd1 : 2'd0;                               
        pclk_sel   <= 1'd0; 
        gen3       <= 1'd0;
        rate_out   <= 3'd0;  
        drp_start       <= 1'd0;
        drp_x16x20_mode <= 1'd0;  
        drp_x16         <= 1'd0;                          
        end
    else
        begin
        
        case (fsm)
            
        //---------- Idle State ----------------------------
        FSM_IDLE :
        
            begin
            //---------- Detect Rate Change ----------------
            if (rate_in_reg2 != rate_in_reg1)
                begin
                fsm        <= ((rate_in_reg2 == 2'd2) || (rate_in_reg1 == 2'd2)) ? FSM_PLL_PU : FSM_TXDATA_WAIT;
                gen3_exit  <= (rate_in_reg2 == 2'd2); 
                cpllpd     <= cpllpd;
                qpllpd     <= qpllpd;
                cpllreset  <= cpllreset;
                qpllreset  <= qpllreset;
                txpmareset <= txpmareset;
                rxpmareset <= rxpmareset;
                sysclksel  <= sysclksel;
                pclk_sel   <= pclk_sel;
                gen3       <= gen3;
                rate_out   <= rate_out;
                drp_start       <= 1'd0;
                drp_x16x20_mode <= 1'd0;
                drp_x16         <= 1'd0;    
                end
            else
                begin
                fsm        <= FSM_IDLE;
                gen3_exit  <= gen3_exit;
                cpllpd     <= cpllpd;
                qpllpd     <= qpllpd;
                cpllreset  <= cpllreset;
                qpllreset  <= qpllreset;
                txpmareset <= txpmareset;
                rxpmareset <= rxpmareset;
                sysclksel  <= sysclksel;
                pclk_sel   <= pclk_sel;
                gen3       <= gen3;
                rate_out   <= rate_out;
                drp_start       <= 1'd0;
                drp_x16x20_mode <= 1'd0;
                drp_x16         <= 1'd0;    
                end
            end 
            
        //---------- Power-up PLL --------------------------
        FSM_PLL_PU :
        
            begin
            fsm        <= FSM_PLL_PURESET;
            gen3_exit  <= gen3_exit;
            cpllpd     <= (PCIE_PLL_SEL == "QPLL");
            qpllpd     <= 1'd0;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;    
            end  
            
        //---------- Release PLL Resets --------------------
        FSM_PLL_PURESET :
        
            begin
            fsm        <= FSM_PLL_LOCK;
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= (PCIE_PLL_SEL == "QPLL");
            qpllreset  <= 1'd0;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;    
            end 

        //---------- Wait for PLL Lock ---------------------
        FSM_PLL_LOCK :
        
            begin
            fsm        <= (pll_lock ? ((!rst_idle_reg2 || (rate_in_reg2 == 2'd1)) ? FSM_PMARESET_HOLD : FSM_DRP_X16_GEN3_START) : FSM_PLL_LOCK);  
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;    
            end

        //---------- Start DRP x16 -------------------------
        FSM_DRP_X16_GEN3_START :
            
            begin
            fsm        <= (!drp_done_reg2) ? FSM_DRP_X16_GEN3_DONE : FSM_DRP_X16_GEN3_START;
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd1;
            drp_x16x20_mode <= 1'd1;
            drp_x16         <= 1'd1;    
            end
            
        //---------- Wait for DRP x16 Done -----------------    
        FSM_DRP_X16_GEN3_DONE :
        
            begin  
            fsm        <= drp_done_reg2 ? FSM_PMARESET_HOLD : FSM_DRP_X16_GEN3_DONE;
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd1;
            drp_x16         <= 1'd1;    
            end  

        //---------- Hold both PMA in Reset ----------------
        //  Gen1 : Release PMA Reset
        //  Gen2 : Release PMA Reset
        //  Gen3 : Hold PMA Reset
        //--------------------------------------------------
        FSM_PMARESET_HOLD :
        
            begin
            fsm        <= FSM_PLL_SEL;
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= ((rate_in_reg2 == 2'd2) || gen3_exit);
            rxpmareset <= ((rate_in_reg2 == 2'd2) || gen3_exit);
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;    
            end

        //---------- Select PLL ----------------------------
        //  Gen1 : QPLL if PCIE_PLL_SEL = QPLL, else CPLL
        //  Gen2 : QPLL if PCIE_PLL_SEL = QPLL, else CPLL
        //  Gen3 : QPLL
        //--------------------------------------------------
        FSM_PLL_SEL :
        
            begin
            fsm        <= FSM_MMCM_LOCK;    
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= ((rate_in_reg2 == 2'd2) || (PCIE_PLL_SEL == "QPLL")) ? 2'd1 : 2'd0;                          
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;    
            end

        //---------- Check for MMCM Lock -------------------
        FSM_MMCM_LOCK :
        
            begin
            fsm        <= (mmcm_lock_reg2 && !rxpmaresetdone_reg2 ? FSM_DRP_START : FSM_MMCM_LOCK);  
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;    
            end

        //---------- Start DRP -----------------------------
        FSM_DRP_START:
        
            begin
            fsm        <= (!drp_done_reg2 ? FSM_DRP_DONE : FSM_DRP_START);
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= ((rate_in_reg2 == 2'd1) || (rate_in_reg2 == 2'd2));
            gen3       <= (rate_in_reg2 == 2'd2);  
            rate_out   <= (((rate_in_reg2 == 2'd2) || gen3_exit) ? rate : rate_out);  
            drp_start       <= 1'd1;
            drp_x16x20_mode <= 1'd0;  
            drp_x16         <= 1'd0;                     
            end

        //---------- Wait for DRP Done ---------------------
        FSM_DRP_DONE :
        
            begin
            fsm        <= ((drp_done_reg2 && pll_lock) ? (rst_idle_reg2 ? FSM_PMARESET_RELEASE : FSM_IDLE): FSM_DRP_DONE);
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;    
            end 

        //---------- Release PMA Resets --------------------
        FSM_PMARESET_RELEASE :
        
            begin
            fsm        <= FSM_PMARESET_DONE;
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= 1'd0;
            rxpmareset <= 1'd0;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;    
            end

        //---------- Wait for both TX/RX PMA Reset Dones and PHYSTATUS Deassertion
        FSM_PMARESET_DONE :
        
            begin
            fsm        <= (((rxresetdone_reg2 && txresetdone_reg2 && !phystatus_reg2) || !RATE_ACTIVE_LANE) ? FSM_TXDATA_WAIT : FSM_PMARESET_DONE); 
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;    
            end

        //---------- Wait for TXDATA to TX[P/N] Latency ----
        FSM_TXDATA_WAIT :
        
            begin
            fsm        <= (txdata_wait_cnt == TXDATA_WAIT_MAX) ? FSM_PCLK_SEL : FSM_TXDATA_WAIT;
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;    
            end 

        //---------- Select PCLK Frequency -----------------
        //  Gen1 : PCLK = 125 MHz
        //  Gen2 : PCLK = 250 MHz
        //  Gen3 : PCLK = 250 MHz
        //--------------------------------------------------
        FSM_PCLK_SEL :
        
            begin
            fsm        <= ((PCIE_GT_DEVICE == "GTH") && ((rate_in_reg2 == 2'd1) || ((!gen3_exit) && (rate_in_reg2 == 2'd0)))) ? FSM_DRP_X16_START : FSM_RATE_SEL; 
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= ((rate_in_reg2 == 2'd1) || (rate_in_reg2 == 2'd2));
            gen3       <= gen3;    
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;    
            end

        //---------- Start DRP x16 -------------------------
        FSM_DRP_X16_START :
            
            begin
            fsm        <= (!drp_done_reg2) ? FSM_DRP_X16_DONE : FSM_DRP_X16_START;
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd1;
            drp_x16x20_mode <= 1'd1;
            drp_x16         <= 1'd1;
            end
            
        //---------- Wait for DRP x16 Done -----------------    
        FSM_DRP_X16_DONE :
        
            begin  
            fsm        <= drp_done_reg2 ? FSM_RATE_SEL : FSM_DRP_X16_DONE;
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd1;
            drp_x16         <= 1'd1;
            end    

        //---------- Select Rate ---------------------------
        FSM_RATE_SEL :
        
            begin
            fsm        <= ((PCIE_GT_DEVICE == "GTH") && ((rate_in_reg2 == 2'd1) || ((!gen3_exit) && (rate_in_reg2 == 2'd0)))) ? FSM_RXPMARESETDONE : FSM_RATE_DONE;
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate;                             // Update [TX/RX]RATE
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;
            end    
            
        //---------- Wait for RXPMARESETDONE De-assertion --
        FSM_RXPMARESETDONE :
        
            begin
            fsm        <= (!rxpmaresetdone_reg2) ? FSM_DRP_X20_START : FSM_RXPMARESETDONE;  
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;
            end  
            
        //---------- Start DRP x20 -------------------------
        FSM_DRP_X20_START :
            
            begin
            fsm        <= (!drp_done_reg2) ? FSM_DRP_X20_DONE : FSM_DRP_X20_START;
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd1;
            drp_x16x20_mode <= 1'd1;
            drp_x16         <= 1'd0;
            end
            
        //---------- Wait for DRP x20 Done -----------------    
        FSM_DRP_X20_DONE :
        
            begin  
            fsm        <= drp_done_reg2 ? FSM_RATE_DONE : FSM_DRP_X20_DONE;
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd1;
            drp_x16         <= 1'd0;
            end       
            
        //---------- Wait for Rate Change Done ------------- 
        FSM_RATE_DONE :
        
            begin
            if (ratedone || (rate_in_reg2 == 2'd2) || (gen3_exit) || !RATE_ACTIVE_LANE) 
                if ((PCIE_USE_MODE == "1.0") && (rate_in_reg2 != 2'd2) && (!gen3_exit)) 
                    fsm <= FSM_RESETOVRD_START;
                else
                    fsm <= FSM_PLL_PDRESET;  
            else      
                fsm <= FSM_RATE_DONE;
            
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;
            end      
            
        //---------- Reset Override Start ------------------
        FSM_RESETOVRD_START:
        
            begin
            fsm        <= (!resetovrd_done_reg2 ? FSM_RESETOVRD_DONE : FSM_RESETOVRD_START);    
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;
            end
            
        //---------- Reset Override Done -------------------
        FSM_RESETOVRD_DONE :
        
            begin
            fsm        <= (resetovrd_done_reg2 ? FSM_PLL_PDRESET : FSM_RESETOVRD_DONE);
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;
            end  
                
        //---------- Hold PLL Not Used in Reset ------------
        FSM_PLL_PDRESET :
        
            begin
            fsm        <= FSM_PLL_PD;
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= (PCIE_PLL_SEL == "QPLL") ? 1'd1 : (rate_in_reg2 == 2'd2);
            qpllreset  <= (PCIE_PLL_SEL == "QPLL") ? 1'd0 : (rate_in_reg2 != 2'd2);
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;
            end    
            
        //---------- Power-Down PLL Not Used ---------------
        FSM_PLL_PD :
        
            begin
            fsm        <= (((rate_in_reg2 == 2'd2) || (PCIE_TXBUF_EN == "FALSE")) ? FSM_TXSYNC_START : FSM_DONE);
            gen3_exit  <= gen3_exit;
            cpllpd     <= (PCIE_PLL_SEL == "QPLL") ? 1'd1 : (rate_in_reg2 == 2'd2);
            qpllpd     <= (PCIE_PLL_SEL == "QPLL") ? 1'd0 : (rate_in_reg2 != 2'd2);
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;
            end         
            
        //---------- Start TX Sync -------------------------
        FSM_TXSYNC_START:
        
            begin
            fsm        <= (!txsync_done_reg2 ? FSM_TXSYNC_DONE : FSM_TXSYNC_START);
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;
            end
            
        //---------- Wait for TX Sync Done -----------------
        FSM_TXSYNC_DONE:
        
            begin
            fsm        <= (txsync_done_reg2 ? FSM_DONE : FSM_TXSYNC_DONE);
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;
            end        

        //---------- Rate Change Done ----------------------
        FSM_DONE :  
          
            begin  
            fsm        <= (((rate_in_reg2 == 2'd2) && (PCIE_RXBUF_EN == "FALSE") && (PCIE_ASYNC_EN == "TRUE")) ? FSM_RXSYNC_START : FSM_IDLE);
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;
            end
               
        //---------- Start RX Sync -------------------------
        FSM_RXSYNC_START:
        
            begin
            fsm        <= (!rxsync_done_reg2 ? FSM_RXSYNC_DONE : FSM_RXSYNC_START);
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;
            end
            
        //---------- Wait for RX Sync Done -----------------
        FSM_RXSYNC_DONE:
        
            begin          
            fsm        <= (rxsync_done_reg2 ? FSM_IDLE : FSM_RXSYNC_DONE);
            gen3_exit  <= gen3_exit;
            cpllpd     <= cpllpd;
            qpllpd     <= qpllpd;
            cpllreset  <= cpllreset;
            qpllreset  <= qpllreset;
            txpmareset <= txpmareset;
            rxpmareset <= rxpmareset;
            sysclksel  <= sysclksel;
            pclk_sel   <= pclk_sel;
            gen3       <= gen3;
            rate_out   <= rate_out;
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;
            end   
                
        //---------- Default State -------------------------
        default :
        
            begin
            fsm        <= FSM_IDLE;
            gen3_exit  <= 1'd0;
            cpllpd     <= 1'd0;
            qpllpd     <= 1'd0;
            cpllreset  <= 1'd0;
            qpllreset  <= 1'd0;
            txpmareset <= 1'd0;
            rxpmareset <= 1'd0;
            sysclksel  <= (PCIE_PLL_SEL == "QPLL") ? 2'd1 : 2'd0;                               
            pclk_sel   <= 1'd0; 
            gen3       <= 1'd0;
            rate_out   <= 3'd0;  
            drp_start       <= 1'd0;
            drp_x16x20_mode <= 1'd0;
            drp_x16         <= 1'd0;
            end

        endcase
        
        end
        
end 



//---------- PIPE Rate Output --------------------------------------------------
assign RATE_CPLLPD          = ((PCIE_POWER_SAVING == "FALSE") ? 1'd0 : cpllpd);
assign RATE_QPLLPD          = ((PCIE_POWER_SAVING == "FALSE") ? 1'd0 : qpllpd);
assign RATE_CPLLRESET       = ((PCIE_POWER_SAVING == "FALSE") ? 1'd0 : cpllreset);
assign RATE_QPLLRESET       = ((PCIE_POWER_SAVING == "FALSE") ? 1'd0 : qpllreset);
assign RATE_TXPMARESET      = txpmareset;
assign RATE_RXPMARESET      = rxpmareset;
assign RATE_SYSCLKSEL       = sysclksel;

//assign RATE_DRP_START       = (fsm == FSM_DRP_START) || (fsm == FSM_DRP_X16_GEN3_START) || (fsm == FSM_DRP_X16_START) || (fsm == FSM_DRP_X20_START); 
  assign RATE_DRP_START       = drp_start;

//assign RATE_DRP_X16X20_MODE = (fsm == FSM_DRP_X16_GEN3_START) || (fsm == FSM_DRP_X16_GEN3_DONE) ||
//                              (fsm == FSM_DRP_X16_START)      || (fsm == FSM_DRP_X16_DONE) || 
//                              (fsm == FSM_DRP_X20_START)      || (fsm == FSM_DRP_X20_DONE);
  assign RATE_DRP_X16X20_MODE = drp_x16x20_mode;

//assign RATE_DRP_X16         = (fsm == FSM_DRP_X16_GEN3_START) || (fsm == FSM_DRP_X16_GEN3_DONE) ||
//                              (fsm == FSM_DRP_X16_START)      || (fsm == FSM_DRP_X16_DONE);
  assign RATE_DRP_X16         = drp_x16;  
                          
assign RATE_PCLK_SEL        = pclk_sel;
assign RATE_GEN3            = gen3;
assign RATE_RATE_OUT        = rate_out;
assign RATE_RESETOVRD_START = (fsm == FSM_RESETOVRD_START);
assign RATE_TXSYNC_START    = (fsm == FSM_TXSYNC_START);
assign RATE_DONE            = (fsm == FSM_DONE);
assign RATE_RXSYNC_START    = (fsm == FSM_RXSYNC_START);
assign RATE_RXSYNC          = ((fsm == FSM_RXSYNC_START) || (fsm == FSM_RXSYNC_DONE));
assign RATE_IDLE            = (fsm == FSM_IDLE);
assign RATE_FSM             = fsm;   



endmodule
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pipe_reset.v
// Version    : 4.0
//----------------------------------------------------------------------------//
//  Filename     :  rp_pipe_reset.v
//  Description  :  PIPE Reset Module for 7 Series Transceiver
//  Version      :  20.2
//------------------------------------------------------------------------------



`timescale 1ns / 1ps



//---------- PIPE Reset Module -------------------------------------------------
module rp_pipe_reset #
(

    //---------- Global ------------------------------------
    parameter PCIE_SIM_SPEEDUP  = "FALSE",                  // PCIe sim speedup
    parameter PCIE_GT_DEVICE    = "GTX",
    parameter PCIE_PLL_SEL      = "CPLL",                   // PCIe PLL select for Gen1/Gen2 only
    parameter PCIE_POWER_SAVING = "TRUE",                   // PCIe power saving
    parameter PCIE_TXBUF_EN     = "FALSE",                  // PCIe TX buffer enable
    parameter PCIE_LANE         = 1,                        // PCIe number of lanes
    //---------- Local -------------------------------------
    parameter CFG_WAIT_MAX      = 6'd63,                    // Configuration wait max
    parameter BYPASS_RXCDRLOCK  = 1                         // Bypass RXCDRLOCK

)

(

    //---------- Input -------------------------------------
    input                           RST_CLK,
    input                           RST_RXUSRCLK,
    input                           RST_DCLK,
    input                           RST_RST_N,
    input       [PCIE_LANE-1:0]     RST_DRP_DONE,
    input       [PCIE_LANE-1:0]     RST_RXPMARESETDONE,
    input       [PCIE_LANE-1:0]     RST_CPLLLOCK,
    input                           RST_QPLL_IDLE,
    input       [PCIE_LANE-1:0]     RST_RATE_IDLE,
    input       [PCIE_LANE-1:0]     RST_RXCDRLOCK,
    input                           RST_MMCM_LOCK,
    input       [PCIE_LANE-1:0]     RST_RESETDONE,
    input       [PCIE_LANE-1:0]     RST_PHYSTATUS,
    input       [PCIE_LANE-1:0]     RST_TXSYNC_DONE,
    
    //---------- Output ------------------------------------
    output                          RST_CPLLRESET,
    output                          RST_CPLLPD,
    output reg                      RST_DRP_START,
    output reg                      RST_DRP_X16X20_MODE,
    output reg                      RST_DRP_X16,
    output                          RST_RXUSRCLK_RESET,
    output                          RST_DCLK_RESET,
    output                          RST_GTRESET,
    output                          RST_USERRDY,
    output                          RST_TXSYNC_START,
    output                          RST_IDLE,
    output      [4:0]               RST_FSM

);

    //---------- Input Register ----------------------------
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     drp_done_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     rxpmaresetdone_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     cplllock_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                             qpll_idle_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     rate_idle_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     rxcdrlock_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                             mmcm_lock_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     resetdone_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     phystatus_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     txsync_done_reg1;  
    
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     drp_done_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     rxpmaresetdone_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     cplllock_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                             qpll_idle_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     rate_idle_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     rxcdrlock_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                             mmcm_lock_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     resetdone_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     phystatus_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     txsync_done_reg2;
    
    //---------- Internal Signal ---------------------------
    reg         [ 5:0]              cfg_wait_cnt      =  6'd0;
    
    //---------- Output Register ---------------------------
    reg                             cpllreset         =  1'd0;
    reg                             cpllpd            =  1'd0;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                             rxusrclk_rst_reg1 =  1'd0;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                             rxusrclk_rst_reg2 =  1'd0;
                                                  reg                             dclk_rst          =  1'd0;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                             dclk_rst_reg1     =  1'd0;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                             dclk_rst_reg2     =  1'd0;
    reg                             gtreset           =  1'd0;
    reg                             userrdy           =  1'd1;
    reg         [4:0]               fsm               =  5'h2;
   
    //---------- FSM ---------------------------------------                                         
    localparam                      FSM_IDLE             = 5'h0;
    localparam                      FSM_CFG_WAIT         = 5'h1;
    localparam                      FSM_CPLLRESET        = 5'h2;
    localparam                      FSM_DRP_X16_START    = 5'h3;
    localparam                      FSM_DRP_X16_DONE     = 5'h4;
    localparam                      FSM_CPLLLOCK         = 5'h5;
    localparam                      FSM_DRP              = 5'h6;
    localparam                      FSM_GTRESET          = 5'h7;
    localparam                      FSM_RXPMARESETDONE_1 = 5'h8;
    localparam                      FSM_RXPMARESETDONE_2 = 5'h9;
    localparam                      FSM_DRP_X20_START    = 5'hA;
    localparam                      FSM_DRP_X20_DONE     = 5'hB;
    localparam                      FSM_MMCM_LOCK        = 5'hC;
    localparam                      FSM_RESETDONE        = 5'hD;
    localparam                      FSM_CPLL_PD          = 5'hE;
    localparam                      FSM_TXSYNC_START     = 5'hF;
    localparam                      FSM_TXSYNC_DONE      = 5'h10;

    

//---------- Input FF ----------------------------------------------------------
always @ (posedge RST_CLK)
begin

    if (!RST_RST_N)
        begin    
        //---------- 1st Stage FF --------------------------    
        drp_done_reg1       <= {PCIE_LANE{1'd0}};   
        rxpmaresetdone_reg1 <= {PCIE_LANE{1'd0}}; 
        cplllock_reg1       <= {PCIE_LANE{1'd0}}; 
        qpll_idle_reg1      <= 1'd0;
        rate_idle_reg1      <= {PCIE_LANE{1'd0}}; 
        rxcdrlock_reg1      <= {PCIE_LANE{1'd0}}; 
        mmcm_lock_reg1      <= 1'd0; 
        resetdone_reg1      <= {PCIE_LANE{1'd0}}; 
        phystatus_reg1      <= {PCIE_LANE{1'd0}}; 
        txsync_done_reg1    <= {PCIE_LANE{1'd0}}; 
        //---------- 2nd Stage FF --------------------------
        drp_done_reg2       <= {PCIE_LANE{1'd0}};
        rxpmaresetdone_reg2 <= {PCIE_LANE{1'd0}}; 
        cplllock_reg2       <= {PCIE_LANE{1'd0}}; 
        qpll_idle_reg2      <= 1'd0;
        rate_idle_reg2      <= {PCIE_LANE{1'd0}}; 
        rxcdrlock_reg2      <= {PCIE_LANE{1'd0}}; 
        mmcm_lock_reg2      <= 1'd0;
        resetdone_reg2      <= {PCIE_LANE{1'd0}}; 
        phystatus_reg2      <= {PCIE_LANE{1'd0}}; 
        txsync_done_reg2    <= {PCIE_LANE{1'd0}}; 
        end
    else
        begin  
        //---------- 1st Stage FF --------------------------  
        drp_done_reg1       <= RST_DRP_DONE; 
        rxpmaresetdone_reg1 <= RST_RXPMARESETDONE;   
        cplllock_reg1       <= RST_CPLLLOCK;
        qpll_idle_reg1      <= RST_QPLL_IDLE;
        rate_idle_reg1      <= RST_RATE_IDLE;
        rxcdrlock_reg1      <= RST_RXCDRLOCK;
        mmcm_lock_reg1      <= RST_MMCM_LOCK;
        resetdone_reg1      <= RST_RESETDONE;
        phystatus_reg1      <= RST_PHYSTATUS;
        txsync_done_reg1    <= RST_TXSYNC_DONE;
        //---------- 2nd Stage FF --------------------------
        drp_done_reg2       <= drp_done_reg1;
        rxpmaresetdone_reg2 <= rxpmaresetdone_reg1;
        cplllock_reg2       <= cplllock_reg1;
        qpll_idle_reg2      <= qpll_idle_reg1;
        rate_idle_reg2      <= rate_idle_reg1;
        rxcdrlock_reg2      <= rxcdrlock_reg1;
        mmcm_lock_reg2      <= mmcm_lock_reg1;
        resetdone_reg2      <= resetdone_reg1;
        phystatus_reg2      <= phystatus_reg1;
        txsync_done_reg2    <= txsync_done_reg1;   
        end
        
end    



//---------- Configuration Reset Wait Counter ----------------------------------
always @ (posedge RST_CLK)
begin

    if (!RST_RST_N)
        cfg_wait_cnt <= 6'd0;
    else
    
        //---------- Increment Configuration Reset Wait Counter
        if ((fsm == FSM_CFG_WAIT) && (cfg_wait_cnt < CFG_WAIT_MAX))
            cfg_wait_cnt <= cfg_wait_cnt + 6'd1;
            
        //---------- Hold Configuration Reset Wait Counter -
        else if ((fsm == FSM_CFG_WAIT) && (cfg_wait_cnt == CFG_WAIT_MAX))
            cfg_wait_cnt <= cfg_wait_cnt;
            
        //---------- Reset Configuration Reset Wait Counter 
        else
            cfg_wait_cnt <= 6'd0;
        
end 



//---------- PIPE Reset FSM ----------------------------------------------------
always @ (posedge RST_CLK)
begin

    if (!RST_RST_N)
        begin
        fsm       <= FSM_CFG_WAIT;
        cpllreset <= 1'd0;
        cpllpd    <= 1'd0;
        gtreset   <= 1'd0;
        userrdy   <= 1'd0;
        end
    else
        begin
        
        case (fsm)
            
        //---------- Idle State ----------------------------
        FSM_IDLE :
        
            begin
            if (!RST_RST_N)
                begin
                fsm       <= FSM_CFG_WAIT;
                cpllreset <= 1'd0;
                cpllpd    <= 1'd0;
                gtreset   <= 1'd0;
                userrdy   <= 1'd0;
                end
            else
                begin
                fsm       <= FSM_IDLE;
                cpllreset <= cpllreset;
                cpllpd    <= cpllpd;
                gtreset   <= gtreset;
                userrdy   <= userrdy;
                end
            end  
            
        //----------  Wait for Configuration Reset Delay ---
        FSM_CFG_WAIT :
          
            begin
            fsm       <= ((cfg_wait_cnt == CFG_WAIT_MAX) ? FSM_CPLLRESET : FSM_CFG_WAIT);
            cpllreset <= cpllreset;
            cpllpd    <= cpllpd;
            gtreset   <= gtreset;
            userrdy   <= userrdy;
            end 
            
        //---------- Hold CPLL and GTX Channel in Reset ----
        FSM_CPLLRESET :
        
            begin
            fsm       <= ((&(~cplllock_reg2) && (&(~resetdone_reg2))) ?  FSM_CPLLLOCK : FSM_CPLLRESET);
            cpllreset <= 1'd1;
            cpllpd    <= cpllpd;
            gtreset   <= 1'd1;
            userrdy   <= userrdy;
            end  

        //---------- Wait for CPLL Lock --------------------
        FSM_CPLLLOCK :
        
            begin
            fsm       <= (&cplllock_reg2 ? FSM_DRP : FSM_CPLLLOCK);
            cpllreset <= 1'd0;
            cpllpd    <= cpllpd;
            gtreset   <= gtreset;
            userrdy   <= userrdy;
            end

        //---------- Wait for DRP Done to Setup Gen1 -------
        FSM_DRP :
        
            begin
            fsm       <= (&rate_idle_reg2 ? ((PCIE_GT_DEVICE == "GTX") ? FSM_GTRESET : FSM_DRP_X16_START) : FSM_DRP);
            cpllreset <= cpllreset;
            cpllpd    <= cpllpd;
            gtreset   <= gtreset;
            userrdy   <= userrdy;
            end

        //---------- Start DRP x16 -------------------------
        FSM_DRP_X16_START :
            
            begin
            fsm       <= &(~drp_done_reg2) ? FSM_DRP_X16_DONE : FSM_DRP_X16_START;
            cpllreset <= cpllreset;
            cpllpd    <= cpllpd;
            gtreset   <= gtreset;
            userrdy   <= userrdy;
            end
            
        //---------- Wait for DRP x16 Done -----------------    
        FSM_DRP_X16_DONE :
        
            begin  
            fsm       <= (&drp_done_reg2) ? FSM_GTRESET : FSM_DRP_X16_DONE;
            cpllreset <= cpllreset;
            cpllpd    <= cpllpd;
            gtreset   <= gtreset;
            userrdy   <= userrdy;
            end  

        //---------- Release GTX Channel Reset -------------
        FSM_GTRESET :
        
            begin
            fsm       <= (PCIE_GT_DEVICE == "GTX") ? FSM_MMCM_LOCK : FSM_RXPMARESETDONE_1;
            cpllreset <= cpllreset;
            cpllpd    <= cpllpd;
            gtreset   <= 1'b0;
            userrdy   <= userrdy;
            end
            
        //---------- Wait for RXPMARESETDONE Assertion -----
        FSM_RXPMARESETDONE_1 :
        
            begin
            fsm       <= (&rxpmaresetdone_reg2 || (PCIE_SIM_SPEEDUP == "TRUE")) ? FSM_RXPMARESETDONE_2 : FSM_RXPMARESETDONE_1;
            cpllreset <= cpllreset;
            cpllpd    <= cpllpd;
            gtreset   <= gtreset;
            userrdy   <= userrdy;
            end  

        //---------- Wait for RXPMARESETDONE De-assertion --
        FSM_RXPMARESETDONE_2 :
        
            begin
            fsm       <= (&(~rxpmaresetdone_reg2) || (PCIE_SIM_SPEEDUP == "TRUE")) ? FSM_DRP_X20_START : FSM_RXPMARESETDONE_2;
            cpllreset <= cpllreset;
            cpllpd    <= cpllpd;
            gtreset   <= gtreset;
            userrdy   <= userrdy;
            end  
            
        //---------- Start DRP x20 -------------------------
        FSM_DRP_X20_START :
            
            begin
            fsm       <= &(~drp_done_reg2) ? FSM_DRP_X20_DONE : FSM_DRP_X20_START;
            cpllreset <= cpllreset;
            cpllpd    <= cpllpd;
            gtreset   <= gtreset;
            userrdy   <= userrdy;
            end
            
        //---------- Wait for DRP x20 Done -----------------    
        FSM_DRP_X20_DONE :
        
            begin  
            fsm       <= (&drp_done_reg2) ? FSM_MMCM_LOCK : FSM_DRP_X20_DONE;
            cpllreset <= cpllreset;
            cpllpd    <= cpllpd;
            gtreset   <= gtreset;
            userrdy   <= userrdy;
            end   

        //---------- Wait for MMCM and RX CDR Lock ---------
        FSM_MMCM_LOCK :
        
            begin  
            if (mmcm_lock_reg2 && (&rxcdrlock_reg2 || (BYPASS_RXCDRLOCK == 1)) && (qpll_idle_reg2 || (PCIE_PLL_SEL == "CPLL")))
                begin
                fsm       <= FSM_RESETDONE;
                cpllreset <= cpllreset;
                cpllpd    <= cpllpd;
                gtreset   <= gtreset;
                userrdy   <= 1'd1;
                end
            else
                begin
                fsm       <= FSM_MMCM_LOCK;
                cpllreset <= cpllreset;
                cpllpd    <= cpllpd;
                gtreset   <= gtreset;
                userrdy   <= 1'd0;
                end
            end

        //---------- Wait for [TX/RX]RESETDONE and PHYSTATUS 
        FSM_RESETDONE :
        
            begin
            fsm       <= (&resetdone_reg2 && (&(~phystatus_reg2)) ? FSM_CPLL_PD : FSM_RESETDONE);  
            cpllreset <= cpllreset;
            cpllpd    <= cpllpd;
            gtreset   <= gtreset;
            userrdy   <= userrdy;
            end
            
        //---------- Power-Down CPLL if QPLL is Used for Gen1/Gen2
        FSM_CPLL_PD :
        
            begin
            fsm       <= ((PCIE_TXBUF_EN == "TRUE") ? FSM_IDLE : FSM_TXSYNC_START);
            cpllreset <= cpllreset;
            cpllpd    <= (PCIE_PLL_SEL == "QPLL");
            gtreset   <= gtreset;
            userrdy   <= userrdy;
            end
        
        //---------- Start TX Sync -------------------------
        FSM_TXSYNC_START :
        
            begin
            fsm       <= (&(~txsync_done_reg2) ? FSM_TXSYNC_DONE : FSM_TXSYNC_START);
            cpllreset <= cpllreset;
            cpllpd    <= cpllpd;
            gtreset   <= gtreset;
            userrdy   <= userrdy;
            end
            
        //---------- Wait for TX Sync Done -----------------
        FSM_TXSYNC_DONE :
        
            begin
            fsm       <= (&txsync_done_reg2 ? FSM_IDLE : FSM_TXSYNC_DONE);
            cpllreset <= cpllreset;
            cpllpd    <= cpllpd;
            gtreset   <= gtreset;
            userrdy   <= userrdy;
            end     
            
        //---------- Default State -------------------------
        default :
        
            begin
            fsm       <= FSM_CFG_WAIT;
            cpllreset <= 1'd0;
            cpllpd    <= 1'd0;
            gtreset   <= 1'd0;
            userrdy   <= 1'd0;
            end

        endcase
        
        end
        
end



//---------- RXUSRCLK Reset Synchronizer ---------------------------------------
always @ (posedge RST_RXUSRCLK)
begin

    rxusrclk_rst_reg1 <= cpllreset;
    rxusrclk_rst_reg2 <= rxusrclk_rst_reg1;
          
end  



//---------- DCLK Reset Synchronizer -------------------------------------------
always @ (posedge RST_CLK)
begin

    if (fsm == FSM_CFG_WAIT)
        begin
        dclk_rst      <= 1'd1;
        end
    else
        begin
        dclk_rst      <= 1'd0;
        end
end

always @ (posedge RST_DCLK)
begin

    dclk_rst_reg1 <= dclk_rst;
    dclk_rst_reg2 <= dclk_rst_reg1;
          
end  



//---------- PIPE Reset Output -------------------------------------------------
assign RST_CPLLRESET       = cpllreset; 
assign RST_CPLLPD          = ((PCIE_POWER_SAVING == "FALSE") ? 1'd0 : cpllpd);
assign RST_RXUSRCLK_RESET  = rxusrclk_rst_reg2;
assign RST_DCLK_RESET      = dclk_rst_reg2;
assign RST_GTRESET         = gtreset;  
assign RST_USERRDY         = userrdy;
assign RST_TXSYNC_START    = (fsm == FSM_TXSYNC_START);
assign RST_IDLE            = (fsm == FSM_IDLE);
assign RST_FSM             = fsm;                   




//--------------------------------------------------------------------------------------------------
//  Register Output
//--------------------------------------------------------------------------------------------------
always @ (posedge RST_CLK)
begin

    if (!RST_RST_N) 
        begin
        RST_DRP_START       <= 1'd0;
        RST_DRP_X16X20_MODE <= 1'd0; 
        RST_DRP_X16         <= 1'd0;
        end
    else
        begin
        RST_DRP_START       <= (fsm == FSM_DRP_X16_START) || (fsm == FSM_DRP_X20_START); 
        RST_DRP_X16X20_MODE <= (fsm == FSM_DRP_X16_START) || (fsm == FSM_DRP_X16_DONE) || (fsm == FSM_DRP_X20_START) || (fsm == FSM_DRP_X20_DONE);
        RST_DRP_X16         <= (fsm == FSM_DRP_X16_START) || (fsm == FSM_DRP_X16_DONE);
        end
        
end  



endmodule
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pipe_sync.v
// Version    : 4.0
//----------------------------------------------------------------------------//
//  Filename     :  rp_pipe_sync.v
//  Description  :  PIPE Sync Module for 7 Series Transceiver
//  Version      :  20.1
//------------------------------------------------------------------------------
//  PCIE_TXSYNC_MODE  : 0 = Manual TX sync (default).
//                    : 1 = Auto TX sync.
//  PCIE_RXSYNC_MODE  : 0 = Manual RX sync (default).
//                    : 1 = Auto RX sync.
//------------------------------------------------------------------------------



`timescale 1ns / 1ps



//---------- PIPE Sync Module --------------------------------------------------
module rp_pipe_sync #
(

    parameter PCIE_GT_DEVICE       = "GTX",                 // PCIe GT device
    parameter PCIE_TXBUF_EN        = "FALSE",               // PCIe TX buffer enable for Gen1/Gen2 only
    parameter PCIE_RXBUF_EN        = "TRUE",                // PCIe TX buffer enable for Gen3      only
    parameter PCIE_TXSYNC_MODE     = 0,                     // PCIe TX sync mode
    parameter PCIE_RXSYNC_MODE     = 0,                     // PCIe RX sync mode
    parameter PCIE_LANE            = 1,                     // PCIe lane
    parameter PCIE_LINK_SPEED      = 3,                     // PCIe link speed
    parameter BYPASS_TXDELAY_ALIGN = 0,                     // Bypass TX delay align
    parameter BYPASS_RXDELAY_ALIGN = 0                      // Bypass RX delay align

)

(

    //---------- Input -------------------------------------
    input               SYNC_CLK,
    input               SYNC_RST_N,
    input               SYNC_SLAVE,
    input               SYNC_GEN3,
    input               SYNC_RATE_IDLE,
    input               SYNC_MMCM_LOCK,
    input               SYNC_RXELECIDLE,
    input               SYNC_RXCDRLOCK,
    input               SYNC_ACTIVE_LANE,
    
    input               SYNC_TXSYNC_START,
    input               SYNC_TXPHINITDONE,   
    input               SYNC_TXDLYSRESETDONE,
    input               SYNC_TXPHALIGNDONE,
    input               SYNC_TXSYNCDONE,
        
    input               SYNC_RXSYNC_START,
    input               SYNC_RXDLYSRESETDONE,
    input               SYNC_RXPHALIGNDONE_M,
    input               SYNC_RXPHALIGNDONE_S,
    input               SYNC_RXSYNC_DONEM_IN,
    input               SYNC_RXSYNCDONE,
    
    //---------- Output ------------------------------------
    output              SYNC_TXPHDLYRESET,
    output              SYNC_TXPHALIGN,     
    output              SYNC_TXPHALIGNEN,  
    output              SYNC_TXPHINIT,       
    output              SYNC_TXDLYBYPASS,  
    output              SYNC_TXDLYSRESET,
    output              SYNC_TXDLYEN,   
    output              SYNC_TXSYNC_DONE,
    output    [ 5:0]    SYNC_FSM_TX,
    
    output              SYNC_RXPHALIGN,
    output              SYNC_RXPHALIGNEN,
    output              SYNC_RXDLYBYPASS,
    output              SYNC_RXDLYSRESET,
    output              SYNC_RXDLYEN,
    output              SYNC_RXDDIEN,
    output              SYNC_RXSYNC_DONEM_OUT,
    output              SYNC_RXSYNC_DONE,
    output    [ 6:0]    SYNC_FSM_RX

);          

    //---------- Input Register ----------------------------
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 gen3_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rate_idle_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg		      mmcm_lock_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxelecidle_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxcdrlock_reg1;
    
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 gen3_reg2;     
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rate_idle_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg		      mmcm_lock_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxelecidle_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxcdrlock_reg2;
    
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg		      txsync_start_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txphinitdone_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txdlysresetdone_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txphaligndone_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txsyncdone_reg1;
                                                   
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txsync_start_reg2;     
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txphinitdone_reg2;     
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txdlysresetdone_reg2;    
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txphaligndone_reg2;   
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txsyncdone_reg2; 
    
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txsync_start_reg3;     
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txphinitdone_reg3;     
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txdlysresetdone_reg3;    
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txphaligndone_reg3;   
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txsyncdone_reg3;     
    
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg		      rxsync_start_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxdlysresetdone_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxphaligndone_m_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxphaligndone_s_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxsync_donem_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxsyncdone_reg1;

(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg		      rxsync_start_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxdlysresetdone_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxphaligndone_m_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxphaligndone_s_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxsync_donem_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxsyncdone_reg2;
    
    //---------- Output Register ---------------------------          
    reg                 txdlyen     = 1'd0;
    reg                 txsync_done = 1'd0;
    reg         [ 5:0]  fsm_tx      = 6'd0;     
    
    reg                 rxdlyen     = 1'd0;
    reg                 rxsync_done = 1'd0;         
    reg	        [ 6:0]  fsm_rx      = 7'd0;   
   
    //---------- FSM ---------------------------------------                                         
    localparam          FSM_TXSYNC_IDLE  = 6'b000001; 
    localparam          FSM_MMCM_LOCK    = 6'b000010;                                     
    localparam          FSM_TXSYNC_START = 6'b000100;
    localparam          FSM_TXPHINITDONE = 6'b001000;       // Manual TX sync only
    localparam          FSM_TXSYNC_DONE1 = 6'b010000;   
    localparam          FSM_TXSYNC_DONE2 = 6'b100000;             
        
    localparam          FSM_RXSYNC_IDLE  = 7'b0000001; 
    localparam          FSM_RXCDRLOCK    = 7'b0000010;                                     
    localparam          FSM_RXSYNC_START = 7'b0000100;
    localparam          FSM_RXSYNC_DONE1 = 7'b0001000;                                     
    localparam          FSM_RXSYNC_DONE2 = 7'b0010000;
    localparam          FSM_RXSYNC_DONES = 7'b0100000;
    localparam          FSM_RXSYNC_DONEM = 7'b1000000;
        
    
    
//---------- Input FF ----------------------------------------------------------
always @ (posedge SYNC_CLK)
begin

    if (!SYNC_RST_N)
        begin    
        //---------- 1st Stage FF --------------------------  
        gen3_reg1            <= 1'd0;
        rate_idle_reg1       <= 1'd0;
        mmcm_lock_reg1       <= 1'd0;
        rxelecidle_reg1      <= 1'd0;
        rxcdrlock_reg1 	     <= 1'd0;
 
        txsync_start_reg1	   <= 1'd0;
        txphinitdone_reg1    <= 1'd0;
        txdlysresetdone_reg1 <= 1'd0;
        txphaligndone_reg1   <= 1'd0;
        txsyncdone_reg1      <= 1'd0;
        
        rxsync_start_reg1	   <= 1'd0; 
        rxdlysresetdone_reg1 <= 1'd0;
        rxphaligndone_m_reg1 <= 1'd0;
        rxphaligndone_s_reg1 <= 1'd0;
        rxsync_donem_reg1    <= 1'd0;    
        rxsyncdone_reg1      <= 1'd0;
        //---------- 2nd Stage FF --------------------------
        gen3_reg2            <= 1'd0;
        rate_idle_reg2       <= 1'd0;
        mmcm_lock_reg2       <= 1'd0;
        rxelecidle_reg2      <= 1'd0;
        rxcdrlock_reg2 	     <= 1'd0;
        
        txsync_start_reg2	   <= 1'd0;
        txphinitdone_reg2    <= 1'd0;
        txdlysresetdone_reg2 <= 1'd0;
        txphaligndone_reg2   <= 1'd0;
        txsyncdone_reg2      <= 1'd0;
        
        rxsync_start_reg2	   <= 1'd0; 
        rxdlysresetdone_reg2 <= 1'd0;
        rxphaligndone_m_reg2 <= 1'd0;
        rxphaligndone_s_reg2 <= 1'd0;
        rxsync_donem_reg2    <= 1'd0;
        rxsyncdone_reg2      <= 1'd0;
        //---------- 3rd Stage FF --------------------------
        txsync_start_reg3	   <= 1'd0;
        txphinitdone_reg3    <= 1'd0;
        txdlysresetdone_reg3 <= 1'd0;
        txphaligndone_reg3   <= 1'd0;
        txsyncdone_reg3      <= 1'd0;
        
        end
    else
        begin  
        //---------- 1st Stage FF --------------------------
        gen3_reg1            <= SYNC_GEN3;
        rate_idle_reg1       <= SYNC_RATE_IDLE;
        mmcm_lock_reg1       <= SYNC_MMCM_LOCK;
        rxelecidle_reg1      <= SYNC_RXELECIDLE; 
        rxcdrlock_reg1       <= SYNC_RXCDRLOCK;

        txsync_start_reg1    <= SYNC_TXSYNC_START;
        txphinitdone_reg1    <= SYNC_TXPHINITDONE;
        txdlysresetdone_reg1 <= SYNC_TXDLYSRESETDONE;
        txphaligndone_reg1   <= SYNC_TXPHALIGNDONE;
        txsyncdone_reg1      <= SYNC_TXSYNCDONE;
        
        rxsync_start_reg1	   <= SYNC_RXSYNC_START; 
        rxdlysresetdone_reg1 <= SYNC_RXDLYSRESETDONE;
        rxphaligndone_m_reg1 <= SYNC_RXPHALIGNDONE_M;
        rxphaligndone_s_reg1 <= SYNC_RXPHALIGNDONE_S;
        rxsync_donem_reg1    <= SYNC_RXSYNC_DONEM_IN;
        rxsyncdone_reg1      <= SYNC_RXSYNCDONE; 
        //---------- 2nd Stage FF --------------------------
        gen3_reg2            <= gen3_reg1;
        rate_idle_reg2       <= rate_idle_reg1;
        mmcm_lock_reg2       <= mmcm_lock_reg1;
        rxelecidle_reg2      <= rxelecidle_reg1;
        rxcdrlock_reg2       <= rxcdrlock_reg1;
        
        txsync_start_reg2    <= txsync_start_reg1;       
        txphinitdone_reg2    <= txphinitdone_reg1; 
        txdlysresetdone_reg2 <= txdlysresetdone_reg1;   
        txphaligndone_reg2   <= txphaligndone_reg1;
        txsyncdone_reg2      <= txsyncdone_reg1;
        
        rxsync_start_reg2    <= rxsync_start_reg1;
        rxdlysresetdone_reg2 <= rxdlysresetdone_reg1; 
        rxphaligndone_m_reg2 <= rxphaligndone_m_reg1;
        rxphaligndone_s_reg2 <= rxphaligndone_s_reg1;
        rxsync_donem_reg2    <= rxsync_donem_reg1; 
        rxsyncdone_reg2      <= rxsyncdone_reg1;
        //---------- 3rd Stage FF --------------------------
        txsync_start_reg3    <= txsync_start_reg2;	   
        txphinitdone_reg3    <= txphinitdone_reg2;    
        txdlysresetdone_reg3 <= txdlysresetdone_reg2; 
        txphaligndone_reg3   <= txphaligndone_reg2;   
        txsyncdone_reg3      <= txsyncdone_reg2;      
        end
        
end       



//---------- Generate TX Sync FSM ----------------------------------------------
generate if ((PCIE_LINK_SPEED == 3) || (PCIE_TXBUF_EN == "FALSE")) 

    begin : txsync_fsm

    //---------- PIPE TX Sync FSM ----------------------------------------------
    always @ (posedge SYNC_CLK)
    begin
    
        if (!SYNC_RST_N)
            begin
            fsm_tx      <= FSM_TXSYNC_IDLE;   
            txdlyen     <= 1'd0; 
            txsync_done <= 1'd0;
            end                    
        else
            begin
            
            case (fsm_tx)
            
            //---------- Idle State ------------------------
            FSM_TXSYNC_IDLE :
            
                begin     
                //---------- Exiting Reset or Rate Change --
                if (txsync_start_reg2)
                    begin
                    fsm_tx      <= FSM_MMCM_LOCK;
                    txdlyen     <= 1'd0; 
                    txsync_done <= 1'd0;
                    end
                else
                    begin
                    fsm_tx      <= FSM_TXSYNC_IDLE;
                    txdlyen     <= txdlyen; 
                    txsync_done <= txsync_done;
                    end
                end
                
            //---------- Check MMCM Lock -------------------
            FSM_MMCM_LOCK :
            
                begin
                fsm_tx      <= (mmcm_lock_reg2 ? FSM_TXSYNC_START : FSM_MMCM_LOCK);
                txdlyen     <= 1'd0; 
                txsync_done <= 1'd0;  
                end
                
            //---------- TX Delay Soft Reset --------------- 
            FSM_TXSYNC_START :
            
                begin
                fsm_tx      <= (((!txdlysresetdone_reg3 && txdlysresetdone_reg2) || (((PCIE_GT_DEVICE == "GTH") || (PCIE_GT_DEVICE == "GTP")) && (PCIE_TXSYNC_MODE == 1) && SYNC_SLAVE)) ? FSM_TXPHINITDONE : FSM_TXSYNC_START);
                txdlyen     <= 1'd0; 
                txsync_done <= 1'd0;
                end
                
            //---------- Wait for TX Phase Init Done (Manual Mode Only)
            FSM_TXPHINITDONE :
            
                begin
                fsm_tx      <= (((!txphinitdone_reg3 && txphinitdone_reg2) || (PCIE_TXSYNC_MODE == 1) || (!SYNC_ACTIVE_LANE)) ? FSM_TXSYNC_DONE1 : FSM_TXPHINITDONE);
                txdlyen     <= 1'd0; 
                txsync_done <= 1'd0;
                end
                
            //---------- Wait for TX Phase Alignment Done --
            FSM_TXSYNC_DONE1 :
            
                begin
                if (((PCIE_GT_DEVICE == "GTH") || (PCIE_GT_DEVICE == "GTP")) && (PCIE_TXSYNC_MODE == 1) && !SYNC_SLAVE)
                   fsm_tx <= ((!txsyncdone_reg3 && txsyncdone_reg2)       || (!SYNC_ACTIVE_LANE) ? FSM_TXSYNC_DONE2 : FSM_TXSYNC_DONE1); 
                else
                   fsm_tx <= ((!txphaligndone_reg3 && txphaligndone_reg2) || (!SYNC_ACTIVE_LANE) ? FSM_TXSYNC_DONE2 : FSM_TXSYNC_DONE1); 
                
                txdlyen     <= 1'd0; 
                txsync_done <= 1'd0;
                end  
                
            //---------- Wait for Master TX Delay Alignment Done 
            FSM_TXSYNC_DONE2 :
            
                begin
                if ((!txphaligndone_reg3 && txphaligndone_reg2) || (!SYNC_ACTIVE_LANE) || SYNC_SLAVE || (((PCIE_GT_DEVICE == "GTH") || (PCIE_GT_DEVICE == "GTP")) && (PCIE_TXSYNC_MODE == 1)) || (BYPASS_TXDELAY_ALIGN == 1)) 
                    begin
                    fsm_tx      <= FSM_TXSYNC_IDLE;
                    txdlyen     <= !SYNC_SLAVE; 
                    txsync_done <= 1'd1;
                    end
                else
                    begin
                    fsm_tx      <= FSM_TXSYNC_DONE2;
                    txdlyen     <= !SYNC_SLAVE; 
                    txsync_done <= 1'd0;
                    end
                end         
                              
            //---------- Default State ---------------------
            default :
                begin 
                fsm_tx      <= FSM_TXSYNC_IDLE;
                txdlyen     <= 1'd0; 
                txsync_done <= 1'd0;
                end
                
            endcase
            
            end
            
    end     

    end  
          
//---------- TX Sync FSM Default------------------------------------------------
else 

    begin : txsync_fsm_disable
       
    //---------- Default -------------------------------------------------------
    always @ (posedge SYNC_CLK)
    begin    
        fsm_tx      <= FSM_TXSYNC_IDLE;
        txdlyen     <= 1'd0;
        txsync_done <= 1'd0; 
    end

    end 

endgenerate  

          
       
//---------- Generate RX Sync FSM ----------------------------------------------
generate if ((PCIE_LINK_SPEED == 3) && (PCIE_RXBUF_EN == "FALSE")) 

    begin : rxsync_fsm
   
    //---------- PIPE RX Sync FSM ----------------------------------------------
    always @ (posedge SYNC_CLK)
    begin
    
        if (!SYNC_RST_N)
            begin
            fsm_rx      <= FSM_RXSYNC_IDLE; 
            rxdlyen     <= 1'd0;
            rxsync_done <= 1'd0;   
            end                    
        else
            begin
            
            case (fsm_rx)
            
            //---------- Idle State ------------------------
            FSM_RXSYNC_IDLE :
            
                begin
                //---------- Exiting Rate Change -----------
                if (rxsync_start_reg2)
                    begin
                    fsm_rx      <= FSM_RXCDRLOCK;
                    rxdlyen     <= 1'd0;
                    rxsync_done <= 1'd0;
                    end
                //---------- Exiting Electrical Idle without Rate Change 
                else if (gen3_reg2 && rate_idle_reg2 && ((rxelecidle_reg2 == 1'd1) && (rxelecidle_reg1 == 1'd0)))
                    begin
                    fsm_rx      <= FSM_RXCDRLOCK;
                    rxdlyen     <= 1'd0;
                    rxsync_done <= 1'd0;   
                    end 
                //---------- Idle --------------------------
                else                    
                    begin
                    fsm_rx      <= FSM_RXSYNC_IDLE;
                    rxdlyen     <= rxelecidle_reg2 ? 1'd0 : rxdlyen;
                    rxsync_done <= rxelecidle_reg2 ? 1'd0 : rxsync_done;
                    end
                end
                
            //---------- Wait for RX Electrical Idle Exit and RX CDR Lock 
            FSM_RXCDRLOCK :
            
                begin
                fsm_rx      <= ((!rxelecidle_reg2 && rxcdrlock_reg2) ? FSM_RXSYNC_START : FSM_RXCDRLOCK);
                rxdlyen     <= 1'd0;
                rxsync_done <= 1'd0;
                end
                
            //---------- Start RX Sync with RX Delay Soft Reset
            FSM_RXSYNC_START :
            
                begin
                fsm_rx      <= ((!rxdlysresetdone_reg2 && rxdlysresetdone_reg1) ? FSM_RXSYNC_DONE1 : FSM_RXSYNC_START);
                rxdlyen     <= 1'd0;
                rxsync_done <= 1'd0;
                end     
                      
            //---------- Wait for RX Phase Alignment Done --
            FSM_RXSYNC_DONE1 :
            
                begin
                if (SYNC_SLAVE)
                    begin
                    fsm_rx      <= ((!rxphaligndone_s_reg2 && rxphaligndone_s_reg1) ? FSM_RXSYNC_DONE2 : FSM_RXSYNC_DONE1);
                    rxdlyen     <= 1'd0;
                    rxsync_done <= 1'd0;
                    end
                else
                    begin
                    fsm_rx      <= ((!rxphaligndone_m_reg2 && rxphaligndone_m_reg1) ? FSM_RXSYNC_DONE2 : FSM_RXSYNC_DONE1);
                    rxdlyen     <= 1'd0;
                    rxsync_done <= 1'd0;
                    end
                end  
                
            //---------- Wait for Master RX Delay Alignment Done 
            FSM_RXSYNC_DONE2 :
            
                begin   
                if (SYNC_SLAVE)
                    begin
                    fsm_rx      <= FSM_RXSYNC_IDLE;
                    rxdlyen     <= 1'd0;
                    rxsync_done <= 1'd1;
                    end
                else if ((!rxphaligndone_m_reg2 && rxphaligndone_m_reg1) || (BYPASS_RXDELAY_ALIGN == 1)) 
                    begin
                    fsm_rx      <= ((PCIE_LANE == 1) ? FSM_RXSYNC_IDLE : FSM_RXSYNC_DONES);
                    rxdlyen     <=  (PCIE_LANE == 1);
                    rxsync_done <=  (PCIE_LANE == 1);
                    end
                else
                    begin
                    fsm_rx      <= FSM_RXSYNC_DONE2;
                    rxdlyen     <= 1'd1;
                    rxsync_done <= 1'd0;
                    end
                end     
                
            //---------- Wait for Slave RX Phase Alignment Done 
            FSM_RXSYNC_DONES :
            
                begin
                if (!rxphaligndone_s_reg2 && rxphaligndone_s_reg1) 
                    begin
                    fsm_rx      <= FSM_RXSYNC_DONEM;
                    rxdlyen     <= 1'd1;
                    rxsync_done <= 1'd0;
                    end
                else
                    begin
                    fsm_rx      <= FSM_RXSYNC_DONES;
                    rxdlyen     <= 1'd0;
                    rxsync_done <= 1'd0;
                    end
                end           
                   
            //---------- Wait for Master RX Delay Alignment Done 
            FSM_RXSYNC_DONEM :
            
                begin
                if ((!rxphaligndone_m_reg2 && rxphaligndone_m_reg1) || (BYPASS_RXDELAY_ALIGN == 1)) 
                    begin
                    fsm_rx      <= FSM_RXSYNC_IDLE;
                    rxdlyen     <= 1'd1;
                    rxsync_done <= 1'd1;
                    end
                else
                    begin
                    fsm_rx      <= FSM_RXSYNC_DONEM;
                    rxdlyen     <= 1'd1;
                    rxsync_done <= 1'd0;
                    end
                end         
                              
            //---------- Default State ---------------------
            default : 
                begin
                fsm_rx      <= FSM_RXSYNC_IDLE;
                rxdlyen     <= 1'd0;
                rxsync_done <= 1'd0;
                end    
                        
        	   endcase
            
            end
            
    end            
        
    end  
          
//---------- RX Sync FSM Default -----------------------------------------------
else 

    begin : rxsync_fsm_disable
       
    //---------- Default -------------------------------------------------------
    always @ (posedge SYNC_CLK)
    begin    
        fsm_rx      <= FSM_RXSYNC_IDLE;
        rxdlyen     <= 1'd0;
        rxsync_done <= 1'd0; 
    end

    end 

endgenerate      
   


//---------- PIPE Sync Output --------------------------------------------------            
assign SYNC_TXPHALIGNEN      = ((PCIE_TXSYNC_MODE == 1) || (!gen3_reg2 && (PCIE_TXBUF_EN == "TRUE"))) ? 1'd0 : 1'd1;   
assign SYNC_TXDLYBYPASS      = 1'd0;                     
//assign SYNC_TXDLYSRESET    = !(((PCIE_GT_DEVICE == "GTH") || (PCIE_GT_DEVICE == "GTP")) && (PCIE_TXSYNC_MODE == 1) && SYNC_SLAVE) ? (fsm_tx == FSM_TXSYNC_START) : 1'd0; 
assign SYNC_TXDLYSRESET      = (fsm_tx == FSM_TXSYNC_START);
assign SYNC_TXPHDLYRESET     =  (((PCIE_GT_DEVICE == "GTH") || (PCIE_GT_DEVICE == "GTP")) && (PCIE_TXSYNC_MODE == 1) && SYNC_SLAVE) ? (fsm_tx == FSM_TXSYNC_START) : 1'd0;   
assign SYNC_TXPHINIT         = PCIE_TXSYNC_MODE ? 1'd0 : (fsm_tx == FSM_TXPHINITDONE); 
assign SYNC_TXPHALIGN        = PCIE_TXSYNC_MODE ? 1'd0 : (fsm_tx == FSM_TXSYNC_DONE1);
assign SYNC_TXDLYEN          = PCIE_TXSYNC_MODE ? 1'd0 : txdlyen;
assign SYNC_TXSYNC_DONE      = txsync_done;
assign SYNC_FSM_TX           = fsm_tx;

assign SYNC_RXPHALIGNEN      = ((PCIE_RXSYNC_MODE == 1) || (!gen3_reg2) || (PCIE_RXBUF_EN == "TRUE")) ? 1'd0 : 1'd1;  
assign SYNC_RXDLYBYPASS      = !gen3_reg2 || (PCIE_RXBUF_EN == "TRUE");
assign SYNC_RXDLYSRESET      = (fsm_rx == FSM_RXSYNC_START);
assign SYNC_RXPHALIGN        = PCIE_RXSYNC_MODE ? 1'd0 : (!SYNC_SLAVE ? (fsm_rx == FSM_RXSYNC_DONE1) : (rxsync_donem_reg2 && (fsm_rx == FSM_RXSYNC_DONE1)));
assign SYNC_RXDLYEN          = PCIE_RXSYNC_MODE ? 1'd0 : rxdlyen;
assign SYNC_RXDDIEN          = gen3_reg2 && (PCIE_RXBUF_EN == "FALSE"); 
assign SYNC_RXSYNC_DONE      = rxsync_done;
assign SYNC_RXSYNC_DONEM_OUT = (fsm_rx == FSM_RXSYNC_DONES);
assign SYNC_FSM_RX	         = fsm_rx;  



endmodule
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pipe_user.v
// Version    : 4.0
//----------------------------------------------------------------------------//
//  Filename     :  rp_pipe_user.v
//  Description  :  PIPE User Module for 7 Series Transceiver
//  Version      :  15.3.3
//------------------------------------------------------------------------------



`timescale 1ns / 1ps



//---------- PIPE User Module --------------------------------------------------
module rp_pipe_user #
(

    parameter PCIE_SIM_MODE    = "FALSE",                   // PCIe sim mode 
    parameter PCIE_USE_MODE    = "3.0",                     // PCIe sim version
    parameter PCIE_OOBCLK_MODE = 1,                         // PCIe OOB clock mode
    parameter RXCDRLOCK_MAX    = 4'd15,                     // RXCDRLOCK max count
    parameter RXVALID_MAX      = 4'd15,                     // RXVALID max count
    parameter CONVERGE_MAX     = 22'd3125000                // Convergence max count
    
)

(

    //---------- Input -------------------------------------
    input               USER_TXUSRCLK,
    input               USER_RXUSRCLK,
    input               USER_OOBCLK_IN,
    input               USER_RST_N,
    input               USER_RXUSRCLK_RST_N,
    input               USER_PCLK_SEL,
    input               USER_RESETOVRD_START,
    input               USER_TXRESETDONE,
    input               USER_RXRESETDONE,
    input               USER_TXELECIDLE,
    input               USER_TXCOMPLIANCE,
    input               USER_RXCDRLOCK_IN,
    input               USER_RXVALID_IN,
    input               USER_RXSTATUS_IN,
    input               USER_PHYSTATUS_IN,
    input               USER_RATE_DONE, 
    input               USER_RST_IDLE,
    input               USER_RATE_RXSYNC,
    input               USER_RATE_IDLE,
    input               USER_RATE_GEN3,
    input               USER_RXEQ_ADAPT_DONE,
    
    //---------- Output ------------------------------------
    output              USER_OOBCLK,
    output              USER_RESETOVRD,
    output              USER_TXPMARESET,                            
    output              USER_RXPMARESET,                           
    output              USER_RXCDRRESET,               
    output              USER_RXCDRFREQRESET,           
    output              USER_RXDFELPMRESET,            
    output              USER_EYESCANRESET,             
    output              USER_TXPCSRESET,                              
    output              USER_RXPCSRESET,                            
    output              USER_RXBUFRESET,   
    output              USER_RESETOVRD_DONE,            
    output              USER_RESETDONE,
    output              USER_ACTIVE_LANE,
    output              USER_RXCDRLOCK_OUT,
    output              USER_RXVALID_OUT,
    output              USER_PHYSTATUS_OUT,
    output              USER_PHYSTATUS_RST,
    output              USER_GEN3_RDY,
    output              USER_RX_CONVERGE 

);
    
    //---------- Input Registers ---------------------------   
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 pclk_sel_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 resetovrd_start_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txresetdone_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxresetdone_reg1; 
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txelecidle_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txcompliance_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxcdrlock_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxvalid_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxstatus_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rate_done_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rst_idle_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rate_rxsync_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rate_idle_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rate_gen3_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxeq_adapt_done_reg1;

(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 pclk_sel_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 resetovrd_start_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txresetdone_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxresetdone_reg2; 
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txelecidle_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 txcompliance_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)	  reg	              rxcdrlock_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxvalid_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxstatus_reg2; 
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rate_done_reg2;   
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rst_idle_reg2; 
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rate_rxsync_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rate_idle_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rate_gen3_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rxeq_adapt_done_reg2;
    
    //---------- Internal Signal ---------------------------
    reg         [ 1:0]  oobclk_cnt    =  2'd0;
    reg         [ 7:0]  reset_cnt     =  8'd127;
    reg         [ 3:0]  rxcdrlock_cnt =  4'd0;
    reg         [ 3:0]  rxvalid_cnt   =  4'd0;
    reg         [21:0]  converge_cnt  = 22'd0;
    reg                 converge_gen3 =  1'd0;
    
    //---------- Output Registers --------------------------
    reg                 oobclk   = 1'd0;
    reg         [ 7:0]  reset    = 8'h00;
    reg                 gen3_rdy = 1'd0;
    reg         [ 1:0]  fsm      = 2'd0;
    
    //---------- FSM ---------------------------------------                                         
    localparam          FSM_IDLE       = 2'd0; 
    localparam          FSM_RESETOVRD  = 2'd1;
    localparam          FSM_RESET_INIT = 2'd2;
    localparam          FSM_RESET      = 2'd3;    
    
    //---------- Simulation Speedup ------------------------
    localparam converge_max_cnt = (PCIE_SIM_MODE == "TRUE") ? 22'd100 : CONVERGE_MAX;                                                              



//---------- Input FF ----------------------------------------------------------
always @ (posedge USER_TXUSRCLK)
begin

    if (!USER_RST_N)
        begin    
        //---------- 1st Stage FF --------------------------  
        pclk_sel_reg1        <= 1'd0; 
        resetovrd_start_reg1 <= 1'd0;
        txresetdone_reg1     <= 1'd0;
        rxresetdone_reg1     <= 1'd0; 
        txelecidle_reg1      <= 1'd0;
        txcompliance_reg1    <= 1'd0;
        rxcdrlock_reg1 	     <= 1'd0;
        rxeq_adapt_done_reg1 <= 1'd0;
        //---------- 2nd Stage FF --------------------------
        pclk_sel_reg2        <= 1'd0;
        resetovrd_start_reg2 <= 1'd0;
        txresetdone_reg2     <= 1'd0;
        rxresetdone_reg2     <= 1'd0; 
        txelecidle_reg2      <= 1'd0;
        txcompliance_reg2    <= 1'd0;
        rxcdrlock_reg2 	     <= 1'd0;
        rxeq_adapt_done_reg2 <= 1'd0;
        end
    else
        begin  
        //---------- 1st Stage FF --------------------------
        pclk_sel_reg1        <= USER_PCLK_SEL;
        resetovrd_start_reg1 <= USER_RESETOVRD_START;
        txresetdone_reg1     <= USER_TXRESETDONE;
        rxresetdone_reg1     <= USER_RXRESETDONE;
        txelecidle_reg1      <= USER_TXELECIDLE;
        txcompliance_reg1    <= USER_TXCOMPLIANCE;
        rxcdrlock_reg1 	     <= USER_RXCDRLOCK_IN;
        rxeq_adapt_done_reg1 <= USER_RXEQ_ADAPT_DONE;
        //---------- 2nd Stage FF --------------------------
        pclk_sel_reg2        <= pclk_sel_reg1;
        resetovrd_start_reg2 <= resetovrd_start_reg1;
        txresetdone_reg2     <= txresetdone_reg1;      
        rxresetdone_reg2     <= rxresetdone_reg1;      
        txelecidle_reg2      <= txelecidle_reg1;       
        txcompliance_reg2    <= txcompliance_reg1;  
        rxcdrlock_reg2 	     <= rxcdrlock_reg1;  
        rxeq_adapt_done_reg2 <= rxeq_adapt_done_reg1;
        end
        
end 



//---------- Input FF ----------------------------------------------------------
always @ (posedge USER_RXUSRCLK)
begin

    if (!USER_RXUSRCLK_RST_N)
        begin    
        //---------- 1st Stage FF --------------------------   
        rxvalid_reg1     <= 1'd0;
        rxstatus_reg1    <= 1'd0;
        rst_idle_reg1    <= 1'd0; 
        rate_done_reg1   <= 1'd0;
        rate_rxsync_reg1 <= 1'd0;
        rate_idle_reg1   <= 1'd0;
        rate_gen3_reg1   <= 1'd0;
        //---------- 2nd Stage FF --------------------------
        rxvalid_reg2     <= 1'd0;
        rxstatus_reg2    <= 1'd0;
        rst_idle_reg2    <= 1'd0; 
        rate_done_reg2   <= 1'd0;
        rate_rxsync_reg2 <= 1'd0;
        rate_idle_reg2   <= 1'd0;
        rate_gen3_reg2   <= 1'd0;
        end
    else
        begin  
        //---------- 1st Stage FF --------------------------
        rxvalid_reg1     <= USER_RXVALID_IN;
        rxstatus_reg1    <= USER_RXSTATUS_IN;
        rst_idle_reg1    <= USER_RST_IDLE; 
        rate_done_reg1   <= USER_RATE_DONE;
        rate_rxsync_reg1 <= USER_RATE_RXSYNC;
        rate_idle_reg1   <= USER_RATE_IDLE;
        rate_gen3_reg1   <= USER_RATE_GEN3;
        //---------- 2nd Stage FF --------------------------  	   
        rxvalid_reg2     <= rxvalid_reg1;            
        rxstatus_reg2    <= rxstatus_reg1; 
        rst_idle_reg2    <= rst_idle_reg1;
        rate_done_reg2   <= rate_done_reg1;  
        rate_rxsync_reg2 <= rate_rxsync_reg1;
        rate_idle_reg2   <= rate_idle_reg1;
        rate_gen3_reg2   <= rate_gen3_reg1;      
        end
        
end 



//---------- Generate Reset Override -------------------------------------------
generate if (PCIE_USE_MODE == "1.0") 

    begin : resetovrd

    //---------- Reset Counter -------------------------------------------------
    always @ (posedge USER_TXUSRCLK)
    begin
    
        if (!USER_RST_N)
            reset_cnt <= 8'd127;
        else
        
            //---------- Decrement Counter ---------------------
            if (((fsm == FSM_RESETOVRD) || (fsm == FSM_RESET)) && (reset_cnt != 8'd0))
                reset_cnt <= reset_cnt - 8'd1;
                
            //---------- Reset Counter -------------------------
            else 
            
                case (reset) 
                8'b00000000 : reset_cnt <= 8'd127;              // Programmable PMARESET       time
                8'b11111111 : reset_cnt <= 8'd127;              // Programmable RXCDRRESET     time
                8'b11111110 : reset_cnt <= 8'd127;              // Programmable RXCDRFREQRESET time
                8'b11111100 : reset_cnt <= 8'd127;              // Programmable RXDFELPMRESET  time
                8'b11111000 : reset_cnt <= 8'd127;              // Programmable EYESCANRESET   time
                8'b11110000 : reset_cnt <= 8'd127;              // Programmable PCSRESET       time
                8'b11100000 : reset_cnt <= 8'd127;              // Programmable RXBUFRESET     time
                8'b11000000 : reset_cnt <= 8'd127;              // Programmable RESETOVRD deassertion time
                8'b10000000 : reset_cnt <= 8'd127;
                default     : reset_cnt <= 8'd127; 
                endcase
                
    end 
    
    
    
    //---------- Reset Shift Register ------------------------------------------
    always @ (posedge USER_TXUSRCLK)
    begin
    
        if (!USER_RST_N)
            reset <= 8'h00;
        else
        
            //---------- Initialize Reset Register ---------
            if (fsm == FSM_RESET_INIT)
                reset <= 8'hFF;   
            //---------- Shift Reset Register --------------
            else if ((fsm == FSM_RESET) && (reset_cnt == 8'd0))
                reset <= {reset[6:0], 1'd0};        
            //---------- Hold Reset Register ---------------
            else
                reset <= reset;
            
    end
         
            
    
    //---------- Reset Override FSM --------------------------------------------
    always @ (posedge USER_TXUSRCLK)
    begin
    
        if (!USER_RST_N)
            fsm <= FSM_IDLE;     
                           
        else
        
            begin
            
            case (fsm)
            //---------- Idle State ------------------------
            FSM_IDLE       : fsm <= resetovrd_start_reg2 ? FSM_RESETOVRD : FSM_IDLE;
            //---------- Assert RESETOVRD ------------------
            FSM_RESETOVRD  : fsm <= (reset_cnt == 8'd0) ? FSM_RESET_INIT : FSM_RESETOVRD;
            //---------- Initialize Reset ------------------
            FSM_RESET_INIT : fsm <= FSM_RESET;
            //---------- Shift Reset -----------------------
            FSM_RESET      : fsm <= ((reset == 8'd0) && rxresetdone_reg2) ? FSM_IDLE : FSM_RESET;  
            //---------- Default State ---------------------
            default        : fsm <= FSM_IDLE;
        	  endcase
            
            end
    
    end
    
    end 

//---------- Disable Reset Override --------------------------------------------
else 

    begin : resetovrd_disble

    //---------- Generate Default Signals --------------------------------------
    always @ (posedge USER_TXUSRCLK)
    begin    
    
       if (!USER_RST_N)
           begin   
           reset_cnt <= 8'hFF;
           reset     <= 8'd0;
           fsm       <= 2'd0; 
           end
       else
           begin   
           reset_cnt <= 8'hFF;
           reset     <= 8'd0;
           fsm       <= 2'd0; 
           end
        
    end

    end

endgenerate



//---------- Generate OOB Clock Divider ------------------------
generate if (PCIE_OOBCLK_MODE == 1) 

    begin : oobclk_div
    
    //---------- OOB Clock Divider -----------------------------
    always @ (posedge USER_OOBCLK_IN)
    begin
    
        if (!USER_RST_N)
            begin
            oobclk_cnt <= 2'd0;
            oobclk     <= 1'd0;
            end
        else
            begin
            oobclk_cnt <= oobclk_cnt + 2'd1;
            oobclk     <= pclk_sel_reg2 ? oobclk_cnt[1] : oobclk_cnt[0];
            end
            
    end 
    
    end
   
else

    begin : oobclk_div_disable
    
    //---------- OOB Clock Default -------------------------
    always @ (posedge USER_OOBCLK_IN)
    begin
    
        if (!USER_RST_N)
            begin
            oobclk_cnt <= 2'd0;
            oobclk     <= 1'd0;
            end
        else
            begin
            oobclk_cnt <= 2'd0;
            oobclk     <= 1'd0;
            end
            
    end 
    
    end   
   
endgenerate

//---------- RXCDRLOCK Filter --------------------------------------------------
always @ (posedge USER_TXUSRCLK)
begin

    if (!USER_RST_N)
        rxcdrlock_cnt <= 4'd0;
    else
    
        //---------- Increment RXCDRLOCK Counter -----------
        if (rxcdrlock_reg2 && (rxcdrlock_cnt != RXCDRLOCK_MAX))
            rxcdrlock_cnt <= rxcdrlock_cnt + 4'd1;
            
        //---------- Hold RXCDRLOCK Counter ----------------
        else if (rxcdrlock_reg2 && (rxcdrlock_cnt == RXCDRLOCK_MAX))
            rxcdrlock_cnt <= rxcdrlock_cnt;
            
        //---------- Reset RXCDRLOCK Counter ---------------
        else
            rxcdrlock_cnt <= 4'd0;
        
end 



//---------- RXVALID Filter ----------------------------------------------------
always @ (posedge USER_RXUSRCLK)
begin

    if (!USER_RXUSRCLK_RST_N)
        rxvalid_cnt <= 4'd0;
    else
    
        //---------- Increment RXVALID Counter -------------
        if (rxvalid_reg2 && (rxvalid_cnt != RXVALID_MAX) && (!rxstatus_reg2))
            rxvalid_cnt <= rxvalid_cnt + 4'd1;
            
        //---------- Hold RXVALID Counter ------------------
        else if (rxvalid_reg2 && (rxvalid_cnt == RXVALID_MAX))
            rxvalid_cnt <= rxvalid_cnt;
            
        //---------- Reset RXVALID Counter -----------------
        else
            rxvalid_cnt <= 4'd0;
        
end 



//---------- Converge Counter --------------------------------------------------
always @ (posedge USER_TXUSRCLK)
begin

    if (!USER_RST_N)
        converge_cnt <= 22'd0;
    else
    
        //---------- Enter Gen1/Gen2 -----------------------
        if (rst_idle_reg2 && rate_idle_reg2 && !rate_gen3_reg2)
            begin
            
            //---------- Increment Converge Counter --------
            if (converge_cnt < converge_max_cnt) 
                converge_cnt <= converge_cnt + 22'd1;
            //---------- Hold Converge Counter -------------
            else 
                converge_cnt <= converge_cnt;
                
            end
            
        //---------- Reset Converge Counter ----------------
        else
            converge_cnt <= 22'd0;
        
end 



//---------- Converge ----------------------------------------------------------
always @ (posedge USER_TXUSRCLK)
begin

    if (!USER_RST_N)
        converge_gen3 <= 1'd0;
    else
    
        //---------- Enter Gen3 ----------------------------
        if (rate_gen3_reg2)
        
            //---------- Wait for RX equalization adapt done 
            if (rxeq_adapt_done_reg2)
                converge_gen3 <= 1'd1;
            else
                converge_gen3 <= converge_gen3;
        
        //-------- Exit Gen3 -------------------------------
        else
        
            converge_gen3 <= 1'd0;
        
        
end 



//---------- GEN3_RDY Generator ------------------------------------------------
always @ (posedge USER_RXUSRCLK)
begin

    if (!USER_RXUSRCLK_RST_N)
        gen3_rdy <= 1'd0;
    else   
        gen3_rdy <= rate_idle_reg2 && rate_gen3_reg2;    
        
end 



//---------- PIPE User Override Reset Output -----------------------------------  
assign USER_RESETOVRD      = (fsm != FSM_IDLE);
assign USER_TXPMARESET     = 1'd0; 
assign USER_RXPMARESET     = reset[0];  
assign USER_RXCDRRESET     = reset[1];
assign USER_RXCDRFREQRESET = reset[2];
assign USER_RXDFELPMRESET  = reset[3];
assign USER_EYESCANRESET   = reset[4];
assign USER_TXPCSRESET     = 1'd0;  
assign USER_RXPCSRESET     = reset[5];  
assign USER_RXBUFRESET     = reset[6];  
assign USER_RESETOVRD_DONE = (fsm == FSM_IDLE);

//---------- PIPE User Output --------------------------------------------------
assign USER_OOBCLK         = oobclk; 
assign USER_RESETDONE      = (txresetdone_reg2 && rxresetdone_reg2);
assign USER_ACTIVE_LANE    = !(txelecidle_reg2 && txcompliance_reg2);
//----------------------------------------------------------
assign USER_RXCDRLOCK_OUT  = (USER_RXCDRLOCK_IN && (rxcdrlock_cnt == RXCDRLOCK_MAX));        // Filtered RXCDRLOCK
//----------------------------------------------------------
assign USER_RXVALID_OUT    = ((USER_RXVALID_IN  && (rxvalid_cnt == RXVALID_MAX)) &&          // Filtered RXVALID
                              rst_idle_reg2                                      &&          // Force RXVALID = 0 during reset
                              rate_idle_reg2);                                               // Force RXVALID = 0 during rate change
//----------------------------------------------------------
assign USER_PHYSTATUS_OUT  = (!rst_idle_reg2                                              || // Force PHYSTATUS = 1 during reset
                              ((rate_idle_reg2 || rate_rxsync_reg2) && USER_PHYSTATUS_IN) || // Raw PHYSTATUS
                              rate_done_reg2);                                               // Gated PHYSTATUS for rate change
//----------------------------------------------------------
assign USER_PHYSTATUS_RST  = !rst_idle_reg2;                                                 // Filtered PHYSTATUS for reset
//----------------------------------------------------------
assign USER_GEN3_RDY       = gen3_rdy;                                                      
//----------------------------------------------------------
assign USER_RX_CONVERGE    = (converge_cnt == converge_max_cnt) || converge_gen3;   



endmodule
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_pipe_wrapper.v
// Version    : 4.0
//----------------------------------------------------------------------------//
//  Filename     :  rp_pipe_wrapper.v
//  Description  :  PIPE Wrapper for 7 Series Transceiver
//  Version      :  20.2
//------------------------------------------------------------------------------

//---------- PIPE Wrapper Hierarchy --------------------------------------------
//  pipe_wrapper.v 
//      pipe_clock.v
//      pipe_reset.v or gtp_pipe_reset.v
//      qpll_reset.v
//          * Generate GTXE2_CHANNEL for every lane.
//              pipe_user.v
//              pipe_rate.v or gtp_pipe_rate.v
//              pipe_sync.v 
//              pipe_drp.v or gtp_pipe_drp.v
//              pipe_eq.v
//                  rxeq_scan.v
//              gt_wrapper.v
//                  GTXE2_CHANNEL or GTHE2_CHANNEL or GTPE2_CHANNEL
//                  GTXE2_COMMON  or GTHE2_COMMON or GTPE2_CHANNEL
//          * Generate GTXE2_COMMON for every quad.
//              qpll_drp.v
//              qpll_wrapper.v
//------------------------------------------------------------------------------

//---------- PIPE Wrapper Parameter Encoding -----------------------------------
//  PCIE_SIM_MODE                 : "FALSE" = Normal mode (default)
//                                : "TRUE"  = Simulation only
//  PCIE_SIM_TX_EIDLE_DRIVE_LEVEL : "0", "1" (default), "X" simulation TX electrical idle drive level 
//  PCIE_GT_DEVICE                : "GTX" (default)
//                                : "GTH"
//                                : "GTP"
//  PCIE_USE_MODE                 : "1.0" = GTX IES 325T or GTP IES/GES use mode.
//                                : "1.1" = GTX IES 485T use mode.
//                                : "2.0" = GTH IES 690T use mode for 1.0 silicon.
//                                : "2.1" = GTH GES 690T use mode for 1.2 and 2.0 silicon.  SW model use "2.0"
//                                : "3.0" = GTX GES 325T or 485T use mode (default).
//  PCIE_PLL_SEL                  : "CPLL" (default)
//                                : "QPLL"
//  PCIE_AUX_CDR_GEN3_EN          : "FALSE" Use Primary CDR for Gen3 only (GTH 2.0) 
//                                : "TRUE"  Use AUX CDR for Gen3 only (default) (GTH 2.0)
//  PCIE_LPM_DFE                  : "DFE" for Gen1/Gen2 only (GTX, GTH)
//                                : "LPM" for Gen1/Gen2 only (default) (GTX, GTH)
//  PCIE_LPM_DFE_GEN3             : "DFE" for Gen3 only (GTX, GTH)
//                                : "LPM" for Gen3 only (default) (GTX, GTH)
//  PCIE_EXT_CLK                  : "FALSE" = Use internal clock module(default)
//                                : "TRUE"  = Use external clock module
//  PCIE_POWER_SAVING             : "FALSE" = Disable PLL power saving
//                                : "TRUE"  = Enable PLL power saving (default)
//  PCIE_ASYNC_EN                 : "FALSE" = Synchronous  mode (default)
//                                : "TRUE"  = Asynchronous mode.
//  PCIE_TXBUF_EN                 : "FALSE" = TX buffer bypass for Gen1/Gen2 only (default)
//                                : "TRUE"  = TX buffer use    for Gen1/Gen2 only (for debug only)
//  PCIE_RXBUF_EN                 : "FALSE" = RX buffer bypass for Gen3      only (not supported)
//                                : "TRUE"  = RX buffer use    for Gen3      only (default)
//  PCIE_TXSYNC_MODE              : 0 = Manual TX sync (default) (GTX, GTH)
//                                : 1 = Auto TX sync (GTH)
//  PCIE_RXSYNC_MODE              : 0 = Manual RX sync (default) (GTX, GTH)
//                                : 1 = Auto RX sync (GTH)
//  PCIE_CHAN_BOND                : 0 = One-Hop (default)
//                                : 1 = Daisy-Chain
//                                : 2 = Binary-Tree
//  PCIE_CHAN_BOND_EN             : "FALSE" = Channel bonding disable for Gen1/Gen2 only
//                                : "TRUE"  = Channel bonding enable  for Gen1/Gen2 only
//  PCIE_LANE                     : 1 (default), 2, 4, or 8
//  PCIE_LINK_SPEED               : 1 = PCIe Gen1           Mode
//                                : 2 = PCIe Gen1/Gen2      Mode (default)
//                                : 3 = PCIe Gen1/Gen2/Gen3 Mode
//  PCIE_REFCLK_FREQ              : 0 = 100 MHz (default)
//                                : 1 = 125 MHz
//                                : 2 = 250 MHz
//  PCIE_USERCLK[1/2]_FREQ        : 0 = Disable user clock
//                                : 1 =  31.25 MHz
//                                : 2 =  62.50 MHz (default)
//                                : 3 = 125.00 MHz
//                                : 4 = 250.00 MHz
//                                : 5 = 500.00 MHz
//  PCIE_TX_EIDLE_ASSERT_DELAY    : 3'd0 to 3'd7 (default = 3'd4)
//  PCIE_RXEQ_MODE_GEN3           : 0 = Return same TX coefficients 
//                                : 1 = Return TX preset #5
//  PCIE_OOBCLK_MODE              : 0 = Reference clock
//                                : 1 =  62.50 MHz (default)
//                                : 2 =  50.00 MHz (requires 1 BUFG)
//  PCIE_JTAG_MODE                : 0 = Normal operation (default)
//                                : 1 = JTAG mode (for debug only)
//  PCIE_DEBUG_MODE               : 0 = Normal operation (default)
//                                : 1 = Debug mode (for debug only)
//------------------------------------------------------------------------------

//---------- Notes -------------------------------------------------------------
//  Notes within the PIPE Wrapper RTL files are for internal use only.
//  Data Width : This PIPE Wrapper supports a 32-bit [TX/RX]DATA interface.  
//               In Gen1/Gen2 modes, only 16-bits [15:0] are used.
//               In Gen3 mode, all 32-bits are used.
//------------------------------------------------------------------------------



`timescale 1ns / 1ps



//---------- PIPE Wrapper ------------------------------------------------------
module rp_pipe_wrapper #
(

    parameter PCIE_SIM_MODE                 = "FALSE",      // PCIe sim mode 
    parameter PCIE_SIM_SPEEDUP              = "FALSE",      // PCIe sim speedup
    parameter PCIE_AUX_CDR_GEN3_EN          = "TRUE",       // PCIe AUX CDR for Gen3 (GTH 2.0) only
    parameter PCIE_ASYNC_EN                 = "TRUE",      // PCIe async enable
    parameter PCIE_EXT_CLK                  = "FALSE",  // PCIe external clock
    parameter PCIE_EXT_GT_COMMON            = "FALSE", // PCIe external GT COMMON
    parameter PCIE_TXBUF_EN                 = "FALSE",      // PCIe TX buffer enable for Gen1/Gen2 only
    parameter PCIE_GT_DEVICE                = "GTH",        // PCIe GT device
    parameter PCIE_CHAN_BOND                = 0,            // PCIe channel bonding mode
    parameter PCIE_CHAN_BOND_EN             = "FALSE",      // PCIe channel bonding enable for Gen1/Gen2 only
    parameter PCIE_USE_MODE                 = "2.1",        // PCIe use mode
    parameter PCIE_LPM_DFE                  = "LPM",        // PCIe LPM or DFE mode for Gen1/Gen2 only
    parameter PCIE_LINK_SPEED               = 3,            // PCIe link speed 
    parameter PCIE_LANE                     = 8,   // PCIe number of lanes
    parameter PCIE_REFCLK_FREQ              = 0,   // PCIe reference clock frequency
    parameter TX_MARGIN_FULL_0              = 7'b1001111,   // 1000 mV
    parameter TX_MARGIN_FULL_1              = 7'b1001110,   // 950 mV
    parameter TX_MARGIN_FULL_2              = 7'b1001101,   // 900 mV
    parameter TX_MARGIN_FULL_3              = 7'b1001100,   // 850 mV
    parameter TX_MARGIN_FULL_4              = 7'b1000011,   // 400 mV
    parameter TX_MARGIN_LOW_0               = 7'b1000101,   // 500 mV
    parameter TX_MARGIN_LOW_1               = 7'b1000110 ,  // 450 mV
    parameter TX_MARGIN_LOW_2               = 7'b1000011,   // 400 mV
    parameter TX_MARGIN_LOW_3               = 7'b1000010 ,  // 350 mV
    parameter TX_MARGIN_LOW_4               = 7'b1000000 ,
    parameter PCIE_USERCLK1_FREQ            = 5,            // PCIe user clock 1 frequency
    parameter PCIE_USERCLK2_FREQ            = 4,            // PCIe user clock 2 frequency

    parameter PCIE_SIM_TX_EIDLE_DRIVE_LEVEL = "1",          // PCIe sim TX electrical idle drive level
    parameter PCIE_PLL_SEL                  = "CPLL",       // PCIe PLL select for Gen1/Gen2 (GTX/GTH) only
    parameter PCIE_LPM_DFE_GEN3             = "DFE",        // PCIe LPM or DFE mode for Gen3      only
    parameter EXT_CH_GT_DRP                 = "FALSE",      // PCIe external CH DRP
    parameter PCIE_POWER_SAVING             = "TRUE",       // PCIe power saving
    parameter PCIE_RXBUF_EN                 = "TRUE",       // PCIe RX buffer enable for Gen3      only
    parameter PCIE_TXSYNC_MODE              = 0,            // PCIe TX sync mode
    parameter PCIE_RXSYNC_MODE              = 0,            // PCIe RX sync mode
    parameter PCIE_TX_EIDLE_ASSERT_DELAY    = 3'd4,         // PCIe TX electrical idle assert delay
    parameter PCIE_RXEQ_MODE_GEN3           = 1,            // PCIe RX equalization mode
    parameter PCIE_OOBCLK_MODE              = 1,            // PCIe OOB clock mode
    parameter PCIE_JTAG_MODE                = 0,            // PCIe JTAG mode
    parameter PCIE_DEBUG_MODE               = 0             // PCIe debug mode 

)
                                                            //--------------------------------------
(                                                           // Gen1/Gen2  | Gen3
                                                            //--------------------------------------
    //---------- PIPE Clock & Reset Ports ------------------
    input                           PIPE_CLK,               // Reference clock that drives MMCM
    input                           PIPE_RESET_N,           // PCLK       | PCLK

    output                          PIPE_PCLK,              // Drives [TX/RX]USRCLK in Gen1/Gen2
                                                            // Drives TXUSRCLK in Gen3
                                                            // Drives RXUSRCLK in Gen3 async mode only
    //---------- PIPE TX Data Ports ------------------------
    input       [(PCIE_LANE*32)-1:0]PIPE_TXDATA,            // PCLK       | PCLK
    input       [(PCIE_LANE*4)-1:0] PIPE_TXDATAK,           // PCLK       | PCLK

    output      [PCIE_LANE-1:0]     PIPE_TXP,               // Serial data
    output      [PCIE_LANE-1:0]     PIPE_TXN,               // Serial data

    //---------- PIPE RX Data Ports ------------------------
    input       [PCIE_LANE-1:0]     PIPE_RXP,               // Serial data
    input       [PCIE_LANE-1:0]     PIPE_RXN,               // Serial data

    output      [(PCIE_LANE*32)-1:0]PIPE_RXDATA,            // PCLK       | RXUSRCLK
    output      [(PCIE_LANE*4)-1:0] PIPE_RXDATAK,           // PCLK       | RXUSRCLK

    //---------- PIPE Command Ports ------------------------
    input                           PIPE_TXDETECTRX,        // PCLK       | PCLK
    input       [PCIE_LANE-1:0]     PIPE_TXELECIDLE,        // PCLK       | PCLK
    input       [PCIE_LANE-1:0]     PIPE_TXCOMPLIANCE,      // PCLK       | PCLK
    input       [PCIE_LANE-1:0]     PIPE_RXPOLARITY,        // PCLK       | RXUSRCLK
    input       [(PCIE_LANE*2)-1:0] PIPE_POWERDOWN,         // PCLK       | PCLK
    input       [ 1:0]              PIPE_RATE,              // PCLK       | PCLK

    //---------- PIPE Electrical Command Ports -------------
    input       [ 2:0]              PIPE_TXMARGIN,          // Async      | Async
    input                           PIPE_TXSWING,           // Async      | Async
    input       [PCIE_LANE-1:0]     PIPE_TXDEEMPH,          // Async/PCLK | Async/PCLK
    input       [(PCIE_LANE*2)-1:0] PIPE_TXEQ_CONTROL,      // PCLK       | PCLK
    input       [(PCIE_LANE*4)-1:0] PIPE_TXEQ_PRESET,       // PCLK       | PCLK
    input       [(PCIE_LANE*4)-1:0] PIPE_TXEQ_PRESET_DEFAULT,// PCLK      | PCLK
    input       [(PCIE_LANE*6)-1:0] PIPE_TXEQ_DEEMPH,       // PCLK       | PCLK

    input       [(PCIE_LANE*2)-1:0] PIPE_RXEQ_CONTROL,      // PCLK       | PCLK
    input       [(PCIE_LANE*3)-1:0] PIPE_RXEQ_PRESET,       // PCLK       | PCLK
    input       [(PCIE_LANE*6)-1:0] PIPE_RXEQ_LFFS,         // PCLK       | PCLK
    input       [(PCIE_LANE*4)-1:0] PIPE_RXEQ_TXPRESET,     // PCLK       | PCLK
    input       [PCIE_LANE-1:0]     PIPE_RXEQ_USER_EN,      // PCLK       | PCLK
    input       [(PCIE_LANE*18)-1:0]PIPE_RXEQ_USER_TXCOEFF, // PCLK       | PCLK
    input       [PCIE_LANE-1:0]     PIPE_RXEQ_USER_MODE,    // PCLK       | PCLK

    output      [ 5:0]              PIPE_TXEQ_FS,           // Async      | Async
    output      [ 5:0]              PIPE_TXEQ_LF,           // Async      | Async
    output      [(PCIE_LANE*18)-1:0]PIPE_TXEQ_COEFF,        // PCLK       | PCLK
    output      [PCIE_LANE-1:0]     PIPE_TXEQ_DONE,         // PCLK       | PCLK

    output      [(PCIE_LANE*18)-1:0]PIPE_RXEQ_NEW_TXCOEFF,  // PCLK       | PCLK
    output      [PCIE_LANE-1:0]     PIPE_RXEQ_LFFS_SEL,     // PCLK       | PCLK
    output      [PCIE_LANE-1:0]     PIPE_RXEQ_ADAPT_DONE,   // PCLK       | PCLK
    output      [PCIE_LANE-1:0]     PIPE_RXEQ_DONE,         // PCLK       | PCLK
    output      [PCIE_LANE-1:0]     PIPE_RXEQ_CONVERGE,     // PCLK       | PCLK

    //---------- PIPE Status Ports -------------------------
    output      [PCIE_LANE-1:0]     PIPE_RXVALID,           // PCLK       | RXUSRCLK
    output      [PCIE_LANE-1:0]     PIPE_PHYSTATUS,         // PCLK       | RXUSRCLK
    output      [PCIE_LANE-1:0]     PIPE_PHYSTATUS_RST,     // PCLK       | RXUSRCLK
    output      [PCIE_LANE-1:0]     PIPE_RXELECIDLE,        // Async      | Async
    output      [PCIE_LANE-1:0]     PIPE_EYESCANDATAERROR,  // Async      | Async
    output      [(PCIE_LANE*3)-1:0] PIPE_RXSTATUS,          // PCLK       | RXUSRCLK
    output      [PCIE_LANE-1:0]     PIPE_RXPMARESETDONE,    // Async      | Async
    output      [(PCIE_LANE*3)-1:0] PIPE_RXBUFSTATUS,       // PCLK       | RXUSRCLK
    output      [PCIE_LANE-1:0]     PIPE_TXPHALIGNDONE,     // Async      | Async
    output      [PCIE_LANE-1:0]     PIPE_TXPHINITDONE,      // Async      | Async
    output      [PCIE_LANE-1:0]     PIPE_TXDLYSRESETDONE,   // Async      | Async
    output      [PCIE_LANE-1:0]     PIPE_RXPHALIGNDONE,     // Async      | Async
    output      [PCIE_LANE-1:0]     PIPE_RXDLYSRESETDONE,   // Async      | Async
    output      [PCIE_LANE-1:0]     PIPE_RXSYNCDONE,        // PCLK       | RXUSRCLK
    output      [(PCIE_LANE*8)-1:0] PIPE_RXDISPERR,         // PCLK       | RXUSRCLK
    output      [(PCIE_LANE*8)-1:0] PIPE_RXNOTINTABLE,      // PCLK       | RXUSRCLK
    output      [PCIE_LANE-1:0]     PIPE_RXCOMMADET,        // PCLK       | RXUSRCLK

    //---------- PIPE User Ports ---------------------------
    input                           PIPE_MMCM_RST_N,        // Async      | Async
    input       [PCIE_LANE-1:0]     PIPE_RXSLIDE,           // PCLK       | RXUSRCLK

    output      [PCIE_LANE-1:0]     PIPE_CPLL_LOCK,         // Async      | Async
    output      [(PCIE_LANE-1)>>2:0]PIPE_QPLL_LOCK,         // Async      | Async
    output                          PIPE_PCLK_LOCK,         // Async      | Async
    output      [PCIE_LANE-1:0]     PIPE_RXCDRLOCK,         // Async      | Async
    output                          PIPE_USERCLK1,          // Optional user clock
    output                          PIPE_USERCLK2,          // Optional user clock
    output                          PIPE_RXUSRCLK,          // RXUSRCLK
                                                            // Equivalent to PCLK in Gen1/Gen2
                                                            // Equivalent to RXOUTCLK[0] in Gen3
    output      [PCIE_LANE-1:0]     PIPE_RXOUTCLK,          // RX recovered clock (for debug only)
    output      [PCIE_LANE-1:0]     PIPE_TXSYNC_DONE,       // PCLK       | PCLK
    output      [PCIE_LANE-1:0]     PIPE_RXSYNC_DONE,       // PCLK       | PCLK
    output      [PCIE_LANE-1:0]     PIPE_GEN3_RDY,          // PCLK       | RXUSRCLK
    output      [PCIE_LANE-1:0]     PIPE_RXCHANISALIGNED,
    output      [PCIE_LANE-1:0]     PIPE_ACTIVE_LANE,

// Shared Logic Internal
    output                          INT_PCLK_OUT_SLAVE,     // PCLK       | PCLK
    output                          INT_RXUSRCLK_OUT,       // RXUSERCLK
    output  [PCIE_LANE-1:0  ]       INT_RXOUTCLK_OUT,       // RX recovered clock
    output                          INT_DCLK_OUT,           // DCLK       | DCLK
    output                          INT_USERCLK1_OUT,       // Optional user clock
    output                          INT_USERCLK2_OUT,       // Optional user clock
    output                          INT_OOBCLK_OUT,         // OOB        | OOB
    output                          INT_MMCM_LOCK_OUT,      // Async      | Async
    output  [1:0]                   INT_QPLLLOCK_OUT,
    output  [1:0]                   INT_QPLLOUTCLK_OUT,
    output  [1:0]                   INT_QPLLOUTREFCLK_OUT,
    input   [PCIE_LANE-1:0]         INT_PCLK_SEL_SLAVE,

  // Shared Logic External

    //---------- External Clock Ports ----------------------
    input                           PIPE_PCLK_IN,           // PCLK       | PCLK
    input                           PIPE_RXUSRCLK_IN,       // RXUSERCLK
                                                            // Equivalent to PCLK in Gen1/Gen2
                                                            // Equivalent to RXOUTCLK[0] in Gen3
    input       [PCIE_LANE-1:0]     PIPE_RXOUTCLK_IN,       // RX recovered clock
    input                           PIPE_DCLK_IN,           // DCLK       | DCLK
    input                           PIPE_USERCLK1_IN,       // Optional user clock
    input                           PIPE_USERCLK2_IN,       // Optional user clock
    input                           PIPE_OOBCLK_IN,         // OOB        | OOB
    input                           PIPE_MMCM_LOCK_IN,      // Async      | Async

    output                          PIPE_TXOUTCLK_OUT,      // PCLK       | PCLK
    output      [PCIE_LANE-1:0]     PIPE_RXOUTCLK_OUT,      // RX recovered clock (for debug only)
    output      [PCIE_LANE-1:0]     PIPE_PCLK_SEL_OUT,      // PCLK       | PCLK
    output                          PIPE_GEN3_OUT,          // PCLK       | PCLK
    //---------- External GT COMMON Ports ----------------------
    input       [11:0]              QPLL_DRP_CRSCODE,
    input       [17:0]              QPLL_DRP_FSM,
    input       [1:0]               QPLL_DRP_DONE,
    input       [1:0]               QPLL_DRP_RESET,
    input       [1:0]               QPLL_QPLLLOCK,
    input       [1:0]               QPLL_QPLLOUTCLK,
    input       [1:0]               QPLL_QPLLOUTREFCLK,
    output              	        QPLL_QPLLPD,
    output      [1:0]               QPLL_QPLLRESET,
    output              	        QPLL_DRP_CLK,
    output              	        QPLL_DRP_RST_N,
    output              	        QPLL_DRP_OVRD,
    output              	        QPLL_DRP_GEN3,
    output              	        QPLL_DRP_START,
    //---------- TRANSCEIVER DEBUG -----------------------
    input       [ 2:0]              PIPE_TXPRBSSEL,         // PCLK       | PCLK
    input       [ 2:0]              PIPE_RXPRBSSEL,         // PCLK       | PCLK
    input                           PIPE_TXPRBSFORCEERR,    // PCLK       | PCLK
    input                           PIPE_RXPRBSCNTRESET,    // PCLK       | PCLK
    input       [ 2:0]              PIPE_LOOPBACK,          // PCLK       | PCLK
    output      [PCIE_LANE-1:0]     PIPE_RXPRBSERR,         // PCLK       | PCLK
    input      [PCIE_LANE-1:0]          PIPE_TXINHIBIT,         // PCLK       | PCLK
    output      [(PCIE_LANE*6)-1:0] PIPE_TXEQ_FSM,          // PCLK       | PCLK
    output      [(PCIE_LANE*6)-1:0] PIPE_RXEQ_FSM,          // PCLK       | PCLK
    output      [((((PCIE_LANE-1)>>2)+1)*9)-1:0]PIPE_QDRP_FSM, // DCLK    | DCLK

    output      [4:0]               PIPE_RST_FSM,           // PCLK       | PCLK
    output      [11:0]              PIPE_QRST_FSM,          // PCLK       | PCLK
    output      [(PCIE_LANE*5)-1:0] PIPE_RATE_FSM,          // PCLK       | PCLK
    output      [(PCIE_LANE*6)-1:0] PIPE_SYNC_FSM_TX,       // PCLK       | PCLK
    output      [(PCIE_LANE*7)-1:0] PIPE_SYNC_FSM_RX,       // PCLK       | PCLK
    output      [(PCIE_LANE*7)-1:0] PIPE_DRP_FSM,           // DCLK       | DCLK

    output                          PIPE_RST_IDLE,          // PCLK       | PCLK
    output                          PIPE_QRST_IDLE,         // PCLK       | PCLK
    output                          PIPE_RATE_IDLE,         // PCLK       | PCLK

    //----------- Channel DRP----------------------------
    output                           EXT_CH_GT_DRPCLK,
    input        [(PCIE_LANE*9)-1:0] EXT_CH_GT_DRPADDR,
    input        [PCIE_LANE-1:0]     EXT_CH_GT_DRPEN,
    input        [(PCIE_LANE*16)-1:0]EXT_CH_GT_DRPDI,
    input        [PCIE_LANE-1:0]     EXT_CH_GT_DRPWE,

    output       [(PCIE_LANE*16)-1:0]EXT_CH_GT_DRPDO,
    output       [PCIE_LANE-1:0]     EXT_CH_GT_DRPRDY,

    //---------- JTAG Ports --------------------------------
    input                           PIPE_JTAG_EN,           // DCLK       | DCLK
    output      [PCIE_LANE-1:0]     PIPE_JTAG_RDY,          // DCLK       | DCLK
    //---------- Debug Ports -------------------------------
    output      [PCIE_LANE-1:0]     PIPE_DEBUG_0,           // Async      | Async
    output      [PCIE_LANE-1:0]     PIPE_DEBUG_1,           // Async      | Async
    output      [PCIE_LANE-1:0]     PIPE_DEBUG_2,           // Async      | Async
    output      [PCIE_LANE-1:0]     PIPE_DEBUG_3,           // Async      | Async
    output      [PCIE_LANE-1:0]     PIPE_DEBUG_4,           // Async      | Async
    output      [PCIE_LANE-1:0]     PIPE_DEBUG_5,           // Async      | Async
    output      [PCIE_LANE-1:0]     PIPE_DEBUG_6,           // Async      | Async
    output      [PCIE_LANE-1:0]     PIPE_DEBUG_7,           // Async      | Async
    output      [PCIE_LANE-1:0]     PIPE_DEBUG_8,           // Async      | Async
    output      [PCIE_LANE-1:0]     PIPE_DEBUG_9,           // Async      | Async
    output      [31:0]              PIPE_DEBUG,             // Async      | Async

    output      [(PCIE_LANE*15)-1:0] PIPE_DMONITOROUT,      // DMONITORCLK

    input       [(PCIE_LANE)-1:0]    CPLLPD, 
    input       [(PCIE_LANE*2)-1:0]  TXPD,
    input       [(PCIE_LANE*2)-1:0]  RXPD,
    input       [(PCIE_LANE)-1:0]    TXPDELECIDLEMODE,
    input       [(PCIE_LANE)-1:0]    TXDETECTRX,
    input       [(PCIE_LANE)-1:0]    TXELECIDLE,
    input       [(PCIE_LANE-1)>>2:0] QPLLPD, 
    input                            POWERDOWN

);

    //---------- Input Registers ---------------------------
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                             reset_n_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                             reset_n_reg2;

    //---------- PIPE Clock Module Output ------------------ 
    wire                            clk_pclk;  
    wire                            clk_rxusrclk;
    wire        [PCIE_LANE-1:0]     clk_rxoutclk;
    wire                            clk_dclk;
    wire                            clk_oobclk;
    wire                            clk_mmcm_lock;

    //---------- PIPE Reset Module Output ------------------
    wire                            rst_cpllreset;
    wire                            rst_cpllpd;
    wire                            rst_rxusrclk_reset;
    wire                            rst_dclk_reset;
    wire                            rst_gtreset;
    wire                            rst_drp_start;
    wire                            rst_drp_x16x20_mode;
    wire                            rst_drp_x16;
    wire                            rst_userrdy;
    wire                            rst_txsync_start;
    wire                            rst_idle;
    wire        [4:0]               rst_fsm;

    //------------------------------------------------------
    wire                            gtp_rst_qpllreset;      // GTP
    wire                            gtp_rst_qpllpd;         // GTP

    //---------- QPLL Reset Module Output ------------------
    wire                            qrst_ovrd;
    wire                            qrst_drp_start;
    wire                            qrst_qpllreset;
    wire                            qrst_qpllpd;
    wire                            qrst_idle;
    wire        [11:0]              qrst_fsm;

    //------------------QPLL Reset and Power-down--------------------------------
    wire        [(PCIE_LANE-1)>>2:0]qpllreset;
    wire                            qpllpd;
    //---------- PIPE_JTAG Master Module Output ------------
    wire        [(PCIE_LANE*37)-1:0] jtag_sl_iport;
    wire        [(PCIE_LANE*17)-1:0] jtag_sl_oport;

    //---------- PIPE User Module Output -------------------
    wire [PCIE_LANE-1:0] gt_txpmareset_i;                 
    wire [PCIE_LANE-1:0] gt_rxpmareset_i;                 

    wire        [PCIE_LANE-1:0]     user_oobclk;
    wire        [PCIE_LANE-1:0]     user_resetovrd;
    wire        [PCIE_LANE-1:0]     user_txpmareset;
    wire        [PCIE_LANE-1:0]     user_rxpmareset;
    wire        [PCIE_LANE-1:0]     user_rxcdrreset;
    wire        [PCIE_LANE-1:0]     user_rxcdrfreqreset;
    wire        [PCIE_LANE-1:0]     user_rxdfelpmreset;
    wire        [PCIE_LANE-1:0]     user_eyescanreset;
    wire        [PCIE_LANE-1:0]     user_txpcsreset;
    wire        [PCIE_LANE-1:0]     user_rxpcsreset;
    wire        [PCIE_LANE-1:0]     user_rxbufreset;
    wire        [PCIE_LANE-1:0]     user_resetovrd_done;
    wire        [PCIE_LANE-1:0]     user_active_lane;
    wire        [PCIE_LANE-1:0]     user_resetdone;
    wire        [PCIE_LANE-1:0]     user_rxcdrlock;
    wire        [PCIE_LANE-1:0]     user_rx_converge;

    //---------- PIPE Rate Module Output -------------------
    wire        [PCIE_LANE-1:0]     rate_cpllpd;
    wire        [PCIE_LANE-1:0]     rate_qpllpd;
    wire        [PCIE_LANE-1:0]     rate_cpllreset;
    wire        [PCIE_LANE-1:0]     rate_qpllreset;
    wire        [PCIE_LANE-1:0]     rate_txpmareset;
    wire        [PCIE_LANE-1:0]     rate_rxpmareset;
    wire        [(PCIE_LANE*2)-1:0] rate_sysclksel;
    wire        [PCIE_LANE-1:0]     rate_pclk_sel;
    wire        [PCIE_LANE-1:0]     rate_drp_start;
    wire        [PCIE_LANE-1:0]     rate_drp_x16x20_mode;
    wire        [PCIE_LANE-1:0]     rate_drp_x16;
    wire        [PCIE_LANE-1:0]     rate_gen3;
    wire        [(PCIE_LANE*3)-1:0] rate_rate;
    wire        [PCIE_LANE-1:0]     rate_resetovrd_start;
    wire        [PCIE_LANE-1:0]     rate_txsync_start;
    wire        [PCIE_LANE-1:0]     rate_done;
    wire        [PCIE_LANE-1:0]     rate_rxsync_start;
    wire        [PCIE_LANE-1:0]     rate_rxsync;
    wire        [PCIE_LANE-1:0]     rate_idle;
    wire        [(PCIE_LANE*5)-1:0] rate_fsm;

    //---------- PIPE Sync Module Output -------------------
    wire        [PCIE_LANE-1:0]     sync_txphdlyreset;
    wire        [PCIE_LANE-1:0]     sync_txphalign;
    wire        [PCIE_LANE-1:0]     sync_txphalignen;
    wire        [PCIE_LANE-1:0]     sync_txphinit;
    wire        [PCIE_LANE-1:0]     sync_txdlybypass;
    wire        [PCIE_LANE-1:0]     sync_txdlysreset;
    wire        [PCIE_LANE-1:0]     sync_txdlyen;
    wire        [PCIE_LANE-1:0]     sync_txsync_done;
    wire        [(PCIE_LANE*6)-1:0] sync_fsm_tx;

    wire        [PCIE_LANE-1:0]     sync_rxphalign;
    wire        [PCIE_LANE-1:0]     sync_rxphalignen;
    wire        [PCIE_LANE-1:0]     sync_rxdlybypass;
    wire        [PCIE_LANE-1:0]     sync_rxdlysreset;
    wire        [PCIE_LANE-1:0]     sync_rxdlyen;
    wire        [PCIE_LANE-1:0]     sync_rxddien;
    wire        [PCIE_LANE-1:0]     sync_rxsync_done;
    wire        [PCIE_LANE-1:0]     sync_rxsync_donem;
    wire        [(PCIE_LANE*7)-1:0] sync_fsm_rx;

    wire        [PCIE_LANE-1:0]     txdlysresetdone;
    wire        [PCIE_LANE-1:0]     txphaligndone;
    wire        [PCIE_LANE-1:0]     rxdlysresetdone;
    wire        [PCIE_LANE-1:0]     rxphaligndone_s;

    wire                            txsyncallin;            // GTH
    wire                            rxsyncallin;            // GTH

    //---------- PIPE DRP Module Output --------------------
    wire        [(PCIE_LANE*9)-1:0] drp_addr;
    wire        [PCIE_LANE-1:0]     drp_en;
    wire        [(PCIE_LANE*16)-1:0]drp_di;
    wire        [PCIE_LANE-1:0]     drp_we;
    wire        [PCIE_LANE-1:0]     drp_done;
    wire        [(PCIE_LANE*7)-1:0] drp_fsm;

    //---------- PIPE JTAG Slave Module Output--------------
    wire	      [(PCIE_LANE*17)-1:0]jtag_sl_addr;
    wire        [PCIE_LANE-1:0]     jtag_sl_den;
    wire        [PCIE_LANE-1:0]     jtag_sl_en;
    wire        [(PCIE_LANE*16)-1:0]jtag_sl_di;
    wire        [PCIE_LANE-1:0]     jtag_sl_we;

    //---------- PIPE DRP MUX Output -----------------------
    wire	      [(PCIE_LANE*9)-1:0] drp_mux_addr;
    wire        [PCIE_LANE-1:0]     drp_mux_en;
    wire        [(PCIE_LANE*16)-1:0]drp_mux_di;
    wire        [PCIE_LANE-1:0]     drp_mux_we;

    //---------- PIPE EQ Module Output ---------------------
    wire        [PCIE_LANE-1:0]     eq_txeq_deemph;
    wire        [(PCIE_LANE*5)-1:0] eq_txeq_precursor;
    wire        [(PCIE_LANE*7)-1:0] eq_txeq_maincursor;
    wire        [(PCIE_LANE*5)-1:0] eq_txeq_postcursor;

    wire        [PCIE_LANE-1:0]     eq_rxeq_adapt_done;

    //---------- PIPE DRP Module Output --------------------
    wire        [(PCIE_LANE-1)>>2:0]              qdrp_done;
    wire        [(PCIE_LANE-1)>>2:0]              qdrp_qpllreset;
    wire        [((((PCIE_LANE-1)>>2)+1)*6)-1:0]  qdrp_crscode;
    wire        [((((PCIE_LANE-1)>>2)+1)*9)-1:0]  qdrp_fsm;

    //---------- QPLL Wrapper Output -----------------------
    wire        [(PCIE_LANE-1)>>2:0]              qpll_qplloutclk;
    wire        [(PCIE_LANE-1)>>2:0]              qpll_qplloutrefclk;
    wire        [(PCIE_LANE-1)>>2:0]              qpll_qplllock;

    //---------- GTX Wrapper Output ------------------------
    wire        [PCIE_LANE-1:0]     gt_txoutclk;
    wire        [PCIE_LANE-1:0]     gt_rxoutclk;
    wire        [PCIE_LANE-1:0]     gt_cplllock;
    wire        [PCIE_LANE-1:0]     gt_rxcdrlock;
    wire        [PCIE_LANE-1:0]     gt_eyescandataerror;
    wire        [PCIE_LANE-1:0]     gt_txresetdone;
    wire        [PCIE_LANE-1:0]     gt_rxresetdone;
    wire        [PCIE_LANE-1:0]     gt_rxpmaresetdone;
    wire        [(PCIE_LANE*8)-1:0]     gt_rxdisperr;
    wire        [(PCIE_LANE*8)-1:0]     gt_rxnotintable;
    wire        [PCIE_LANE-1:0]     gt_rxvalid;
    wire        [PCIE_LANE-1:0]     gt_phystatus;
    wire        [(PCIE_LANE*3)-1:0] gt_rxstatus;
    wire        [(PCIE_LANE*3)-1:0] gt_rxbufstatus;
    wire        [PCIE_LANE-1:0]     gt_rxelecidle;
    wire        [PCIE_LANE-1:0]     gt_txratedone;
    wire        [PCIE_LANE-1:0]     gt_rxratedone;
    wire        [(PCIE_LANE*16)-1:0]gt_do;
    wire        [PCIE_LANE-1:0]     gt_rdy;
    wire        [PCIE_LANE-1:0]     gt_txphinitdone;
    wire        [PCIE_LANE-1:0]     gt_txdlysresetdone;
    wire        [PCIE_LANE-1:0]     gt_txphaligndone;
    wire        [PCIE_LANE-1:0]     gt_rxdlysresetdone;
    wire        [PCIE_LANE:0]       gt_rxphaligndone;       // Custom width for calculation
    wire        [PCIE_LANE-1:0]     gt_txsyncout;           // GTH
    wire        [PCIE_LANE-1:0]     gt_txsyncdone;          // GTH
    wire        [PCIE_LANE-1:0]     gt_rxsyncout;           // GTH
    wire        [PCIE_LANE-1:0]     gt_rxsyncdone;          // GTH
    wire        [PCIE_LANE-1:0]     gt_rxcommadet;
    wire        [(PCIE_LANE*4)-1:0] gt_rxchariscomma;
    wire        [PCIE_LANE-1:0]     gt_rxbyteisaligned;
    wire        [PCIE_LANE-1:0]     gt_rxbyterealign;
    wire        [ 4:0]              gt_rxchbondi [PCIE_LANE:0];
    wire        [(PCIE_LANE*3)-1:0] gt_rxchbondlevel;
    wire        [ 4:0]              gt_rxchbondo [PCIE_LANE:0];

    wire        [PCIE_LANE-1:0]     rxchbonden;
    wire        [PCIE_LANE-1:0]     rxchbondmaster;
    wire        [PCIE_LANE-1:0]     rxchbondslave;
    wire        [PCIE_LANE-1:0]     oobclk;

    wire        [(PCIE_LANE-1)>>2:0] qpllpd_mux;
    wire        [PCIE_LANE-1:0]      cpllpd_mux;
    wire        [(PCIE_LANE*2)-1:0]  txpd_mux;
    wire        [(PCIE_LANE*2)-1:0]  rxpd_mux;
    wire        [PCIE_LANE-1:0]      txdetectrx_mux;
    wire        [PCIE_LANE-1:0]      txelecidle_mux;

    //---------- TX EQ -------------------------------------
    localparam                      TXEQ_FS = 6'd40;        // TX equalization full swing
    localparam                      TXEQ_LF = 6'd15;        // TX equalization low frequency

    //---------- Select JTAG Slave Type ----------------------------------------
    localparam GC_XSDB_SLAVE_TYPE = (PCIE_GT_DEVICE == "GTP") ? 16'h0400 : (PCIE_GT_DEVICE == "GTH") ? 16'h004A : 16'h0046;

    //---------- Generate Per-Lane Signals -----------------
    genvar                          i;                      // Index for per-lane signals



//---------- Assignments -------------------------------------------------------
assign gt_rxchbondo[0]             = 5'd0;                  // Initialize rxchbond for lane 0
assign gt_rxphaligndone[PCIE_LANE] = 1'd1;                  // Mot used
assign txsyncallin                 = &(gt_txphaligndone | (~user_active_lane));
assign rxsyncallin                 = &(gt_rxphaligndone | (~user_active_lane));

//---------- Reset Synchronizer ------------------------------------------------
always @ (posedge clk_pclk or negedge PIPE_RESET_N)
begin

    if (!PIPE_RESET_N)
        begin
        reset_n_reg1 <= 1'd0;
        reset_n_reg2 <= 1'd0;
        end
    else
        begin
        reset_n_reg1 <= 1'd1;
        reset_n_reg2 <= reset_n_reg1;
        end

end


//---------- PIPE Clock Module -------------------------------------------------
generate

        begin : pipe_clock_int

        rp_pipe_clock #
        (

            .PCIE_ASYNC_EN                  (PCIE_ASYNC_EN),        // PCIe async enable
            .PCIE_TXBUF_EN                  (PCIE_TXBUF_EN),        // PCIe TX buffer enable for Gen1/Gen2 only
            .PCIE_LANE                      (PCIE_LANE),            // PCIe number of lanes
            .PCIE_LINK_SPEED                (PCIE_LINK_SPEED),      // PCIe link speed
            .PCIE_REFCLK_FREQ               (PCIE_REFCLK_FREQ),     // PCIe reference clock frequency
            .PCIE_USERCLK1_FREQ             (PCIE_USERCLK1_FREQ),   // PCIe user clock 1 frequency
            .PCIE_USERCLK2_FREQ             (PCIE_USERCLK2_FREQ),   // PCIe user clock 2 frequency
            .PCIE_OOBCLK_MODE               (PCIE_OOBCLK_MODE),     // PCIe OOB clock mode
            .PCIE_DEBUG_MODE                (PCIE_DEBUG_MODE)       // PCIe debug mode

        )
        pipe_clock_i
        (

            //---------- Input -------------------------------------
            .CLK_CLK                        (PIPE_CLK),
            .CLK_TXOUTCLK                   (gt_txoutclk[0]),       // Reference clock from lane 0
            .CLK_RXOUTCLK_IN                (gt_rxoutclk),
          //.CLK_RST_N                      (1'b1),
            .CLK_RST_N                      (PIPE_MMCM_RST_N),      // Allow system reset for error recovery
            .CLK_PCLK_SEL                   (rate_pclk_sel),
            .CLK_PCLK_SEL_SLAVE             ( INT_PCLK_SEL_SLAVE ),
            .CLK_GEN3                       (rate_gen3[0]),

            //---------- Output ------------------------------------
            .CLK_PCLK                       (clk_pclk),
            .CLK_PCLK_SLAVE                 ( INT_PCLK_OUT_SLAVE),
            .CLK_RXUSRCLK                   (clk_rxusrclk),
            .CLK_RXOUTCLK_OUT               (clk_rxoutclk),
            .CLK_DCLK                       (clk_dclk),
            .CLK_USERCLK1                   (PIPE_USERCLK1),
            .CLK_USERCLK2                   (PIPE_USERCLK2),
            .CLK_OOBCLK                     (clk_oobclk),
            .CLK_MMCM_LOCK                  (clk_mmcm_lock)

        );


        assign INT_RXUSRCLK_OUT  = clk_rxusrclk;
        assign INT_RXOUTCLK_OUT  = clk_rxoutclk;
        assign INT_DCLK_OUT      = clk_dclk;
        assign INT_USERCLK1_OUT  = PIPE_USERCLK1;
        assign INT_USERCLK2_OUT  = PIPE_USERCLK2;
        assign INT_OOBCLK_OUT    = clk_oobclk;
        assign INT_MMCM_LOCK_OUT = clk_mmcm_lock;

        end
endgenerate

//---------- PIPE Reset Module -------------------------------------------------

        //---------- PIPE Reset Module -----------------------------------------
        rp_pipe_reset #
        (

        // synthesis translate_off
            .PCIE_SIM_SPEEDUP               (PCIE_SIM_SPEEDUP),                     // PCIe sim speedup
        // synthesis translate_on
            .PCIE_GT_DEVICE                 (PCIE_GT_DEVICE),                   // PCIe GT Device
            .PCIE_PLL_SEL                   (PCIE_PLL_SEL),                     // PCIe PLL select for Gen1/Gen2 only
            .PCIE_POWER_SAVING              (PCIE_POWER_SAVING),                // PCIe power saving
            .PCIE_TXBUF_EN                  (PCIE_TXBUF_EN),                    // PCIe TX buffer enable for Gen1/Gen2 only
            .PCIE_LANE                      (PCIE_LANE)                         // PCIe number of lanes

        )
        pipe_reset_i
        (

            //---------- Input -----------------------------
            .RST_CLK                        (clk_pclk),
            .RST_RXUSRCLK                   (clk_rxusrclk),
            .RST_DCLK                       (clk_dclk),
            .RST_RST_N                      (reset_n_reg2),
            .RST_DRP_DONE                   (drp_done),
            .RST_RXPMARESETDONE             (gt_rxpmaresetdone),
            .RST_CPLLLOCK                   (gt_cplllock),
            .RST_QPLL_IDLE                  (qrst_idle),
            .RST_RATE_IDLE                  (rate_idle),
            .RST_RXCDRLOCK                  (user_rxcdrlock),
            .RST_MMCM_LOCK                  (clk_mmcm_lock),
            .RST_RESETDONE                  (user_resetdone),
            .RST_PHYSTATUS                  (gt_phystatus),
            .RST_TXSYNC_DONE                (sync_txsync_done),

            //---------- Output ----------------------------
            .RST_CPLLRESET                  (rst_cpllreset),
            .RST_CPLLPD                     (rst_cpllpd),
            .RST_RXUSRCLK_RESET             (rst_rxusrclk_reset),
            .RST_DCLK_RESET                 (rst_dclk_reset),
            .RST_GTRESET                    (rst_gtreset),
            .RST_DRP_START                  (rst_drp_start),
            .RST_DRP_X16X20_MODE            (rst_drp_x16x20_mode),
            .RST_DRP_X16                    (rst_drp_x16),
            .RST_USERRDY                    (rst_userrdy),
            .RST_TXSYNC_START               (rst_txsync_start),
            .RST_IDLE                       (rst_idle),
            .RST_FSM                        (rst_fsm[4:0])

        );

        //---------- Default ---------------------------------------------------
        assign gtp_rst_qpllreset = 1'd0;
        assign gtp_rst_qpllpd    = 1'd0;


//---------- QPLL Reset Module -------------------------------------------------
generate

    if ((PCIE_LINK_SPEED == 3) || (PCIE_PLL_SEL == "QPLL"))

        begin : qpll_reset

        rp_qpll_reset #
        (

            .PCIE_PLL_SEL                   (PCIE_PLL_SEL),     // PCIe PLL select for Gen1/Gen2 only
            .PCIE_POWER_SAVING              (PCIE_POWER_SAVING),// PCIe power saving
            .PCIE_LANE                      (PCIE_LANE)         // PCIe number of lanes

        )
        qpll_reset_i
        (

            //---------- Input ---------------------------------
            .QRST_CLK                       (clk_pclk),
            .QRST_RST_N                     (reset_n_reg2),
            .QRST_MMCM_LOCK                 (clk_mmcm_lock),
            .QRST_CPLLLOCK                  (gt_cplllock),
            .QRST_DRP_DONE                  (qdrp_done),
            .QRST_QPLLLOCK                  (qpll_qplllock),
            .QRST_RATE                      (PIPE_RATE),
            .QRST_QPLLRESET_IN              (rate_qpllreset),
            .QRST_QPLLPD_IN                 (rate_qpllpd),

            //---------- Output --------------------------------
            .QRST_OVRD                      (qrst_ovrd),
            .QRST_DRP_START                 (qrst_drp_start),
            .QRST_QPLLRESET_OUT             (qrst_qpllreset),
            .QRST_QPLLPD_OUT                (qrst_qpllpd),
            .QRST_IDLE                      (qrst_idle),
            .QRST_FSM                       (qrst_fsm)

        );

        end

    else

        //---------- QPLL Reset Defaults ---------------------------------------
        begin : qpll_reset_disable
        assign qrst_ovrd      =  1'd0;
        assign qrst_drp_start =  1'd0;
        assign qrst_qpllreset =  1'd0;
        assign qrst_qpllpd    =  1'd0;
        assign qrst_idle      =  1'd0;
        assign qrst_fsm       = 12'd1;
        end

endgenerate

assign jtag_sl_iport = {PCIE_LANE{37'd0}};

//Reference Clock for CPLLPD Fix

wire gt_cpllpdrefclk;

BUFG cpllpd_refclk_inst (.I (PIPE_CLK), .O (gt_cpllpdrefclk));

//---------- Generate PIPE Lane ------------------------------------------------
generate for (i=0; i<PCIE_LANE; i=i+1)

    begin : pipe_lane

    //---------- PIPE User Module ----------------------------------------------
    rp_pipe_user #
    (

        .PCIE_USE_MODE                  (PCIE_USE_MODE),
        .PCIE_OOBCLK_MODE               (PCIE_OOBCLK_MODE)

    )
    pipe_user_i
    (

        //---------- Input ---------------------------------
        .USER_TXUSRCLK                  (clk_pclk),
        .USER_RXUSRCLK                  (clk_rxusrclk),
        .USER_OOBCLK_IN                 (clk_oobclk),
        .USER_RST_N                     (!rst_cpllreset),
        .USER_RXUSRCLK_RST_N            (!rst_rxusrclk_reset),
        .USER_PCLK_SEL                  (rate_pclk_sel[i]),
        .USER_RESETOVRD_START           (rate_resetovrd_start[i]),
        .USER_TXRESETDONE               (gt_txresetdone[i]),
        .USER_RXRESETDONE               (gt_rxresetdone[i]),
        .USER_TXELECIDLE                (PIPE_TXELECIDLE[i]),
        .USER_TXCOMPLIANCE              (PIPE_TXCOMPLIANCE[i]),
        .USER_RXCDRLOCK_IN              (gt_rxcdrlock[i]),
        .USER_RXVALID_IN                (gt_rxvalid[i]),
        .USER_RXSTATUS_IN               (gt_rxstatus[(3*i)+2]),
        .USER_PHYSTATUS_IN              (gt_phystatus[i]),
        .USER_RATE_DONE                 (rate_done[i]),
        .USER_RST_IDLE                  (rst_idle),
        .USER_RATE_RXSYNC               (rate_rxsync[i]),
        .USER_RATE_IDLE                 (rate_idle[i]),
        .USER_RATE_GEN3                 (rate_gen3[i]),
        .USER_RXEQ_ADAPT_DONE           (eq_rxeq_adapt_done[i]),

        //---------- Output --------------------------------
        .USER_OOBCLK                    (user_oobclk[i]),
        .USER_RESETOVRD                 (user_resetovrd[i]),
        .USER_TXPMARESET                (user_txpmareset[i]),
        .USER_RXPMARESET                (user_rxpmareset[i]),
        .USER_RXCDRRESET                (user_rxcdrreset[i]),
        .USER_RXCDRFREQRESET            (user_rxcdrfreqreset[i]),
        .USER_RXDFELPMRESET             (user_rxdfelpmreset[i]),
        .USER_EYESCANRESET              (user_eyescanreset[i]),
        .USER_TXPCSRESET                (user_txpcsreset[i]),
        .USER_RXPCSRESET                (user_rxpcsreset[i]),
        .USER_RXBUFRESET                (user_rxbufreset[i]),
        .USER_RESETOVRD_DONE            (user_resetovrd_done[i]),
        .USER_RESETDONE                 (user_resetdone[i]),
        .USER_ACTIVE_LANE               (user_active_lane[i]),
        .USER_RXCDRLOCK_OUT             (user_rxcdrlock[i]),
        .USER_RXVALID_OUT               (PIPE_RXVALID[i]),
        .USER_PHYSTATUS_OUT             (PIPE_PHYSTATUS[i]),
        .USER_PHYSTATUS_RST             (PIPE_PHYSTATUS_RST[i]),
        .USER_GEN3_RDY                  (PIPE_GEN3_RDY[i]),
        .USER_RX_CONVERGE               (user_rx_converge[i])

    );

        //---------- PIPE Rate Module ----------------------------------------------
        rp_pipe_rate #
        (

        // synthesis translate_off
            .PCIE_SIM_SPEEDUP               (PCIE_SIM_SPEEDUP),                     // PCIe sim speedup
        // synthesis translate_on
            .PCIE_GT_DEVICE                 (PCIE_GT_DEVICE),   // PCIe GT device
            .PCIE_USE_MODE                  (PCIE_USE_MODE),    // PCIe use mode
            .PCIE_PLL_SEL                   (PCIE_PLL_SEL),     // PCIe PLL select for Gen1/Gen2 only
            .PCIE_POWER_SAVING              (PCIE_POWER_SAVING),// PCIe power saving
            .PCIE_ASYNC_EN                  (PCIE_ASYNC_EN),    // PCIe async enable
            .PCIE_TXBUF_EN                  (PCIE_TXBUF_EN),    // PCIe TX buffer enable for Gen1/Gen2 only
            .PCIE_RXBUF_EN                  (PCIE_RXBUF_EN)     // PCIe RX buffer enable for Gen3      only

        )
        pipe_rate_i
        (

            //---------- Input ---------------------------------
            .RATE_CLK                       (clk_pclk),
            .RATE_RST_N                     (!rst_cpllreset),
            .RATE_RST_IDLE                  (rst_idle),
            .RATE_ACTIVE_LANE               (user_active_lane[i]),
            .RATE_RATE_IN                   (PIPE_RATE),
            .RATE_CPLLLOCK                  (gt_cplllock[i]),
            .RATE_QPLLLOCK                  (qpll_qplllock[i>>2]),
            .RATE_MMCM_LOCK                 (clk_mmcm_lock),
            .RATE_DRP_DONE                  (drp_done[i]),
            .RATE_RXPMARESETDONE            (gt_rxpmaresetdone[i]),
            .RATE_TXRESETDONE               (gt_txresetdone[i]),
            .RATE_RXRESETDONE               (gt_rxresetdone[i]),
            .RATE_TXRATEDONE                (gt_txratedone[i]),
            .RATE_RXRATEDONE                (gt_rxratedone[i]),
            .RATE_PHYSTATUS                 (gt_phystatus[i]),
            .RATE_RESETOVRD_DONE            (user_resetovrd_done[i]),
            .RATE_TXSYNC_DONE               (sync_txsync_done[i]),
            .RATE_RXSYNC_DONE               (sync_rxsync_done[i]),

            //---------- Output --------------------------------
            .RATE_CPLLPD                    (rate_cpllpd[i]),
            .RATE_QPLLPD                    (rate_qpllpd[i]),
            .RATE_CPLLRESET                 (rate_cpllreset[i]),
            .RATE_QPLLRESET                 (rate_qpllreset[i]),
            .RATE_TXPMARESET                (rate_txpmareset[i]),
            .RATE_RXPMARESET                (rate_rxpmareset[i]),
            .RATE_SYSCLKSEL                 (rate_sysclksel[(2*i)+1:(2*i)]),
            .RATE_DRP_START                 (rate_drp_start[i]),
            .RATE_DRP_X16X20_MODE           (rate_drp_x16x20_mode[i]),
            .RATE_DRP_X16                   (rate_drp_x16[i]),
            .RATE_PCLK_SEL                  (rate_pclk_sel[i]),
            .RATE_GEN3                      (rate_gen3[i]),
            .RATE_RATE_OUT                  (rate_rate[(3*i)+2:(3*i)]),
            .RATE_RESETOVRD_START           (rate_resetovrd_start[i]),
            .RATE_TXSYNC_START              (rate_txsync_start[i]),
            .RATE_DONE                      (rate_done[i]),
            .RATE_RXSYNC_START              (rate_rxsync_start[i]),
            .RATE_RXSYNC                    (rate_rxsync[i]),
            .RATE_IDLE                      (rate_idle[i]),
            .RATE_FSM                       (rate_fsm[(5*i)+4:(5*i)])

        );


    //---------- PIPE Sync Module ----------------------------------------------
    rp_pipe_sync #
    (

        .PCIE_GT_DEVICE                 (PCIE_GT_DEVICE),   // PCIe GT Device
        .PCIE_TXBUF_EN                  (PCIE_TXBUF_EN),    // PCIe TX buffer enable for Gen1/Gen2 only
        .PCIE_RXBUF_EN                  (PCIE_RXBUF_EN),    // PCIe RX buffer enable for Gen3      only
        .PCIE_TXSYNC_MODE               (PCIE_TXSYNC_MODE), // PCIe TX sync mode
        .PCIE_RXSYNC_MODE               (PCIE_RXSYNC_MODE), // PCIe RX sync mode
        .PCIE_LANE                      (PCIE_LANE),        // PCIe lane
        .PCIE_LINK_SPEED                (PCIE_LINK_SPEED)   // PCIe link speed

    )
    pipe_sync_i
    (

        //---------- Input ---------------------------------
        .SYNC_CLK                       (clk_pclk),
        .SYNC_RST_N                     (!rst_cpllreset),
        .SYNC_SLAVE                     (i > 0),
        .SYNC_GEN3                      (rate_gen3[i]),
        .SYNC_RATE_IDLE                 (rate_idle[i]),
        .SYNC_MMCM_LOCK                 (clk_mmcm_lock),
        .SYNC_RXELECIDLE                (gt_rxelecidle[i]),
        .SYNC_RXCDRLOCK                 (user_rxcdrlock[i]),
        .SYNC_ACTIVE_LANE               (user_active_lane[i]),

        .SYNC_TXSYNC_START              (rate_txsync_start[i] || rst_txsync_start),
        .SYNC_TXPHINITDONE              (&(gt_txphinitdone | (~user_active_lane))),
        .SYNC_TXDLYSRESETDONE           (txdlysresetdone[i]),
        .SYNC_TXPHALIGNDONE             (txphaligndone[i]),
        .SYNC_TXSYNCDONE                (gt_txsyncdone[i]), // GTH

        .SYNC_RXSYNC_START              (rate_rxsync_start[i]),
        .SYNC_RXDLYSRESETDONE           (rxdlysresetdone[i]),
        .SYNC_RXPHALIGNDONE_M           (gt_rxphaligndone[0]),
        .SYNC_RXPHALIGNDONE_S           (rxphaligndone_s[i]),
        .SYNC_RXSYNC_DONEM_IN           (sync_rxsync_donem[0]),
        .SYNC_RXSYNCDONE                (gt_rxsyncdone[i]), // GTH

        //---------- Output --------------------------------
        .SYNC_TXPHDLYRESET              (sync_txphdlyreset[i]),
        .SYNC_TXPHALIGN                 (sync_txphalign[i]),
        .SYNC_TXPHALIGNEN               (sync_txphalignen[i]),
        .SYNC_TXPHINIT                  (sync_txphinit[i]),
        .SYNC_TXDLYBYPASS               (sync_txdlybypass[i]),
        .SYNC_TXDLYSRESET               (sync_txdlysreset[i]),
        .SYNC_TXDLYEN                   (sync_txdlyen[i]),
        .SYNC_TXSYNC_DONE               (sync_txsync_done[i]),
        .SYNC_FSM_TX                    (sync_fsm_tx[(6*i)+5:(6*i)]),

        .SYNC_RXPHALIGN                 (sync_rxphalign[i]),
        .SYNC_RXPHALIGNEN               (sync_rxphalignen[i]),
        .SYNC_RXDLYBYPASS               (sync_rxdlybypass[i]),
        .SYNC_RXDLYSRESET               (sync_rxdlysreset[i]),
        .SYNC_RXDLYEN                   (sync_rxdlyen[i]),
        .SYNC_RXDDIEN                   (sync_rxddien[i]),
        .SYNC_RXSYNC_DONEM_OUT          (sync_rxsync_donem[i]),
        .SYNC_RXSYNC_DONE               (sync_rxsync_done[i]),
        .SYNC_FSM_RX                    (sync_fsm_rx[(7*i)+6:(7*i)])

    );

    //---------- PIPE Sync Assignments -----------------------------------------
    assign txdlysresetdone[i] = (PCIE_TXSYNC_MODE == 1) ? gt_txdlysresetdone[i] : &gt_txdlysresetdone;
    assign txphaligndone[i]   = (PCIE_TXSYNC_MODE == 1) ? gt_txphaligndone[i]   : &(gt_txphaligndone | (~user_active_lane));
    assign rxdlysresetdone[i] = (PCIE_RXSYNC_MODE == 1) ? gt_rxdlysresetdone[i] : &gt_rxdlysresetdone;
    assign rxphaligndone_s[i] = (PCIE_LANE == 1)        ? 1'd0                  : &gt_rxphaligndone[PCIE_LANE:1];


        //---------- PIPE DRP Module -------------------------------------------
        rp_pipe_drp #
        (

            .PCIE_GT_DEVICE                 (PCIE_GT_DEVICE),                   // PCIe GT device
            .PCIE_USE_MODE                  (PCIE_USE_MODE),                    // PCIe use mode
            .PCIE_PLL_SEL                   (PCIE_PLL_SEL),                     // PCIe PLL select for Gen1/Gen2 only
            .PCIE_AUX_CDR_GEN3_EN           (PCIE_AUX_CDR_GEN3_EN),             // PCIe AUX CDR Gen3 enable
            .PCIE_ASYNC_EN                  (PCIE_ASYNC_EN),                    // PCIe async enable
            .PCIE_TXBUF_EN                  (PCIE_TXBUF_EN),                    // PCIe TX buffer enable for Gen1/Gen2 only
            .PCIE_RXBUF_EN                  (PCIE_RXBUF_EN),                    // PCIe RX buffer enable for Gen3      only
            .PCIE_TXSYNC_MODE               (PCIE_TXSYNC_MODE),                 // PCIe TX sync mode
            .PCIE_RXSYNC_MODE               (PCIE_RXSYNC_MODE)                  // PCIe RX sync mode

        )
        pipe_drp_i
        (

            //---------- Input ---------------------------------
            .DRP_CLK                        (clk_dclk),
            .DRP_RST_N                      (!rst_dclk_reset),
            .DRP_GTXRESET                   (rst_gtreset),
            .DRP_RATE                       (PIPE_RATE),
            .DRP_X16X20_MODE                (rst_drp_x16x20_mode || rate_drp_x16x20_mode[i]),
            .DRP_X16                        (rst_drp_x16         || rate_drp_x16[i]),
            .DRP_START                      (rst_drp_start || rate_drp_start[i]),
            .DRP_DO                         (gt_do[(16*i)+15:(16*i)]),
            .DRP_RDY                        (gt_rdy[i]),

            //---------- Output --------------------------------
            .DRP_ADDR                       (drp_addr[(9*i)+8:(9*i)]),
            .DRP_EN                         (drp_en[i]),
            .DRP_DI                         (drp_di[(16*i)+15:(16*i)]),
            .DRP_WE                         (drp_we[i]),
            .DRP_DONE                       (drp_done[i]),
            .DRP_FSM                        (drp_fsm[(7*i)+6:(7*i)])

        );


          //---------- PIPE JTAG Slave Default ----------------------------------
         assign jtag_sl_oport[((i+1)*17)-1 : (i*17)] = 17'd0;
         assign jtag_sl_addr[(17*i)+16:(17*i)]       = 17'd0;
         assign jtag_sl_den[i]                       =  1'd0;
         assign jtag_sl_di[(16*i)+15:(16*i)]         = 16'd0;
         assign jtag_sl_we[i]                        =  1'd0;

    //---------- Generate DRP MUX ----------------------------------------------
    assign PIPE_JTAG_RDY[i] = drp_fsm[7*i];
    assign jtag_sl_en[i]	  = (jtag_sl_addr[(17*i)+16:(17*i)+9] == 8'd0) ? jtag_sl_den[i] : 1'd0;

    // Channel DRP
    assign drp_mux_en[i]                = (PIPE_JTAG_RDY[i] && EXT_CH_GT_DRP) ? EXT_CH_GT_DRPEN[i] : drp_en[i];
    assign drp_mux_di[(16*i)+15:(16*i)] = (PIPE_JTAG_RDY[i] && EXT_CH_GT_DRP) ? EXT_CH_GT_DRPDI[(16*i)+15:(16*i)] : drp_di[(16*i)+15:(16*i)];
    assign drp_mux_addr[(9*i)+8:(9*i)]  = (PIPE_JTAG_RDY[i] && EXT_CH_GT_DRP) ? EXT_CH_GT_DRPADDR[(9*i)+8:(9*i)] : drp_addr[(9*i)+8:(9*i)];
    assign drp_mux_we[i]                = (PIPE_JTAG_RDY[i] && EXT_CH_GT_DRP) ? EXT_CH_GT_DRPWE[i]  : drp_we[i];



    //---------- Generate PIPE EQ ----------------------------------------------
    if (PCIE_LINK_SPEED == 3)

        begin : pipe_eq

        //---------- PIPE EQ Module --------------------------------------------
        rp_pipe_eq #
        (
    // synthesis translate_off
            .PCIE_SIM_MODE                  (PCIE_SIM_MODE),                    // PCIe sim mode
    // synthesis translate_on
            .PCIE_GT_DEVICE                 (PCIE_GT_DEVICE),
            .PCIE_RXEQ_MODE_GEN3            (PCIE_RXEQ_MODE_GEN3)               // PCIe RX equalization mode
        )
        pipe_eq_i
        (

            //---------- Input -----------------------------
            .EQ_CLK                         (clk_pclk),
            .EQ_RST_N                       (!rst_cpllreset),
            .EQ_GEN3                        (rate_gen3[i]),

            .EQ_TXEQ_CONTROL                (PIPE_TXEQ_CONTROL[(2*i)+1:(2*i)]),
            .EQ_TXEQ_PRESET                 (PIPE_TXEQ_PRESET[(4*i)+3:(4*i)]),
            .EQ_TXEQ_PRESET_DEFAULT         (PIPE_TXEQ_PRESET_DEFAULT[(4*i)+3:(4*i)]),
            .EQ_TXEQ_DEEMPH_IN              (PIPE_TXEQ_DEEMPH[(6*i)+5:(6*i)]),  // renamed

            .EQ_RXEQ_CONTROL                (PIPE_RXEQ_CONTROL[(2*i)+1:(2*i)]),
            .EQ_RXEQ_PRESET                 (PIPE_RXEQ_PRESET[(3*i)+2:(3*i)]),
            .EQ_RXEQ_LFFS                   (PIPE_RXEQ_LFFS[(6*i)+5:(6*i)]),
            .EQ_RXEQ_TXPRESET               (PIPE_RXEQ_TXPRESET[(4*i)+3:(4*i)]),
            .EQ_RXEQ_USER_EN                (PIPE_RXEQ_USER_EN[i]),
            .EQ_RXEQ_USER_TXCOEFF           (PIPE_RXEQ_USER_TXCOEFF[(18*i)+17:(18*i)]),
            .EQ_RXEQ_USER_MODE              (PIPE_RXEQ_USER_MODE[i]),

            //---------- Output ----------------------------
            .EQ_TXEQ_DEEMPH                 (eq_txeq_deemph[i]),
            .EQ_TXEQ_PRECURSOR              (eq_txeq_precursor[(5*i)+4:(5*i)]),
            .EQ_TXEQ_MAINCURSOR             (eq_txeq_maincursor[(7*i)+6:(7*i)]),
            .EQ_TXEQ_POSTCURSOR             (eq_txeq_postcursor[(5*i)+4:(5*i)]),
            .EQ_TXEQ_DEEMPH_OUT             (PIPE_TXEQ_COEFF[(18*i)+17:(18*i)]),// renamed
            .EQ_TXEQ_DONE                   (PIPE_TXEQ_DONE[i]),
            .EQ_TXEQ_FSM                    (PIPE_TXEQ_FSM[(6*i)+5:(6*i)]),

            .EQ_RXEQ_NEW_TXCOEFF            (PIPE_RXEQ_NEW_TXCOEFF[(18*i)+17:(18*i)]),
            .EQ_RXEQ_LFFS_SEL               (PIPE_RXEQ_LFFS_SEL[i]),
            .EQ_RXEQ_ADAPT_DONE             (eq_rxeq_adapt_done[i]),
            .EQ_RXEQ_DONE                   (PIPE_RXEQ_DONE[i]),
            .EQ_RXEQ_FSM                    (PIPE_RXEQ_FSM[(6*i)+5:(6*i)])

        );

        end

    else

        //---------- PIPE EQ Defaults ------------------------------------------
        begin : pipe_eq_disable
        assign eq_txeq_deemph[i]                       =  1'd0;
        assign eq_txeq_precursor[(5*i)+4:(5*i)]        =  5'h00;
        assign eq_txeq_maincursor[(7*i)+6:(7*i)]       =  7'h00;
        assign eq_txeq_postcursor[(5*i)+4:(5*i)]       =  5'h00;
        assign eq_rxeq_adapt_done[i]                   =  1'd0;
        assign PIPE_TXEQ_COEFF[(18*i)+17:(18*i)]       = 18'd0;
        assign PIPE_TXEQ_DONE[i]                       =  1'd0;
        assign PIPE_TXEQ_FSM[(6*i)+5:(6*i)]            =  6'd0;

        assign PIPE_RXEQ_NEW_TXCOEFF[(18*i)+17:(18*i)] = 18'd0;
        assign PIPE_RXEQ_LFFS_SEL[i]                   =  1'd0;
        assign PIPE_RXEQ_ADAPT_DONE[i]                 =  1'd0;
        assign PIPE_RXEQ_DONE[i]                       =  1'd0;
        assign PIPE_RXEQ_FSM[(6*i)+5:(6*i)]            =  6'd0;
        end



    //---------- Generate PIPE Common Per Quad for Gen3 ------------------------
    if ((i%4)==0)

        begin : pipe_quad
        //---------- Generate QPLL Powerdown and Reset -------------------------
        assign qpllpd          = (PCIE_GT_DEVICE == "GTP") ? gtp_rst_qpllpd    : qrst_qpllpd;
        assign qpllreset[i>>2] = (PCIE_GT_DEVICE == "GTP") ? gtp_rst_qpllreset : (qrst_qpllreset || qdrp_qpllreset[i>>2]);

        assign qpllpd_mux[i>>2]   = (i > 3) ? ((POWERDOWN) ? QPLLPD[1] : qpllpd) : 
                                              ((POWERDOWN) ? QPLLPD[0] : qpllpd);

        if ((PCIE_LINK_SPEED == 3) || (PCIE_PLL_SEL == "QPLL") || (PCIE_GT_DEVICE == "GTP"))

           begin : gt_common_enabled
           if (PCIE_EXT_GT_COMMON == "FALSE")

           begin : gt_common_int
    //---------- GT COMMON INTERNAL Module ---------------------------------------
            rp_gt_common #
            (
    // synthesis translate_off
                .PCIE_SIM_MODE                  (PCIE_SIM_MODE),                // PCIe sim mode
    // synthesis translate_on
                .PCIE_GT_DEVICE                 (PCIE_GT_DEVICE),               // PCIe GT device
                .PCIE_USE_MODE                  (PCIE_USE_MODE),                // PCIe use mode
                .PCIE_PLL_SEL                   (PCIE_PLL_SEL),                 // PCIe PLL select for Gen1/Gen2 only
                .PCIE_REFCLK_FREQ               (PCIE_REFCLK_FREQ)              // PCIe reference clock frequency

            )
            gt_common_i
            (
                //---------- Input -------------------------
                .PIPE_CLK                            (PIPE_CLK),
                .QPLL_QPLLPD                         (qpllpd_mux[i>>2]),
                .QPLL_QPLLRESET                      (qpllreset[i>>2]),
                .QPLL_DRP_CLK                        (clk_dclk),
                .QPLL_DRP_RST_N                      (rst_dclk_reset),
                .QPLL_DRP_OVRD                       (qrst_ovrd),
                .QPLL_DRP_GEN3                       (&rate_gen3),
                .QPLL_DRP_START                      (qrst_drp_start),

                .QPLL_DRP_CRSCODE                    (qdrp_crscode[(6*(i>>2))+5:(6*(i>>2))]),
                .QPLL_DRP_FSM                        (qdrp_fsm[(9*(i>>2))+8:(9*(i>>2))]),
                .QPLL_DRP_DONE                       (qdrp_done[i>>2]),
                .QPLL_DRP_RESET                      (qdrp_qpllreset[i>>2]),
                .QPLL_QPLLOUTCLK                     (qpll_qplloutclk[i>>2]),
                .QPLL_QPLLOUTREFCLK                  (qpll_qplloutrefclk[i>>2]),
                .QPLL_QPLLLOCK                       (qpll_qplllock[i>>2])
            );
              assign QPLL_QPLLPD                           =  1'b0;
              assign QPLL_QPLLRESET[i>>2]                  =  1'b0;              
              assign QPLL_DRP_CLK                          =  1'b0;
              assign QPLL_DRP_RST_N                        =  1'b0;
              assign QPLL_DRP_OVRD                         =  1'b0;
              assign QPLL_DRP_GEN3                         =  1'b0;
              assign QPLL_DRP_START                        =  1'b0;
              assign INT_QPLLLOCK_OUT[i>>2]                =  qpll_qplllock[i>>2] ;
              assign INT_QPLLOUTREFCLK_OUT[i>>2]           =  qpll_qplloutrefclk[i>>2];
              assign INT_QPLLOUTCLK_OUT[i>>2]              =  qpll_qplloutclk[i>>2];
            end
         else
            begin   : gt_common_ext
              assign qdrp_done[i>>2]                       =  QPLL_DRP_DONE[i>>2];
              assign qdrp_qpllreset[i>>2]                  =  QPLL_DRP_RESET[i>>2];
              assign qdrp_crscode[(6*(i>>2))+5:(6*(i>>2))] =  QPLL_DRP_CRSCODE[(6*(i>>2))+5:(6*(i>>2))];
              assign qdrp_fsm[(9*(i>>2))+8:(9*(i>>2))]     =  QPLL_DRP_FSM[(9*(i>>2))+8:(9*(i>>2))];
              assign qpll_qplloutclk[i>>2]                 =  QPLL_QPLLOUTCLK[i>>2];
              assign qpll_qplloutrefclk[i>>2]              =  QPLL_QPLLOUTREFCLK[i>>2];
              assign qpll_qplllock[i>>2]                   =  QPLL_QPLLLOCK[i>>2];
              assign QPLL_QPLLPD                           =  qpllpd;
              assign QPLL_QPLLRESET[i>>2]                  =  qpllreset[i>>2];              
              assign QPLL_DRP_CLK                          =  clk_dclk;
              assign QPLL_DRP_RST_N                        =  rst_dclk_reset;
              assign QPLL_DRP_OVRD                         =  qrst_ovrd;
              assign QPLL_DRP_GEN3                         =  &rate_gen3;
              assign QPLL_DRP_START                        =  qrst_drp_start;
            assign INT_QPLLLOCK_OUT[i>>2]                  =  1'b0 ;
            assign INT_QPLLOUTCLK_OUT[i>>2]                =  1'b0 ;
            assign INT_QPLLOUTREFCLK_OUT[i>>2]             =  1'b0 ;

            end
         end
       else

            //---------- PIPE Common Defaults ----------------------------------
            begin : gt_common_disabled
            assign qdrp_done[i>>2]                       =  1'd0;
            assign qdrp_crscode[(6*(i>>2))+5:(6*(i>>2))] =  6'd0;
            assign qdrp_fsm[(9*(i>>2))+8:(9*(i>>2))]     =  9'd0;
            assign qpll_qplloutclk[i>>2]                 =  1'd0;
            assign qpll_qplloutrefclk[i>>2]              =  1'd0;
            assign qpll_qplllock[i>>2]                   =  1'd0;
            assign QPLL_QPLLPD                           =  1'b0;
            assign QPLL_QPLLRESET[i>>2]                  =  1'b0;              
            assign QPLL_DRP_CLK                          =  1'b0;
            assign QPLL_DRP_RST_N                        =  1'b0;
            assign QPLL_DRP_OVRD                         =  1'b0;
            assign QPLL_DRP_GEN3                         =  1'b0;
            assign QPLL_DRP_START                        =  1'b0;
            assign INT_QPLLLOCK_OUT[i>>2]                =  1'b0 ;
            assign INT_QPLLOUTCLK_OUT[i>>2]              =  1'b0 ;
            assign INT_QPLLOUTREFCLK_OUT[i>>2]           =  1'b0 ;
            end
     end


    //---------- GT Wrapper ----------------------------------------------------
    assign gt_txpmareset_i[i] = (user_txpmareset[i] || rate_txpmareset[i]);
    assign gt_rxpmareset_i[i] = (user_rxpmareset[i] || rate_rxpmareset[i]);

   

    assign cpllpd_mux[i]                 = (POWERDOWN) ? CPLLPD[i] : (rst_cpllpd  || rate_cpllpd[i]);
    assign txpd_mux[(2*i)+1:(2*i)]       = (POWERDOWN) ? TXPD[(2*i)+1:(2*i)] : PIPE_POWERDOWN[(2*i)+1:(2*i)];
    assign rxpd_mux[(2*i)+1:(2*i)]       = (POWERDOWN) ? RXPD[(2*i)+1:(2*i)] : PIPE_POWERDOWN[(2*i)+1:(2*i)];
    assign txdetectrx_mux[i]             = (POWERDOWN) ? TXDETECTRX[i] : PIPE_TXDETECTRX;
    assign txelecidle_mux[i]             = (POWERDOWN) ? TXELECIDLE[i] : PIPE_TXELECIDLE[i];



    rp_gt_wrapper #
    (

    // synthesis translate_off
        .PCIE_SIM_MODE                  (PCIE_SIM_MODE),                        // PCIe sim mode
        .PCIE_SIM_SPEEDUP               (PCIE_SIM_SPEEDUP),                     // PCIe sim speedup
    // synthesis translate_on
        .PCIE_SIM_TX_EIDLE_DRIVE_LEVEL  (PCIE_SIM_TX_EIDLE_DRIVE_LEVEL),        // PCIe sim TX electrical idle drive level
        .PCIE_GT_DEVICE                 (PCIE_GT_DEVICE),                       // PCIe GT device
        .PCIE_USE_MODE                  (PCIE_USE_MODE),                        // PCIe use mode
        .PCIE_PLL_SEL                   (PCIE_PLL_SEL),                         // PCIe PLL select for Gen1/Gen2 only
        .PCIE_LPM_DFE                   (PCIE_LPM_DFE),                         // PCIe LPM or DFE mode for Gen1/Gen2 only
        .PCIE_LPM_DFE_GEN3              (PCIE_LPM_DFE_GEN3),                    // PCIe LPM or DFE mode for Gen3      only
        .PCIE_ASYNC_EN                  (PCIE_ASYNC_EN),                        // PCIe async enable
        .PCIE_TXBUF_EN                  (PCIE_TXBUF_EN),                        // PCIe TX buffer enable for Gen1/Gen2 only
        .PCIE_TXSYNC_MODE               (PCIE_TXSYNC_MODE),                     // PCIe TX sync mode
        .PCIE_RXSYNC_MODE               (PCIE_RXSYNC_MODE),                     // PCIe RX sync mode
        .PCIE_CHAN_BOND                 (PCIE_CHAN_BOND),                       // PCIe Channel bonding mode
        .PCIE_CHAN_BOND_EN              (PCIE_CHAN_BOND_EN),                    // PCIe Channel bonding enable for Gen1/Gen2 only
        .PCIE_LANE                      (PCIE_LANE),                            // PCIe number of lane
        .PCIE_REFCLK_FREQ               (PCIE_REFCLK_FREQ),                     // PCIe reference clock frequency
        .PCIE_TX_EIDLE_ASSERT_DELAY     (PCIE_TX_EIDLE_ASSERT_DELAY),           // PCIe TX electrical idle assert delay
        .PCIE_OOBCLK_MODE               (PCIE_OOBCLK_MODE),                     // PCIe OOB clock mode
        .TX_MARGIN_FULL_0               (TX_MARGIN_FULL_0),                      
        .TX_MARGIN_FULL_1               (TX_MARGIN_FULL_1),   
        .TX_MARGIN_FULL_2               (TX_MARGIN_FULL_2),
        .TX_MARGIN_FULL_3               (TX_MARGIN_FULL_3),
        .TX_MARGIN_FULL_4               (TX_MARGIN_FULL_4),
        .TX_MARGIN_LOW_0                (TX_MARGIN_LOW_0), 
        .TX_MARGIN_LOW_1                (TX_MARGIN_LOW_1), 
        .TX_MARGIN_LOW_2                (TX_MARGIN_LOW_2),
        .TX_MARGIN_LOW_3                (TX_MARGIN_LOW_3),
        .TX_MARGIN_LOW_4                (TX_MARGIN_LOW_4),

        .PCIE_DEBUG_MODE                (PCIE_DEBUG_MODE)                       // PCIe debug mode

    )
    gt_wrapper_i
    (

        //---------- GT User Ports -------------------------
        .GT_MASTER                      (i == 0),
        .GT_GEN3                        (rate_gen3[i]),
        .GT_RX_CONVERGE                 (&user_rx_converge),

        //---------- GT Clock Ports ------------------------
        .GT_CPLLPDREFCLK                (gt_cpllpdrefclk),
	.GT_GTREFCLK0                   (PIPE_CLK),
        .GT_QPLLCLK                     (qpll_qplloutclk[i>>2]),
        .GT_QPLLREFCLK                  (qpll_qplloutrefclk[i>>2]),
        .GT_TXUSRCLK                    (clk_pclk),
        .GT_RXUSRCLK                    (clk_rxusrclk),
        .GT_TXUSRCLK2                   (clk_pclk),
        .GT_RXUSRCLK2                   (clk_rxusrclk),
        .GT_OOBCLK                      (oobclk[i]),
        .GT_TXSYSCLKSEL                 (rate_sysclksel[(2*i)+1:(2*i)]),
        .GT_RXSYSCLKSEL                 (rate_sysclksel[(2*i)+1:(2*i)]),

        .GT_TXOUTCLK                    (gt_txoutclk[i]),
        .GT_RXOUTCLK                    (gt_rxoutclk[i]),
        .GT_CPLLLOCK                    (gt_cplllock[i]),
        .GT_RXCDRLOCK                   (gt_rxcdrlock[i]),

        //---------- GT Reset Ports ------------------------
        .GT_CPLLPD                      (cpllpd_mux[i]),
        .GT_CPLLRESET                   (rst_cpllreset || rate_cpllreset[i]),
        .GT_TXUSERRDY                   (rst_userrdy),
        .GT_RXUSERRDY                   (rst_userrdy),
        .GT_RESETOVRD                   (user_resetovrd[i]),
        .GT_GTTXRESET                   (rst_gtreset),
        .GT_GTRXRESET                   (rst_gtreset),
        .GT_TXPMARESET                  (gt_txpmareset_i[i]), // (user_txpmareset[i] || rate_txpmareset[i]),                 
        .GT_RXPMARESET                  (gt_rxpmareset_i[i]), // (user_rxpmareset[i] || rate_rxpmareset[i]),                
        .GT_RXCDRRESET                  (user_rxcdrreset[i]),
        .GT_RXCDRFREQRESET              (user_rxcdrfreqreset[i]),
        .GT_RXDFELPMRESET               (user_rxdfelpmreset[i]),
        .GT_EYESCANRESET                (user_eyescanreset[i]),
        .GT_TXPCSRESET                  (user_txpcsreset[i]),
        .GT_RXPCSRESET                  (user_rxpcsreset[i]),
        .GT_RXBUFRESET                  (user_rxbufreset[i]),

        .GT_EYESCANDATAERROR            (gt_eyescandataerror[i]),
        .GT_TXRESETDONE                 (gt_txresetdone[i]),
        .GT_RXRESETDONE                 (gt_rxresetdone[i]),
        .GT_RXPMARESETDONE              (gt_rxpmaresetdone[i]),

        //---------- GT TX Data Ports ----------------------
        .GT_TXDATA                      (PIPE_TXDATA[(32*i)+31:(32*i)]),
        .GT_TXDATAK                     (PIPE_TXDATAK[(4*i)+3:(4*i)]),

        .GT_TXP                         (PIPE_TXP[i]),
        .GT_TXN                         (PIPE_TXN[i]),

        //---------- GT RX Data Ports ----------------------
        .GT_RXP                         (PIPE_RXP[i]),
        .GT_RXN                         (PIPE_RXN[i]),

        .GT_RXDATA                      (PIPE_RXDATA[(32*i)+31:(32*i)]),
        .GT_RXDATAK                     (PIPE_RXDATAK[(4*i)+3:(4*i)]),

        //---------- GT Command Ports ----------------------
        .GT_TXDETECTRX                  (txdetectrx_mux[i]),
        .GT_TXELECIDLE                  (txelecidle_mux[i]),
        .GT_TXCOMPLIANCE                (PIPE_TXCOMPLIANCE[i]),
        .GT_RXPOLARITY                  (PIPE_RXPOLARITY[i]),
        .GT_TXPOWERDOWN                 (txpd_mux[(2*i)+1:(2*i)]),
        .GT_RXPOWERDOWN                 (rxpd_mux[(2*i)+1:(2*i)]),
        .GT_TXRATE                      (rate_rate[(3*i)+2:(3*i)]),
        .GT_RXRATE                      (rate_rate[(3*i)+2:(3*i)]),

        //---------- GT Electrical Command Ports -----------
        .GT_TXMARGIN                    (PIPE_TXMARGIN),
        .GT_TXSWING                     (PIPE_TXSWING),
        .GT_TXDEEMPH                    (PIPE_TXDEEMPH[i]),
        .GT_TXPRECURSOR                 (eq_txeq_precursor[(5*i)+4:(5*i)]),
        .GT_TXMAINCURSOR                (eq_txeq_maincursor[(7*i)+6:(7*i)]),
        .GT_TXPOSTCURSOR                (eq_txeq_postcursor[(5*i)+4:(5*i)]),

        //---------- GT Status Ports -----------------------
        .GT_RXVALID                     (gt_rxvalid[i]),
        .GT_PHYSTATUS                   (gt_phystatus[i]),
        .GT_RXELECIDLE                  (gt_rxelecidle[i]),
        .GT_RXSTATUS                    (gt_rxstatus[(3*i)+2:(3*i)]),
        .GT_RXBUFSTATUS                 (gt_rxbufstatus[(3*i)+2:(3*i)]),
        .GT_TXRATEDONE                  (gt_txratedone[i]),
        .GT_RXRATEDONE                  (gt_rxratedone[i]),
        .GT_RXDISPERR                   (gt_rxdisperr[(8*i)+7:(8*i)]),  
        .GT_RXNOTINTABLE                (gt_rxnotintable[(8*i)+7:(8*i)]),

        //---------- GT DRP Ports --------------------------
        .GT_DRPCLK                      (clk_dclk),
        .GT_DRPADDR                     (drp_mux_addr[(9*i)+8:(9*i)]),
        .GT_DRPEN                       (drp_mux_en[i]),
        .GT_DRPDI                       (drp_mux_di[(16*i)+15:(16*i)]),
        .GT_DRPWE                       (drp_mux_we[i]),

        .GT_DRPDO                       (gt_do[(16*i)+15:(16*i)]),
        .GT_DRPRDY                      (gt_rdy[i]),

        //---------- GT TX Sync Ports ----------------------
        .GT_TXPHALIGN                   (sync_txphalign[i]),
        .GT_TXPHALIGNEN                 (sync_txphalignen[i]),
        .GT_TXPHINIT                    (sync_txphinit[i]),
        .GT_TXDLYBYPASS                 (sync_txdlybypass[i]),
        .GT_TXDLYSRESET                 (sync_txdlysreset[i]),
        .GT_TXDLYEN                     (sync_txdlyen[i]),

        .GT_TXDLYSRESETDONE             (gt_txdlysresetdone[i]),
        .GT_TXPHINITDONE                (gt_txphinitdone[i]),
        .GT_TXPHALIGNDONE               (gt_txphaligndone[i]),

        .GT_TXPHDLYRESET                (sync_txphdlyreset[i]),
        .GT_TXSYNCMODE                  (i == 0),           // GTH, GTP
        .GT_TXSYNCIN                    (gt_txsyncout[0]),  // GTH, GTP
        .GT_TXSYNCALLIN                 (txsyncallin),      // GTH, GTP

        .GT_TXSYNCOUT                   (gt_txsyncout[i]),  // GTH, GTP
        .GT_TXSYNCDONE                  (gt_txsyncdone[i]), // GTH, GTP

        //---------- GT RX Sync Ports ----------------------
        .GT_RXPHALIGN                   (sync_rxphalign[i]),
        .GT_RXPHALIGNEN                 (sync_rxphalignen[i]),
        .GT_RXDLYBYPASS                 (sync_rxdlybypass[i]),
        .GT_RXDLYSRESET                 (sync_rxdlysreset[i]),
        .GT_RXDLYEN                     (sync_rxdlyen[i]),
        .GT_RXDDIEN                     (sync_rxddien[i]),

        .GT_RXDLYSRESETDONE             (gt_rxdlysresetdone[i]),
        .GT_RXPHALIGNDONE               (gt_rxphaligndone[i]),

        .GT_RXSYNCMODE                  (i == 0),           // GTH
        .GT_RXSYNCIN                    (gt_rxsyncout[0]),  // GTH
        .GT_RXSYNCALLIN                 (rxsyncallin),      // GTH

        .GT_RXSYNCOUT                   (gt_rxsyncout[i]),  // GTH
        .GT_RXSYNCDONE                  (gt_rxsyncdone[i]), // GTH

        //---------- GT Comma Alignment Ports --------------
        .GT_RXSLIDE                     (PIPE_RXSLIDE[i]),

        .GT_RXCOMMADET                  (gt_rxcommadet[i]),
        .GT_RXCHARISCOMMA               (gt_rxchariscomma[(4*i)+3:(4*i)]),
        .GT_RXBYTEISALIGNED             (gt_rxbyteisaligned[i]),
        .GT_RXBYTEREALIGN               (gt_rxbyterealign[i]),

        //---------- GT Channel Bonding Ports --------------
        .GT_RXCHANISALIGNED             (PIPE_RXCHANISALIGNED[i]),
        .GT_RXCHBONDEN                  (rxchbonden[i]),
        .GT_RXCHBONDI                   (gt_rxchbondi[i]),
        .GT_RXCHBONDLEVEL               (gt_rxchbondlevel[(3*i)+2:(3*i)]),
        .GT_RXCHBONDMASTER              (rxchbondmaster[i]),
        .GT_RXCHBONDSLAVE               (rxchbondslave[i]),
        .GT_RXCHBONDO                   (gt_rxchbondo[i+1]),

        //---------- GT PRBS/Loopback Ports ----------------
        .GT_TXPRBSSEL                   (PIPE_TXPRBSSEL),
        .GT_RXPRBSSEL                   (PIPE_RXPRBSSEL),
        .GT_TXPRBSFORCEERR              (PIPE_TXPRBSFORCEERR),
        .GT_RXPRBSCNTRESET              (PIPE_RXPRBSCNTRESET),
        .GT_LOOPBACK                    (PIPE_LOOPBACK),

        .GT_RXPRBSERR                   (PIPE_RXPRBSERR[i]),
        .GT_TXINHIBIT                   (PIPE_TXINHIBIT[i]),

        //---------- GT Debug Port -------------------------
        .GT_DMONITOROUT                 (PIPE_DMONITOROUT[(15*i)+14:(15*i)]),

        .TXPDELECIDLEMODE               (TXPDELECIDLEMODE[i]),
        .POWERDOWN                      (POWERDOWN)

    );



    //---------- GT Wrapper Assignments ----------------------------------------
    assign oobclk[i]         = (PCIE_OOBCLK_MODE == 1) ? user_oobclk[i] : clk_oobclk;

    //---------- Channel Bonding Master Slave Enable ---------------------------
    if (PCIE_CHAN_BOND_EN == "FALSE")
        begin : channel_bonding_ms_disable
        assign rxchbonden[i]     = 1'd0;
        assign rxchbondmaster[i] = 1'd0;
        assign rxchbondslave[i]  = 1'd0;
        end
    else
        begin : channel_bonding_ms_enable
        assign rxchbonden[i]     = (PCIE_LANE > 1) && (PCIE_CHAN_BOND_EN == "TRUE") ? !rate_gen3[i] : 1'd0;
        assign rxchbondmaster[i] =  rate_gen3[i] ? 1'd0 : (i == 0);
        assign rxchbondslave[i]  =  rate_gen3[i] ? 1'd0 : (i  > 0);
        end

    //---------- Channel Bonding Input Connection ------------------------------
    if (PCIE_CHAN_BOND_EN == "FALSE")
        begin : channel_bonding_in_disable
        assign gt_rxchbondi[i]                 = 5'd0;
        assign gt_rxchbondlevel[(3*i)+2:(3*i)] = 3'd0;
        end
    else
        begin : channel_bonding_in_enable

        //---------- Channel Bonding (2: Binary-Tree) --------------------------
        if (PCIE_CHAN_BOND == 2)

            begin : channel_bonding_a

            case (i)

            //---------- Lane 0 --------------------------------
            0 :
                begin
                assign gt_rxchbondi[0]         = gt_rxchbondo[0];
                assign gt_rxchbondlevel[2:0]   = (PCIE_LANE == 4'd8) ? 3'd4 :
                                                 (PCIE_LANE >  4'd5) ? 3'd3 :
                                                 (PCIE_LANE >  4'd3) ? 3'd2 :
                                                 (PCIE_LANE >  4'd1) ? 3'd1 : 3'd0;
                end
            //---------- Lane 1 --------------------------------
            1 :
                begin
                assign gt_rxchbondi[1]         = gt_rxchbondo[1];
                assign gt_rxchbondlevel[5:3]   = (PCIE_LANE == 4'd8) ? 3'd3 :
                                                 (PCIE_LANE >  4'd5) ? 3'd2 :
                                                 (PCIE_LANE >  4'd3) ? 3'd1 : 3'd0;
                end
            //---------- Lane 2 --------------------------------
            2 :
                begin
                assign gt_rxchbondi[2]         = gt_rxchbondo[1];
                assign gt_rxchbondlevel[8:6]   = (PCIE_LANE == 4'd8) ? 3'd3 :
                                                 (PCIE_LANE >  4'd5) ? 3'd2 :
                                                 (PCIE_LANE >  4'd3) ? 3'd1 : 3'd0;
                end
            //---------- Lane 3 --------------------------------
            3 :
                begin
                assign gt_rxchbondi[3]         = gt_rxchbondo[3];
                assign gt_rxchbondlevel[11:9]  = (PCIE_LANE == 4'd8) ? 3'd2 :
                                                 (PCIE_LANE >  4'd5) ? 3'd1 : 3'd0;
                end
            //---------- Lane 4 --------------------------------
            4 :
                begin
                assign gt_rxchbondi[4]         = gt_rxchbondo[3];
                assign gt_rxchbondlevel[14:12] = (PCIE_LANE == 4'd8) ? 3'd2 :
                                                 (PCIE_LANE >  4'd5) ? 3'd1 : 3'd0;
                end
            //---------- Lane 5 --------------------------------
            5 :
                begin
                assign gt_rxchbondi[5]         = gt_rxchbondo[5];
                assign gt_rxchbondlevel[17:15] = (PCIE_LANE == 4'd8) ? 3'd1 : 3'd0;
                end
            //---------- Lane 6 --------------------------------
            6 :
                begin
                assign gt_rxchbondi[6]         = gt_rxchbondo[5];
                assign gt_rxchbondlevel[20:18] = (PCIE_LANE == 4'd8) ? 3'd1 : 3'd0;
                end
            //---------- Lane 7 --------------------------------
            7 :
                begin
                assign gt_rxchbondi[7]         = gt_rxchbondo[7];
                assign gt_rxchbondlevel[23:21] = 3'd0;
                end
            //---------- Default -------------------------------
            default :
                begin
                assign gt_rxchbondi[i]                 = gt_rxchbondo[7];
                assign gt_rxchbondlevel[(3*i)+2:(3*i)] = 3'd0;
                end

            endcase

            end

        //---------- Channel Bonding (0: One-Hop, 1: Daisy Chain) --------------
        else

            begin : channel_bonding_b
            assign gt_rxchbondi[i]                 = (PCIE_CHAN_BOND == 1) ? gt_rxchbondo[i] : ((i == 0) ? gt_rxchbondo[0] : gt_rxchbondo[1]);
            assign gt_rxchbondlevel[(3*i)+2:(3*i)] = (PCIE_CHAN_BOND == 1) ? (PCIE_LANE-1)-i  : ((PCIE_LANE > 1) && (i == 0));
            end

        end

        end

endgenerate



//---------- PIPE Wrapper Output -----------------------------------------------
assign PIPE_TXEQ_FS      = TXEQ_FS;
assign PIPE_TXEQ_LF      = TXEQ_LF;
assign PIPE_RXELECIDLE   = gt_rxelecidle;
assign PIPE_RXSTATUS     = gt_rxstatus;

assign PIPE_RXDISPERR       = gt_rxdisperr;  
assign PIPE_RXNOTINTABLE    = gt_rxnotintable;
assign PIPE_RXPMARESETDONE  = gt_rxpmaresetdone;
assign PIPE_RXBUFSTATUS     = gt_rxbufstatus;
assign PIPE_TXPHALIGNDONE   = gt_txphaligndone;
assign PIPE_TXPHINITDONE    = gt_txphinitdone;
assign PIPE_TXDLYSRESETDONE = gt_txdlysresetdone;
assign PIPE_RXPHALIGNDONE   = gt_rxphaligndone;
assign PIPE_RXDLYSRESETDONE = gt_rxdlysresetdone;
assign PIPE_RXSYNCDONE      = gt_rxsyncdone;
assign PIPE_RXCOMMADET      = gt_rxcommadet;
assign PIPE_QPLL_LOCK       = qpll_qplllock;
assign PIPE_CPLL_LOCK       = gt_cplllock;   

assign PIPE_PCLK         = clk_pclk;
assign PIPE_PCLK_LOCK    = clk_mmcm_lock;
assign PIPE_RXCDRLOCK    = user_rxcdrlock;
assign PIPE_RXUSRCLK     = clk_rxusrclk;
assign PIPE_RXOUTCLK     = clk_rxoutclk;
assign PIPE_TXSYNC_DONE  = sync_txsync_done;
assign PIPE_RXSYNC_DONE  = sync_rxsync_done;
assign PIPE_ACTIVE_LANE  = user_active_lane;

assign PIPE_TXOUTCLK_OUT = gt_txoutclk[0];
assign PIPE_RXOUTCLK_OUT = gt_rxoutclk;
assign PIPE_PCLK_SEL_OUT = rate_pclk_sel;
assign PIPE_GEN3_OUT     = rate_gen3[0];

assign PIPE_RXEQ_CONVERGE   = user_rx_converge;
assign PIPE_RXEQ_ADAPT_DONE = (PCIE_GT_DEVICE == "GTP") ? {PCIE_LANE{1'd0}} : eq_rxeq_adapt_done;

assign PIPE_EYESCANDATAERROR = gt_eyescandataerror;
assign PIPE_RST_FSM      = rst_fsm;
assign PIPE_QRST_FSM     = qrst_fsm;
assign PIPE_RATE_FSM     = rate_fsm;
assign PIPE_SYNC_FSM_TX  = sync_fsm_tx;
assign PIPE_SYNC_FSM_RX  = sync_fsm_rx;
assign PIPE_DRP_FSM      = drp_fsm;
assign PIPE_QDRP_FSM     = qdrp_fsm;

assign PIPE_RST_IDLE     = &rst_idle;
assign PIPE_QRST_IDLE    = &qrst_idle;
assign PIPE_RATE_IDLE    = &rate_idle;

assign EXT_CH_GT_DRPDO   =  gt_do[(PCIE_LANE*16)-1:0];
assign EXT_CH_GT_DRPRDY  =  gt_rdy[(PCIE_LANE-1):0];
assign EXT_CH_GT_DRPCLK  =  clk_dclk;

assign PIPE_DEBUG_0      = (PCIE_DEBUG_MODE == 1) ? gt_txresetdone                  : {PCIE_LANE{1'b0}};
assign PIPE_DEBUG_1      = (PCIE_DEBUG_MODE == 1) ? gt_rxresetdone                  : {PCIE_LANE{1'b0}};
assign PIPE_DEBUG_2      = (PCIE_DEBUG_MODE == 1) ? gt_phystatus                    : {PCIE_LANE{1'b0}};
assign PIPE_DEBUG_3      = (PCIE_DEBUG_MODE == 1) ? gt_rxvalid                      : {PCIE_LANE{1'b0}};
assign PIPE_DEBUG_4      = (PCIE_DEBUG_MODE == 1) ? clk_dclk                        : {PCIE_LANE{1'b0}};
assign PIPE_DEBUG_5      = (PCIE_DEBUG_MODE == 1) ? drp_mux_en                      : {PCIE_LANE{1'b0}};
assign PIPE_DEBUG_6      = (PCIE_DEBUG_MODE == 1) ? drp_mux_we                      : {PCIE_LANE{1'b0}};
assign PIPE_DEBUG_7      = (PCIE_DEBUG_MODE == 1) ? gt_rdy                          : {PCIE_LANE{1'b0}};
assign PIPE_DEBUG_8      = (PCIE_DEBUG_MODE == 1) ? user_rx_converge                : {PCIE_LANE{1'b0}};
assign PIPE_DEBUG_9      = (PCIE_DEBUG_MODE == 1) ? PIPE_TXELECIDLE                 : {PCIE_LANE{1'b0}};

assign PIPE_DEBUG[ 1:0]  = (PCIE_DEBUG_MODE == 1) ? PIPE_TXEQ_CONTROL[1:0] : 2'd0;
assign PIPE_DEBUG[ 5:2]  = (PCIE_DEBUG_MODE == 1) ? PIPE_TXEQ_PRESET[3:0]  : 4'd0;
assign PIPE_DEBUG[31:6]  = 26'd0;



endmodule
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_qpll_drp.v
// Version    : 4.0
//----------------------------------------------------------------------------//
//  Filename     :  rp_qpll_drp.v
//  Description  :  QPLL DRP Module for 7 Series Transceiver
//  Version      :  20.2
//------------------------------------------------------------------------------
`timescale 1ns / 1ps



//---------- QPLL DRP Module ---------------------------------------------------
module rp_qpll_drp #
(

    parameter PCIE_GT_DEVICE   = "GTX",                     // PCIe GT device
    parameter PCIE_USE_MODE    = "3.0",                     // PCIe use mode
    parameter PCIE_PLL_SEL     = "CPLL",                    // PCIe PLL select for Gen1/Gen2 only
    parameter PCIE_REFCLK_FREQ = 0,                         // PCIe reference clock frequency
    parameter LOAD_CNT_MAX     = 2'd3,                      // Load max count
    parameter INDEX_MAX        = 3'd6                       // Index max count
        
)

(
    
    //---------- Input -------------------------------------
    input               DRP_CLK,
    input               DRP_RST_N,
    input               DRP_OVRD,
    input               DRP_GEN3,
    input               DRP_QPLLLOCK,
    input               DRP_START,
    input       [15:0]  DRP_DO,
    input               DRP_RDY,
    
    //---------- Output ------------------------------------
    output      [ 7:0]  DRP_ADDR,
    output              DRP_EN,  
    output      [15:0]  DRP_DI,   
    output              DRP_WE,
    output              DRP_DONE,
    output              DRP_QPLLRESET,
    output      [ 5:0]  DRP_CRSCODE,
    output      [ 8:0]  DRP_FSM
    
);

    //---------- Input Registers ---------------------------
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 ovrd_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 gen3_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 qplllock_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 start_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [15:0]  do_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rdy_reg1;
    
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 ovrd_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 gen3_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 qplllock_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 start_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [15:0]  do_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 rdy_reg2;
    
    //---------- Internal Signals --------------------------
    reg         [ 1:0]  load_cnt =  2'd0;
    reg         [ 2:0]  index    =  3'd0;
    reg                 mode     =  1'd0;
    reg         [ 5:0]  crscode  =  6'd0;
    
    //---------- Output Registers --------------------------
    reg         [ 7:0]  addr    =  8'd0;
    reg         [15:0]  di      = 16'd0;
    reg                 done    =  1'd0;
    reg         [ 8:0]  fsm     =  7'd1;      
                        
    //---------- DRP Address -------------------------------  
    localparam          ADDR_QPLL_FBDIV               = 8'h36;
    localparam          ADDR_QPLL_CFG                 = 8'h32;
    localparam          ADDR_QPLL_LPF                 = 8'h31;  
    localparam          ADDR_CRSCODE                  = 8'h88;  
    localparam          ADDR_QPLL_COARSE_FREQ_OVRD    = 8'h35;
    localparam          ADDR_QPLL_COARSE_FREQ_OVRD_EN = 8'h36;  
    localparam          ADDR_QPLL_LOCK_CFG            = 8'h34;
    
    //---------- DRP Mask ----------------------------------
    localparam          MASK_QPLL_FBDIV               = 16'b1111110000000000;  // Unmask bit [ 9: 0] 
    localparam          MASK_QPLL_CFG                 = 16'b1111111110111111;  // Unmask bit [    6]
    localparam          MASK_QPLL_LPF                 = 16'b1000011111111111;  // Unmask bit [14:11]
    localparam          MASK_QPLL_COARSE_FREQ_OVRD    = 16'b0000001111111111;  // Unmask bit [15:10] 
    localparam          MASK_QPLL_COARSE_FREQ_OVRD_EN = 16'b1111011111111111;  // Unmask bit [   11]      
    localparam          MASK_QPLL_LOCK_CFG            = 16'b1110011111111111;  // Unmask bit [12:11]     

    //---------- DRP Data for Normal QPLLLOCK Mode ---------
    localparam          NORM_QPLL_COARSE_FREQ_OVRD    = 16'b0000000000000000;  // Coarse freq value
    localparam          NORM_QPLL_COARSE_FREQ_OVRD_EN = 16'b0000000000000000;  // Normal QPLL lock  
    localparam          NORM_QPLL_LOCK_CFG            = 16'b0000000000000000;  // Normal QPLL lock config 
     
    //---------- DRP Data for Optimize QPLLLOCK Mode -------
    localparam          OVRD_QPLL_COARSE_FREQ_OVRD    = 16'b0000000000000000;  // Coarse freq value
    localparam          OVRD_QPLL_COARSE_FREQ_OVRD_EN = 16'b0000100000000000;  // Override QPLL lock 
    localparam          OVRD_QPLL_LOCK_CFG            = 16'b0000000000000000;  // Override QPLL lock config 
    
    //---------- Select QPLL Feedback Divider --------------
    //  N = 100 for 100 MHz ref clk and 10Gb/s line rate
    //  N =  80 for 125 MHz ref clk and 10Gb/s line rate
    //  N =  40 for 250 MHz ref clk and 10Gb/s line rate
    //------------------------------------------------------
    //  N =  80 for 100 MHz ref clk and  8Gb/s line rate
    //  N =  64 for 125 MHz ref clk and  8Gb/s line rate
    //  N =  32 for 250 MHz ref clk and  8Gb/s line rate
    //------------------------------------------------------
    localparam          QPLL_FBDIV = (PCIE_REFCLK_FREQ == 2) && (PCIE_PLL_SEL == "QPLL") ? 16'b0000000010000000 : 
                                     (PCIE_REFCLK_FREQ == 1) && (PCIE_PLL_SEL == "QPLL") ? 16'b0000000100100000 : 
                                     (PCIE_REFCLK_FREQ == 0) && (PCIE_PLL_SEL == "QPLL") ? 16'b0000000101110000 : 
                                     (PCIE_REFCLK_FREQ == 2) && (PCIE_PLL_SEL == "CPLL") ? 16'b0000000001100000 : 
                                     (PCIE_REFCLK_FREQ == 1) && (PCIE_PLL_SEL == "CPLL") ? 16'b0000000011100000 : 16'b0000000100100000;
    
    localparam          GEN12_QPLL_FBDIV = (PCIE_REFCLK_FREQ == 2) ? 16'b0000000010000000 : 
                                           (PCIE_REFCLK_FREQ == 1) ? 16'b0000000100100000 : 16'b0000000101110000;

    localparam          GEN3_QPLL_FBDIV  = (PCIE_REFCLK_FREQ == 2) ? 16'b0000000001100000 : 
                                           (PCIE_REFCLK_FREQ == 1) ? 16'b0000000011100000 : 16'b0000000100100000;
     
    //---------- Select QPLL Configuration ---------------------------
    //  QPLL_CFG[6] = 0 for upper band
    //              = 1 for lower band
    //----------------------------------------------------------------
    localparam          GEN12_QPLL_CFG = (PCIE_PLL_SEL == "QPLL") ? 16'b0000000000000000 : 16'b0000000001000000;
    localparam          GEN3_QPLL_CFG  = 16'b0000000001000000;  
     
    //---------- Select QPLL LPF -------------------------------------
    localparam          GEN12_QPLL_LPF = (PCIE_PLL_SEL == "QPLL") ? 16'b0_0100_00000000000 : 16'b0_1101_00000000000;
    localparam          GEN3_QPLL_LPF  = 16'b0_1101_00000000000;  
     
     
     
    //---------- DRP Data ----------------------------------       
    wire        [15:0]  data_qpll_fbdiv;  
    wire        [15:0]  data_qpll_cfg;  
    wire        [15:0]  data_qpll_lpf;  
    wire        [15:0]  data_qpll_coarse_freq_ovrd;               
    wire        [15:0]  data_qpll_coarse_freq_ovrd_en; 
    wire        [15:0]  data_qpll_lock_cfg;      
           
    //---------- FSM ---------------------------------------  
    localparam          FSM_IDLE      = 9'b000000001;  
    localparam          FSM_LOAD      = 9'b000000010;                           
    localparam          FSM_READ      = 9'b000000100;
    localparam          FSM_RRDY      = 9'b000001000;
    localparam          FSM_WRITE     = 9'b000010000;
    localparam          FSM_WRDY      = 9'b000100000;    
    localparam          FSM_DONE      = 9'b001000000; 
    localparam          FSM_QPLLRESET = 9'b010000000; 
    localparam          FSM_QPLLLOCK  = 9'b100000000;


    
//---------- Input FF ----------------------------------------------------------
always @ (posedge DRP_CLK)
begin

    if (!DRP_RST_N)
        begin
        //---------- 1st Stage FF --------------------------
        ovrd_reg1     <=  1'd0;
        gen3_reg1     <=  1'd0;
        qplllock_reg1 <=  1'd0;
        start_reg1    <=  1'd0;
        do_reg1       <= 16'd0;
        rdy_reg1      <=  1'd0;
        //---------- 2nd Stage FF --------------------------
        ovrd_reg2     <=  1'd0;
        gen3_reg2     <=  1'd0;
        qplllock_reg2 <=  1'd0;
        start_reg2    <=  1'd0;
        do_reg2       <= 16'd0;
        rdy_reg2      <=  1'd0;
        end
        
    else
        begin
        //---------- 1st Stage FF --------------------------
        ovrd_reg1     <= DRP_OVRD;
        gen3_reg1     <= DRP_GEN3;
        qplllock_reg1 <= DRP_QPLLLOCK;
        start_reg1    <= DRP_START;
        do_reg1       <= DRP_DO;
        rdy_reg1      <= DRP_RDY;
        //---------- 2nd Stage FF --------------------------
        ovrd_reg2     <= ovrd_reg1;
        gen3_reg2     <= gen3_reg1;
        qplllock_reg2 <= qplllock_reg1;
        start_reg2    <= start_reg1;
        do_reg2       <= do_reg1;
        rdy_reg2      <= rdy_reg1;
        end
    
end  



//---------- Select DRP Data ---------------------------------------------------
assign data_qpll_fbdiv               = (gen3_reg2) ? GEN3_QPLL_FBDIV : GEN12_QPLL_FBDIV;
assign data_qpll_cfg                 = (gen3_reg2) ? GEN3_QPLL_CFG   : GEN12_QPLL_CFG;
assign data_qpll_lpf                 = (gen3_reg2) ? GEN3_QPLL_LPF   : GEN12_QPLL_LPF;
assign data_qpll_coarse_freq_ovrd    =  NORM_QPLL_COARSE_FREQ_OVRD;
assign data_qpll_coarse_freq_ovrd_en = (ovrd_reg2) ? OVRD_QPLL_COARSE_FREQ_OVRD_EN : NORM_QPLL_COARSE_FREQ_OVRD_EN;
assign data_qpll_lock_cfg            = (ovrd_reg2) ? OVRD_QPLL_LOCK_CFG            : NORM_QPLL_LOCK_CFG;


//---------- Load Counter ------------------------------------------------------
always @ (posedge DRP_CLK)
begin

    if (!DRP_RST_N)
        load_cnt <= 2'd0;
    else
    
        //---------- Increment Load Counter ----------------
        if ((fsm == FSM_LOAD) && (load_cnt < LOAD_CNT_MAX))
            load_cnt <= load_cnt + 2'd1;
            
        //---------- Hold Load Counter ---------------------
        else if ((fsm == FSM_LOAD) && (load_cnt == LOAD_CNT_MAX))
            load_cnt <= load_cnt;
            
        //---------- Reset Load Counter --------------------
        else
            load_cnt <= 2'd0;
        
end 



//---------- Update DRP Address and Data ---------------------------------------
always @ (posedge DRP_CLK)
begin

    if (!DRP_RST_N)
        begin
        addr    <=  8'd0;
        di      <= 16'd0;
        crscode <=  6'd0;
        end
    else
        begin
        
        case (index)

        //--------------------------------------------------    
        3'd0 :
            begin        
            addr    <= ADDR_QPLL_FBDIV;
            di      <= (do_reg2 & MASK_QPLL_FBDIV) | (mode ? data_qpll_fbdiv : QPLL_FBDIV);
            crscode <= crscode;
            end   
                
        //--------------------------------------------------    
        3'd1 :
            begin       
            addr    <= ADDR_QPLL_CFG;
            if (PCIE_GT_DEVICE == "GTX") 
                di <= (do_reg2 & MASK_QPLL_CFG) | data_qpll_cfg;
            else
                di <= (do_reg2 & 16'hFFFF) | data_qpll_cfg;
            crscode <= crscode;
            end       
            
        //--------------------------------------------------    
        3'd2 :
            begin        
            addr    <= ADDR_QPLL_LPF;
            if (PCIE_GT_DEVICE == "GTX") 
                di <= (do_reg2 & MASK_QPLL_LPF) | data_qpll_lpf;
            else
                di <= (do_reg2 & 16'hFFFF) | data_qpll_lpf;
            crscode <= crscode;
            end     
                
        //--------------------------------------------------
        3'd3 :
            begin        
            addr <= ADDR_CRSCODE;
            di   <= do_reg2;
            
            //---------- Latch CRS Code --------------------
            if (ovrd_reg2)
                crscode <= do_reg2[6:1];                 
            else
                crscode <= crscode;   
            end
           
        //--------------------------------------------------    
        3'd4 :
            begin        
            addr    <= ADDR_QPLL_COARSE_FREQ_OVRD;
            di      <= (do_reg2 & MASK_QPLL_COARSE_FREQ_OVRD) | {(crscode - 6'd1), data_qpll_coarse_freq_ovrd[9:0]};
            crscode <= crscode;
            end    
            
        //--------------------------------------------------    
        3'd5 :
            begin        
            addr    <= ADDR_QPLL_COARSE_FREQ_OVRD_EN;
            di      <= (do_reg2 & MASK_QPLL_COARSE_FREQ_OVRD_EN) | data_qpll_coarse_freq_ovrd_en;
            crscode <= crscode;
            end    
            
        //--------------------------------------------------    
        3'd6 :
            begin        
            addr    <= ADDR_QPLL_LOCK_CFG;
            di      <= (do_reg2 & MASK_QPLL_LOCK_CFG) | data_qpll_lock_cfg;
            crscode <= crscode;
            end       
            
        //--------------------------------------------------
        default : 
            begin
            addr    <=  8'd0;
            di      <= 16'd0;
            crscode <=  6'd0;
            end
            
        endcase
        
        end
        
end  



//---------- QPLL DRP FSM ------------------------------------------------------
always @ (posedge DRP_CLK)
begin

    if (!DRP_RST_N)
        begin
        fsm   <= FSM_IDLE;
        index <= 3'd0;
        mode  <= 1'd0;
        done  <= 1'd0;
        end
    else
        begin
        
        case (fsm)

        //---------- Idle State ----------------------------
        FSM_IDLE :  
          
            begin
            if (start_reg2)
                begin
                fsm   <= FSM_LOAD;
                index <= 3'd0;
                mode  <= 1'd0;
                done  <= 1'd0;
                end
            else if ((gen3_reg2 != gen3_reg1) && (PCIE_PLL_SEL == "QPLL"))
                begin
                fsm   <= FSM_LOAD;
                index <= 3'd0;
                mode  <= 1'd1;
                done  <= 1'd0;
                end
            else
                begin
                fsm   <= FSM_IDLE;
                index <= 3'd0;
                mode  <= 1'd0;
                done  <= 1'd1;
                end
            end    
            
        //---------- Load DRP Address  ---------------------
        FSM_LOAD :
        
            begin
            fsm   <= (load_cnt == LOAD_CNT_MAX) ? FSM_READ : FSM_LOAD;
            index <= index;
            mode  <= mode;
            done  <= 1'd0;
            end  
            
        //---------- Read DRP ------------------------------
        FSM_READ :
        
            begin
            fsm   <= FSM_RRDY;
            index <= index;
            mode  <= mode;
            done  <= 1'd0;
            end
            
        //---------- Read DRP Ready ------------------------
        FSM_RRDY :    
        
            begin
            fsm   <= (rdy_reg2 ? FSM_WRITE : FSM_RRDY);
            index <= index;
            mode  <= mode;
            done  <= 1'd0;
            end  
            
        //---------- Write DRP -----------------------------
        FSM_WRITE :    
        
            begin
            fsm   <= FSM_WRDY;
            index <= index;
            mode  <= mode;
            done  <= 1'd0;
            end       
            
        //---------- Write DRP Ready -----------------------
        FSM_WRDY :    
        
            begin
            fsm   <= (rdy_reg2 ? FSM_DONE : FSM_WRDY);
            index <= index;
            mode  <= mode;
            done  <= 1'd0;
            end        
             
        //---------- DRP Done ------------------------------
        FSM_DONE :
        
            begin
            if ((index == INDEX_MAX) || (mode && (index == 3'd2)))
                begin
                fsm   <= mode ? FSM_QPLLRESET : FSM_IDLE;
                index <= 3'd0;
                mode  <= mode;
                done  <= 1'd0;
                end
            else       
                begin
                fsm   <= FSM_LOAD;
                index <= index + 3'd1;
                mode  <= mode;
                done  <= 1'd0;
                end
            end     
        
        //---------- QPLL Reset ----------------------------      
        FSM_QPLLRESET :
        
            begin
            fsm   <= !qplllock_reg2 ? FSM_QPLLLOCK : FSM_QPLLRESET;
            index <= 3'd0;
            mode  <= mode;
            done  <= 1'd0;
            end
            
        //---------- QPLL Reset ----------------------------      
        FSM_QPLLLOCK :
        
            begin
            fsm   <= qplllock_reg2 ? FSM_IDLE : FSM_QPLLLOCK;
            index <= 3'd0;
            mode  <= mode;
            done  <= 1'd0;
            end
              
        //---------- Default State -------------------------
        default :
        
            begin      
            fsm   <= FSM_IDLE;
            index <= 3'd0;
            mode  <= 1'd0;
            done  <= 1'd0;
            end
            
        endcase
        
        end
        
end 



//---------- QPLL DRP Output ---------------------------------------------------
assign DRP_ADDR      = addr;
assign DRP_EN        = (fsm == FSM_READ) || (fsm == FSM_WRITE);
assign DRP_DI        = di;
assign DRP_WE        = (fsm == FSM_WRITE); // || (fsm == FSM_WRDY);
assign DRP_DONE      = done;
assign DRP_QPLLRESET = (fsm == FSM_QPLLRESET);
assign DRP_CRSCODE   = crscode;
assign DRP_FSM       = fsm;



endmodule
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_qpll_reset.v
// Version    : 4.0
//----------------------------------------------------------------------------//
//  Filename     :  rp_qpll_reset.v
//  Description  :  QPLL Reset Module for 7 Series Transceiver
//  Version      :  11.4
//------------------------------------------------------------------------------


`timescale 1ns / 1ps



//---------- QPLL Reset Module --------------------------------------------------
module rp_qpll_reset #
(

    //---------- Global ------------------------------------
    parameter PCIE_PLL_SEL       = "CPLL",                  // PCIe PLL select for Gen1/Gen2 only
    parameter PCIE_POWER_SAVING  = "TRUE",                  // PCIe power saving
    parameter PCIE_LANE          = 1,                       // PCIe number of lanes
    parameter BYPASS_COARSE_OVRD = 1                        // Bypass coarse frequency override

)

(

    //---------- Input -------------------------------------
    input                           QRST_CLK,
    input                           QRST_RST_N,
    input                           QRST_MMCM_LOCK,
    input       [PCIE_LANE-1:0]     QRST_CPLLLOCK,
    input       [(PCIE_LANE-1)>>2:0]QRST_DRP_DONE,
    input       [(PCIE_LANE-1)>>2:0]QRST_QPLLLOCK,
    input       [ 1:0]              QRST_RATE,
    input       [PCIE_LANE-1:0]     QRST_QPLLRESET_IN,
    input       [PCIE_LANE-1:0]     QRST_QPLLPD_IN,
    
    //---------- Output ------------------------------------                     
    output                          QRST_OVRD,
    output                          QRST_DRP_START,
    output                          QRST_QPLLRESET_OUT,
    output                          QRST_QPLLPD_OUT,
    output                          QRST_IDLE,
    output      [11:0]              QRST_FSM

);

    //---------- Input Register ----------------------------
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                             mmcm_lock_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     cplllock_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [(PCIE_LANE-1)>>2:0]drp_done_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [(PCIE_LANE-1)>>2:0]qplllock_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 1:0]              rate_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     qpllreset_in_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     qpllpd_in_reg1;

(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                             mmcm_lock_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     cplllock_reg2;  
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [(PCIE_LANE-1)>>2:0]drp_done_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [(PCIE_LANE-1)>>2:0]qplllock_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 1:0]              rate_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     qpllreset_in_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [PCIE_LANE-1:0]     qpllpd_in_reg2;
    
    //---------- Output Register  --------------------------
    reg                             ovrd              =  1'd0;
    reg                             qpllreset         =  1'd1;
    reg                             qpllpd            =  1'd0;
    reg         [11:0]              fsm               = 12'd2;                 
   
    //---------- FSM ---------------------------------------                                         
    localparam                      FSM_IDLE          = 12'b000000000001; 
    localparam                      FSM_WAIT_LOCK     = 12'b000000000010;
    localparam                      FSM_MMCM_LOCK     = 12'b000000000100;   
    localparam                      FSM_DRP_START_NOM = 12'b000000001000;
    localparam                      FSM_DRP_DONE_NOM  = 12'b000000010000;
    localparam                      FSM_QPLLLOCK      = 12'b000000100000;
    localparam                      FSM_DRP_START_OPT = 12'b000001000000;                            
    localparam                      FSM_DRP_DONE_OPT  = 12'b000010000000;
    localparam                      FSM_QPLL_RESET    = 12'b000100000000;                                                         
    localparam                      FSM_QPLLLOCK2     = 12'b001000000000;
    localparam                      FSM_QPLL_PDRESET  = 12'b010000000000;
    localparam                      FSM_QPLL_PD       = 12'b100000000000;                                         
 
 
    
//---------- Input FF ----------------------------------------------------------
always @ (posedge QRST_CLK)
begin

    if (!QRST_RST_N)
        begin    
        //---------- 1st Stage FF --------------------------
        mmcm_lock_reg1    <=  1'd0;
        cplllock_reg1     <= {PCIE_LANE{1'd1}}; 
        drp_done_reg1     <= {(((PCIE_LANE-1)>>2)+1){1'd0}};     
        qplllock_reg1     <= {(((PCIE_LANE-1)>>2)+1){1'd0}}; 
        rate_reg1         <=  2'd0; 
        qpllreset_in_reg1 <= {PCIE_LANE{1'd1}}; 
        qpllpd_in_reg1    <= {PCIE_LANE{1'd0}}; 
        //---------- 2nd Stage FF --------------------------
        mmcm_lock_reg2    <=  1'd0;
        cplllock_reg2     <= {PCIE_LANE{1'd1}};
        drp_done_reg2     <= {(((PCIE_LANE-1)>>2)+1){1'd0}}; 
        qplllock_reg2     <= {(((PCIE_LANE-1)>>2)+1){1'd0}}; 
        rate_reg2         <=  2'd0;
        qpllreset_in_reg2 <= {PCIE_LANE{1'd1}}; 
        qpllpd_in_reg2    <= {PCIE_LANE{1'd0}};  
        end
    else
        begin  
        //---------- 1st Stage FF --------------------------
        mmcm_lock_reg1    <= QRST_MMCM_LOCK;   
        cplllock_reg1     <= QRST_CPLLLOCK; 
        drp_done_reg1     <= QRST_DRP_DONE; 
        qplllock_reg1     <= QRST_QPLLLOCK;
        rate_reg1         <= QRST_RATE; 
        qpllreset_in_reg1 <= QRST_QPLLRESET_IN;
        qpllpd_in_reg1    <= QRST_QPLLPD_IN;
        //---------- 2nd Stage FF --------------------------
        mmcm_lock_reg2    <= mmcm_lock_reg1;
        cplllock_reg2     <= cplllock_reg1;
        drp_done_reg2     <= drp_done_reg1; 
        qplllock_reg2     <= qplllock_reg1;
        rate_reg2         <= rate_reg1;
        qpllreset_in_reg2 <= qpllreset_in_reg1;
        qpllpd_in_reg2    <= qpllpd_in_reg1;
        end
        
end    



//---------- QPLL Reset FSM ----------------------------------------------------
always @ (posedge QRST_CLK)
begin

    if (!QRST_RST_N)
        begin
        fsm       <= FSM_WAIT_LOCK;
        ovrd      <= 1'd0;
        qpllreset <= 1'd1;
        qpllpd    <= 1'd0;
        end
    else
        begin
        
        case (fsm)
            
        //---------- Idle State ----------------------------
        FSM_IDLE :
        
            begin
            if (!QRST_RST_N)
                begin
                fsm       <= FSM_WAIT_LOCK;
                ovrd      <= 1'd0;
                qpllreset <= 1'd1;
                qpllpd    <= 1'd0;
                end
            else
                begin
                fsm       <= FSM_IDLE;
                ovrd      <= ovrd;
                qpllreset <= &qpllreset_in_reg2;
                qpllpd    <= &qpllpd_in_reg2;
                end
            end  
            
        //---------- Wait for CPLL and QPLL to Lose Lock ---
        FSM_WAIT_LOCK :
        
            begin
            fsm       <= ((&(~cplllock_reg2)) && (&(~qplllock_reg2)) ? FSM_MMCM_LOCK : FSM_WAIT_LOCK);
            ovrd      <= ovrd;
            qpllreset <= qpllreset;
            qpllpd    <= qpllpd;
            end      
            
        //---------- Wait for MMCM and CPLL Lock -----------
        FSM_MMCM_LOCK :
        
            begin
            fsm       <= ((mmcm_lock_reg2 && (&cplllock_reg2)) ? FSM_DRP_START_NOM : FSM_MMCM_LOCK);
            ovrd      <= ovrd;
            qpllreset <= qpllreset;
            qpllpd    <= qpllpd;
            end      
            
        //---------- Start QPLL DRP for Normal QPLL Lock Mode 
        FSM_DRP_START_NOM:
        
            begin
            fsm       <= (&(~drp_done_reg2) ? FSM_DRP_DONE_NOM : FSM_DRP_START_NOM);
            ovrd      <= ovrd;
            qpllreset <= qpllreset;
            qpllpd    <= qpllpd;
            end

        //---------- Wait for QPLL DRP Done ----------------
        FSM_DRP_DONE_NOM :
        
            begin
            fsm       <= (&drp_done_reg2 ? FSM_QPLLLOCK : FSM_DRP_DONE_NOM);
            ovrd      <= ovrd;
            qpllreset <= qpllreset;
            qpllpd    <= qpllpd;
            end 
            
        //---------- Wait for QPLL Lock --------------------
        FSM_QPLLLOCK :
        
            begin
            fsm       <= (&qplllock_reg2 ? ((BYPASS_COARSE_OVRD == 1) ? FSM_QPLL_PDRESET : FSM_DRP_START_OPT) : FSM_QPLLLOCK);
            ovrd      <= ovrd;
            qpllreset <= 1'd0;
            qpllpd    <= qpllpd;
            end
            
        //---------- Start QPLL DRP for Optimized QPLL Lock Mode 
        FSM_DRP_START_OPT:
        
            begin
            fsm       <= (&(~drp_done_reg2) ? FSM_DRP_DONE_OPT : FSM_DRP_START_OPT);
            ovrd      <= 1'd1;
            qpllreset <= qpllreset;
            qpllpd    <= qpllpd;
            end

        //---------- Wait for QPLL DRP Done ----------------
        FSM_DRP_DONE_OPT :
        
            begin
            if (&drp_done_reg2)
                begin
                fsm       <= ((PCIE_PLL_SEL == "QPLL") ? FSM_QPLL_RESET : FSM_QPLL_PDRESET);
                ovrd      <= ovrd;
                qpllreset <= (PCIE_PLL_SEL == "QPLL");
                qpllpd    <= qpllpd;
                end
            else
                begin
                fsm       <= FSM_DRP_DONE_OPT;
                ovrd      <= ovrd;
                qpllreset <= qpllreset;
                qpllpd    <= qpllpd;
                end
            end 
            
        //---------- Reset QPLL ----------------------------
        FSM_QPLL_RESET :
            
            begin
            fsm       <= (&(~qplllock_reg2) ? FSM_QPLLLOCK2 : FSM_QPLL_RESET);  
            ovrd      <= ovrd;
            qpllreset <= 1'd1;
            qpllpd    <= 1'd0;
            end     
            
        //---------- Wait for QPLL Lock --------------------
        FSM_QPLLLOCK2 :
        
            begin
            fsm       <= (&qplllock_reg2 ? FSM_IDLE : FSM_QPLLLOCK2);
            ovrd      <= ovrd;
            qpllreset <= 1'd0;
            qpllpd    <= 1'd0;
            end
            
        //---------- Hold QPLL in Reset --------------------
        FSM_QPLL_PDRESET :
        
            begin
            fsm       <= FSM_QPLL_PD;
            ovrd      <= ovrd;
            qpllreset <= (PCIE_PLL_SEL == "CPLL") ? (rate_reg2 != 2'd2) : 1'd0; 
            qpllpd    <= qpllpd;
            end
            
        //---------- Power-down QPLL ----------------------- 
        FSM_QPLL_PD :
        
            begin
            fsm       <= FSM_IDLE;
            ovrd      <= ovrd;
            qpllreset <= qpllreset;
            qpllpd    <= (PCIE_PLL_SEL == "CPLL") ? (rate_reg2 != 2'd2) : 1'd0; 
            end 
                
        //---------- Default State -------------------------
        default :
        
            begin
            fsm       <= FSM_WAIT_LOCK;
            ovrd      <= 1'd0;
            qpllreset <= 1'd0;
            qpllpd    <= 1'd0;
            end

        endcase
        
        end
        
end



//---------- QPLL Lock Output --------------------------------------------------
assign QRST_OVRD          = ovrd;
assign QRST_DRP_START     = (fsm == FSM_DRP_START_NOM) || (fsm == FSM_DRP_START_OPT); 
assign QRST_QPLLRESET_OUT = qpllreset;
assign QRST_QPLLPD_OUT    = ((PCIE_POWER_SAVING == "FALSE") ? 1'd0 : qpllpd);  
assign QRST_IDLE          = (fsm == FSM_IDLE);
assign QRST_FSM           = fsm;                   



endmodule
//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_qpll_wrapper.v
// Version    : 4.0

`timescale 1ns / 1ps



//---------- QPLL Wrapper ----------------------------------------------------
module rp_qpll_wrapper #
(
    
    parameter PCIE_SIM_MODE    = "FALSE",                   // PCIe sim mode
    parameter PCIE_GT_DEVICE   = "GTX",                     // PCIe GT device
    parameter PCIE_USE_MODE    = "3.0",                     // PCIe use mode
    parameter PCIE_PLL_SEL     = "CPLL",                    // PCIe PLL select for Gen1/Gen2 only
    parameter PCIE_REFCLK_FREQ = 0                          // PCIe reference clock frequency
 
)

(    
    
    //---------- QPLL Clock Ports --------------------------
    input               QPLL_GTGREFCLK,
    input               QPLL_QPLLLOCKDETCLK,
    
    output              QPLL_QPLLOUTCLK,
    output              QPLL_QPLLOUTREFCLK,
    output              QPLL_QPLLLOCK,
    
    //---------- QPLL Reset Ports --------------------------
    input               QPLL_QPLLPD,
    input               QPLL_QPLLRESET,

    //---------- QPLL DRP Ports ----------------------------
    input               QPLL_DRPCLK,
    input       [ 7:0]  QPLL_DRPADDR,
    input               QPLL_DRPEN,
    input       [15:0]  QPLL_DRPDI,
    input               QPLL_DRPWE,
    
    output      [15:0]  QPLL_DRPDO,
    output              QPLL_DRPRDY
    
);



    //---------- Select QPLL Feedback Divider --------------
    //  N = 100 for 100 MHz ref clk and 10Gb/s line rate
    //  N =  80 for 125 MHz ref clk and 10Gb/s line rate
    //  N =  40 for 250 MHz ref clk and 10Gb/s line rate
    //------------------------------------------------------
    //  N =  80 for 100 MHz ref clk and  8Gb/s line rate
    //  N =  64 for 125 MHz ref clk and  8Gb/s line rate
    //  N =  32 for 250 MHz ref clk and  8Gb/s line rate
    //------------------------------------------------------
    localparam QPLL_FBDIV = (PCIE_REFCLK_FREQ == 2) && (PCIE_PLL_SEL == "QPLL") ? 10'b0010000000 : 
                            (PCIE_REFCLK_FREQ == 1) && (PCIE_PLL_SEL == "QPLL") ? 10'b0100100000 : 
                            (PCIE_REFCLK_FREQ == 0) && (PCIE_PLL_SEL == "QPLL") ? 10'b0101110000 : 
                            (PCIE_REFCLK_FREQ == 2) && (PCIE_PLL_SEL == "CPLL") ? 10'b0001100000 : 
                            (PCIE_REFCLK_FREQ == 1) && (PCIE_PLL_SEL == "CPLL") ? 10'b0011100000 : 10'b0100100000;
    
    //---------- Select GTP QPLL Feedback Divider ----------                     
    localparam GTP_QPLL_FBDIV  = (PCIE_REFCLK_FREQ == 2) ? 3'd2 :
                                 (PCIE_REFCLK_FREQ == 1) ? 3'd4 : 3'd5;

    //---------- Select BIAS_CFG ---------------------------
    localparam BIAS_CFG = ((PCIE_USE_MODE == "1.0") && (PCIE_PLL_SEL == "CPLL")) ? 64'h0000042000001000 : 64'h0000040000001000;
    localparam          SIM_VERSION =   "2.0";                                                                 
    //localparam          SIM_VERSION = (PCIE_SIM_MODE == "FALSE") ? PCIE_USE_MODE : "2.0";                                                                 



//---------- Select GTX or GTH or GTP ------------------------------------------
//  Notes  :  Attributes that are commented out uses the GT default settings
//------------------------------------------------------------------------------
generate if (PCIE_GT_DEVICE == "GTP") 

    //---------- GTP Common ----------------------------------------------------
    begin : gtp_common

    //---------- GTP Common Module ---------------------------------------------
    GTPE2_COMMON #
    (
       
        //---------- Simulation Attributes -------------------------------------                                                     
        .SIM_PLL0REFCLK_SEL             (3'b001),                               //                                                   
        .SIM_PLL1REFCLK_SEL             (3'b001),                               //                                                   
        .SIM_RESET_SPEEDUP              (PCIE_SIM_MODE),                        //                                                   
        .SIM_VERSION                    (PCIE_USE_MODE),                        //                                                   
                                                                                                                                     
        //---------- Clock Attributes ------------------------------------------                                                     
        .PLL0_CFG                       (27'h01F024C),                          // Optimized for IES                                                  
        .PLL1_CFG                       (27'h01F024C),                          // Optimized for IES                                                  
        .PLL_CLKOUT_CFG                 (8'd0),                                 // Optimized for IES                                                   
        .PLL0_DMON_CFG                  (1'b0),                                 // Optimized for IES                                                  
        .PLL1_DMON_CFG                  (1'b0),                                 // Optimized for IES                                      
        .PLL0_FBDIV                     (GTP_QPLL_FBDIV),                       // Optimized for IES                                                  
        .PLL1_FBDIV                     (GTP_QPLL_FBDIV),                       // Optimized for IES                                                   
        .PLL0_FBDIV_45                  (5),                                    // Optimized for IES                                                  
        .PLL1_FBDIV_45                  (5),                                    // Optimized for IES                                                  
        .PLL0_INIT_CFG                  (24'h00001E),                           // Optimized for IES                                                  
        .PLL1_INIT_CFG                  (24'h00001E),                           // Optimized for IES                                                   
        .PLL0_LOCK_CFG                  ( 9'h1E8),                              // Optimized for IES    
        .PLL1_LOCK_CFG                  ( 9'h1E8),                              // Optimized for IES                                                                                                                   
        .PLL0_REFCLK_DIV                (1),                                    // Optimized for IES                                                  
        .PLL1_REFCLK_DIV                (1),                                    // Optimized for IES                                                  
                                                                                                                                     
        //---------- MISC ------------------------------------------------------                                                     
        .BIAS_CFG                       (64'h0000000000050001),                 // Optimized for GES                                                 
      //.COMMON_CFG                     (32'd0),                                //                                                                                                   
        .RSVD_ATTR0                     (16'd0),                                //                                                   
        .RSVD_ATTR1                     (16'd0)                                 //                                                   
    
    )
    gtpe2_common_i 
    (
           
        //---------- Clock -----------------------------------------------------                         
        .GTGREFCLK0                     ( 1'd0),                                //                       
        .GTGREFCLK1                     ( 1'd0),                                //                       
        .GTREFCLK0                      (QPLL_GTGREFCLK),                       //                       
        .GTREFCLK1                      ( 1'd0),                                //                       
        .GTEASTREFCLK0                  ( 1'd0),                                //                       
        .GTEASTREFCLK1                  ( 1'd0),                                //                       
        .GTWESTREFCLK0                  ( 1'd0),                                //                       
        .GTWESTREFCLK1                  ( 1'd0),                                //                       
        .PLL0LOCKDETCLK                 (QPLL_QPLLLOCKDETCLK),                  //                       
        .PLL1LOCKDETCLK                 (QPLL_QPLLLOCKDETCLK),                  //                       
        .PLL0LOCKEN                     ( 1'd1),                                //                       
        .PLL1LOCKEN                     ( 1'd1),                                //                       
        .PLL0REFCLKSEL                  ( 3'd1),                                // Optimized for IES                      
        .PLL1REFCLKSEL                  ( 3'd1),                                // Optimized for IES                      
        .PLLRSVD1                       (16'd0),                                // Optimized for IES                    
        .PLLRSVD2                       ( 5'd0),                                // Optimized for IES                  
        
        .PLL0OUTCLK                     (QPLL_QPLLOUTCLK),                      //                       
        .PLL1OUTCLK                     (),                                     //                       
        .PLL0OUTREFCLK                  (QPLL_QPLLOUTREFCLK),                   //                       
        .PLL1OUTREFCLK                  (),                                     //                       
        .PLL0LOCK                       (QPLL_QPLLLOCK),                        //                       
        .PLL1LOCK                       (),                                     //                       
        .PLL0FBCLKLOST                  (),                                     //                       
        .PLL1FBCLKLOST                  (),                                     //                       
        .PLL0REFCLKLOST                 (),                                     //                       
        .PLL1REFCLKLOST                 (),                                     //                       
        .DMONITOROUT                    (),                                     // 
                                                                                                         
        //---------- Reset -----------------------------------------------------                         
        .PLL0PD                         (QPLL_QPLLPD),                          //                       
        .PLL1PD                         ( 1'd1),                                //                       
        .PLL0RESET                      (QPLL_QPLLRESET),                       //                       
        .PLL1RESET                      ( 1'd1),                                //                       
                                                                                                   
        //---------- DRP -------------------------------------------------------                         
        .DRPCLK                         (QPLL_DRPCLK),                          //                       
        .DRPADDR                        (QPLL_DRPADDR),                         //                       
        .DRPEN                          (QPLL_DRPEN),                           //                       
        .DRPDI                          (QPLL_DRPDI),                           //                       
        .DRPWE                          (QPLL_DRPWE),                           //                       
                                                                                                         
        .DRPDO                          (QPLL_DRPDO),                           //                       
        .DRPRDY                         (QPLL_DRPRDY),                          //                       
                                                                                                         
        //---------- Band Gap --------------------------------------------------                         
        .BGBYPASSB                      ( 1'd1),                                // Optimized for IES                      
        .BGMONITORENB                   ( 1'd1),                                // Optimized for IES                      
        .BGPDB                          ( 1'd1),                                // Optimized for IES
        .BGRCALOVRD                     ( 5'd31),                               // Optimized for IES
        .BGRCALOVRDENB                  ( 1'd1),                                // Optimized for IES
        
        //---------- MISC ------------------------------------------------------
        .PMARSVD                        ( 8'd0),                                //
        .RCALENB                        ( 1'd1),                                // Optimized for IES
                                                                               
        .REFCLKOUTMONITOR0              (),                                     //
        .REFCLKOUTMONITOR1              (),                                     //
        .PMARSVDOUT                     ()                                      //  
    
    );
   
    end

else if (PCIE_GT_DEVICE == "GTH") 
    
    //---------- GTH Common ----------------------------------------------------
    begin : gth_common
    
    //---------- GTX Common Module ---------------------------------------------
    GTHE2_COMMON #
    (
       
        //---------- Simulation Attributes -------------------------------------
        .SIM_QPLLREFCLK_SEL             (3'b001),                               //
        .SIM_RESET_SPEEDUP              (PCIE_SIM_MODE),                        //
        .SIM_VERSION                    ( SIM_VERSION ),                        // 
        
        //---------- Clock Attributes ------------------------------------------
        .QPLL_CFG                       (27'h04801C7),                          // QPLL for Gen3, optimized for GES
        .QPLL_CLKOUT_CFG                ( 4'b1111),                             // Optimized for GES
        .QPLL_COARSE_FREQ_OVRD          ( 6'b010000),                           // 
        .QPLL_COARSE_FREQ_OVRD_EN       ( 1'd0),                                // 
        .QPLL_CP                        (10'h0FF),                              // * Optimized for IES and PCIe PLL BW 
        .QPLL_CP_MONITOR_EN             ( 1'd0),                                //
        .QPLL_DMONITOR_SEL              ( 1'd0),                                //
        .QPLL_FBDIV                     (QPLL_FBDIV),                           // 
        .QPLL_FBDIV_MONITOR_EN          ( 1'd0),                                //
        .QPLL_FBDIV_RATIO               ( 1'd1),                                // Optimized
        .QPLL_INIT_CFG	                (24'h000006),                           // 
        .QPLL_LOCK_CFG                  (16'h05E8),                             // Optimized for IES
        .QPLL_LPF                       ( 4'hD),                                // Optimized for IES, [1:0] = 2'b00 (13.3 KOhm), [1:0] = 2'b01 (57.0 KOhm)
        .QPLL_REFCLK_DIV	              ( 1),                                   // 
        .QPLL_RP_COMP                   ( 1'd0),                                // GTH new
        .QPLL_VTRL_RESET                ( 2'd0),                                // GTH new
    
        //---------- MISC ------------------------------------------------------
        .BIAS_CFG	                      (64'h0000040000001050),                 // Optimized for GES
        .COMMON_CFG	                    (32'h0000001C),                                // 
        .RCAL_CFG                       ( 2'b00),                               // GTH new
        .RSVD_ATTR0                     (16'd0),                                // GTH
        .RSVD_ATTR1                     (16'd0)                                 // GTH    
    )
    gthe2_common_i 
    (
           
        //---------- Clock -----------------------------------------------------
        .GTGREFCLK                      ( 1'd0),                                //    
        .GTREFCLK0                      (QPLL_GTGREFCLK),                       //
        .GTREFCLK1                      ( 1'd0),                                //
        .GTNORTHREFCLK0                 ( 1'd0),                                //
        .GTNORTHREFCLK1                 ( 1'd0),                                //
        .GTSOUTHREFCLK0                 ( 1'd0),                                //
        .GTSOUTHREFCLK1                 ( 1'd0),                                //
        .QPLLLOCKDETCLK                 (QPLL_QPLLLOCKDETCLK),                  //
        .QPLLLOCKEN                     ( 1'd1),                                //
        .QPLLREFCLKSEL                  ( 3'd1),                                //
        .QPLLRSVD1                      (16'd0),                                //
        .QPLLRSVD2                      ( 5'b11111),                            //
                                                                               
        .QPLLOUTCLK                     (QPLL_QPLLOUTCLK),                      //
        .QPLLOUTREFCLK                  (QPLL_QPLLOUTREFCLK),                   //
        .QPLLLOCK                       (QPLL_QPLLLOCK),                        //
        .QPLLFBCLKLOST                  (),                                     //
        .QPLLREFCLKLOST                 (),                                     //
        .QPLLDMONITOR                   (),                                     //
        
        //---------- Reset -----------------------------------------------------
        .QPLLPD                         (QPLL_QPLLPD),                          // 
        .QPLLRESET                      (QPLL_QPLLRESET),                       //
        .QPLLOUTRESET                   ( 1'd0),                                //
        
        //---------- DRP -------------------------------------------------------
        .DRPCLK                         (QPLL_DRPCLK),                          //
        .DRPADDR                        (QPLL_DRPADDR),                         //
        .DRPEN                          (QPLL_DRPEN),                           //
        .DRPDI                          (QPLL_DRPDI),                           //
        .DRPWE                          (QPLL_DRPWE),                           //
                                                                              
        .DRPDO                          (QPLL_DRPDO),                           //
        .DRPRDY                         (QPLL_DRPRDY),                          //
                
        //---------- Band Gap --------------------------------------------------    
        .BGBYPASSB                      ( 1'd1),                                // Optimized for IES
        .BGMONITORENB                   ( 1'd1),                                // Optimized for IES
        .BGPDB                          ( 1'd1),                                // Optimized for IES
        .BGRCALOVRD                     ( 5'd31),                               // Optimized for IES
        .BGRCALOVRDENB                  ( 1'd1),                                // GTH, Optimized for IES
        
        //---------- MISC ------------------------------------------------------
        .PMARSVD                        ( 8'd0),                                //
        .RCALENB                        ( 1'd1),                                // Optimized for IES
                                                                              
        .REFCLKOUTMONITOR               (),                                     //
        .PMARSVDOUT                     ()                                      // GTH
    
    );

    end    
    
else

    //---------- GTX Common ----------------------------------------------------
    begin : gtx_common

    //---------- GTX Common Module ---------------------------------------------
    GTXE2_COMMON #
    (
       
        //---------- Simulation Attributes ------------------------------------- 
        .SIM_QPLLREFCLK_SEL             ( 3'b001),                              //
        .SIM_RESET_SPEEDUP              (PCIE_SIM_MODE),                        //
        .SIM_VERSION                    (PCIE_USE_MODE),                        // 
        
        //---------- Clock Attributes ------------------------------------------
        .QPLL_CFG                       (27'h06801C1),                          // QPLL for Gen3, Optimized for silicon, 
      //.QPLL_CLKOUT_CFG                ( 4'd0),                                //
        .QPLL_COARSE_FREQ_OVRD          ( 6'b010000),                           // 
        .QPLL_COARSE_FREQ_OVRD_EN       ( 1'd0),                                // 
        .QPLL_CP                        (10'h01F),                              // Optimized for Gen3 compliance (Gen1/Gen2 = 10'h1FF) 
        .QPLL_CP_MONITOR_EN             ( 1'd0),                                //
        .QPLL_DMONITOR_SEL              ( 1'd0),                                //
        .QPLL_FBDIV                     (QPLL_FBDIV),                           // 
        .QPLL_FBDIV_MONITOR_EN          ( 1'd0),                                //
        .QPLL_FBDIV_RATIO               ( 1'd1),                                // Optimized for silicon
      //.QPLL_INIT_CFG	                (24'h000006),                           // 
        .QPLL_LOCK_CFG                  (16'h21E8),                             // Optimized for silicon, IES = 16'h01D0, GES 16'h21D0
        .QPLL_LPF                       ( 4'hD),                                // Optimized for silicon, [1:0] = 2'b00 (13.3 KOhm), [1:0] = 2'b01 (57.0 KOhm)
        .QPLL_REFCLK_DIV	              (1),                                    // 
    
        //---------- MISC ------------------------------------------------------
        .BIAS_CFG                       (BIAS_CFG)                              // Optimized for silicon
      //.COMMON_CFG                     (32'd0)                                 //
    
    )
    gtxe2_common_i 
    (
           
        //---------- Clock -----------------------------------------------------
        .GTGREFCLK                      ( 1'd0),                                //
        .GTREFCLK0                      (QPLL_GTGREFCLK),                       //
        .GTREFCLK1                      ( 1'd0),                                //
        .GTNORTHREFCLK0                 ( 1'd0),                                //
        .GTNORTHREFCLK1                 ( 1'd0),                                //
        .GTSOUTHREFCLK0                 ( 1'd0),                                //
        .GTSOUTHREFCLK1                 ( 1'd0),                                //
        .QPLLLOCKDETCLK                 (QPLL_QPLLLOCKDETCLK),                  //
        .QPLLLOCKEN                     ( 1'd1),                                //
        .QPLLREFCLKSEL                  ( 3'd1),                                //
        .QPLLRSVD1                      (16'd0),                                //
        .QPLLRSVD2                      ( 5'b11111),                            //
                                                                               
        .QPLLOUTCLK                     (QPLL_QPLLOUTCLK),                      //
        .QPLLOUTREFCLK                  (QPLL_QPLLOUTREFCLK),                   //
        .QPLLLOCK                       (QPLL_QPLLLOCK),                        //
        .QPLLFBCLKLOST                  (),                                     //
        .QPLLREFCLKLOST                 (),                                     //
        .QPLLDMONITOR                   (),                                     //
        
        //---------- Reset -----------------------------------------------------
        .QPLLPD                         (QPLL_QPLLPD),                          // 
        .QPLLRESET                      (QPLL_QPLLRESET),                       //
        .QPLLOUTRESET                   ( 1'd0),                                //
        
        //---------- DRP -------------------------------------------------------
        .DRPCLK                         (QPLL_DRPCLK),                          //
        .DRPADDR                        (QPLL_DRPADDR),                         //
        .DRPEN                          (QPLL_DRPEN),                           //
        .DRPDI                          (QPLL_DRPDI),                           //
        .DRPWE                          (QPLL_DRPWE),                           //
                                                                               
        .DRPDO                          (QPLL_DRPDO),                           //
        .DRPRDY                         (QPLL_DRPRDY),                          //
                
        //---------- Band Gap --------------------------------------------------    
        .BGBYPASSB                      ( 1'd1),                                //
        .BGMONITORENB                   ( 1'd1),                                //
        .BGPDB                          ( 1'd1),                                //
        .BGRCALOVRD                     ( 5'd31),                               //
        
        //---------- MISC ------------------------------------------------------
        .PMARSVD                        ( 8'd0),                                //
        .RCALENB                        ( 1'd1),                                // Optimized for GES
                                                                               
        .REFCLKOUTMONITOR               ()                                      //
    
    );
    
    end
            
endgenerate

endmodule

//-----------------------------------------------------------------------------
//
// Project    : Virtex-7 FPGA Gen3 Integrated Block for PCI Express
// File       : rp_rxeq_scan.v
// Version    : 4.0
//----------------------------------------------------------------------------//
//  Filename     :  rp_rxeq_scan.v
//  Description  :  PIPE RX Equalization Eye Scan Module for 7 Series Transceiver
//  Version      :  18.0
//------------------------------------------------------------------------------


`timescale 1ns / 1ps



//---------- RXEQ Eye Scan Module ----------------------------------------------
module rp_rxeq_scan #
(

    parameter PCIE_SIM_MODE       = "FALSE",                // PCIe sim mode 
    parameter PCIE_GT_DEVICE      = "GTX",                  // PCIe GT device
    parameter PCIE_RXEQ_MODE_GEN3 = 1,                      // PCIe RX equalization mode
    parameter CONVERGE_MAX        = 22'd3125000,            // Convergence max count (12ms) 
    parameter CONVERGE_MAX_BYPASS = 23'd4687500             // Convergence max count for phase2/3 bypass mode (8ms)
)

(

    //---------- Input -------------------------------------
    input               RXEQSCAN_CLK,                      
    input               RXEQSCAN_RST_N,
       
    input       [ 1:0]  RXEQSCAN_CONTROL,   
    input       [ 2:0]  RXEQSCAN_PRESET,
    input               RXEQSCAN_PRESET_VALID,
    input       [ 3:0]  RXEQSCAN_TXPRESET,
    input       [17:0]  RXEQSCAN_TXCOEFF,
    input               RXEQSCAN_NEW_TXCOEFF_REQ,
    input       [ 5:0]  RXEQSCAN_FS,
    input       [ 5:0]  RXEQSCAN_LF,
     
    
    //---------- Output ------------------------------------
    output              RXEQSCAN_PRESET_DONE,
    output      [17:0]  RXEQSCAN_NEW_TXCOEFF,
    output              RXEQSCAN_NEW_TXCOEFF_DONE,
    output              RXEQSCAN_LFFS_SEL,
    output              RXEQSCAN_ADAPT_DONE

);

    //---------- Input Register ----------------------------
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 2:0]  preset_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 preset_valid_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 3:0]  txpreset_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [17:0]  txcoeff_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 new_txcoeff_req_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 5:0]  fs_reg1;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 5:0]  lf_reg1;
    
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 2:0]  preset_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 preset_valid_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 3:0]  txpreset_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [17:0]  txcoeff_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg                 new_txcoeff_req_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 5:0]  fs_reg2;
(* ASYNC_REG = "TRUE", SHIFT_EXTRACT = "NO" *)    reg         [ 5:0]  lf_reg2;

    //---------- Internal Signals --------------------------
    reg                 adapt_done_cnt = 1'd0;

    //---------- Output Register ---------------------------          
    reg                 preset_done      =  1'd0;
    reg         [22:0]  converge_cnt     = 23'd0;
    reg         [17:0]  new_txcoeff      = 18'd0;
    reg                 new_txcoeff_done =  1'd0;
    reg                 lffs_sel         =  1'd0;
    reg                 adapt_done       =  1'd0;
    reg         [ 3:0]  fsm              =  4'd0;

    //---------- FSM ---------------------------------------                                         
    localparam          FSM_IDLE            = 4'b0001;
    localparam          FSM_PRESET          = 4'b0010;
    localparam          FSM_CONVERGE        = 4'b0100;
    localparam          FSM_NEW_TXCOEFF_REQ = 4'b1000; 
    
    //---------- Simulation Speedup ------------------------
    //  Gen3:  32 bits / PCLK : 1 million bits / X PCLK
    //         X = 
    //------------------------------------------------------
    localparam converge_max_cnt        = (PCIE_SIM_MODE == "TRUE") ? 22'd1000 : CONVERGE_MAX;   
    localparam converge_max_bypass_cnt = (PCIE_SIM_MODE == "TRUE") ? 23'd1000 : CONVERGE_MAX_BYPASS;   
    
    

//---------- Input FF ----------------------------------------------------------
always @ (posedge RXEQSCAN_CLK)
begin

    if (!RXEQSCAN_RST_N)
        begin   
        //---------- 1st Stage FF --------------------------  
        preset_reg1          <=  3'd0;
        preset_valid_reg1    <=  1'd0;
        txpreset_reg1        <=  4'd0;
        txcoeff_reg1         <= 18'd0;
        new_txcoeff_req_reg1 <=  1'd0;
        fs_reg1              <=  6'd0;
        lf_reg1              <=  6'd0;
        //---------- 2nd Stage FF --------------------------
        preset_reg2          <=  3'd0;
        preset_valid_reg2    <=  1'd0;
        txpreset_reg2        <=  4'd0;
        txcoeff_reg2         <= 18'd0;
        new_txcoeff_req_reg2 <=  1'd0;
        fs_reg2              <=  6'd0;
        lf_reg2              <=  6'd0;
        end
    else
        begin  
        //---------- 1st Stage FF --------------------------  
        preset_reg1          <= RXEQSCAN_PRESET;
        preset_valid_reg1    <= RXEQSCAN_PRESET_VALID;
        txpreset_reg1        <= RXEQSCAN_TXPRESET;
        txcoeff_reg1         <= RXEQSCAN_TXCOEFF;
        new_txcoeff_req_reg1 <= RXEQSCAN_NEW_TXCOEFF_REQ;
        fs_reg1              <= RXEQSCAN_FS;
        lf_reg1              <= RXEQSCAN_LF;
        //---------- 2nd Stage FF -------------------------- 
        preset_reg2          <= preset_reg1;
        preset_valid_reg2    <= preset_valid_reg1;
        txpreset_reg2        <= txpreset_reg1;
        txcoeff_reg2         <= txcoeff_reg1;
        new_txcoeff_req_reg2 <= new_txcoeff_req_reg1;
        fs_reg2              <= fs_reg1;
        lf_reg2              <= lf_reg1;
        end
        
end     



//---------- Eye Scan ----------------------------------------------------------
always @ (posedge RXEQSCAN_CLK)
begin

    if (!RXEQSCAN_RST_N)
        begin
        fsm              <=  FSM_IDLE;
        preset_done      <=  1'd0;
        converge_cnt     <= 22'd0;
        new_txcoeff      <= 18'd0;
        new_txcoeff_done <=  1'd0;
        lffs_sel         <=  1'd0;
        adapt_done       <=  1'd0;
        adapt_done_cnt   <=  1'd0;
        end                   
    else
    
        begin
    
        case (fsm)
        
        //---------- Idle State ----------------------------
        FSM_IDLE : 
            
            begin   
             
            //---------- Process RXEQ Preset ---------------
            if (preset_valid_reg2)
                begin
                fsm              <=  FSM_PRESET;
                preset_done      <=  1'd1;
                converge_cnt     <= 22'd0;
                new_txcoeff      <=  new_txcoeff;
                new_txcoeff_done <=  1'd0;
                lffs_sel         <=  1'd0;
                adapt_done       <=  1'd0;
                adapt_done_cnt   <=  adapt_done_cnt;
                end            
            //---------- Request New TX Coefficient --------
            else if (new_txcoeff_req_reg2)
                begin
                fsm              <=  FSM_CONVERGE;
                preset_done      <=  1'd0;
                converge_cnt     <= 22'd0;
                new_txcoeff      <= (PCIE_RXEQ_MODE_GEN3 == 0) ? txcoeff_reg2 : 18'd4;  // Optimized for Gen3 RX JTOL
                //new_txcoeff      <= (PCIE_RXEQ_MODE_GEN3 == 0) ? txcoeff_reg2 : (PCIE_GT_DEVICE == "GTX") ? 18'd5 : 18'd4;  // Optimized for Gen3 RX JTOL
                new_txcoeff_done <=  1'd0;
                lffs_sel         <= (PCIE_RXEQ_MODE_GEN3 == 0) ? 1'd0 : 1'd1;
                adapt_done       <=  1'd0; 
                adapt_done_cnt   <=  adapt_done_cnt;
                end  
            //---------- Default ---------------------------
            else
                begin
                fsm              <=  FSM_IDLE;
                preset_done      <=  1'd0;
                converge_cnt     <= 22'd0;
                new_txcoeff      <=  new_txcoeff;
                new_txcoeff_done <=  1'd0;
                lffs_sel         <=  1'd0;
                adapt_done       <=  1'd0;
                adapt_done_cnt   <=  adapt_done_cnt;
                end
                
            end
            
        //---------- Process RXEQ Preset -------------------
        FSM_PRESET :

            begin
            fsm              <= (!preset_valid_reg2) ? FSM_IDLE : FSM_PRESET;
            preset_done      <=  1'd1;
            converge_cnt     <= 22'd0;
            new_txcoeff      <=  new_txcoeff;
            new_txcoeff_done <=  1'd0;
            lffs_sel         <=  1'd0;
            adapt_done       <=  1'd0;
            adapt_done_cnt   <=  adapt_done_cnt;
            end
            
        //---------- Wait for Convergence ------------------    
        FSM_CONVERGE :
           
            begin
            if ((adapt_done_cnt == 1'd0) && (RXEQSCAN_CONTROL == 2'd2))
                begin
                fsm              <= FSM_NEW_TXCOEFF_REQ;
                preset_done      <=  1'd0;
                converge_cnt     <= 22'd0;
                new_txcoeff      <= new_txcoeff;
                new_txcoeff_done <= 1'd0;
                lffs_sel         <= lffs_sel;
                adapt_done       <= 1'd0;
                adapt_done_cnt   <= adapt_done_cnt;
                end
            else
                begin
                
                //---------- Phase2/3 ----------------------
                if (RXEQSCAN_CONTROL == 2'd2)
                    fsm <= (converge_cnt == converge_max_cnt)        ? FSM_NEW_TXCOEFF_REQ : FSM_CONVERGE;
                //---------- Phase2/3 Bypass ---------------
                else
                    fsm <= (converge_cnt == converge_max_bypass_cnt) ? FSM_NEW_TXCOEFF_REQ : FSM_CONVERGE;
                
                preset_done      <= 1'd0;
                converge_cnt     <= converge_cnt + 1'd1;
                new_txcoeff      <= new_txcoeff;
                new_txcoeff_done <= 1'd0;
                lffs_sel         <= lffs_sel;
                adapt_done       <= 1'd0;
                adapt_done_cnt   <= adapt_done_cnt;
                end
            end
            
        //---------- Request New TX Coefficient ------------
        FSM_NEW_TXCOEFF_REQ :

            begin 
            if (!new_txcoeff_req_reg2)
                begin
                fsm              <= FSM_IDLE;
                preset_done      <=  1'd0;
                converge_cnt     <= 22'd0;
                new_txcoeff      <= new_txcoeff;
                new_txcoeff_done <= 1'd0;
                lffs_sel         <= lffs_sel;
                adapt_done       <= 1'd0;
                adapt_done_cnt   <= (RXEQSCAN_CONTROL == 2'd3) ? 1'd0 : adapt_done_cnt + 1'd1;
                end
            else
                begin
                fsm              <= FSM_NEW_TXCOEFF_REQ;
                preset_done      <=  1'd0;
                converge_cnt     <= 22'd0;
                new_txcoeff      <= new_txcoeff;
                new_txcoeff_done <= 1'd1;
                lffs_sel         <= lffs_sel;
                adapt_done       <= (adapt_done_cnt == 1'd1) || (RXEQSCAN_CONTROL == 2'd3);
                adapt_done_cnt   <= adapt_done_cnt;
                end
            end
            
        //---------- Default State -------------------------
        default :
        
            begin
            fsm              <=  FSM_IDLE;
            preset_done      <=  1'd0;
            converge_cnt     <= 22'd0;
            new_txcoeff      <= 18'd0;
            new_txcoeff_done <=  1'd0;
            lffs_sel         <=  1'd0;
            adapt_done       <=  1'd0;
            adapt_done_cnt   <=  1'd0;
            end    

        endcase
        
        end
        
end



//---------- RXEQ Eye Scan Output ----------------------------------------------
assign RXEQSCAN_PRESET_DONE      = preset_done;     
assign RXEQSCAN_NEW_TXCOEFF      = new_txcoeff;
assign RXEQSCAN_NEW_TXCOEFF_DONE = new_txcoeff_done; 
assign RXEQSCAN_LFFS_SEL         = lffs_sel;  
assign RXEQSCAN_ADAPT_DONE       = adapt_done;



endmodule
